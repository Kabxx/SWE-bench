{"repo": "apache/arrow-rs", "pull_number": 6649, "instance_id": "apache__arrow-rs-6649", "issue_numbers": ["6648"], "base_commit": "7bcc1ad988498def843180c6a4c95f9732f31a4b", "patch": "diff --git a/parquet/src/record/reader.rs b/parquet/src/record/reader.rs\nindex 1f9128a8b4f..fd6ca7cdd57 100644\n--- a/parquet/src/record/reader.rs\n+++ b/parquet/src/record/reader.rs\n@@ -138,7 +138,17 @@ impl TreeBuilder {\n                 .column_descr_ptr();\n             let col_reader = row_group_reader.get_column_reader(orig_index)?;\n             let column = TripletIter::new(col_descr, col_reader, self.batch_size);\n-            Reader::PrimitiveReader(field, Box::new(column))\n+            let reader = Reader::PrimitiveReader(field.clone(), Box::new(column));\n+            if repetition == Repetition::REPEATED {\n+                Reader::RepeatedReader(\n+                    field,\n+                    curr_def_level - 1,\n+                    curr_rep_level - 1,\n+                    Box::new(reader),\n+                )\n+            } else {\n+                reader\n+            }\n         } else {\n             match field.get_basic_info().converted_type() {\n                 // List types\n@@ -1688,6 +1698,131 @@ mod tests {\n         assert_eq!(rows, expected_rows);\n     }\n \n+    #[test]\n+    fn test_tree_reader_handle_primitive_repeated_fields_with_no_annotation() {\n+        // In this test the REPEATED fields are primitives\n+        let rows = test_file_reader_rows(\"repeated_primitive_no_list.parquet\", None).unwrap();\n+        let expected_rows = vec![\n+            row![\n+                (\n+                    \"Int32_list\".to_string(),\n+                    Field::ListInternal(make_list([0, 1, 2, 3].map(Field::Int).to_vec()))\n+                ),\n+                (\n+                    \"String_list\".to_string(),\n+                    Field::ListInternal(make_list(\n+                        [\"foo\", \"zero\", \"one\", \"two\"]\n+                            .map(|s| Field::Str(s.to_string()))\n+                            .to_vec()\n+                    ))\n+                ),\n+                (\n+                    \"group_of_lists\".to_string(),\n+                    group![\n+                        (\n+                            \"Int32_list_in_group\".to_string(),\n+                            Field::ListInternal(make_list([0, 1, 2, 3].map(Field::Int).to_vec()))\n+                        ),\n+                        (\n+                            \"String_list_in_group\".to_string(),\n+                            Field::ListInternal(make_list(\n+                                [\"foo\", \"zero\", \"one\", \"two\"]\n+                                    .map(|s| Field::Str(s.to_string()))\n+                                    .to_vec()\n+                            ))\n+                        )\n+                    ]\n+                )\n+            ],\n+            row![\n+                (\n+                    \"Int32_list\".to_string(),\n+                    Field::ListInternal(make_list(vec![]))\n+                ),\n+                (\n+                    \"String_list\".to_string(),\n+                    Field::ListInternal(make_list(\n+                        [\"three\"].map(|s| Field::Str(s.to_string())).to_vec()\n+                    ))\n+                ),\n+                (\n+                    \"group_of_lists\".to_string(),\n+                    group![\n+                        (\n+                            \"Int32_list_in_group\".to_string(),\n+                            Field::ListInternal(make_list(vec![]))\n+                        ),\n+                        (\n+                            \"String_list_in_group\".to_string(),\n+                            Field::ListInternal(make_list(\n+                                [\"three\"].map(|s| Field::Str(s.to_string())).to_vec()\n+                            ))\n+                        )\n+                    ]\n+                )\n+            ],\n+            row![\n+                (\n+                    \"Int32_list\".to_string(),\n+                    Field::ListInternal(make_list(vec![Field::Int(4)]))\n+                ),\n+                (\n+                    \"String_list\".to_string(),\n+                    Field::ListInternal(make_list(\n+                        [\"four\"].map(|s| Field::Str(s.to_string())).to_vec()\n+                    ))\n+                ),\n+                (\n+                    \"group_of_lists\".to_string(),\n+                    group![\n+                        (\n+                            \"Int32_list_in_group\".to_string(),\n+                            Field::ListInternal(make_list(vec![Field::Int(4)]))\n+                        ),\n+                        (\n+                            \"String_list_in_group\".to_string(),\n+                            Field::ListInternal(make_list(\n+                                [\"four\"].map(|s| Field::Str(s.to_string())).to_vec()\n+                            ))\n+                        )\n+                    ]\n+                )\n+            ],\n+            row![\n+                (\n+                    \"Int32_list\".to_string(),\n+                    Field::ListInternal(make_list([5, 6, 7, 8].map(Field::Int).to_vec()))\n+                ),\n+                (\n+                    \"String_list\".to_string(),\n+                    Field::ListInternal(make_list(\n+                        [\"five\", \"six\", \"seven\", \"eight\"]\n+                            .map(|s| Field::Str(s.to_string()))\n+                            .to_vec()\n+                    ))\n+                ),\n+                (\n+                    \"group_of_lists\".to_string(),\n+                    group![\n+                        (\n+                            \"Int32_list_in_group\".to_string(),\n+                            Field::ListInternal(make_list([5, 6, 7, 8].map(Field::Int).to_vec()))\n+                        ),\n+                        (\n+                            \"String_list_in_group\".to_string(),\n+                            Field::ListInternal(make_list(\n+                                [\"five\", \"six\", \"seven\", \"eight\"]\n+                                    .map(|s| Field::Str(s.to_string()))\n+                                    .to_vec()\n+                            ))\n+                        )\n+                    ]\n+                )\n+            ],\n+        ];\n+        assert_eq!(rows, expected_rows);\n+    }\n+\n     fn test_file_reader_rows(file_name: &str, schema: Option<Type>) -> Result<Vec<Row>> {\n         let file = get_test_file(file_name);\n         let file_reader: Box<dyn FileReader> = Box::new(SerializedFileReader::new(file)?);\n", "test_patch": "diff --git a/parquet-testing b/parquet-testing\nindex 50af3d8ce20..550368ca77b 160000\n--- a/parquet-testing\n+++ b/parquet-testing\n@@ -1,1 +1,1 @@\n-Subproject commit 50af3d8ce206990d81014b1862e5ce7380dc3e08\n+Subproject commit 550368ca77b97231efead39251a96bd6f8f08c6e\n", "problem_statement": "Primitive REPEATED fields not contained in LIST annotated groups aren't read as lists by record reader\n**Describe the bug**\r\nPrimitive REPEATED fields not contained in LIST annotated groups should be read as lists according to the format but aren't.\r\n\r\n**To Reproduce**\r\n<!--\r\nSteps to reproduce the behavior:\r\n-->\r\n\r\n**Expected behavior**\r\n<!--\r\nA clear and concise description of what you expected to happen.\r\n-->\r\n\r\n**Additional context**\r\n<!--\r\nAdd any other context about the problem here.\r\n-->\n", "hints_text": "", "created_at": "2024-10-29T23:41:15Z", "version": "53.2", "environment_setup_commit": "7bcc1ad988498def843180c6a4c95f9732f31a4b", "FAIL_TO_PASS": [], "PASS_TO_PASS": ["tensor::tests::test_compute_column_major_strides", "tensor::tests::test_compute_row_major_strides", "tensor::tests::test_inconsistent_strides", "tensor::tests::test_inconsistent_names", "tensor::tests::test_incorrect_shape", "tensor::tests::test_incorrect_stride", "tensor::tests::test_new_column_major", "tensor::tests::test_new_row_major", "tensor::tests::test_tensor", "tensor::tests::test_with_names", "tensor::tests::test_zero_dim", "util::data_gen::tests::test_create_batch", "util::data_gen::tests::test_create_list_array_nested_nullability", "util::data_gen::tests::test_create_list_array_nested_struct_nullability", "util::test_util::tests::test_data_dir", "util::data_gen::tests::test_create_struct_array_nested_nullability", "util::data_gen::tests::test_create_struct_array", "util::data_gen::tests::test_create_batch_non_null", "util::data_gen::tests::test_create_map_array"], "FAIL_TO_FAIL": [], "PASS_TO_FAIL": []}
