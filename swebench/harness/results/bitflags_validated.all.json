{"repo": "bitflags/bitflags", "pull_number": 199, "instance_id": "bitflags__bitflags-199", "issue_numbers": ["193"], "base_commit": "dca4928b1a345b1c8b16edaf205b0f68cffd20d1", "patch": "diff --git a/.travis.yml b/.travis.yml\nindex 9dd45c47..79fdda26 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -22,7 +22,7 @@ matrix:\n         - LABEL=\"compiletest\"\n       script:\n         - cargo test\n-        - cargo test -p test_suite --features unstable\n+        - cargo test -p test_suite\n     - rust: stable\n     - rust: stable\n       os: osx\n", "test_patch": "diff --git a/test_suite/Cargo.toml b/test_suite/Cargo.toml\nindex 2a02d80d..057a022c 100644\n--- a/test_suite/Cargo.toml\n+++ b/test_suite/Cargo.toml\n@@ -2,12 +2,9 @@\n name = \"test_suite\"\n version = \"0.0.0\"\n \n-[features]\n-unstable = [\"compiletest_rs\"]\n-\n [dependencies]\n bitflags = { path = \"../\" }\n-compiletest_rs = { version = \"0.3.18\", optional = true, features=[\"stable\"] }\n+trybuild = \"1.0\"\n serde = \"1.0\"\n serde_derive = \"1.0\"\n serde_json = \"1.0\"\ndiff --git a/test_suite/tests/compile-fail/private_flags.rs b/test_suite/tests/compile-fail/private_flags.rs\nindex d31c28d8..35089bc0 100644\n--- a/test_suite/tests/compile-fail/private_flags.rs\n+++ b/test_suite/tests/compile-fail/private_flags.rs\n@@ -16,5 +16,5 @@ mod example {\n \n fn main() {\n     let flag1 = example::Flags1::FLAG_A;\n-    let flag2 = example::Flags2::FLAG_B; //~ ERROR struct `Flags2` is private\n+    let flag2 = example::Flags2::FLAG_B;\n }\ndiff --git a/test_suite/tests/compile-fail/private_flags.stderr b/test_suite/tests/compile-fail/private_flags.stderr\nnew file mode 100644\nindex 00000000..63748191\n--- /dev/null\n+++ b/test_suite/tests/compile-fail/private_flags.stderr\n@@ -0,0 +1,5 @@\n+error[E0603]: struct `Flags2` is private\n+  --> $DIR/private_flags.rs:19:26\n+   |\n+19 |     let flag2 = example::Flags2::FLAG_B;\n+   |                          ^^^^^^\ndiff --git a/test_suite/tests/compiletest.rs b/test_suite/tests/compiletest.rs\nindex 2beeae01..db50dfda 100644\n--- a/test_suite/tests/compiletest.rs\n+++ b/test_suite/tests/compiletest.rs\n@@ -1,33 +1,5 @@\n-#![cfg(feature = \"unstable\")]\n-\n-extern crate compiletest_rs as compiletest;\n-\n-use std::fs;\n-use std::result::Result;\n-\n-use compiletest::common::Mode;\n-\n-fn run_mode(mode: Mode) {\n-    let config = compiletest::Config {\n-        mode: mode,\n-        src_base: format!(\"tests/{}\", mode).into(),\n-        target_rustcflags: fs::read_dir(\"../target/debug/deps\")\n-            .unwrap()\n-            .map(Result::unwrap)\n-            .filter(|entry| {\n-                let file_name = entry.file_name();\n-                let file_name = file_name.to_string_lossy();\n-                file_name.starts_with(\"libbitflags-\") && file_name.ends_with(\".rlib\")\n-            })\n-            .max_by_key(|entry| entry.metadata().unwrap().modified().unwrap())\n-            .map(|entry| format!(\"--extern bitflags={}\", entry.path().to_string_lossy())),\n-        ..Default::default()\n-    };\n-\n-    compiletest::run_tests(&config);\n-}\n-\n #[test]\n-fn compile_test() {\n-    run_mode(Mode::CompileFail);\n+fn compile_fail() {\n+    let t = trybuild::TestCases::new();\n+    t.compile_fail(\"tests/compile-fail/*.rs\");\n }\n", "problem_statement": "Ensure compile tests are running\nIn #192 I tweaked our config to work around a build error in `compiletest_rs` (there's an open PR https://github.com/laumann/compiletest-rs/pull/187 that should fix it up). We could also consider migrating to something like [`libtest_mimic`](https://crates.io/crates/libtest-mimic), which is used in [`auto-impl`](https://github.com/auto-impl-rs/auto_impl).\n", "hints_text": "We could also look at `trybuild` for this, which is nice and modern.", "created_at": "2019-11-01T08:52:06Z", "version": "1.2", "FAIL_TO_PASS": [], "PASS_TO_PASS": ["tests::submodule::test_private", "tests::test_assignment_operators", "tests::test_binary", "tests::test_bits", "tests::test_const_fn", "tests::test_contains", "tests::test_debug", "tests::test_deprecated", "tests::test_empty_does_not_intersect_with_full", "tests::test_disjoint_intersects", "tests::test_extend", "tests::test_from_bits", "tests::test_from_bits_truncate", "tests::test_from_bits_unchecked", "tests::test_hash", "tests::test_from_iterator", "tests::test_in_function", "tests::test_insert", "tests::test_is_all", "tests::test_is_empty", "tests::test_lowerhex", "tests::test_lt", "tests::test_octal", "tests::test_operators", "tests::test_operators_unchecked", "tests::test_ord", "tests::test_overlapping_intersects", "tests::test_pub_crate", "tests::test_pub_in_module", "tests::test_public", "tests::test_remove", "tests::test_set", "tests::test_two_empties_do_not_intersect", "tests::test_upperhex", "tests::test_zero_value_flags"], "FAIL_TO_FAIL": [], "PASS_TO_FAIL": []}
