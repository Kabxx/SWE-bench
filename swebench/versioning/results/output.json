[
    {
        "repo": "bitflags/bitflags",
        "pull_number": 411,
        "instance_id": "bitflags__bitflags-411",
        "issue_numbers": [
            "406"
        ],
        "base_commit": "9c4b93c931e34a5104f50e20be1bdd15bc593b0e",
        "patch": "diff --git a/src/lib.rs b/src/lib.rs\nindex 8f722591..b5e8911b 100644\n--- a/src/lib.rs\n+++ b/src/lib.rs\n@@ -38,7 +38,7 @@ bitflags! {\n \n See the docs for the `bitflags` macro for the full syntax.\n \n-Also see the [`example_generated`] module for an example of what the `bitflags` macro generates for a flags type.\n+Also see the [`example_generated`](./example_generated/index.html) module for an example of what the `bitflags` macro generates for a flags type.\n \n ### Externally defined flags\n \n@@ -530,6 +530,7 @@ macro_rules! bitflags {\n         }\n     };\n     (\n+        $(#[$outer:meta])*\n         impl $BitFlags:ident: $T:ty {\n             $(\n                 $(#[$inner:ident $($args:tt)*])*\n@@ -561,6 +562,7 @@ macro_rules! bitflags {\n         )]\n         const _: () = {\n             $crate::__impl_public_bitflags! {\n+                $(#[$outer])*\n                 $BitFlags: $T, $BitFlags {\n                     $(\n                         $(#[$inner $($args)*])*\n@@ -593,6 +595,7 @@ macro_rules! bitflags {\n #[doc(hidden)]\n macro_rules! __impl_bitflags {\n     (\n+        $(#[$outer:meta])*\n         $PublicBitFlags:ident: $T:ty {\n             fn empty() $empty:block\n             fn all() $all:block\n@@ -617,6 +620,7 @@ macro_rules! __impl_bitflags {\n         }\n     ) => {\n         #[allow(dead_code, deprecated, unused_attributes)]\n+        $(#[$outer])*\n         impl $PublicBitFlags {\n             /// Get a flags value with all bits unset.\n             #[inline]\ndiff --git a/src/public.rs b/src/public.rs\nindex dc2d7267..feecdd67 100644\n--- a/src/public.rs\n+++ b/src/public.rs\n@@ -26,9 +26,11 @@ macro_rules! __declare_public_bitflags {\n #[doc(hidden)]\n macro_rules! __impl_public_bitflags_forward {\n     (\n+        $(#[$outer:meta])*\n         $PublicBitFlags:ident: $T:ty, $InternalBitFlags:ident\n     ) => {\n         $crate::__impl_bitflags! {\n+            $(#[$outer])*\n             $PublicBitFlags: $T {\n                 fn empty() {\n                     Self($InternalBitFlags::empty())\n@@ -128,6 +130,7 @@ macro_rules! __impl_public_bitflags_forward {\n #[doc(hidden)]\n macro_rules! __impl_public_bitflags {\n     (\n+        $(#[$outer:meta])*\n         $BitFlags:ident: $T:ty, $PublicBitFlags:ident {\n             $(\n                 $(#[$inner:ident $($args:tt)*])*\n@@ -136,6 +139,7 @@ macro_rules! __impl_public_bitflags {\n         }\n     ) => {\n         $crate::__impl_bitflags! {\n+            $(#[$outer])*\n             $BitFlags: $T {\n                 fn empty() {\n                     Self(<$T as $crate::Bits>::EMPTY)\n@@ -271,7 +275,11 @@ macro_rules! __impl_public_bitflags {\n #[macro_export]\n #[doc(hidden)]\n macro_rules! __impl_public_bitflags_iter {\n-    ($BitFlags:ident: $T:ty, $PublicBitFlags:ident) => {\n+    (\n+        $(#[$outer:meta])*\n+        $BitFlags:ident: $T:ty, $PublicBitFlags:ident\n+    ) => {\n+        $(#[$outer])*\n         impl $BitFlags {\n             /// Yield a set of contained flags values.\n             ///\n@@ -300,6 +308,7 @@ macro_rules! __impl_public_bitflags_iter {\n             }\n         }\n \n+        $(#[$outer:meta])*\n         impl $crate::__private::core::iter::IntoIterator for $BitFlags {\n             type Item = $PublicBitFlags;\n             type IntoIter = $crate::iter::Iter<$PublicBitFlags>;\n@@ -315,7 +324,12 @@ macro_rules! __impl_public_bitflags_iter {\n #[macro_export]\n #[doc(hidden)]\n macro_rules! __impl_public_bitflags_ops {\n-    ($PublicBitFlags:ident) => {\n+    (\n+        $(#[$outer:meta])*\n+        $PublicBitFlags:ident\n+    ) => {\n+\n+        $(#[$outer])*\n         impl $crate::__private::core::fmt::Binary for $PublicBitFlags {\n             fn fmt(\n                 &self,\n@@ -326,6 +340,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::fmt::Octal for $PublicBitFlags {\n             fn fmt(\n                 &self,\n@@ -336,6 +351,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::fmt::LowerHex for $PublicBitFlags {\n             fn fmt(\n                 &self,\n@@ -346,6 +362,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::fmt::UpperHex for $PublicBitFlags {\n             fn fmt(\n                 &self,\n@@ -356,6 +373,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::ops::BitOr for $PublicBitFlags {\n             type Output = Self;\n \n@@ -366,6 +384,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::ops::BitOrAssign for $PublicBitFlags {\n             /// The bitwise or (`|`) of the bits in two flags values.\n             #[inline]\n@@ -374,6 +393,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::ops::BitXor for $PublicBitFlags {\n             type Output = Self;\n \n@@ -384,6 +404,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::ops::BitXorAssign for $PublicBitFlags {\n             /// The bitwise exclusive-or (`^`) of the bits in two flags values.\n             #[inline]\n@@ -392,6 +413,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::ops::BitAnd for $PublicBitFlags {\n             type Output = Self;\n \n@@ -402,6 +424,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::ops::BitAndAssign for $PublicBitFlags {\n             /// The bitwise and (`&`) of the bits in two flags values.\n             #[inline]\n@@ -410,6 +433,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::ops::Sub for $PublicBitFlags {\n             type Output = Self;\n \n@@ -423,6 +447,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::ops::SubAssign for $PublicBitFlags {\n             /// The intersection of a source flags value with the complement of a target flags value (`&!`).\n             ///\n@@ -434,6 +459,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::ops::Not for $PublicBitFlags {\n             type Output = Self;\n \n@@ -444,6 +470,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::iter::Extend<$PublicBitFlags> for $PublicBitFlags {\n             /// The bitwise or (`|`) of the bits in each flags value.\n             fn extend<T: $crate::__private::core::iter::IntoIterator<Item = Self>>(\n@@ -456,6 +483,7 @@ macro_rules! __impl_public_bitflags_ops {\n             }\n         }\n \n+        $(#[$outer])*\n         impl $crate::__private::core::iter::FromIterator<$PublicBitFlags> for $PublicBitFlags {\n             /// The bitwise or (`|`) of the bits in each flags value.\n             fn from_iter<T: $crate::__private::core::iter::IntoIterator<Item = Self>>(\n@@ -476,6 +504,7 @@ macro_rules! __impl_public_bitflags_ops {\n #[doc(hidden)]\n macro_rules! __impl_public_bitflags_consts {\n     (\n+        $(#[$outer:meta])*\n         $PublicBitFlags:ident: $T:ty {\n             $(\n                 $(#[$inner:ident $($args:tt)*])*\n@@ -483,6 +512,7 @@ macro_rules! __impl_public_bitflags_consts {\n             )*\n         }\n     ) => {\n+        $(#[$outer])*\n         impl $PublicBitFlags {\n             $(\n                 $crate::__bitflags_flag!({\n@@ -500,6 +530,7 @@ macro_rules! __impl_public_bitflags_consts {\n             )*\n         }\n \n+        $(#[$outer])*\n         impl $crate::Flags for $PublicBitFlags {\n             const FLAGS: &'static [$crate::Flag<$PublicBitFlags>] = &[\n                 $(\n",
        "test_patch": "diff --git a/tests/compile-pass/bitflags_impl_attrs.rs b/tests/compile-pass/bitflags_impl_attrs.rs\nnew file mode 100644\nindex 00000000..91d89823\n--- /dev/null\n+++ b/tests/compile-pass/bitflags_impl_attrs.rs\n@@ -0,0 +1,13 @@\n+extern crate bitflags;\n+\n+struct Example(u64);\n+\n+bitflags::bitflags! {\n+    /// Docs on the `impl` block.\n+    #[allow(dead_code)]\n+    impl Example: u64 {\n+        const flag = 0b01;\n+    }\n+}\n+\n+fn main() {}\n",
        "problem_statement": "Allow specifying attributes in `impl` mode\nI'm considering `cfg`-gating the use of `bitflags!` in my libraries, and to that end it would be nice if it was possible to apply attributes to the generated `impl`s as well.\r\n\r\nThe naive solution would be:\r\n```rust\r\npub struct Flags(u8);\r\n\r\n#[cfg(feature = \"bitflags\")]\r\nbitflags! {\r\n    impl Flags: u8 {\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nHowever, that works poorly with the `doc_cfg` (and `doc_auto_cfg`) feature, as the attribute is only applied to the macro, and isn't passed down to each output item.\r\n\r\nInstead, I would like to be able to do the following:\r\n```rust\r\n#![feature(doc_cfg)]\r\n\r\npub struct Flags(u8);\r\n\r\n#[cfg(feature = \"bitflags\")]\r\nbitflags! {\r\n    #[doc(cfg(feature = \"bitflags\"))]\r\n    impl Flags: u8 {\r\n        // ...\r\n    }\r\n}\r\n```\n",
        "hints_text": "Thanks for the report @madsmtm! Anywhere attributes are allowed to be specified we should support in the macros as much as possible. I think this is just a missing piece of functionality for the impl mode.",
        "created_at": "2024-06-24T23:17:40Z",
        "version": "2.5"
    }
]