[
    {
        "repo": "Canop/broot",
        "pull_number": 726,
        "instance_id": "Canop__broot-726",
        "issue_numbers": [
            "725"
        ],
        "base_commit": "c197182c3372f88437151174d949745d53336108",
        "patch": "diff --git a/src/command/parts.rs b/src/command/parts.rs\n--- a/src/command/parts.rs\n+++ b/src/command/parts.rs\n@@ -74,7 +74,19 @@ impl CommandParts {\n                         pt.mutate_or_create_atom(PatternParts::default).push('\\\\');\n                     }\n                 }\n-                ' ' | ':' => { // ending the pattern part\n+                ':' => {\n+                    if matches!(chars.peek(), Some((_,':'))) {\n+                        // two successive ':' in pattern position are part of the\n+                        // pattern\n+                        pt.mutate_or_create_atom(PatternParts::default).push(':');\n+                        escape_next_char = true;\n+                    } else {\n+                        // ending the pattern part\n+                        invocation_start_pos = Some(pos);\n+                        break;\n+                    }\n+                }\n+                ' ' => { // ending the pattern part\n                     invocation_start_pos = Some(pos);\n                     break;\n                 }\ndiff --git a/website/docs/input.md b/website/docs/input.md\n--- a/website/docs/input.md\n+++ b/website/docs/input.md\n@@ -102,6 +102,7 @@ More precisely:\n 1. After the first `/` of a pattern, only ` `, `:`,  `/` and `\\` need escaping.\n 2. Otherwise, `&,` `|`, `(`, `)`, `\\` need escaping too.\n 3. When there's no ambiguity, ending characters are often unnecessary\n+4. Two successive `:` in pattern position may be left unescaped\n \n # Performances\n \n",
        "test_patch": "diff --git a/src/command/parts.rs b/src/command/parts.rs\n--- a/src/command/parts.rs\n+++ b/src/command/parts.rs\n@@ -164,17 +176,17 @@ mod test_command_parts {\n         mut pattern_tokens: Vec<Token<PatternOperator, PatternParts>>,\n         verb_invocation: Option<&str>,\n     ) {\n-        let left = CommandParts::from(input);\n-        dbg!(&left);\n         let mut pattern = BeTree::new();\n         for token in pattern_tokens.drain(..) {\n             pattern.push(token);\n         }\n-        let right = CommandParts {\n+        let left = CommandParts {\n             raw_pattern: raw_pattern.to_string(),\n             pattern,\n             verb_invocation: verb_invocation.map(VerbInvocation::from),\n         };\n+        dbg!(&left);\n+        let right = CommandParts::from(input);\n         dbg!(&right);\n         assert_eq!(left, right);\n     }\ndiff --git a/src/command/parts.rs b/src/command/parts.rs\n--- a/src/command/parts.rs\n+++ b/src/command/parts.rs\n@@ -369,5 +381,58 @@ mod test_command_parts {\n             Some(\"cp ..\"),\n         );\n     }\n+    // two colons in pattern positions are something the user searches\n+    #[test]\n+    fn allow_non_escaped_double_colon() {\n+        check(\n+            r#\"::\"#,\n+            r#\"::\"#,\n+            vec![\n+                Token::Atom(pp(&[r#\"::\"#])),\n+            ],\n+            None,\n+        );\n+        check(\n+            r#\":::\"#,\n+            r#\"::\"#,\n+            vec![\n+                Token::Atom(pp(&[r#\"::\"#])),\n+            ],\n+            Some(\"\"),\n+        );\n+        check(\n+            r#\":::cd c:\\\"#,\n+            r#\"::\"#,\n+            vec![\n+                Token::Atom(pp(&[r#\"::\"#])),\n+            ],\n+            Some(r#\"cd c:\\\"#),\n+        );\n+        check(\n+            r#\"and::Sc:cd c:\\\"#,\n+            r#\"and::Sc\"#,\n+            vec![\n+                Token::Atom(pp(&[r#\"and::Sc\"#])),\n+            ],\n+            Some(r#\"cd c:\\\"#),\n+        );\n+        check(\n+            r#\"!:: \"#,\n+            r#\"!::\"#,\n+            vec![\n+                Token::Operator(PatternOperator::Not),\n+                Token::Atom(pp(&[r#\"::\"#])),\n+            ],\n+            Some(\"\"),\n+        );\n+        check(\n+            r#\"::a:rm\"#,\n+            r#\"::a\"#,\n+            vec![\n+                Token::Atom(pp(&[r#\"::a\"#])),\n+            ],\n+            Some(\"rm\"),\n+        );\n+    }\n }\n \n",
        "problem_statement": "Allow non escaped `::` in patterns\n`::` is an operator you'll find in many programing languages, and is thus often searched in broot. But searching for it means typing `\\:\\:` which is inconvenient.\r\n\r\nAs I can't see any reason to have `::` in the input at a pattern compatible position, I think we could interpret it not as a duplicated verb prefix but as part of the pattern.\r\n\r\nThat would be a ad-hoc rule, not terribly consistent with the rest of the input handling, so I'm still hesitating on this even if I can't find any potential downside.\r\n\r\nOpinions welcome.\n",
        "hints_text": "",
        "created_at": "2023-07-24T17:13:26Z",
        "version": "1.24"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 163,
        "instance_id": "Canop__broot-163",
        "issue_numbers": [
            "162"
        ],
        "base_commit": "11677f50e666e51455c25318819f8dfc7b4a4bc7",
        "patch": "diff --git a/src/app.rs b/src/app.rs\n--- a/src/app.rs\n+++ b/src/app.rs\n@@ -18,14 +18,14 @@ use {\n         errors::ProgramError,\n         external::Launchable,\n         file_sizes,\n-        io::W,\n+        io::WriteCleanup,\n         screens::Screen,\n         skin::Skin,\n         status::Status,\n         task_sync::TaskLifetime,\n     },\n     crossterm::{\n-        cursor,\n+        self, cursor,\n         event::{DisableMouseCapture, EnableMouseCapture},\n         terminal::{EnterAlternateScreen, LeaveAlternateScreen},\n         QueueableCommand,\ndiff --git a/src/app.rs b/src/app.rs\n--- a/src/app.rs\n+++ b/src/app.rs\n@@ -35,6 +35,12 @@ use {\n     termimad::EventSource,\n };\n \n+/// Helper function for type inference: queue a Command but return Result<()>\n+#[inline]\n+fn just_queue(mut writer: impl Write, command: impl crossterm::Command) -> crossterm::Result<()> {\n+    writer.queue(command).map(move |_| ())\n+}\n+\n pub struct App {\n     states: Vec<Box<dyn AppState>>, // stack: the last one is current\n     quitting: bool,\ndiff --git a/src/app.rs b/src/app.rs\n--- a/src/app.rs\n+++ b/src/app.rs\n@@ -71,7 +77,7 @@ impl App {\n     ///  the allowed lifetime is expired (usually when the user typed a new key)\n     fn do_pending_tasks(\n         &mut self,\n-        w: &mut W,\n+        w: &mut impl Write,\n         cmd: &Command,\n         screen: &mut Screen,\n         con: &AppContext,\ndiff --git a/src/app.rs b/src/app.rs\n--- a/src/app.rs\n+++ b/src/app.rs\n@@ -91,7 +97,7 @@ impl App {\n     /// This normally mutates self\n     fn apply_command(\n         &mut self,\n-        w: &mut W,\n+        w: &mut impl Write,\n         mut cmd: Command,\n         screen: &mut Screen,\n         con: &AppContext,\ndiff --git a/src/app.rs b/src/app.rs\n--- a/src/app.rs\n+++ b/src/app.rs\n@@ -152,32 +158,40 @@ impl App {\n         Ok(cmd)\n     }\n \n-    /// called exactly once at end of `run`, cleans the writer (which\n-    /// is usually stdout or stderr)\n-    fn end(self, writer: &mut W) -> Result<Option<Launchable>, ProgramError> {\n-        writer.queue(DisableMouseCapture)?;\n-        writer.queue(cursor::Show)?;\n-        writer.queue(LeaveAlternateScreen)?;\n-        writer.flush()?;\n-        debug!(\"we left the screen\");\n-        Ok(self.launch_at_end)\n-    }\n-\n     /// This is the main loop of the application\n     pub fn run(\n         mut self,\n-        writer: &mut W,\n+        writer: impl Write,\n         con: &AppContext,\n         skin: Skin,\n     ) -> Result<Option<Launchable>, ProgramError> {\n-        writer.queue(EnterAlternateScreen)?;\n-        writer.queue(cursor::Hide)?;\n+        // Ensure the buffer is flushed before we return\n+        let writer = WriteCleanup::new(writer, |w| w.flush());\n+\n+        // Push some terminal state changes, ensuring the're reverted when we\n+        // end the program.\n+        let writer = WriteCleanup::build(\n+            writer,\n+            |w| just_queue(w, EnterAlternateScreen),\n+            |w| just_queue(w, LeaveAlternateScreen),\n+        )?;\n+        let writer = WriteCleanup::build(\n+            writer,\n+            |w| just_queue(w, cursor::Hide),\n+            |w| just_queue(w, cursor::Show),\n+        )?;\n+\n         debug!(\"we're on screen\");\n         let mut screen = Screen::new(con, skin)?;\n \n         // we listen for events in a separate thread so that we can go on listening\n         // when a long search is running, and interrupt it if needed\n-        writer.queue(EnableMouseCapture)?;\n+        let mut writer = WriteCleanup::build(\n+            writer,\n+            |w| just_queue(w, EnableMouseCapture),\n+            |w| just_queue(w, DisableMouseCapture),\n+        )?;\n+\n         let event_source = EventSource::new()?;\n         let rx_events = event_source.receiver();\n \ndiff --git a/src/app.rs b/src/app.rs\n--- a/src/app.rs\n+++ b/src/app.rs\n@@ -199,24 +213,24 @@ impl App {\n             let lifetime = TaskLifetime::unlimited();\n \n             for arg_cmd in parse_command_sequence(unparsed_commands, con)? {\n-                cmd = self.apply_command(writer, arg_cmd, &mut screen, con)?;\n-                self.do_pending_tasks(writer, &cmd, &mut screen, con, lifetime.clone())?;\n+                cmd = self.apply_command(&mut writer, arg_cmd, &mut screen, con)?;\n+                self.do_pending_tasks(&mut writer, &cmd, &mut screen, con, lifetime.clone())?;\n                 if self.quitting {\n-                    return self.end(writer);\n+                    return Ok(self.launch_at_end.take());\n                 }\n             }\n         }\n \n         let state = self.mut_state();\n-        state.display(writer, &screen, con)?;\n-        state.write_status(writer, &cmd, &screen, con)?;\n-        state.write_flags(writer, &mut screen, con)?;\n+        state.display(&mut writer, &screen, con)?;\n+        state.write_status(&mut writer, &cmd, &screen, con)?;\n+        state.write_flags(&mut writer, &mut screen, con)?;\n \n-        screen.input_field.display_on(writer)?;\n+        screen.input_field.display_on(&mut writer)?;\n         loop {\n             let tl = TaskLifetime::new(event_source.shared_event_count());\n             if !self.quitting {\n-                self.do_pending_tasks(writer, &cmd, &mut screen, con, tl)?;\n+                self.do_pending_tasks(&mut writer, &cmd, &mut screen, con, tl)?;\n             }\n             let event = match rx_events.recv() {\n                 Ok(event) => event,\ndiff --git a/src/app.rs b/src/app.rs\n--- a/src/app.rs\n+++ b/src/app.rs\n@@ -228,10 +242,16 @@ impl App {\n             };\n             cmd.add_event(&event, &mut screen.input_field, con, self.state());\n             debug!(\"command after add_event: {:?}\", &cmd);\n-            cmd = self.apply_command(writer, cmd, &mut screen, con)?;\n+            cmd = self.apply_command(&mut writer, cmd, &mut screen, con)?;\n             event_source.unblock(self.quitting);\n         }\n \n-        self.end(writer)\n+        Ok(self.launch_at_end.take())\n+    }\n+}\n+\n+impl Drop for App {\n+    fn drop(&mut self) {\n+        debug!(\"we left the screen\");\n     }\n }\ndiff --git a/src/app_state.rs b/src/app_state.rs\n--- a/src/app_state.rs\n+++ b/src/app_state.rs\n@@ -4,10 +4,10 @@ use crate::{\n     commands::Command,\n     errors::{ProgramError, TreeBuildError},\n     external::Launchable,\n-    io::W,\n     screens::Screen,\n     task_sync::TaskLifetime,\n };\n+use std::io::Write;\n \n /// Result of applying a command to a state\n pub enum AppStateCmdResult {\ndiff --git a/src/app_state.rs b/src/app_state.rs\n--- a/src/app_state.rs\n+++ b/src/app_state.rs\n@@ -61,19 +61,23 @@ pub trait AppState {\n \n     fn has_pending_task(&self) -> bool;\n \n-    fn display(&mut self, w: &mut W, screen: &Screen, con: &AppContext)\n-        -> Result<(), ProgramError>;\n+    fn display(\n+        &mut self,\n+        w: &mut dyn Write,\n+        screen: &Screen,\n+        con: &AppContext,\n+    ) -> Result<(), ProgramError>;\n \n     fn write_flags(\n         &self,\n-        w: &mut W,\n+        w: &mut dyn Write,\n         screen: &mut Screen,\n         con: &AppContext,\n     ) -> Result<(), ProgramError>;\n \n     fn write_status(\n         &self,\n-        w: &mut W,\n+        w: &mut dyn Write,\n         cmd: &Command,\n         screen: &Screen,\n         con: &AppContext,\ndiff --git a/src/browser_states.rs b/src/browser_states.rs\n--- a/src/browser_states.rs\n+++ b/src/browser_states.rs\n@@ -8,7 +8,6 @@ use {\n         external::Launchable,\n         flat_tree::{LineType, Tree},\n         help_states::HelpState,\n-        io::W,\n         patterns::Pattern,\n         screens::{self, Screen},\n         status::Status,\ndiff --git a/src/browser_states.rs b/src/browser_states.rs\n--- a/src/browser_states.rs\n+++ b/src/browser_states.rs\n@@ -219,7 +218,7 @@ impl AppState for BrowserState {\n \n     fn write_status(\n         &self,\n-        w: &mut W,\n+        mut w: &mut dyn Write,\n         cmd: &Command,\n         screen: &Screen,\n         con: &AppContext,\ndiff --git a/src/browser_states.rs b/src/browser_states.rs\n--- a/src/browser_states.rs\n+++ b/src/browser_states.rs\n@@ -232,51 +231,58 @@ impl AppState for BrowserState {\n             None\n         };\n         match &cmd.action {\n-            Action::FuzzyPatternEdit(s) if !s.is_empty() => Status::new(\n-                task, self.normal_status_message(true), false\n-            ).display(w, screen),\n-            Action::RegexEdit(s, _) if !s.is_empty() => Status::new(\n-                task, self.normal_status_message(true), false\n-            ).display(w, screen),\n+            Action::FuzzyPatternEdit(s) if !s.is_empty() => {\n+                Status::new(task, self.normal_status_message(true), false).display(&mut w, screen)\n+            }\n+            Action::RegexEdit(s, _) if !s.is_empty() => {\n+                Status::new(task, self.normal_status_message(true), false).display(&mut w, screen)\n+            }\n             Action::VerbEdit(invocation) => {\n                 if invocation.name.is_empty() {\n                     Status::new(\n                         task,\n                         mad_inline!(\"Type a verb then *enter* to execute it (*?* for the list of verbs)\"),\n                         false,\n-                    ).display(w, screen)\n+                    )\n+                    .display(&mut w, screen)\n                 } else {\n                     match con.verb_store.search(&invocation.name) {\n                         PrefixSearchResult::NoMatch => Status::new(\n-                            task, mad_inline!(\"No matching verb (*?* for the list of verbs)\"), true\n-                        ).display(w, screen),\n+                            task,\n+                            mad_inline!(\"No matching verb (*?* for the list of verbs)\"),\n+                            true,\n+                        )\n+                        .display(&mut w, screen),\n                         PrefixSearchResult::Match(verb) => {\n                             let line = self.displayed_tree().selected_line();\n-                            verb.write_status(w, task, line.path.clone(), invocation, screen)\n+                            verb.write_status(&mut w, task, line.path.clone(), invocation, screen)\n                         }\n                         PrefixSearchResult::TooManyMatches(completions) => Status::new(\n                             task,\n                             Composite::from_inline(&format!(\n                                 \"Possible verbs: {}\",\n-                                completions.iter().map(|c| format!(\"*{}*\", c)).collect::<Vec<String>>().join(\", \"),\n+                                completions\n+                                    .iter()\n+                                    .map(|c| format!(\"*{}*\", c))\n+                                    .collect::<Vec<String>>()\n+                                    .join(\", \"),\n                             )),\n                             false,\n-                        ).display(w, screen)\n+                        )\n+                        .display(&mut w, screen),\n                     }\n                 }\n             }\n-            _ => Status::new(task, self.normal_status_message(false), false).display(w, screen),\n+            _ => {\n+                Status::new(task, self.normal_status_message(false), false).display(&mut w, screen)\n+            }\n         }\n     }\n \n-    fn can_execute(\n-        &self,\n-        verb_index: usize,\n-        con: &AppContext,\n-    ) -> bool {\n-        self.displayed_tree().selected_line().is_of(\n-            con.verb_store.verbs[verb_index].selection_condition\n-        )\n+    fn can_execute(&self, verb_index: usize, con: &AppContext) -> bool {\n+        self.displayed_tree()\n+            .selected_line()\n+            .is_of(con.verb_store.verbs[verb_index].selection_condition)\n     }\n \n     fn apply(\ndiff --git a/src/browser_states.rs b/src/browser_states.rs\n--- a/src/browser_states.rs\n+++ b/src/browser_states.rs\n@@ -414,11 +420,11 @@ impl AppState for BrowserState {\n \n     fn display(\n         &mut self,\n-        w: &mut W,\n+        mut w: &mut dyn Write,\n         screen: &Screen,\n         _con: &AppContext,\n     ) -> Result<(), ProgramError> {\n-        screen.goto(w, 0, 0)?;\n+        screen.goto(&mut w, 0, 0)?;\n         let dp = DisplayableTree {\n             tree: &self.displayed_tree(),\n             skin: &screen.skin,\ndiff --git a/src/browser_states.rs b/src/browser_states.rs\n--- a/src/browser_states.rs\n+++ b/src/browser_states.rs\n@@ -430,7 +436,7 @@ impl AppState for BrowserState {\n             },\n             in_app: true,\n         };\n-        dp.write_on(w)\n+        dp.write_on(&mut w)\n     }\n \n     fn refresh(&mut self, screen: &Screen, _con: &AppContext) -> Command {\ndiff --git a/src/browser_states.rs b/src/browser_states.rs\n--- a/src/browser_states.rs\n+++ b/src/browser_states.rs\n@@ -455,23 +461,27 @@ impl AppState for BrowserState {\n     /// draw the flags at the bottom right of the screen\n     fn write_flags(\n         &self,\n-        w: &mut W,\n+        mut w: &mut dyn Write,\n         screen: &mut Screen,\n         _con: &AppContext,\n     ) -> Result<(), ProgramError> {\n         let tree = self.displayed_tree();\n         let total_char_size = screens::FLAGS_AREA_WIDTH;\n-        screen.goto_clear(w, screen.width - total_char_size - 1, screen.height - 1)?;\n+        screen.goto_clear(\n+            &mut w,\n+            screen.width - total_char_size - 1,\n+            screen.height - 1,\n+        )?;\n         let h_value = if tree.options.show_hidden { 'y' } else { 'n' };\n         let gi_value = match tree.options.respect_git_ignore {\n             OptionBool::Auto => 'a',\n             OptionBool::Yes => 'y',\n             OptionBool::No => 'n',\n         };\n-        screen.skin.flag_label.queue_str(w, \" h:\")?;\n-        screen.skin.flag_value.queue(w, h_value)?;\n-        screen.skin.flag_label.queue_str(w, \"   gi:\")?;\n-        screen.skin.flag_value.queue(w, gi_value)?;\n+        screen.skin.flag_label.queue_str(&mut w, \" h:\")?;\n+        screen.skin.flag_value.queue(&mut w, h_value)?;\n+        screen.skin.flag_label.queue_str(&mut w, \"   gi:\")?;\n+        screen.skin.flag_value.queue(&mut w, gi_value)?;\n         Ok(())\n     }\n }\ndiff --git a/src/displayable_tree.rs b/src/displayable_tree.rs\n--- a/src/displayable_tree.rs\n+++ b/src/displayable_tree.rs\n@@ -13,11 +13,8 @@ use {\n         terminal::{Clear, ClearType},\n         QueueableCommand,\n     },\n-    std::{time::SystemTime},\n-    termimad::{\n-        CompoundStyle,\n-        ProgressBar,\n-    },\n+    std::{io::Write, time::SystemTime},\n+    termimad::{CompoundStyle, ProgressBar},\n };\n \n #[cfg(unix)]\ndiff --git a/src/displayable_tree.rs b/src/displayable_tree.rs\n--- a/src/displayable_tree.rs\n+++ b/src/displayable_tree.rs\n@@ -42,7 +39,7 @@ macro_rules! cond_bg {\n         } else {\n             &$src\n         };\n-    }\n+    };\n }\n \n \ndiff --git a/src/displayable_tree.rs b/src/displayable_tree.rs\n--- a/src/displayable_tree.rs\n+++ b/src/displayable_tree.rs\n@@ -93,43 +90,43 @@ impl<'s, 't> DisplayableTree<'s, 't> {\n         }\n     }\n \n-    fn write_line_size<F>(\n+    fn write_line_size(\n         &self,\n-        f: &mut F,\n+        f: &mut impl Write,\n         line: &TreeLine,\n         total_size: FileSize,\n         selected: bool,\n-    ) -> Result<(), termimad::Error> where F: std::io::Write {\n+    ) -> Result<(), termimad::Error> {\n         if let Some(s) = line.size {\n             let pb = ProgressBar::new(s.part_of(total_size), 10);\n             cond_bg!(size_style, self, selected, self.name_style(&line));\n             cond_bg!(sparse_style, self, selected, self.skin.sparse);\n             size_style.queue(f, format!(\"{:>5}\", s.to_string()))?;\n-            sparse_style.queue(f, if s.sparse { 's' } else { ' '})?;\n+            sparse_style.queue(f, if s.sparse { 's' } else { ' ' })?;\n             size_style.queue(f, format!(\"{:<10} \", pb))\n         } else {\n             self.skin.tree.queue_str(f, \"\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \")\n         }\n     }\n \n-    fn write_date<F>(\n+    fn write_date(\n         &self,\n-        f: &mut F,\n+        f: &mut impl Write,\n         system_time: SystemTime,\n         selected: bool,\n-    ) -> Result<(), termimad::Error> where F: std::io::Write {\n+    ) -> Result<(), termimad::Error> {\n         let date_time: DateTime<Local> = system_time.into();\n         cond_bg!(date_style, self, selected, self.skin.dates);\n         date_style.queue(f, date_time.format(\"%Y/%m/%d %R \").to_string())\n     }\n \n     #[cfg(unix)]\n-    fn write_mode<F>(\n+    fn write_mode(\n         &self,\n-        f: &mut F,\n+        f: &mut impl Write,\n         mode: Mode,\n         selected: bool,\n-    ) -> Result<(), termimad::Error> where F: std::io::Write {\n+    ) -> Result<(), termimad::Error> {\n         cond_bg!(n_style, self, selected, self.skin.perm__);\n         cond_bg!(r_style, self, selected, self.skin.perm_r);\n         cond_bg!(w_style, self, selected, self.skin.perm_w);\ndiff --git a/src/displayable_tree.rs b/src/displayable_tree.rs\n--- a/src/displayable_tree.rs\n+++ b/src/displayable_tree.rs\n@@ -186,14 +183,14 @@ impl<'s, 't> DisplayableTree<'s, 't> {\n         Ok(())\n     }\n \n-    fn write_line_name<F>(\n+    fn write_line_name(\n         &self,\n-        f: &mut F,\n+        f: &mut impl Write,\n         line: &TreeLine,\n         idx: usize,\n         pattern: &Pattern,\n         selected: bool,\n-    ) -> Result<(), ProgramError> where F: std::io::Write {\n+    ) -> Result<(), ProgramError> {\n         let style = match &line.line_type {\n             LineType::Dir => &self.skin.directory,\n             LineType::File => {\ndiff --git a/src/displayable_tree.rs b/src/displayable_tree.rs\n--- a/src/displayable_tree.rs\n+++ b/src/displayable_tree.rs\n@@ -238,10 +235,7 @@ impl<'s, 't> DisplayableTree<'s, 't> {\n         Ok(())\n     }\n \n-    pub fn write_on<F>(\n-        &self,\n-        f: &mut F,\n-    ) -> Result<(), ProgramError> where F: std::io::Write {\n+    pub fn write_on(&self, f: &mut impl Write) -> Result<(), ProgramError> {\n         let tree = self.tree;\n         #[cfg(unix)]\n         let user_group_max_lengths = user_group_max_lengths(&tree);\ndiff --git a/src/help_states.rs b/src/help_states.rs\n--- a/src/help_states.rs\n+++ b/src/help_states.rs\n@@ -1,13 +1,11 @@\n-\n use {\n     crate::{\n-        app_state::{AppState, AppStateCmdResult},\n         app_context::AppContext,\n+        app_state::{AppState, AppStateCmdResult},\n         commands::{Action, Command},\n         conf::Conf,\n         errors::ProgramError,\n         help_content,\n-        io::W,\n         screens::Screen,\n         status::Status,\n         task_sync::TaskLifetime,\ndiff --git a/src/help_states.rs b/src/help_states.rs\n--- a/src/help_states.rs\n+++ b/src/help_states.rs\n@@ -19,11 +17,8 @@ use {\n         QueueableCommand,\n     },\n     minimad::Composite,\n-    termimad::{\n-        Area,\n-        FmtText,\n-        TextView,\n-    },\n+    std::io::Write,\n+    termimad::{Area, FmtText, TextView},\n };\n \n /// an application state dedicated to help\ndiff --git a/src/help_states.rs b/src/help_states.rs\n--- a/src/help_states.rs\n+++ b/src/help_states.rs\n@@ -99,13 +94,13 @@ impl AppState for HelpState {\n \n     fn display(\n         &mut self,\n-        w: &mut W,\n+        mut w: &mut dyn Write,\n         screen: &Screen,\n-        con: &AppContext\n+        con: &AppContext,\n     ) -> Result<(), ProgramError> {\n         if self.dirty {\n-            screen.skin.default.queue_bg(w)?;\n-            screen.clear(w)?;\n+            screen.skin.default.queue_bg(&mut w)?;\n+            screen.clear(&mut w)?;\n             self.area = Area::new(0, 0, screen.width, screen.height - 2);\n             self.area.pad_for_max_width(110);\n             self.dirty = false;\ndiff --git a/src/help_states.rs b/src/help_states.rs\n--- a/src/help_states.rs\n+++ b/src/help_states.rs\n@@ -114,12 +109,12 @@ impl AppState for HelpState {\n         let fmt_text = FmtText::from_text(&screen.help_skin, text, Some((self.area.width - 1) as usize));\n         let mut text_view = TextView::from(&self.area, &fmt_text);\n         self.scroll = text_view.set_scroll(self.scroll);\n-        Ok(text_view.write_on(w)?)\n+        Ok(text_view.write_on(&mut w)?)\n     }\n \n     fn write_status(\n         &self,\n-        w: &mut W,\n+        mut w: &mut dyn Write,\n         cmd: &Command,\n         screen: &Screen,\n         con: &AppContext,\ndiff --git a/src/help_states.rs b/src/help_states.rs\n--- a/src/help_states.rs\n+++ b/src/help_states.rs\n@@ -127,42 +122,53 @@ impl AppState for HelpState {\n         match &cmd.action {\n             Action::VerbEdit(invocation) => {\n                 if invocation.name.is_empty() {\n-                    Status::from_message(\n-                        mad_inline!(\"Type a verb then *enter* to execute it (*?* for the list of verbs)\"),\n-                    ).display(w, screen)\n+                    Status::from_message(mad_inline!(\n+                        \"Type a verb then *enter* to execute it (*?* for the list of verbs)\"\n+                    ))\n+                    .display(&mut w, screen)\n                 } else {\n                     match con.verb_store.search(&invocation.name) {\n                         PrefixSearchResult::NoMatch => {\n-                            Status::from_error(mad_inline!(\"No matching verb\")).display(w, screen)\n+                            Status::from_error(mad_inline!(\"No matching verb\"))\n+                                .display(&mut w, screen)\n                         }\n-                        PrefixSearchResult::Match(verb) => {\n-                            verb.write_status(w, None, Conf::default_location(), invocation, screen)\n-                        }\n-                        PrefixSearchResult::TooManyMatches(completions) => Status::from_message(\n-                            Composite::from_inline(&format!(\n+                        PrefixSearchResult::Match(verb) => verb.write_status(\n+                            &mut w,\n+                            None,\n+                            Conf::default_location(),\n+                            invocation,\n+                            screen,\n+                        ),\n+                        PrefixSearchResult::TooManyMatches(completions) => {\n+                            Status::from_message(Composite::from_inline(&format!(\n                                 \"Possible completions: {}\",\n-                                completions.iter().map(|c| format!(\"*{}*\", c)).collect::<Vec<String>>().join(\", \"),\n-                            )),\n-                        ).display(w, screen)\n+                                completions\n+                                    .iter()\n+                                    .map(|c| format!(\"*{}*\", c))\n+                                    .collect::<Vec<String>>()\n+                                    .join(\", \"),\n+                            )))\n+                            .display(&mut w, screen)\n+                        }\n                     }\n                 }\n             }\n             _ => Status::from_message(mad_inline!(\n                 \"Hit *esc* to get back to the tree, or a space to start a verb\"\n-            )).display(w, screen),\n+            ))\n+            .display(&mut w, screen),\n         }\n     }\n \n     /// there's no meaningful flags here\n     fn write_flags(\n         &self,\n-        w: &mut W,\n+        mut w: &mut dyn Write,\n         screen: &mut Screen,\n-        _con: &AppContext\n+        _con: &AppContext,\n     ) -> Result<(), ProgramError> {\n-        screen.skin.default.queue_bg(w)?;\n+        screen.skin.default.queue_bg(&mut w)?;\n         w.queue(Clear(ClearType::UntilNewLine))?;\n         Ok(())\n     }\n }\n-\ndiff --git a/src/io.rs b/src/io.rs\n--- a/src/io.rs\n+++ b/src/io.rs\n@@ -1,6 +1,10 @@\n-/// This module deals is where is defined whether broot\n-/// writes on stdout, on stderr or elsewhere.\n-\n+//! This module deals is where is defined whether broot\n+//! writes on stdout, on stderr or elsewhere. It also provides helper\n+//! structs for io.\n+use std::{\n+    fmt,\n+    io::{self, Write},\n+};\n \n /// the type used by all GUI writing functions\n pub type W = std::io::Stderr;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -2,25 +2,13 @@\n extern crate log;\n \n use {\n-    std::{\n-        env,\n-        fs::File,\n-        str::FromStr,\n+    broot::{\n+        app::App, app_context::AppContext, cli, conf::Conf, errors::ProgramError,\n+        external::Launchable, io, shell_install::ShellInstall, skin, verb_store::VerbStore,\n     },\n     log::LevelFilter,\n     simplelog,\n-    broot::{\n-        app::App,\n-        app_context::AppContext,\n-        cli,\n-        conf::Conf,\n-        errors::ProgramError,\n-        external::Launchable,\n-        io,\n-        shell_install::ShellInstall,\n-        skin,\n-        verb_store::VerbStore,\n-    },\n+    std::{env, fs::File, str::FromStr},\n };\n \n /// configure the application log according to env variable.\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -77,25 +65,24 @@ fn run() -> Result<Option<Launchable>, ProgramError> {\n     verb_store.init(&config);\n     let context = AppContext::from(launch_args, verb_store);\n     let skin = skin::Skin::create(config.skin);\n-    App::new().run(&mut io::writer(), &context, skin)\n+    App::new().run(io::writer(), &context, skin)\n }\n \n fn main() {\n-    let res = match run() {\n-        Ok(res) => res,\n+    match run() {\n+        Ok(Some(launchable)) => {\n+            if let Err(e) = launchable.execute() {\n+                warn!(\"Failed to launch {:?}\", &launchable);\n+                warn!(\"Error: {:?}\", e);\n+                eprintln!(\"{}\", e);\n+            }\n+        }\n+        Ok(None) => {}\n         Err(e) => {\n             // this usually happens when the passed path isn't of a directory\n             warn!(\"Error: {}\", e);\n             eprintln!(\"{}\", e);\n-            return;\n         }\n     };\n-    if let Some(launchable) = res {\n-        if let Err(e) = launchable.execute() {\n-            warn!(\"Failed to launch {:?}\", &launchable);\n-            warn!(\"Error: {:?}\", e);\n-            eprintln!(\"{}\", e);\n-        }\n-    }\n     info!(\"bye\");\n }\ndiff --git a/src/screens.rs b/src/screens.rs\n--- a/src/screens.rs\n+++ b/src/screens.rs\n@@ -1,13 +1,8 @@\n-\n use {\n     crate::{\n         app_context::AppContext,\n         errors::ProgramError,\n-        io::W,\n-        mad_skin::{\n-            self,\n-            StatusMadSkinSet,\n-        },\n+        mad_skin::{self, StatusMadSkinSet},\n         skin::Skin,\n     },\n     crossterm::{\ndiff --git a/src/screens.rs b/src/screens.rs\n--- a/src/screens.rs\n+++ b/src/screens.rs\n@@ -15,6 +10,7 @@ use {\n         terminal::{Clear, ClearType},\n         QueueableCommand,\n     },\n+    std::io::Write,\n     termimad::{Area, CompoundStyle, InputField, MadSkin},\n };\n \ndiff --git a/src/screens.rs b/src/screens.rs\n--- a/src/screens.rs\n+++ b/src/screens.rs\n@@ -60,28 +56,22 @@ impl Screen {\n         Ok(())\n     }\n     /// move the cursor to x,y and clears the line.\n-    pub fn goto_clear(&self, w: &mut W, x: u16, y: u16)\n-    -> Result<(), ProgramError> {\n+    pub fn goto_clear(&self, w: &mut impl Write, x: u16, y: u16) -> Result<(), ProgramError> {\n         self.goto(w, x, y)?;\n         self.clear_line(w)\n     }\n     /// move the cursor to x,y\n-    pub fn goto(\n-        &self,\n-        w: &mut W,\n-        x: u16,\n-        y: u16\n-    ) -> Result<(), ProgramError> {\n+    pub fn goto(&self, w: &mut impl Write, x: u16, y: u16) -> Result<(), ProgramError> {\n         w.queue(cursor::MoveTo(x, y))?;\n         Ok(())\n     }\n     /// clear the whole screen\n-    pub fn clear(&self, w: &mut W) -> Result<(), ProgramError> {\n+    pub fn clear(&self, w: &mut impl Write) -> Result<(), ProgramError> {\n         w.queue(Clear(ClearType::All))?;\n         Ok(())\n     }\n     /// clear from the cursor to the end of line\n-    pub fn clear_line(&self, w: &mut W) -> Result<(), ProgramError> {\n+    pub fn clear_line(&self, w: &mut impl Write) -> Result<(), ProgramError> {\n         w.queue(Clear(ClearType::UntilNewLine))?;\n         Ok(())\n     }\ndiff --git a/src/status.rs b/src/status.rs\n--- a/src/status.rs\n+++ b/src/status.rs\n@@ -1,14 +1,6 @@\n-\n-use minimad::{\n-    Alignment,\n-    Composite,\n-};\n-\n-use crate::{\n-    errors::ProgramError,\n-    io::W,\n-    screens::Screen,\n-};\n+use crate::{errors::ProgramError, screens::Screen};\n+use minimad::{Alignment, Composite};\n+use std::io::Write;\n \n /// the status contains information written on the grey line\n ///  near the bottom of the screen\ndiff --git a/src/status.rs b/src/status.rs\n--- a/src/status.rs\n+++ b/src/status.rs\n@@ -48,11 +40,7 @@ impl<'a> Status<'a> {\n         }\n     }\n \n-    pub fn display(\n-        self,\n-        w: &mut W,\n-        screen: &Screen,\n-    ) -> Result<(), ProgramError> {\n+    pub fn display(self, w: &mut impl Write, screen: &Screen) -> Result<(), ProgramError> {\n         let y = screen.height - 2;\n         screen.goto_clear(w, 0, y)?;\n         let mut x = 0;\ndiff --git a/src/status.rs b/src/status.rs\n--- a/src/status.rs\n+++ b/src/status.rs\n@@ -72,6 +60,4 @@ impl<'a> Status<'a> {\n         skin.write_composite_fill(w, self.message, remaining_width, Alignment::Left)?;\n         screen.clear_line(w)\n     }\n-\n }\n-\ndiff --git a/src/verbs.rs b/src/verbs.rs\n--- a/src/verbs.rs\n+++ b/src/verbs.rs\n@@ -6,9 +6,7 @@ use {\n         app_context::AppContext,\n         app_state::AppStateCmdResult,\n         errors::{ConfError, ProgramError},\n-        external,\n-        io::W,\n-        keys,\n+        external, keys,\n         screens::Screen,\n         selection_type::SelectionType,\n         status::Status,\ndiff --git a/src/verbs.rs b/src/verbs.rs\n--- a/src/verbs.rs\n+++ b/src/verbs.rs\n@@ -205,7 +203,7 @@ impl Verb {\n \n     pub fn write_status(\n         &self,\n-        w: &mut W,\n+        w: &mut impl Write,\n         task: Option<&'static str>,\n         path: PathBuf,\n         invocation: &VerbInvocation,\n",
        "test_patch": "diff --git a/src/io.rs b/src/io.rs\n--- a/src/io.rs\n+++ b/src/io.rs\n@@ -9,3 +13,124 @@ pub type W = std::io::Stderr;\n pub fn writer() -> W {\n     std::io::stderr()\n }\n+\n+/// RAII wrapper for writer to control state transitions.\n+pub struct WriteCleanup<W, F, E>\n+where\n+    W: Write,\n+    F: Fn(&mut W) -> Result<(), E>,\n+    E: fmt::Display,\n+{\n+    writer: W,\n+    cleanup: F,\n+}\n+\n+impl<W, F, E> WriteCleanup<W, F, E>\n+where\n+    W: Write,\n+    F: Fn(&mut W) -> Result<(), E>,\n+    E: fmt::Display,\n+{\n+    #[inline]\n+    pub fn new(writer: W, cleanup: F) -> Self {\n+        WriteCleanup { writer, cleanup }\n+    }\n+\n+    #[inline]\n+    pub fn build<E2, F2: Fn(&mut W) -> Result<(), E2>>(\n+        mut writer: W,\n+        build: F2,\n+        cleanup: F,\n+    ) -> Result<Self, E2> {\n+        build(&mut writer)?;\n+        Ok(Self::new(writer, cleanup))\n+    }\n+}\n+\n+impl<W, F, E> Drop for WriteCleanup<W, F, E>\n+where\n+    W: Write,\n+    F: Fn(&mut W) -> Result<(), E>,\n+    E: fmt::Display,\n+{\n+    fn drop(&mut self) {\n+        if let Err(err) = (self.cleanup)(&mut self.writer) {\n+            warn!(\"Error cleaning up terminal: {}\", err);\n+        }\n+    }\n+}\n+\n+impl<W, F, E> fmt::Debug for WriteCleanup<W, F, E>\n+where\n+    W: Write + fmt::Debug,\n+    F: Fn(&mut W) -> Result<(), E>,\n+    E: fmt::Display,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"WriteCleanup\")\n+            .field(\"writer\", &self.writer)\n+            .field(\"cleanup\", &\"<closure>\")\n+            .finish()\n+    }\n+}\n+\n+impl<W, F, E> Write for WriteCleanup<W, F, E>\n+where\n+    W: Write,\n+    F: Fn(&mut W) -> Result<(), E>,\n+    E: fmt::Display,\n+{\n+    #[inline]\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        self.writer.write(buf)\n+    }\n+\n+    #[inline]\n+    fn flush(&mut self) -> io::Result<()> {\n+        self.writer.flush()\n+    }\n+\n+    #[inline]\n+    fn write_vectored(&mut self, bufs: &[io::IoSlice]) -> io::Result<usize> {\n+        self.writer.write_vectored(bufs)\n+    }\n+\n+    #[inline]\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        self.writer.write_all(buf)\n+    }\n+\n+    #[inline]\n+    fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {\n+        self.writer.write_fmt(fmt)\n+    }\n+}\n+\n+#[test]\n+fn test_write_cleanup() -> io::Result<()> {\n+    use std::str;\n+\n+    let mut buffer: Vec<u8> = Vec::new();\n+\n+    {\n+        let writer = WriteCleanup::build(\n+            &mut buffer,\n+            |writer| write!(writer, \"abc \"),\n+            |writer| write!(writer, \" xyz\"),\n+        )?;\n+\n+        let mut writer = WriteCleanup::build(\n+            writer,\n+            |writer| write!(writer, \"123 \"),\n+            |writer| write!(writer, \" 789\"),\n+        )?;\n+\n+        write!(&mut writer, \"Hello, World!\")?;\n+    }\n+\n+    let result = str::from_utf8(&buffer).unwrap();\n+\n+    assert_eq!(result, \"abc 123 Hello, World! 789 xyz\");\n+\n+    Ok(())\n+}\ndiff --git a/src/verbs.rs b/src/verbs.rs\n--- a/src/verbs.rs\n+++ b/src/verbs.rs\n@@ -406,4 +404,3 @@ mod path_normalize_tests {\n         );\n     }\n }\n-\n",
        "problem_statement": "Terminal is not properly cleaned up under certain CLI parsing failures\n**Describe the bug**\r\nWhen you run `broot` in such a way that the `App::run` method exits abnormally, it doesn't run `App::end`, which means that the terminal cleanup functions don't run: \r\n\r\nhttps://github.com/Canop/broot/blob/834ab7cfa2d5e80d9049e317be66e8ed6f2a7e2a/src/app.rs#L157-L164\r\n\r\nThe easiest way to product this behavior is with an invalid `--cmd`:\r\n\r\nhttps://github.com/Canop/broot/blob/834ab7cfa2d5e80d9049e317be66e8ed6f2a7e2a/src/app.rs#L201\r\n\r\nIf `parse_command_sequence` returns an error, `self.end` does not get run. The same is true of every other `?` site in `self.run`, of which there are many.\r\n\r\n**To Reproduce**\r\n```\r\n$ broot --cmd \":not_a_real_command\"\r\n```\r\n\r\nNotice how the cursor is still invisible, the terminal is still on the alternate screen, and mouse wheel capture is still disabled.\r\n\r\n**Expected behavior**\r\nI'd expect the broot `App` to clean up on all return paths\r\n\r\n**Screenshots**\r\n<img width=\"912\" alt=\"Screen Shot 2020-01-15 at 12 45 43 PM\" src=\"https://user-images.githubusercontent.com/1823405/72457594-fc8ce100-3794-11ea-8db5-ee07b0fa47e0.png\">\r\n\r\n**Configuration (please complete the following information):**\r\n- macOS 10.14.6\r\n- alacritty 0.4.1-dev\r\n- fish 3.0.2\r\n- broot 0.11.6\r\n\r\n**Additional context**\r\nWith your go-ahead, I'd like to implement an RAII wrapper struct around `io::Write` that causes it to automatically clean up after itself when dropped. This way, they're guaranteed to clean up, even if it returns with a `result?`. The basic interface would look like this:\r\n\r\n```rust\r\nstruct IoCleanup<W: io::Write, F: Fn(&mut W) -> io::Result<()>> {\r\n    writer: W,\r\n    cleanup: F,\r\n}\r\n\r\nimpl<W: io::Write, F2: Fn(&mut W) -> io::Result<()>> IoCleanup<W, F2> {\r\n    // Create a new cleanup without any initializer\r\n    fn new(writer: W, cleanup: F2) -> Self {\r\n        Self { writer, cleanup }\r\n    }\r\n\r\n    // Create a new `IoCleanup`. This will run the `build` function immediately,\r\n    // then run the `cleanup` function when this struct is dropped.\r\n    fn build<F1: Fn(&mut W) -> io::Result<()>>(\r\n        writer: W,\r\n        build: F1,\r\n        cleanup: F2,\r\n    ) -> io::Result<Self> {\r\n        build(&mut writer)?;\r\n        Ok(Self::new(writer, cleanup))\r\n    }\r\n}\r\n\r\nimpl<W: io::Write, F: Fn(&mut W) -> io::Result<()>> Drop for IoCleanup {\r\n    fn drop(&mut self) {\r\n        if let Err(err) = (self.cleanup)(&mut self.writer) {\r\n            warn!(\"......\", err);\r\n        }\r\n    }\r\n}\r\n\r\nimp <W: io::Write, F: Fn(&mut W) -> io::Result<()>> io::Write for IoCleanup<W, F> {\r\n    // Forward all Write methods to self.writer\r\n}\r\n\r\n// Example usage\r\nfn run(mut writer: impl io::Write) -> io::Result<()> {\r\n    // flush at the end\r\n    let writer = IoCleanup::new(writer, |w| w.flush());\r\n    \r\n    // Run some terminal commands, and undo them at the end\r\n    let writer = IoCleanup::build(\r\n        writer,\r\n        |w| w.queue(EnterAlternateScreen),\r\n        |w| w.queue(LeaveAlternateScreen),\r\n    }?;\r\n\r\n    let writer = IoCleanup::build(\r\n        writer,\r\n        |w| w.queue(cursor::Hide),\r\n        |w| w.queue(cursor::Show),\r\n    }?;\r\n\r\n    let writer = IoCleanup::build(\r\n        writer,\r\n        |w| w.queue(EnableMouseCapture),\r\n        |w| w.queue(DisableMouseCapture),\r\n    }?;\r\n\r\n    // Freely use `writer. queued commands and writes are forwarded\r\n    // to the underlying writer, and when this function returns for any\r\n    // reason (even a panic!) the cleanup functions will be executed.\r\n}\r\n```\n",
        "hints_text": "",
        "created_at": "2020-01-16T00:03:17Z",
        "version": "0.11"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 609,
        "instance_id": "Canop__broot-609",
        "issue_numbers": [
            "592"
        ],
        "base_commit": "818d069c51efe3a1736743a06c714ae7c351818a",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -2,6 +2,7 @@\n - status messages now displayed on toggling (for example showing hidden files)\n - upgrade terminal-light to 1.0.1 for better recognition of background color on high precision color terminals\n - in default configuration, ctrl-left never opens a panel to the left, as I think this was most often unwanted (one too many hit on cltr-left). It's possible to get the old behavior by binding ctrl-left to `:panel_left` instead of the new `:panel_left_no_open` internal.\n+- New escaping rules basically let you skip many `\\`, especially when building regexes - Fix #592\n \n ### v1.15.0 - 2022-09-24\n <a name=\"v1.15.0\"></a>\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -113,9 +113,9 @@ checksum = \"904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd\"\n \n [[package]]\n name = \"bet\"\n-version = \"1.0.1\"\n+version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"05187b4047565a2bb9aeab0c3e8740175871fd616984d816b0c8f1f6cb71125e\"\n+checksum = \"1673d13ad9c8d4b5e3d17a38730714157d428d1a249c18dd96e77e969623ac98\"\n \n [[package]]\n name = \"bincode\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1090,9 +1090,9 @@ dependencies = [\n \n [[package]]\n name = \"minimad\"\n-version = \"0.9.0\"\n+version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cd37b2e65fbd459544194d8f52ed84027e031684335a062c708774c09d172b0b\"\n+checksum = \"277639f0198568f70f8fe4ab88a52a67c96bca12f27ba5c17a76acdcb8b45834\"\n dependencies = [\n  \"once_cell\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1816,9 +1816,9 @@ dependencies = [\n \n [[package]]\n name = \"termimad\"\n-version = \"0.20.2\"\n+version = \"0.20.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c8a16d7de8d4c97a4149cc3b9d3681c5dba36011c303745bb1af19636e89ba39\"\n+checksum = \"3977554523f42b473e5211e5fbb39e78e21e793ff6ffd6428ae3bd02dbb7e09d\"\n dependencies = [\n  \"coolor\",\n  \"crossbeam\",\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -24,7 +24,7 @@ kitty-csi-check = [\"xterm-query\"]\n ahash = { version = \"0.7\", features = [\"serde\"] }\n ansi_colours = \"1.0\"\n base64 = \"0.13\"\n-bet = \"1.0\"\n+bet = \"1.0.2\"\n char_reader = \"0.1\"\n chrono = \"0.4\"\n clap = { version = \"3.2.1\", features = [\"derive\"] }\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -57,7 +57,7 @@ splitty = \"1.0\"\n strict = \"0.1.4\"\n syntect = { package = \"syntect-no-panic\", version = \"4.6.1\" } # see issue #485\n tempfile = \"3.2\"\n-termimad = \"0.20.2\"\n+termimad = \"0.20.3\"\n terminal-clipboard = { version = \"0.3.1\", optional = true }\n terminal-light = \"1.0.1\"\n toml = \"0.5\"\ndiff --git a/src/command/parts.rs b/src/command/parts.rs\n--- a/src/command/parts.rs\n+++ b/src/command/parts.rs\n@@ -8,7 +8,7 @@ use {\n };\n \n /// An intermediate parsed representation of the raw string\n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, PartialEq)]\n pub struct CommandParts {\n     pub raw_pattern: String, // may be empty\n     pub pattern: BeTree<PatternOperator, PatternParts>,\ndiff --git a/src/command/parts.rs b/src/command/parts.rs\n--- a/src/command/parts.rs\n+++ b/src/command/parts.rs\n@@ -31,60 +31,77 @@ impl CommandParts {\n             .as_ref()\n             .map_or(false, |vi| !vi.is_empty())\n     }\n-    pub fn from(mut raw: String) -> Self {\n+    pub fn from<S: Into<String>>(raw: S) -> Self {\n+        let mut raw = raw.into();\n         let mut invocation_start_pos: Option<usize> = None;\n-        let mut escaping = false;\n         let mut pt = BeTree::new();\n-        for (pos, c) in raw.char_indices() {\n-            if c == '\\\\' {\n-                if escaping {\n-                    escaping = false;\n-                } else {\n-                    escaping = true;\n-                    continue;\n+        let mut chars = raw.char_indices().peekable();\n+        let mut escape_cur_char = false;\n+        let mut escape_next_char = false;\n+        // we loop on chars and build the pattern tree until we reach an unescaped ' ' or ':'\n+        while let Some((pos, cur_char)) = chars.next() {\n+            let between_slashes = pt.current_atom()\n+                .map_or(\n+                    false,\n+                    |pp: &PatternParts| pp.is_between_slashes(),\n+                );\n+            match cur_char {\n+                c if escape_cur_char => {\n+                    // Escaping is used to prevent characters from being consumed at the\n+                    // composite pattern level (or, and, parens) or as the separator between\n+                    // the pattern and the verb. An escaped char is usable in a pattern atom.\n+                    pt.mutate_or_create_atom(PatternParts::default).push(c);\n                 }\n-            }\n-            if !escaping {\n-                if c == ' ' || c == ':' {\n+                '\\\\' => {\n+                    // Pattern escaping rules:\n+                    // \t- when after '/': only ' ', ':',  '/' and '\\' need escaping\n+                    // \t- otherwise, '&,' '|', '(', ')' need escaping too ('(' is only here for\n+                    // \tsymmetry)\n+                    let between_slashes = match pt.current_atom() {\n+                        Some(pattern_parts) => pattern_parts.is_between_slashes(),\n+                        None => false,\n+                    };\n+                    escape_next_char = match chars.peek() {\n+                        None => false, // End of the string, we can't be escaping\n+                        Some((_, next_char)) => match (next_char, between_slashes) {\n+                            (' ' | ':' | '/' | '\\\\', _) => true,\n+                            ('&' | '|' | '!' | '(' | ')', false) => true,\n+                            _ => false,\n+                        }\n+                    };\n+                    if !escape_next_char {\n+                        // if the '\\' isn't used for escaping, it's used as its char value\n+                        pt.mutate_or_create_atom(PatternParts::default).push('\\\\');\n+                    }\n+                }\n+                ' ' | ':' => { // ending the pattern part\n                     invocation_start_pos = Some(pos);\n                     break;\n                 }\n-                if c == '/' {\n+                '/' => { // starting an atom part\n                     pt.mutate_or_create_atom(PatternParts::default).add_part();\n-                    continue;\n                 }\n-                let allow_inter_pattern_token = match pt.current_atom() {\n-                    Some(pattern_parts) => pattern_parts.allow_inter_pattern_token(),\n-                    None => true,\n-                };\n-                if allow_inter_pattern_token {\n-                    match c {\n-                        '|' if pt.accept_binary_operator() => {\n-                            pt.push_operator(PatternOperator::Or);\n-                            continue;\n-                        }\n-                        '&' if pt.accept_binary_operator() => {\n-                            pt.push_operator(PatternOperator::And);\n-                            continue;\n-                        }\n-                        '!' if pt.accept_unary_operator() => {\n-                            pt.push_operator(PatternOperator::Not);\n-                            continue;\n-                        }\n-                        '(' if pt.accept_opening_par() => {\n-                            pt.open_par();\n-                            continue;\n-                        }\n-                        ')' if pt.accept_closing_par() => {\n-                            pt.close_par();\n-                            continue;\n-                        }\n-                        _ => {}\n-                    }\n+                '|' if !between_slashes && pt.accept_binary_operator() => {\n+                    pt.push_operator(PatternOperator::Or);\n+                }\n+                '&' if !between_slashes && pt.accept_binary_operator() => {\n+                    pt.push_operator(PatternOperator::And);\n+                }\n+                '!' if !between_slashes && pt.accept_unary_operator() => {\n+                    pt.push_operator(PatternOperator::Not);\n+                }\n+                '(' if !between_slashes && pt.accept_opening_par() => {\n+                    pt.open_par();\n+                }\n+                ')' if !between_slashes && pt.accept_closing_par() => {\n+                    pt.close_par();\n+                }\n+                _ => {\n+                    pt.mutate_or_create_atom(PatternParts::default).push(cur_char);\n                 }\n             }\n-            pt.mutate_or_create_atom(PatternParts::default).push(c);\n-            escaping = false;\n+            escape_cur_char = escape_next_char;\n+            escape_next_char = false;\n         }\n         let mut verb_invocation = None;\n         if let Some(pos) = invocation_start_pos {\ndiff --git a/website/docs/input.md b/website/docs/input.md\n--- a/website/docs/input.md\n+++ b/website/docs/input.md\n@@ -35,32 +35,79 @@ regex name | `/[yz]{3}` or `/[yz]{3}/` | `fuzzy.rs` | search for the regular exp\n regex name | `/(json|xml)$/i` | `thing.XML` | find files whose name ends in `json` or `xml`, case insensitive\n regex name | `/abc/i` | `aBc.txt` | search for the regular expression `abc` with flag `i` in filenames\n exact path | `ep/te\\/d`  or `pe/te\\/d/` | `website/docs` |  search for \"te/d\" in sub-paths from current tree root\n-regex path | `rp/\\\\d{3}.*txt` | `dir/a256/abc.txt` |  search for the `\\d{3}.*txt` regex  in sub-paths from current tree root\n+regex path | `rp/\\d{3}.*txt` | `dir/a256/abc.txt` |  search for the `\\d{3}.*txt` regex  in sub-paths from current tree root\n tokens path | `t/ab,cd` | `DCD/a256/abc.txt` |  search for the \"ab\" and \"cd\" tokens in sub-paths from current tree root\n exact content | `c/mask` or `c/mask/` | `umask = \"1.0\"` | search for the \"mask\" string in file contents\n regex content | `rc/[abc]{5}/i` | `bAAAc` | search with a regular expression in file contents - `i` making it case insensitive\n-regex content | `cr/\\\\bzh\\\\b` | `\"zh\":{` | search a word with a regular expression in file contents\n+regex content | `cr/\\bzh\\b` | `\"zh\":{` | search a word with a regular expression in file contents\n \n It's also possible to [redefine those mode mappings](../conf_file/#search-modes).\n \n-To escape characters (for example the space, colon or slash) in the pattern, use a `\\` (an antislash is `\\\\`).\n-\n # Combining filtering patterns\n \n Patterns can be combined with the `!` (not), `&` (and) and `|` (or) operators, and parentheses if necessary.\n \n-You can for example display non `json` files containing either `isize` or `i32` with\n+You can for example list files whose name contains a `z` and whose content contains one too with\n+\n+    z&c/z\n+\n+To display non `json` files containing either `isize` or `i32`, type\n+\n+    !/\\.json$/&(c/isize/|c/i32/)\n+\n+The last closing characters are often unecessary when no ambiguity is possible, so you could have typed this:\n+\n+    !/\\.json$/&(c/isize/|c/i32\n \n-    !/json$/&(c/isize/|c/i32/)\n+# Escaping\n \n-## Subtleties\n+## Why escaping ?\n+\n+Look at this input: `a|b rm`.\n+\n+It's for searching files whose name contains either a `a` or a `b`, then removing the selected one.\n+The pattern here is `a|b`, it's a composite pattern.\n+\n+A space or a colon starts the verb invocation.\n+So if you needs one of them in your pattern, you need to escape it with `\\`.\n+\n+For example\n+\n+* to search for a file whose name contains a x and a colon, you type `x\\:`\n+* to search for a file whose name contains a space just before a digit, you can use a regular expression: `/\\ \\d`\n \n The characters you use as operators and the parenthesis can be useful in patterns too, either because you want to search for them in fuzzy patterns or in file contents, or because you write non trivial regular expressions.\n \n-Most often you'll just type what feels natural and broot will select the interpretation which makes sense but you might be interested in a few rules:\n+If you want to search for the `|` character (or a `&`, or `(`, or `)`), you can't just type it because it's used to combine elementary patterns. I needs escaping. So if you need to search for the `|` character in file names, you type `\\|`.\n+\n+An elementary pattern which starts with a `/` can only be ended with a `/`, a space, or a colon.\n+That's why you don't have to escape other characters you want to include in your elementary pattern.\n+\n+This lets you type this regular expression with no unecessary escaping:\n+\n+    /(\\d-){2}\\w\n+\n+![regex](img/regex-antislash-d.png)\n+\n+Regular expression escaping rules still apply, so if you want to search with a regex for a file containing a `(`, you'll type `/\\(`.\n+\n+## Escaping Rules\n+\n+The escaping character is the antislash `\\`.\n+\n+Most often, you don't need to know more: when broot tells you it doesn't understand your pattern, it should click that your special character needs escaping and you prefix it with a `\\ `.\n+\n+More precisely:\n+\n+1. After the first `/` of a pattern, only ` `, `:`,  `/` and `\\` need escaping.\n+2. Otherwise, `&,` `|`, `(`, `)`, `\\` need escaping too.\n+3. When there's no ambiguity, ending characters are often unecessary\n+\n+# Performances\n+\n+broot interprets the left operand before the right one and doesn't interpret the second one if it's not necessary.\n \n-* parenthesis and operators in the second pattern part (parts being separated by `/`) are part of the pattern, which explains why `/(json|xml)` is interpreted as a regular expression. If you want to do a fuzzy search for a `|` in the name of your files, you'll need to either escape it as `\\|` or to have an explicit pattern mode : `nf/a|b` because `a|b` would search for files whose name contains either `a` or `b`. And to ensure an operator or closing parenthesis isn't interpreted as part of your pattern, close it with a `/`.\n-* broot interprets the left operand before the right one and doesn't interpret the second one if it's not necessary. So if you want to search your whole disk for json files containing `abcd`, it will be faster to use `/json$/&c/abcd` rather than `c/abcd/&/json$/` which would look at the file name only after having scanned the content.\n+So if you want to search your whole disk for json files containing `abcd`, it will be faster to use `/\\.json$/&c/abcd` rather than `c/abcd/&/\\.json$/` which would look at the file name only after having scanned the content.\n \n # The verb invocation\n \n",
        "test_patch": "diff --git a/src/command/parts.rs b/src/command/parts.rs\n--- a/src/command/parts.rs\n+++ b/src/command/parts.rs\n@@ -123,3 +140,199 @@ impl CommandParts {\n \n }\n \n+#[cfg(test)]\n+mod test_command_parts {\n+\n+    use {\n+        crate::{\n+            command::CommandParts,\n+            pattern::*,\n+            verb::VerbInvocation,\n+        },\n+        bet::{BeTree, Token},\n+    };\n+\n+    fn pp(a: &[&str]) -> PatternParts {\n+        a.try_into().unwrap()\n+    }\n+\n+    fn check(\n+        input: &str,\n+        raw_pattern: &str,\n+        mut pattern_tokens: Vec<Token<PatternOperator, PatternParts>>,\n+        verb_invocation: Option<&str>,\n+    ) {\n+        let left = CommandParts::from(input);\n+        dbg!(&left);\n+        let mut pattern = BeTree::new();\n+        for token in pattern_tokens.drain(..) {\n+            pattern.push(token);\n+        }\n+        let right = CommandParts {\n+            raw_pattern: raw_pattern.to_string(),\n+            pattern,\n+            verb_invocation: verb_invocation.map(|s| VerbInvocation::from(s)),\n+        };\n+        dbg!(&right);\n+        assert_eq!(left, right);\n+    }\n+\n+    #[test]\n+    fn parse_empty() {\n+        check(\n+            \"\",\n+            \"\",\n+            vec![],\n+            None,\n+        );\n+    }\n+    #[test]\n+    fn parse_just_semicolon() {\n+        check(\n+            \":\",\n+            \"\",\n+            vec![],\n+            Some(\"\"),\n+        );\n+    }\n+    #[test]\n+    fn parse_no_pattern() {\n+        check(\n+            \" cd /\",\n+            \"\",\n+            vec![],\n+            Some(\"cd /\"),\n+        );\n+    }\n+    #[test]\n+    fn parse_pattern_and_invocation() {\n+        check(\n+            \"/r cd /\",\n+            \"/r\",\n+            vec![\n+                Token::Atom(pp(&[\"\", \"r\"])),\n+            ],\n+            Some(\"cd /\"),\n+        );\n+    }\n+    #[test]\n+    fn parse_pattern_between_slashes() {\n+        check(\n+            r#\"/&\"#,\n+            r#\"/&\"#,\n+            vec![\n+                Token::Atom(pp(&[\"\", \"&\"])),\n+            ],\n+            None,\n+        );\n+        check(\n+            r#\"/&/&r/a(\\w-)+/ rm\"#,\n+            r#\"/&/&r/a(\\w-)+/\"#,\n+            vec![\n+                Token::Atom(pp(&[\"\", \"&\", \"\"])),\n+                Token::Operator(PatternOperator::And),\n+                Token::Atom(pp(&[\"r\", r#\"a(\\w-)+\"#, \"\"])),\n+            ],\n+            Some(\"rm\"),\n+        );\n+    }\n+    #[test]\n+    fn parse_pattern_with_space() {\n+        check(\n+            r#\"a\\ b\"#,\n+            r#\"a\\ b\"#,\n+            vec![\n+                Token::Atom(pp(&[\"a b\"])),\n+            ],\n+            None,\n+        );\n+    }\n+    #[test]\n+    fn parse_pattern_with_slash() {\n+        check(\n+            r#\"r/a\\ b\\//i cd /\"#,\n+            r#\"r/a\\ b\\//i\"#,\n+            vec![\n+                Token::Atom(pp(&[\"r\", \"a b/\", \"i\"])),\n+            ],\n+            Some(\"cd /\"),\n+        );\n+    }\n+    #[test]\n+    fn parse_fuzzy_pattern_searching_parenthesis() {\n+        check(\n+            r#\"\\(\"#,\n+            r#\"\\(\"#,\n+            vec![\n+                Token::Atom(pp(&[\"(\"])),\n+            ],\n+            None,\n+        );\n+    }\n+    #[test]\n+    fn parse_regex_pattern_searching_parenthesis() {\n+        check(\n+            r#\"/\\(\"#,\n+            r#\"/\\(\"#,\n+            vec![\n+                Token::Atom(pp(&[\"\", r#\"\\(\"#])),\n+            ],\n+            None,\n+        );\n+    }\n+    #[test]\n+    fn parse_composite_pattern() {\n+        check(\n+            \"(/txt$/&!truc)&c/rex\",\n+            \"(/txt$/&!truc)&c/rex\",\n+            vec![\n+                Token::OpeningParenthesis,\n+                Token::Atom(pp(&[\"\", \"txt$\", \"\"])),\n+                Token::Operator(PatternOperator::And),\n+                Token::Operator(PatternOperator::Not),\n+                Token::Atom(pp(&[\"truc\"])),\n+                Token::ClosingParenthesis,\n+                Token::Operator(PatternOperator::And),\n+                Token::Atom(pp(&[\"c\", \"rex\"])),\n+            ],\n+            None\n+        );\n+    }\n+    #[test]\n+    fn parse_unclosed_composite_pattern() {\n+        check(\n+            r#\"!/\\.json$/&(c/isize/|c/i32:rm\"#,\n+            r#\"!/\\.json$/&(c/isize/|c/i32\"#,\n+            vec![\n+                Token::Operator(PatternOperator::Not),\n+                Token::Atom(pp(&[\"\", r#\"\\.json$\"#, \"\"])),\n+                Token::Operator(PatternOperator::And),\n+                Token::OpeningParenthesis,\n+                Token::Atom(pp(&[\"c\", \"isize\", \"\"])),\n+                Token::Operator(PatternOperator::Or),\n+                Token::Atom(pp(&[\"c\", \"i32\"])),\n+            ],\n+            Some(\"rm\"),\n+        );\n+    }\n+    #[test]\n+    fn issue_592() { // https://github.com/Canop/broot/issues/592\n+        check(\n+            r#\"\\t\"#,\n+            r#\"\\t\"#,\n+            vec![\n+                Token::Atom(pp(&[r#\"\\t\"#])),\n+            ],\n+            None,\n+        );\n+        check(\n+            r#\"r/@(\\.[^.]+)+/ cp ..\"#,\n+            r#\"r/@(\\.[^.]+)+/\"#,\n+            vec![\n+                Token::Atom(pp(&[\"r\", r#\"@(\\.[^.]+)+\"#, \"\"])),\n+            ],\n+            Some(\"cp ..\"),\n+        );\n+    }\n+}\n+\ndiff --git a/src/pattern/pattern_parts.rs b/src/pattern/pattern_parts.rs\n--- a/src/pattern/pattern_parts.rs\n+++ b/src/pattern/pattern_parts.rs\n@@ -27,17 +27,29 @@ impl Default for PatternParts {\n     }\n }\n \n+#[cfg(test)]\n+impl TryFrom<&[&str]> for PatternParts {\n+    type Error = &'static str;\n+    fn try_from(a: &[&str]) -> Result<Self, Self::Error> {\n+        if a.is_empty() {\n+            return Err(\"invalid empty parts array\");\n+        }\n+        let parts = a.iter().map(|s| (*s).into()).collect();\n+        Ok(Self { parts })\n+    }\n+}\n+\n impl PatternParts {\n     pub fn push(&mut self, c: char) {\n         // self.parts can't be empty, by construct\n         self.parts.last_mut().unwrap().push(c);\n     }\n+    pub fn is_between_slashes(&self) -> bool {\n+        self.parts.len() == 2\n+    }\n     pub fn add_part(&mut self) {\n         self.parts.push(String::new());\n     }\n-    pub fn allow_inter_pattern_token(&self) -> bool {\n-        self.parts.len() != 2\n-    }\n     pub fn is_empty(&self) -> bool {\n         self.core().is_empty()\n     }\n",
        "problem_statement": "Regex escape sequences require one extra backslash\nI don't know whether this is the intended behavior, but I find it strange and confusing: regex search patterns require a *double backslash* to enter metacharacters and character classes.\r\n\r\nFor instance:\r\n- `r/\\\\(` instead of `r/\\(`,\r\n- `r/\\\\d` instead of `r/\\d`,\r\n- `r/\\\\W` instead of `r/\\W`,\r\n- etc..\r\n\r\nIt's as if a single backslash on its own gets discarded: for instance `r/\\\\.\\t\\x\\t\\$` will find files with a `.txt` extension.\r\n\r\n\n",
        "hints_text": "There are escaping rules because the '&', '|', ' ', ':', ')' can all end a pattern.\r\n\r\nExample:\r\n\r\n![image](https://user-images.githubusercontent.com/617006/192158827-317e1618-1ba6-474f-b7a1-0f5e9fc257b9.png)\r\n(here we display the files whose name contains \"src\" and either \"def\" or \"shell\".\r\n\r\nSo escaping has a reason.\r\n\r\nNow, I think escaping could have more complex rules so that less escaping is needed. I'll test some new rules.\nWhile parsing the search string, I would say that when `/` is encountered and we enter \"regex mode\" then `&`, `|`, `)`, etc. should lose their special meaning until we encounter the `/` that closes the regex.\nThat's the idea I'm testing (not really \"testing\" at this point, didn't have time).\r\n\r\n- when after `'/'`: only `' '`, `':'`,  `'/'` and `'\\'` need escaping\r\n- otherwise, `'&'`, `'|'`, `'('`, `')'` need escaping too\r\n\r\nThe reason for the `'('` is symmetry: it's easier to read.",
        "created_at": "2022-10-01T08:56:43Z",
        "version": "1.15"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 666,
        "instance_id": "Canop__broot-666",
        "issue_numbers": [
            "665"
        ],
        "base_commit": "b00b2efb93416463cfaf11e378274b0051745ef9",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -1,3 +1,6 @@\n+### next\n+- fix status line not always displaying the hint of the input's verb - Fix #665\n+\n ### v1.20.0 - 2023-02-03\n <a name=\"v1.20.0\"></a>\n - unless overriden, `/proc` is now `no-enter`, which solves freezes when searchin on `/` in some system - See #639\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -151,7 +151,7 @@ checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n [[package]]\n name = \"broot\"\n-version = \"1.20.0\"\n+version = \"1.20.1\"\n dependencies = [\n  \"ahash 0.7.6\",\n  \"ansi_colours\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -194,7 +194,7 @@ dependencies = [\n  \"strict\",\n  \"syntect-no-panic\",\n  \"tempfile\",\n- \"termimad\",\n+ \"termimad 0.21.0\",\n  \"terminal-clipboard\",\n  \"terminal-light\",\n  \"tiny-skia\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -861,7 +861,7 @@ dependencies = [\n  \"serde_json\",\n  \"svg 0.8.2\",\n  \"tempfile\",\n- \"termimad\",\n+ \"termimad 0.20.6\",\n  \"thiserror\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1260,6 +1260,15 @@ dependencies = [\n  \"once_cell\",\n ]\n \n+[[package]]\n+name = \"minimad\"\n+version = \"0.10.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fed1b13e2000bd8e238d97a97de6fc30224f89a08b0aa5aaa09ed1bd68ba2fa1\"\n+dependencies = [\n+ \"once_cell\",\n+]\n+\n [[package]]\n name = \"miniz_oxide\"\n version = \"0.5.4\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2092,7 +2101,21 @@ dependencies = [\n  \"coolor\",\n  \"crossbeam\",\n  \"crossterm\",\n- \"minimad\",\n+ \"minimad 0.9.1\",\n+ \"thiserror\",\n+ \"unicode-width\",\n+]\n+\n+[[package]]\n+name = \"termimad\"\n+version = \"0.21.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d86d19aafb932e65acc333b49cb0bd7d9c650a94fe3f2550ce91aea00f582a86\"\n+dependencies = [\n+ \"coolor\",\n+ \"crossbeam\",\n+ \"crossterm\",\n+ \"minimad 0.10.0\",\n  \"thiserror\",\n  \"unicode-width\",\n ]\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -1,6 +1,6 @@\n [package]\n name = \"broot\"\n-version = \"1.20.0\"\n+version = \"1.20.1\"\n authors = [\"dystroy <denys.seguret@gmail.com>\"]\n repository = \"https://github.com/Canop/broot\"\n homepage = \"https://dystroy.org/broot\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -58,7 +58,7 @@ splitty = \"1.0\"\n strict = \"0.1.4\"\n syntect = { package = \"syntect-no-panic\", version = \"4.6.1\" } # see issue #485\n tempfile = \"3.2\"\n-termimad = \"0.20.6\"\n+termimad = \"0.21.0\"\n terminal-clipboard = { version = \"0.3.1\", optional = true }\n terminal-light = \"1.1\"\n tiny-skia = \"0.8.2\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -119,6 +119,7 @@ harness = false\n # syntect = { path = \"../syntect\" }\n # syntect = { path = \"../syntect\" }\n # syntect-no-panic = { path = \"../syntect\" }\n+# minimad = { path = \"../minimad\" }\n # termimad = { path = \"../termimad\" }\n # terminal-light = { path = \"../terminal-light\" }\n # terminal-clipboard = { path = \"../terminal-clipboard\" }\ndiff --git a/benches/fuzzy.rs b/benches/fuzzy.rs\n--- a/benches/fuzzy.rs\n+++ b/benches/fuzzy.rs\n@@ -9,7 +9,7 @@ static PATTERNS: &[&str] = &[\"r\u00e9veil\", \"AB\", \"e\", \"brt\", \"brootz\"];\n \n fn bench_score_of_fuzzy(gb: &mut Bench) {\n     for pattern in PATTERNS {\n-        let task_name = format!(\"Fuzzy({:?})::score_of\", pattern);\n+        let task_name = format!(\"Fuzzy({pattern:?})::score_of\");\n         gb.task(task_name, |b| {\n             let fp = FuzzyPattern::from(pattern);\n             b.iter(|| {\ndiff --git a/benches/toks.rs b/benches/toks.rs\n--- a/benches/toks.rs\n+++ b/benches/toks.rs\n@@ -9,7 +9,7 @@ static PATTERNS: &[&str] = &[\"a\", \"r\u00e9veil\", \"bro,c\", \"e,jenc,arec,ehro\", \"broot\n \n fn bench_score_of_toks(gb: &mut Bench) {\n     for pattern in PATTERNS {\n-        let task_name = format!(\"TokPattern({:?})::score_of\", pattern);\n+        let task_name = format!(\"TokPattern({pattern:?})::score_of\");\n         gb.task(task_name, |b| {\n             let fp = TokPattern::new(pattern);\n             b.iter(|| {\ndiff --git a/build.rs b/build.rs\n--- a/build.rs\n+++ b/build.rs\n@@ -33,7 +33,7 @@ fn build_completion_scripts() {\n     write_completions_file(Shell::Fish, &out_dir);\n     write_completions_file(Shell::PowerShell, &out_dir);\n     write_completions_file(Shell::Zsh, &out_dir);\n-    eprintln!(\"completion scripts generated in {:?}\", out_dir);\n+    eprintln!(\"completion scripts generated in {out_dir:?}\");\n }\n \n fn main() {\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -122,7 +122,7 @@ impl AppContext {\n             .map_err(ConfError::from)?;\n         let file_sum_threads_count = config.file_sum_threads_count\n             .unwrap_or(file_sum::DEFAULT_THREAD_COUNT);\n-        if file_sum_threads_count < 1 || file_sum_threads_count > 50 {\n+        if !(1..=50).contains(&file_sum_threads_count) {\n             return Err(ConfError::InvalidThreadsCount{ count: file_sum_threads_count }.into());\n         }\n         let max_panels_count = config.max_panels_count\ndiff --git a/src/app/panel.rs b/src/app/panel.rs\n--- a/src/app/panel.rs\n+++ b/src/app/panel.rs\n@@ -158,7 +158,7 @@ impl Panel {\n         let mut command_parts = CommandParts::from(self.input.get_content());\n         if command_parts.verb_invocation.is_some() {\n             command_parts.verb_invocation = None;\n-            let new_input = format!(\"{}\", command_parts);\n+            let new_input = format!(\"{command_parts}\");\n             self.input.set_content(&new_input);\n         }\n         self.mut_state().set_mode(initial_mode(con));\ndiff --git a/src/app/panel.rs b/src/app/panel.rs\n--- a/src/app/panel.rs\n+++ b/src/app/panel.rs\n@@ -177,7 +177,7 @@ impl Panel {\n         let mut command_parts = CommandParts::from(self.input.get_content());\n         if let Some(invocation) = &mut command_parts.verb_invocation {\n             invocation.args = Some(arg);\n-            let new_input = format!(\"{}\", command_parts);\n+            let new_input = format!(\"{command_parts}\");\n             self.input.set_content(&new_input);\n         }\n     }\ndiff --git a/src/app/panel.rs b/src/app/panel.rs\n--- a/src/app/panel.rs\n+++ b/src/app/panel.rs\n@@ -263,7 +263,7 @@ impl Panel {\n                 .next()\n                 .unwrap_or_else(|| \":start_end_panel\".to_string());\n \n-            let md = format!(\"hit *{}* to fill arg \", shortcut);\n+            let md = format!(\"hit *{shortcut}* to fill arg \");\n             // Add verbindex in purpose ?\n             screen.goto(w, area.left, area.top)?;\n             panel_skin.purpose_skin.write_composite_fill(\ndiff --git a/src/app/panel_state.rs b/src/app/panel_state.rs\n--- a/src/app/panel_state.rs\n+++ b/src/app/panel_state.rs\n@@ -156,7 +156,7 @@ pub trait PanelState {\n                             CmdResult::new_state(Box::new(state))\n                         }\n                     }\n-                    Err(e) => CmdResult::DisplayError(format!(\"{}\", e)),\n+                    Err(e) => CmdResult::DisplayError(format!(\"{e}\")),\n                 }\n             }\n             Internal::help => {\ndiff --git a/src/app/panel_state.rs b/src/app/panel_state.rs\n--- a/src/app/panel_state.rs\n+++ b/src/app/panel_state.rs\n@@ -745,7 +745,7 @@ pub trait PanelState {\n             Command::PatternEdit { raw, expr } => {\n                 match InputPattern::new(raw.clone(), expr, con) {\n                     Ok(pattern) => self.on_pattern(pattern, app_state, con),\n-                    Err(e) => Ok(CmdResult::DisplayError(format!(\"{}\", e))),\n+                    Err(e) => Ok(CmdResult::DisplayError(format!(\"{e}\"))),\n                 }\n             }\n             Command::VerbTrigger {\ndiff --git a/src/app/panel_state.rs b/src/app/panel_state.rs\n--- a/src/app/panel_state.rs\n+++ b/src/app/panel_state.rs\n@@ -809,31 +809,27 @@ pub trait PanelState {\n                     validate_purpose: false,\n                     panel_ref: PanelReference::Id(id),\n                 }\n+            } else if prefered_mode.is_some() {\n+                // we'll make the preview mode change be\n+                // applied on the preview panel\n+                CmdResult::ApplyOnPanel { id }\n             } else {\n-                if prefered_mode.is_some() {\n-                    // we'll make the preview mode change be\n-                    // applied on the preview panel\n-                    CmdResult::ApplyOnPanel { id }\n-                } else {\n-                    CmdResult::Keep\n-                }\n+                CmdResult::Keep\n+            }\n+        } else if let Some(path) = self.selected_path() {\n+            CmdResult::NewPanel {\n+                state: Box::new(PreviewState::new(\n+                    path.to_path_buf(),\n+                    InputPattern::none(),\n+                    prefered_mode,\n+                    self.tree_options(),\n+                    cc.app.con,\n+                )),\n+                purpose: PanelPurpose::Preview,\n+                direction: HDir::Right,\n             }\n         } else {\n-            if let Some(path) = self.selected_path() {\n-                CmdResult::NewPanel {\n-                    state: Box::new(PreviewState::new(\n-                        path.to_path_buf(),\n-                        InputPattern::none(),\n-                        prefered_mode,\n-                        self.tree_options(),\n-                        cc.app.con,\n-                    )),\n-                    purpose: PanelPurpose::Preview,\n-                    direction: HDir::Right,\n-                }\n-            } else {\n-                CmdResult::error(\"no selected file\")\n-            }\n+            CmdResult::error(\"no selected file\")\n         }\n     }\n \ndiff --git a/src/app/panel_state.rs b/src/app/panel_state.rs\n--- a/src/app/panel_state.rs\n+++ b/src/app/panel_state.rs\n@@ -928,9 +924,10 @@ pub trait PanelState {\n         cc: &CmdContext,\n         has_previous_state: bool,\n     ) -> Status {\n+        info!(\"get_status cc.cmd={:?}\", &cc.cmd);\n         match &cc.cmd {\n             Command::PatternEdit { .. } => self.no_verb_status(has_previous_state, cc.app.con),\n-            Command::VerbEdit(invocation) => {\n+            Command::VerbEdit(invocation) | Command::VerbTrigger { input_invocation: Some(invocation), .. } => {\n                 if invocation.name.is_empty() {\n                     Status::new(\n                         \"Type a verb then *enter* to execute it (*?* for the list of verbs)\",\ndiff --git a/src/app/panel_state.rs b/src/app/panel_state.rs\n--- a/src/app/panel_state.rs\n+++ b/src/app/panel_state.rs\n@@ -953,7 +950,7 @@ pub trait PanelState {\n                                 \"Possible verbs: {}\",\n                                 completions\n                                     .iter()\n-                                    .map(|c| format!(\"*{}*\", c))\n+                                    .map(|c| format!(\"*{c}*\"))\n                                     .collect::<Vec<String>>()\n                                     .join(\", \"),\n                             ),\ndiff --git a/src/app/selection.rs b/src/app/selection.rs\n--- a/src/app/selection.rs\n+++ b/src/app/selection.rs\n@@ -80,7 +80,7 @@ impl Selection<'_> {\n             if let Some(export_path) = &con.launch_args.outcmd {\n                 // broot was launched as br, we can launch the executable from the shell\n                 let f = OpenOptions::new().append(true).open(export_path)?;\n-                writeln!(&f, \"{}\", path)?;\n+                writeln!(&f, \"{path}\")?;\n                 CmdResult::Quit\n             } else {\n                 CmdResult::from(Launchable::program(\ndiff --git a/src/app/standard_status.rs b/src/app/standard_status.rs\n--- a/src/app/standard_status.rs\n+++ b/src/app/standard_status.rs\n@@ -33,32 +33,32 @@ impl StandardStatus {\n         let tree_dir_focus = \"*enter* to focus\".to_string();\n         let tree_dir_cd = verb_store\n             .key_desc_of_internal_stype(Internal::open_leave, SelectionType::Directory)\n-            .map(|k| format!(\"*{}* to cd\", k));\n+            .map(|k| format!(\"*{k}* to cd\"));\n         let tree_file_open_stay = verb_store\n             .key_desc_of_internal_stype(Internal::open_stay, SelectionType::File)\n-            .map(|k| format!(\"*{}* to open the file\", k));\n+            .map(|k| format!(\"*{k}* to open the file\"));\n         let tree_file_open_leave = verb_store\n             .key_desc_of_internal_stype(Internal::open_leave, SelectionType::File)\n-            .map(|k| format!(\"*{}* to open and quit\", k));\n+            .map(|k| format!(\"*{k}* to open and quit\"));\n         //let tree_file_enter = None; // TODO (for when enter is customized)\n         let tree_unfiltered = \"a few letters to search\".to_string();\n         let tree_filtered = \"*esc* to clear the filter\".to_string();\n         let preview_unfiltered = \"a pattern to filter\".to_string();\n         let preview_filtered = verb_store\n             .key_desc_of_internal(Internal::panel_right)\n-            .map(|k| format!(\"*{}* to reveal the text\", k));\n+            .map(|k| format!(\"*{k}* to reveal the text\"));\n         let preview_restorable_filter = verb_store\n             .key_desc_of_internal(Internal::panel_left_no_open)\n-            .map(|k| format!(\"*{}* to restore the filter\", k));\n+            .map(|k| format!(\"*{k}* to restore the filter\"));\n         let not_first_state = \"*esc* to go back\".to_string();\n         let help = \"*?* for help\".to_string();\n         let no_verb = \"a space then a verb\".to_string();\n         let all_files_hidden = verb_store\n             .key_desc_of_internal(Internal::toggle_hidden)\n-            .map(|k| format!(\"Some files are hidden, use *{}* to display them\", k));\n+            .map(|k| format!(\"Some files are hidden, use *{k}* to display them\"));\n         let all_files_git_ignored = verb_store\n             .key_desc_of_internal(Internal::toggle_git_ignore)\n-            .map(|k| format!(\"Some files are git-ignored, use *{}* to display them\", k));\n+            .map(|k| format!(\"Some files are git-ignored, use *{k}* to display them\"));\n         Self {\n             tree_top_focus,\n             tree_dir_focus,\ndiff --git a/src/browser/browser_state.rs b/src/browser/browser_state.rs\n--- a/src/browser/browser_state.rs\n+++ b/src/browser/browser_state.rs\n@@ -158,7 +158,7 @@ impl BrowserState {\n                     info!(\"open returned with exit_status {:?}\", exit_status);\n                     Ok(CmdResult::Keep)\n                 }\n-                Err(e) => Ok(CmdResult::error(format!(\"{:?}\", e))),\n+                Err(e) => Ok(CmdResult::error(format!(\"{e:?}\"))),\n             }\n         }\n     }\ndiff --git a/src/browser/browser_state.rs b/src/browser/browser_state.rs\n--- a/src/browser/browser_state.rs\n+++ b/src/browser/browser_state.rs\n@@ -436,7 +436,7 @@ impl PanelState for BrowserState {\n             }\n             Internal::page_up => {\n                 let tree = self.displayed_tree_mut();\n-                if !tree.try_scroll(page_height as i32 * -1, page_height) {\n+                if !tree.try_scroll(-(page_height as i32), page_height) {\n                     tree.try_select_first();\n                 }\n                 CmdResult::Keep\ndiff --git a/src/browser/browser_state.rs b/src/browser/browser_state.rs\n--- a/src/browser/browser_state.rs\n+++ b/src/browser/browser_state.rs\n@@ -501,7 +501,7 @@ impl PanelState for BrowserState {\n                         con,\n                     )\n                 } else {\n-                    CmdResult::error(format!(\"{:?} has no parent\", root))\n+                    CmdResult::error(format!(\"{root:?} has no parent\"))\n                 }\n             }\n             Internal::root_down => {\ndiff --git a/src/browser/browser_state.rs b/src/browser/browser_state.rs\n--- a/src/browser/browser_state.rs\n+++ b/src/browser/browser_state.rs\n@@ -615,18 +615,16 @@ impl PanelState for BrowserState {\n         con: &AppContext,\n     ) -> Status {\n         let tree = self.displayed_tree();\n-        if tree.is_empty() {\n-            if tree.build_report.hidden_count > 0 {\n-                let mut parts = Vec::new();\n-                if let Some(md) = con.standard_status.all_files_hidden.clone() {\n-                    parts.push(md);\n-                }\n-                if let Some(md) = con.standard_status.all_files_git_ignored.clone() {\n-                    parts.push(md);\n-                }\n-                if !parts.is_empty() {\n-                    return Status::from_error(parts.join(\". \"));\n-                }\n+        if tree.is_empty() && tree.build_report.hidden_count > 0 {\n+            let mut parts = Vec::new();\n+            if let Some(md) = con.standard_status.all_files_hidden.clone() {\n+                parts.push(md);\n+            }\n+            if let Some(md) = con.standard_status.all_files_git_ignored.clone() {\n+                parts.push(md);\n+            }\n+            if !parts.is_empty() {\n+                return Status::from_error(parts.join(\". \"));\n             }\n         }\n         let mut ssb = con.standard_status.builder(\ndiff --git a/src/cli/args.rs b/src/cli/args.rs\n--- a/src/cli/args.rs\n+++ b/src/cli/args.rs\n@@ -209,7 +209,7 @@ impl FromStr for CliShellInstallState {\n             \"installed\" => Ok(Self::Installed),\n             _ => Err(\n                 // not supposed to happen because claps check the values\n-                format!(\"unexpected install state: {:?}\", state)\n+                format!(\"unexpected install state: {state:?}\")\n             ),\n         }\n     }\ndiff --git a/src/command/panel_input.rs b/src/command/panel_input.rs\n--- a/src/command/panel_input.rs\n+++ b/src/command/panel_input.rs\n@@ -364,10 +364,8 @@ impl PanelInput {\n                 }\n \n                 // input field management\n-                if mode == Mode::Input {\n-                    if self.input_field.apply_timed_event(timed_event) {\n-                        return Command::from_raw(self.input_field.get_content(), false);\n-                    }\n+                if mode == Mode::Input && self.input_field.apply_timed_event(timed_event) {\n+                    return Command::from_raw(self.input_field.get_content(), false);\n                 }\n                 Command::None\n             }\ndiff --git a/src/command/parts.rs b/src/command/parts.rs\n--- a/src/command/parts.rs\n+++ b/src/command/parts.rs\n@@ -19,7 +19,7 @@ impl fmt::Display for CommandParts {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.raw_pattern)?;\n         if let Some(invocation) = &self.verb_invocation {\n-            write!(f, \"{}\", invocation)?;\n+            write!(f, \"{invocation}\")?;\n         }\n         Ok(())\n     }\ndiff --git a/src/conf/default.rs b/src/conf/default.rs\n--- a/src/conf/default.rs\n+++ b/src/conf/default.rs\n@@ -15,7 +15,7 @@ pub fn write_default_conf_in(dir: &Path) -> Result<(), io::Error> {\n         if !dir.is_dir() {\n             return Err(io::Error::new(\n                 io::ErrorKind::Other,\n-                format!(\"{:?} isn't a directory\", dir),\n+                format!(\"{dir:?} isn't a directory\"),\n             ));\n         }\n     } else {\ndiff --git a/src/conf/verb_conf.rs b/src/conf/verb_conf.rs\n--- a/src/conf/verb_conf.rs\n+++ b/src/conf/verb_conf.rs\n@@ -170,7 +170,7 @@ impl VerbConf {\n             None => SelectionType::Any,\n             Some(s) => {\n                 return Err(ConfError::InvalidVerbConf {\n-                    details: format!(\"{:?} isn't a valid value of apply_to\", s),\n+                    details: format!(\"{s:?} isn't a valid value of apply_to\"),\n                 });\n             }\n         };\ndiff --git a/src/display/col.rs b/src/display/col.rs\n--- a/src/display/col.rs\n+++ b/src/display/col.rs\n@@ -89,7 +89,7 @@ impl FromStr for Col {\n             \"staged\" => Ok(Self::Staged),\n             \"n\" | \"name\" => Ok(Self::Name),\n             _ => Err(ConfError::InvalidCols {\n-                details: format!(\"column not recognized : {}\", s),\n+                details: format!(\"column not recognized : {s}\"),\n             }),\n         }\n     }\ndiff --git a/src/display/col.rs b/src/display/col.rs\n--- a/src/display/col.rs\n+++ b/src/display/col.rs\n@@ -161,7 +161,7 @@ pub fn parse_cols(arr: &Vec<String>) -> Result<Cols, ConfError> {\n     for (idx, s) in arr.iter().enumerate() {\n         if idx >= COLS_COUNT {\n             return Err(ConfError::InvalidCols {\n-                details: format!(\"too long: {:?}\", arr),\n+                details: format!(\"too long: {arr:?}\"),\n             });\n         }\n         // we swap the cols, to ensure both keeps being present\ndiff --git a/src/display/displayable_tree.rs b/src/display/displayable_tree.rs\n--- a/src/display/displayable_tree.rs\n+++ b/src/display/displayable_tree.rs\n@@ -185,7 +185,7 @@ impl<'a, 's, 't> DisplayableTree<'a, 's, 't> {\n                 sparse_style,\n                 if s.is_sparse() && line.is_file() { 's' } else { ' ' },\n             )?;\n-            cw.queue_g_string(label_style, format!(\"{:<10}\", pb))?;\n+            cw.queue_g_string(label_style, format!(\"{pb:<10}\"))?;\n             1\n         } else {\n             16\ndiff --git a/src/display/displayable_tree.rs b/src/display/displayable_tree.rs\n--- a/src/display/displayable_tree.rs\n+++ b/src/display/displayable_tree.rs\n@@ -258,12 +258,10 @@ impl<'a, 's, 't> DisplayableTree<'a, 's, 't> {\n                         } else {\n                             \"\u2502  \"\n                         }\n+                    } else if staged {\n+                        \"\u2514\u25cd\u2500\"\n                     } else {\n-                        if staged {\n-                            \"\u2514\u25cd\u2500\"\n-                        } else {\n-                            \"\u2514\u2500\u2500\"\n-                        }\n+                        \"\u2514\u2500\u2500\"\n                     }\n                 } else {\n                     \"   \"\ndiff --git a/src/display/status_line.rs b/src/display/status_line.rs\n--- a/src/display/status_line.rs\n+++ b/src/display/status_line.rs\n@@ -24,7 +24,7 @@ pub fn write(\n     screen.goto(w, area.left, y)?;\n     let mut x = area.left;\n     if let Some(pending_task) = task {\n-        let pending_task = format!(\" {}\u2026 \", pending_task);\n+        let pending_task = format!(\" {pending_task}\u2026 \");\n         x += pending_task.chars().count() as u16;\n         panel_skin.styles.status_job.queue(w, pending_task)?;\n     }\ndiff --git a/src/errors.rs b/src/errors.rs\n--- a/src/errors.rs\n+++ b/src/errors.rs\n@@ -43,12 +43,7 @@ impl ShellInstallError {\n             Self::Io { source, .. } => {\n                 if source.kind() == io::ErrorKind::PermissionDenied {\n                     true\n-                } else if cfg!(windows) && source.raw_os_error().unwrap_or(0) == 1314 {\n-                    // https://learn.microsoft.com/en-us/windows/win32/debug/system-error-codes--1300-1699-\n-                    true\n-                } else {\n-                    false\n-                }\n+                } else { cfg!(windows) && source.raw_os_error().unwrap_or(0) == 1314 }\n             }\n         }\n     }\ndiff --git a/src/filesystems/filesystems_state.rs b/src/filesystems/filesystems_state.rs\n--- a/src/filesystems/filesystems_state.rs\n+++ b/src/filesystems/filesystems_state.rs\n@@ -420,7 +420,7 @@ impl PanelState for FilesystemState {\n                             let pb = ProgressBar::new(stats.use_share() as f32, w_use_bar);\n                             let mut bar_style = styles.default.clone();\n                             bar_style.set_bg(share_color);\n-                            cw.queue_g_string(&bar_style, format!(\"{:<width$}\", pb, width=w_use_bar))?;\n+                            cw.queue_g_string(&bar_style, format!(\"{pb:<w_use_bar$}\"))?;\n                         }\n                         cw.queue_char(border_style, '\u2502')?;\n                     }\ndiff --git a/src/filesystems/mount_space_display.rs b/src/filesystems/mount_space_display.rs\n--- a/src/filesystems/mount_space_display.rs\n+++ b/src/filesystems/mount_space_display.rs\n@@ -112,7 +112,7 @@ impl<'m, 's> MountSpaceDisplay<'m, 's> {\n                 }\n                 cw.queue_unstyled_char(' ')?;\n                 cw.w.queue(SetBackgroundColor(share_color))?;\n-                cw.queue_unstyled_g_string(format!(\"{:<width$}\", pb, width = w_bar))?;\n+                cw.queue_unstyled_g_string(format!(\"{pb:<w_bar$}\"))?;\n             }\n             if let Some(bg_color) = bg {\n                 cw.w.queue(SetBackgroundColor(bg_color))?;\ndiff --git a/src/help/help_state.rs b/src/help/help_state.rs\n--- a/src/help/help_state.rs\n+++ b/src/help/help_state.rs\n@@ -237,7 +237,7 @@ impl PanelState for HelpState {\n                     info!(\"open returned with exit_status {:?}\", exit_status);\n                     CmdResult::Keep\n                 }\n-                Err(e) => CmdResult::DisplayError(format!(\"{:?}\", e)),\n+                Err(e) => CmdResult::DisplayError(format!(\"{e:?}\")),\n             },\n             // FIXME check we can't use the generic one\n             open_leave => {\ndiff --git a/src/hex/hex_view.rs b/src/hex/hex_view.rs\n--- a/src/hex/hex_view.rs\n+++ b/src/hex/hex_view.rs\n@@ -163,12 +163,12 @@ impl HexView {\n                     cw.queue_g_string(\n                         &styles.preview_line_number,\n                         match (addresses_len, margin_around_adresses) {\n-                            (4, false) => format!(\"{:04x}\", addr),\n-                            (6, false) => format!(\"{:06x}\", addr),\n-                            (_, false) => format!(\"{:08x}\", addr),\n-                            (4, true) => format!(\" {:04x} \", addr),\n-                            (6, true) => format!(\" {:06x} \", addr),\n-                            (_, true) => format!(\" {:08x} \", addr),\n+                            (4, false) => format!(\"{addr:04x}\"),\n+                            (6, false) => format!(\"{addr:06x}\"),\n+                            (_, false) => format!(\"{addr:08x}\"),\n+                            (4, true) => format!(\" {addr:04x} \"),\n+                            (6, true) => format!(\" {addr:06x} \"),\n+                            (_, true) => format!(\" {addr:08x} \"),\n                         },\n                     )?;\n                 }\ndiff --git a/src/hex/hex_view.rs b/src/hex/hex_view.rs\n--- a/src/hex/hex_view.rs\n+++ b/src/hex/hex_view.rs\n@@ -183,9 +183,9 @@ impl HexView {\n                     if let Some(b) = line.bytes.get(x) {\n                         let byte = Byte::from(*b);\n                         if inter_hex {\n-                            cw.queue_g_string(byte.style(styles), format!(\"{:02x} \", b))?;\n+                            cw.queue_g_string(byte.style(styles), format!(\"{b:02x} \"))?;\n                         } else {\n-                            cw.queue_g_string(byte.style(styles), format!(\"{:02x}\", b))?;\n+                            cw.queue_g_string(byte.style(styles), format!(\"{b:02x}\"))?;\n                         }\n                     } else {\n                         cw.queue_str(&styles.default, if inter_hex { \"   \" } else { \"  \" })?;\ndiff --git a/src/hex/hex_view.rs b/src/hex/hex_view.rs\n--- a/src/hex/hex_view.rs\n+++ b/src/hex/hex_view.rs\n@@ -228,9 +228,9 @@ impl HexView {\n             return Ok(());\n         }\n         if s.len() + \" bytes\".len() < width {\n-            s = format!(\"{} bytes\", s);\n+            s = format!(\"{s} bytes\");\n         } else if s.len() + 1 < width {\n-            s = format!(\"{}b\", s);\n+            s = format!(\"{s}b\");\n         }\n         w.queue(cursor::MoveTo(\n             area.left + area.width - s.len() as u16,\ndiff --git a/src/kitty/mod.rs b/src/kitty/mod.rs\n--- a/src/kitty/mod.rs\n+++ b/src/kitty/mod.rs\n@@ -125,7 +125,7 @@ impl KittyManager {\n             } else {\n                 let id = image.image_id;\n                 debug!(\"erase kitty image {}\", id);\n-                write!(w, \"\\u{1b}_Ga=d,d=I,i={}\\u{1b}\\\\\", id)?;\n+                write!(w, \"\\u{1b}_Ga=d,d=I,i={id}\\u{1b}\\\\\")?;\n             }\n         }\n         self.rendered_images = kept_images;\ndiff --git a/src/launchable.rs b/src/launchable.rs\n--- a/src/launchable.rs\n+++ b/src/launchable.rs\n@@ -122,7 +122,7 @@ impl Launchable {\n     ) -> Result<(), ProgramError> {\n         match self {\n             Launchable::Printer { to_print } => {\n-                println!(\"{}\", to_print);\n+                println!(\"{to_print}\");\n                 Ok(())\n             }\n             Launchable::TreePrinter { tree, skin, ext_colors, width, height } => {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -9,14 +9,14 @@ fn main() {\n             if let Err(e) = launchable.execute(None) {\n                 warn!(\"Failed to launch {:?}\", &launchable);\n                 warn!(\"Error: {:?}\", e);\n-                eprintln!(\"{}\", e);\n+                eprintln!(\"{e}\");\n             }\n         }\n         Ok(None) => {}\n         Err(e) => {\n             // this usually happens when the passed path isn't of a directory\n             warn!(\"Error: {}\", e);\n-            eprintln!(\"{}\", e);\n+            eprintln!(\"{e}\");\n         }\n     };\n     log_mem(Level::Info);\ndiff --git a/src/net/client.rs b/src/net/client.rs\n--- a/src/net/client.rs\n+++ b/src/net/client.rs\n@@ -35,7 +35,7 @@ impl Client {\n                 Ok(answer) => {\n                     debug!(\"got an answer: {:?}\", &answer);\n                     if let Message::Root(root) = answer {\n-                        println!(\"{}\", root);\n+                        println!(\"{root}\");\n                     }\n                 }\n                 Err(e) => {\ndiff --git a/src/net/message.rs b/src/net/message.rs\n--- a/src/net/message.rs\n+++ b/src/net/message.rs\n@@ -50,7 +50,7 @@ impl Message {\n         match self {\n             Self::Command(c) => {\n                 writeln!(w, \"CMD\")?;\n-                writeln!(w, \"{}\", c)\n+                writeln!(w, \"{c}\")\n             }\n             Self::GetRoot => {\n                 writeln!(w, \"GET_ROOT\")\ndiff --git a/src/net/message.rs b/src/net/message.rs\n--- a/src/net/message.rs\n+++ b/src/net/message.rs\n@@ -60,12 +60,12 @@ impl Message {\n             }\n             Self::Root(path) => {\n                 writeln!(w, \"ROOT\")?;\n-                writeln!(w, \"{}\", path)\n+                writeln!(w, \"{path}\")\n             }\n             Self::Sequence(Sequence { separator, raw }) => {\n                 writeln!(w, \"SEQ\")?;\n-                writeln!(w, \"{}\", raw)?;\n-                writeln!(w, \"{}\", separator)\n+                writeln!(w, \"{raw}\")?;\n+                writeln!(w, \"{separator}\")\n             }\n         }\n     }\ndiff --git a/src/net/mod.rs b/src/net/mod.rs\n--- a/src/net/mod.rs\n+++ b/src/net/mod.rs\n@@ -9,5 +9,5 @@ pub use {\n };\n \n pub fn socket_file_path(server_name: &str) -> String {\n-    format!(\"/tmp/broot-server-{}.sock\", server_name)\n+    format!(\"/tmp/broot-server-{server_name}.sock\")\n }\ndiff --git a/src/path/from.rs b/src/path/from.rs\n--- a/src/path/from.rs\n+++ b/src/path/from.rs\n@@ -79,6 +79,6 @@ pub fn do_exec_replacement(\n             repl.to_string()\n         }\n     } else {\n-        format!(\"{{{}}}\", name)\n+        format!(\"{{{name}}}\")\n     }\n }\ndiff --git a/src/path/special_path.rs b/src/path/special_path.rs\n--- a/src/path/special_path.rs\n+++ b/src/path/special_path.rs\n@@ -44,8 +44,7 @@ impl<'de> Deserialize<'de> for SpecialHandling {\n             \"hide\" => Ok(SpecialHandling::Hide),\n             \"nohide\" => Ok(SpecialHandling::NoHide),   // nohide or no-hide\n             _ => Err(D::Error::custom(format!(\n-                \"unrecognized special handling: {:?}\",\n-                s\n+                \"unrecognized special handling: {s:?}\"\n             ))),\n         }\n     }\ndiff --git a/src/path/special_path.rs b/src/path/special_path.rs\n--- a/src/path/special_path.rs\n+++ b/src/path/special_path.rs\n@@ -57,7 +56,7 @@ impl<'de> Deserialize<'de> for Glob {\n     {\n         let s = String::deserialize(deserializer)?;\n         glob::Pattern::new(&s)\n-            .map_err(|e| D::Error::custom(format!(\"invalid glob pattern {:?} : {:?}\", s, e)))\n+            .map_err(|e| D::Error::custom(format!(\"invalid glob pattern {s:?} : {e:?}\")))\n             .map(|pattern| Glob { pattern })\n     }\n }\ndiff --git a/src/pattern/search_mode.rs b/src/pattern/search_mode.rs\n--- a/src/pattern/search_mode.rs\n+++ b/src/pattern/search_mode.rs\n@@ -83,7 +83,7 @@ impl SearchMode {\n         con\n             .search_modes\n             .key(self)\n-            .map_or_else(|| \"\".to_string(), |k| format!(\"{}/\", k))\n+            .map_or_else(|| \"\".to_string(), |k| format!(\"{k}/\"))\n     }\n     pub fn object(self) -> SearchObject {\n         match self {\ndiff --git a/src/pattern/search_mode.rs b/src/pattern/search_mode.rs\n--- a/src/pattern/search_mode.rs\n+++ b/src/pattern/search_mode.rs\n@@ -140,7 +140,7 @@ impl SearchModeMapEntry {\n                 \"path\" => search_objects.push(SearchObject::Path),\n                 _ => {\n                     return Err(ConfError::InvalidSearchMode {\n-                        details: format!(\"{:?} not understood in search mode definition\", t),\n+                        details: format!(\"{t:?} not understood in search mode definition\"),\n                     });\n                 }\n             }\ndiff --git a/src/pattern/search_mode.rs b/src/pattern/search_mode.rs\n--- a/src/pattern/search_mode.rs\n+++ b/src/pattern/search_mode.rs\n@@ -247,7 +247,7 @@ impl SearchModeMap {\n         }\n         Err(PatternError::InvalidMode {\n             mode: if let Some(key) = key {\n-                format!(\"{}/\", key)\n+                format!(\"{key}/\")\n             } else {\n                 \"\".to_string()\n             },\ndiff --git a/src/pattern/tok_pattern.rs b/src/pattern/tok_pattern.rs\n--- a/src/pattern/tok_pattern.rs\n+++ b/src/pattern/tok_pattern.rs\n@@ -51,12 +51,10 @@ impl TokPattern {\n                 .filter(|s| !s.is_empty())\n                 .map(norm_chars)\n                 .collect()\n+        } else if pattern.is_empty() {\n+            Vec::new()\n         } else {\n-            if pattern.is_empty() {\n-                Vec::new()\n-            } else {\n-                vec![norm_chars(pattern)]\n-            }\n+            vec![norm_chars(pattern)]\n         };\n         // we sort the tokens from biggest to smallest\n         // because the current algorithm stops at the\ndiff --git a/src/preview/dir_view.rs b/src/preview/dir_view.rs\n--- a/src/preview/dir_view.rs\n+++ b/src/preview/dir_view.rs\n@@ -90,7 +90,7 @@ impl DirView {\n             return Ok(());\n         }\n         if s.len() + \"lines: \".len() < width {\n-            s = format!(\"entries: {}\", s);\n+            s = format!(\"entries: {s}\");\n         }\n         w.queue(cursor::MoveTo(\n             area.left + area.width - s.len() as u16,\ndiff --git a/src/preview/preview_state.rs b/src/preview/preview_state.rs\n--- a/src/preview/preview_state.rs\n+++ b/src/preview/preview_state.rs\n@@ -81,7 +81,7 @@ impl PreviewState {\n             }\n             Err(e) => {\n                 CmdResult::DisplayError(\n-                    format!(\"Can't display as {:?} : {:?}\", mode, e)\n+                    format!(\"Can't display as {mode:?} : {e:?}\")\n                 )\n             }\n         })\ndiff --git a/src/preview/preview_state.rs b/src/preview/preview_state.rs\n--- a/src/preview/preview_state.rs\n+++ b/src/preview/preview_state.rs\n@@ -134,10 +134,8 @@ impl PanelState for PreviewState {\n                 }\n                 self.removed_pattern = filtered_preview.pattern();\n             }\n-        } else {\n-            if !self.preview.is_filterable() {\n-                return Ok(CmdResult::error(\"this preview can't be searched\"));\n-            }\n+        } else if !self.preview.is_filterable() {\n+            return Ok(CmdResult::error(\"this preview can't be searched\"));\n         }\n         self.pending_pattern = pat;\n         Ok(CmdResult::Keep)\ndiff --git a/src/print.rs b/src/print.rs\n--- a/src/print.rs\n+++ b/src/print.rs\n@@ -47,7 +47,7 @@ fn relativize_path(path: &Path, con: &AppContext) -> io::Result<String> {\n         None => {\n             return Err(io::Error::new(\n                 io::ErrorKind::Other,\n-                format!(\"Cannot relativize {:?}\", path), // does this happen ? how ?\n+                format!(\"Cannot relativize {path:?}\"), // does this happen ? how ?\n             ));\n         }\n         Some(p) => p,\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -104,7 +104,7 @@ impl ShellInstall {\n         info!(\"Shell installation state: {install_state:?}\");\n         if self.force_install {\n             self.skin.print_text(\"You requested a clean (re)install.\");\n-            ShellInstallState::remove(&self)?;\n+            ShellInstallState::remove(self)?;\n         } else {\n             match install_state {\n                 ShellInstallState::Refused => {\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -129,7 +129,7 @@ impl ShellInstall {\n             // even if the installation isn't really complete (for example\n             // when no bash file was found), we don't want to ask the user\n             // again, we'll assume it's done\n-            ShellInstallState::UpToDate.write(&self)?;\n+            ShellInstallState::UpToDate.write(self)?;\n         }\n         debug!(\"Starting install\");\n         bash::install(self)?;\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -184,7 +184,7 @@ impl ShellInstall {\n         debug!(\"proceed: {:?}\", proceed);\n         self.authorization = Some(proceed);\n         if !proceed {\n-            ShellInstallState::Refused.write(&self)?;\n+            ShellInstallState::Refused.write(self)?;\n             self.skin.print_text(MD_INSTALL_CANCELLED);\n         }\n         Ok(proceed)\ndiff --git a/src/syntactic/syntactic_view.rs b/src/syntactic/syntactic_view.rs\n--- a/src/syntactic/syntactic_view.rs\n+++ b/src/syntactic/syntactic_view.rs\n@@ -436,7 +436,7 @@ impl SyntacticView {\n             return Ok(());\n         }\n         if s.len() + \"lines: \".len() < width {\n-            s = format!(\"lines: {}\", s);\n+            s = format!(\"lines: {s}\");\n         }\n         w.queue(cursor::MoveTo(\n             area.left + area.width - s.len() as u16,\ndiff --git a/src/tree/tree.rs b/src/tree/tree.rs\n--- a/src/tree/tree.rs\n+++ b/src/tree/tree.rs\n@@ -56,10 +56,8 @@ impl Tree {\n         let selected_path = self.selected_line().path.to_path_buf();\n         mem::swap(&mut self.lines, &mut tree.lines);\n         self.scroll = 0;\n-        if !self.try_select_path(&selected_path) {\n-            if self.selection >= self.lines.len() {\n-                self.selection = 0;\n-            }\n+        if !self.try_select_path(&selected_path) && self.selection >= self.lines.len() {\n+            self.selection = 0;\n         }\n         self.make_selection_visible(page_height);\n         Ok(())\ndiff --git a/src/tree/tree.rs b/src/tree/tree.rs\n--- a/src/tree/tree.rs\n+++ b/src/tree/tree.rs\n@@ -267,11 +265,9 @@ impl Tree {\n     /// (works if y+scroll falls on a selectable line)\n     pub fn try_select_y(&mut self, y: usize) -> bool {\n         let y = y + self.scroll;\n-        if y < self.lines.len() {\n-            if self.lines[y].is_selectable() {\n-                self.selection = y;\n-                return true;\n-            }\n+        if y < self.lines.len() && self.lines[y].is_selectable() {\n+            self.selection = y;\n+            return true;\n         }\n         false\n     }\ndiff --git a/src/tree/tree_options.rs b/src/tree/tree_options.rs\n--- a/src/tree/tree_options.rs\n+++ b/src/tree/tree_options.rs\n@@ -81,7 +81,7 @@ impl TreeOptions {\n     /// change tree options according to configuration\n     pub fn apply_config(&mut self, config: &Conf) -> Result<(), ConfError> {\n         if let Some(default_flags) = &config.default_flags {\n-            let flags_args = format!(\"-{}\", default_flags);\n+            let flags_args = format!(\"-{default_flags}\");\n             let conf_matches = Args::try_parse_from(vec![\"broot\", &flags_args])\n                 .map_err(|_| ConfError::InvalidDefaultFlags {\n                     flags: default_flags.to_string()\ndiff --git a/src/tree_build/bline.rs b/src/tree_build/bline.rs\n--- a/src/tree_build/bline.rs\n+++ b/src/tree_build/bline.rs\n@@ -69,7 +69,7 @@ impl BLine {\n             }))\n         } else {\n             Err(TreeBuildError::FileNotFound {\n-                path: format!(\"{:?}\", path),\n+                path: format!(\"{path:?}\"),\n             })\n         }\n     }\ndiff --git a/src/verb/exec_pattern.rs b/src/verb/exec_pattern.rs\n--- a/src/verb/exec_pattern.rs\n+++ b/src/verb/exec_pattern.rs\n@@ -123,9 +123,9 @@ impl fmt::Display for ExecPattern {\n                         write!(f, \" \")?;\n                     }\n                     if s.contains(' ') {\n-                        write!(f, \"\\\"{}\\\"\", s)?;\n+                        write!(f, \"\\\"{s}\\\"\")?;\n                     } else {\n-                        write!(f, \"{}\", s)?;\n+                        write!(f, \"{s}\")?;\n                     }\n                 }\n                 Ok(())\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -126,7 +126,7 @@ impl<'b> ExecutionStringBuilder<'b> {\n                 sel.map(|s| s.path)\n                 .and_then(|path| path.extension())\n                 .and_then(|oss| oss.to_str())\n-                .map(|ext| format!(\".{}\", ext))\n+                .map(|ext| format!(\".{ext}\"))\n                 .or_else(|| Some(\"\".to_string()))\n             }\n             \"directory\" => sel.map(|s| path::closest_dir(s.path))\ndiff --git a/src/verb/internal_execution.rs b/src/verb/internal_execution.rs\n--- a/src/verb/internal_execution.rs\n+++ b/src/verb/internal_execution.rs\n@@ -55,7 +55,7 @@ impl fmt::Display for InternalExecution {\n             write!(f, \"!\")?;\n         }\n         if let Some(arg) = &self.arg {\n-            write!(f, \" {}\", arg)?;\n+            write!(f, \" {arg}\")?;\n         }\n         Ok(())\n     }\ndiff --git a/src/verb/invocation_parser.rs b/src/verb/invocation_parser.rs\n--- a/src/verb/invocation_parser.rs\n+++ b/src/verb/invocation_parser.rs\n@@ -43,7 +43,7 @@ impl InvocationParser {\n         let mut arg_defs = Vec::new();\n         if let Some(args) = &invocation_pattern.args {\n             let spec = GROUP.replace_all(args, r\"(?P<$1>.+)\");\n-            let spec = format!(\"^{}$\", spec);\n+            let spec = format!(\"^{spec}$\");\n             args_parser = match Regex::new(&spec) {\n                 Ok(regex) => Some(regex),\n                 Err(_) => {\ndiff --git a/src/verb/verb_store.rs b/src/verb/verb_store.rs\n--- a/src/verb/verb_store.rs\n+++ b/src/verb/verb_store.rs\n@@ -95,10 +95,8 @@ impl VerbStore {\n                     continue;\n                 }\n             }\n-            if !verb.file_extensions.is_empty() {\n-                if !extension.map_or(false, |ext| verb.file_extensions.iter().any(|ve| ve == ext)) {\n-                    continue;\n-                }\n+            if !verb.file_extensions.is_empty() && !extension.map_or(false, |ext| verb.file_extensions.iter().any(|ve| ve == ext)) {\n+                continue;\n             }\n             for name in &verb.names {\n                 if name.starts_with(prefix) {\n",
        "test_patch": "diff --git a/src/command/parts.rs b/src/command/parts.rs\n--- a/src/command/parts.rs\n+++ b/src/command/parts.rs\n@@ -171,7 +171,7 @@ mod test_command_parts {\n         let right = CommandParts {\n             raw_pattern: raw_pattern.to_string(),\n             pattern,\n-            verb_invocation: verb_invocation.map(|s| VerbInvocation::from(s)),\n+            verb_invocation: verb_invocation.map(VerbInvocation::from),\n         };\n         dbg!(&right);\n         assert_eq!(left, right);\ndiff --git a/src/path/normalize.rs b/src/path/normalize.rs\n--- a/src/path/normalize.rs\n+++ b/src/path/normalize.rs\n@@ -38,7 +38,7 @@ mod path_normalize_tests {\n     use super::normalize_path;\n \n     fn check(before: &str, after: &str) {\n-        println!(\"-----------------\\nnormalizing {:?}\", before);\n+        println!(\"-----------------\\nnormalizing {before:?}\");\n         // As seen by Stargateur, the test here doesn't work on Windows\n         //\n         // There are two problems, at least:\ndiff --git a/src/path/normalize.rs b/src/path/normalize.rs\n--- a/src/path/normalize.rs\n+++ b/src/path/normalize.rs\n@@ -46,7 +46,7 @@ mod path_normalize_tests {\n         // * strings used for test use the '/' separator. This is a test problem\n         // * we do a \"end with '/'\" test in the tested function. This might\n         //   lead to suboptimal interaction on windows\n-        assert_eq!(normalize_path(before.to_string()).to_string_lossy(), after);\n+        assert_eq!(normalize_path(before).to_string_lossy(), after);\n     }\n \n     #[test]\ndiff --git a/src/pattern/fuzzy_pattern.rs b/src/pattern/fuzzy_pattern.rs\n--- a/src/pattern/fuzzy_pattern.rs\n+++ b/src/pattern/fuzzy_pattern.rs\n@@ -298,9 +298,7 @@ mod fuzzy_pattern_tests {\n             let score = fp.find(name).map(|m| m.score);\n             assert!(\n                 score < last_score,\n-                \"score({:?}) should be lower than score({:?}) (using find)\",\n-                name,\n-                last_name\n+                \"score({name:?}) should be lower than score({last_name:?}) (using find)\"\n             );\n             last_name = name;\n             last_score = score;\ndiff --git a/src/pattern/fuzzy_pattern.rs b/src/pattern/fuzzy_pattern.rs\n--- a/src/pattern/fuzzy_pattern.rs\n+++ b/src/pattern/fuzzy_pattern.rs\n@@ -360,27 +358,23 @@ mod fuzzy_pattern_tests {\n             for pattern in arr.iter() {\n                 let fp = FuzzyPattern::from(pattern);\n                 for name in arr.iter() {\n-                    println!(\"looking for pattern {:?} in name {:?}\", pattern, name);\n+                    println!(\"looking for pattern {pattern:?} in name {name:?}\");\n                     assert!(fp.find(name).unwrap().score > 0);\n                 }\n             }\n         }\n-        check_equivalences_in(&vec![\n-            \"aB\",\n+        check_equivalences_in(&[\"aB\",\n             \"ab\",\n             \"\u00e0b\",\n-            \"\u00e2B\",\n-        ]);\n+            \"\u00e2B\"]);\n         let c12 = \"Comunica\u00e7\u00f5es\";\n         assert_eq!(c12.len(), 14);\n         assert_eq!(c12.chars().count(), 12);\n         let c14 = \"Comunicac\u0327o\u0303es\";\n         assert_eq!(c14.len(), 16);\n         assert_eq!(c14.chars().count(), 14);\n-        check_equivalences_in(&vec![\n-            \"comunicacoes\",\n+        check_equivalences_in(&[\"comunicacoes\",\n             c12,\n-            c14,\n-        ]);\n+            c14]);\n     }\n }\ndiff --git a/src/pattern/tok_pattern.rs b/src/pattern/tok_pattern.rs\n--- a/src/pattern/tok_pattern.rs\n+++ b/src/pattern/tok_pattern.rs\n@@ -163,7 +161,7 @@ mod tok_pattern_tests {\n \n     /// check position of the match of the pattern in name\n     fn check_pos(pattern: &str, name: &str, pos: &str) {\n-        println!(\"checking pattern={:?} name={:?}\", pattern, name);\n+        println!(\"checking pattern={pattern:?} name={name:?}\");\n         let pat = TokPattern::new(pattern);\n         let match_pos = pat.find(name).unwrap().pos;\n         let target_pos: Pos = pos.chars()\n",
        "problem_statement": "Dangerously Incorrect rm verb statusline\nIf the file or directory selection is changed _after_ typing the `rm` verb, the statusline changes to give the incorrect instruction \"Hit enter to open file\" or \"Hit enter to focus\", when in-fact hitting enter will delete the file or directory.\r\n\r\nThis does not appear to be unique to the rm verb, it's just particularly dangerous with the rm verb. I'm not sure if the better solution is to fix the statusline, or change the behaviour... I'm leaning towards the latter, it's slightly less convenient but safer.\n",
        "hints_text": "",
        "created_at": "2023-02-07T20:05:59Z",
        "version": "1.20"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 924,
        "instance_id": "Canop__broot-924",
        "issue_numbers": [
            "919"
        ],
        "base_commit": "33018f4b7a885d08f4b18cc184d36e81099a20cc",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2018,9 +2018,9 @@ dependencies = [\n \n [[package]]\n name = \"splitty\"\n-version = \"1.0.1\"\n+version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8dae68aa5bd5dc2d3a2137b0f6bcdd8255dce1983dc155fe0246572e179c9c3a\"\n+checksum = \"2db70a1e6827e4d71c655b606caf1346862c38ae52ab4f58c32635e7c7aedd67\"\n \n [[package]]\n name = \"str-buf\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -36,7 +36,7 @@ custom_error = \"1.6\"\n deser-hjson = \"2.2.3\"\n directories = \"4.0\"\n file-size = \"1.0.3\"\n-git2 = { version = \"0.14\", default-features = false }\n+git2 = { version = \"0.14\", default-features = false } # waiting for a good pure-rust alternative\n glob = \"0.3\"\n id-arena = \"2.2.1\"\n image = \"0.24\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -54,7 +54,7 @@ rustc-hash = \"1\"\n secular = { version = \"1.0\", features = [\"normalization\", \"bmp\"] }\n serde = { version = \"1.0\", features = [\"derive\"] }\n smallvec = \"1.11\" # version 2 is still alpha\n-splitty = \"1.0\"\n+splitty = \"1.0.2\"\n strict = \"0.1.4\"\n syntect = { package = \"syntect-no-panic\", version = \"4.6.1\" } # see issue #485\n tempfile = \"3.2\"\ndiff --git a/src/app/panel_state.rs b/src/app/panel_state.rs\n--- a/src/app/panel_state.rs\n+++ b/src/app/panel_state.rs\n@@ -668,7 +668,7 @@ pub trait PanelState {\n                     }\n                 };\n                 if let Some(pattern) = internal_exec.arg.as_ref() {\n-                    let line = exec_builder.string(pattern);\n+                    let line = exec_builder.string(pattern, con);\n                     verb_write(con, &line)?;\n                 } else {\n                     let line = input_invocation\ndiff --git a/src/app/panel_state.rs b/src/app/panel_state.rs\n--- a/src/app/panel_state.rs\n+++ b/src/app/panel_state.rs\n@@ -847,7 +847,7 @@ pub trait PanelState {\n                 None\n             },\n         );\n-        let sequence = exec_builder.sequence(&seq_ex.sequence, &cc.app.con.verb_store);\n+        let sequence = exec_builder.sequence(&seq_ex.sequence, &cc.app.con.verb_store, cc.app.con);\n         Ok(CmdResult::ExecuteSequence { sequence })\n     }\n \ndiff --git a/src/app/panel_state.rs b/src/app/panel_state.rs\n--- a/src/app/panel_state.rs\n+++ b/src/app/panel_state.rs\n@@ -1092,7 +1092,7 @@ pub trait PanelState {\n         verb: &Verb,\n         invocation: &VerbInvocation,\n         sel_info: SelInfo<'_>,\n-        _cc: &CmdContext,\n+        cc: &CmdContext,\n         app_state: &AppState,\n     ) -> Status {\n         if sel_info.count_paths() > 1 {\ndiff --git a/src/app/panel_state.rs b/src/app/panel_state.rs\n--- a/src/app/panel_state.rs\n+++ b/src/app/panel_state.rs\n@@ -1114,6 +1114,7 @@ pub trait PanelState {\n                     sel_info,\n                     app_state,\n                     invocation,\n+                    cc.app.con,\n                 ),\n                 false,\n             )\ndiff --git a/src/command/panel_input.rs b/src/command/panel_input.rs\n--- a/src/command/panel_input.rs\n+++ b/src/command/panel_input.rs\n@@ -449,7 +449,8 @@ impl PanelInput {\n                     app_state,\n                 );\n                 let verb_invocation = exec_builder.invocation_with_default(\n-                    &invocation_parser.invocation_pattern\n+                    &invocation_parser.invocation_pattern,\n+                    con,\n                 );\n                 let mut parts = parts;\n                 parts.verb_invocation = Some(verb_invocation);\ndiff --git a/src/terminal.rs b/src/terminal.rs\n--- a/src/terminal.rs\n+++ b/src/terminal.rs\n@@ -16,7 +16,7 @@ pub fn update_title(\n     con: &AppContext,\n ) {\n     if let Some(pattern) = &con.terminal_title_pattern {\n-        set_title(w, pattern, app_state);\n+        set_title(w, pattern, app_state, con);\n     }\n }\n \ndiff --git a/src/terminal.rs b/src/terminal.rs\n--- a/src/terminal.rs\n+++ b/src/terminal.rs\n@@ -24,12 +24,13 @@ fn set_title(\n     w: &mut W,\n     pattern: &ExecPattern,\n     app_state: &AppState,\n+    con: &AppContext,\n ) {\n     let builder = ExecutionStringBuilder::without_invocation(\n         SelInfo::from_path(&app_state.root),\n         app_state,\n     );\n-    let title = builder.shell_exec_string(pattern);\n+    let title = builder.shell_exec_string(pattern, con);\n     set_title_str(w, &title)\n }\n \ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -95,9 +95,13 @@ impl<'b> ExecutionStringBuilder<'b> {\n             }\n         }\n     }\n-    fn get_raw_capture_replacement(&self, ec: &Captures<'_>) -> Option<String> {\n+    fn get_raw_capture_replacement(\n+        &self,\n+        ec: &Captures<'_>,\n+        con: &AppContext,\n+    ) -> Option<String> {\n         self.get_raw_replacement(|sel| {\n-            self.get_raw_sel_capture_replacement(ec, sel)\n+            self.get_raw_sel_capture_replacement(ec, sel, con)\n         })\n     }\n     /// return the standard replacement (ie not one from the invocation)\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -105,10 +109,12 @@ impl<'b> ExecutionStringBuilder<'b> {\n         &self,\n         name: &str,\n         sel: Option<Selection<'_>>,\n+        con: &AppContext,\n     ) -> Option<String> {\n         debug!(\"repl name : {:?}\", name);\n         match name {\n             \"root\" => Some(path_to_string(self.root)),\n+            \"initial-root\" => Some(path_to_string(&con.initial_root)),\n             \"line\" => sel.map(|s| s.line.to_string()),\n             \"file\" => sel.map(|s| s.path)\n                 .map(path_to_string),\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -188,9 +194,10 @@ impl<'b> ExecutionStringBuilder<'b> {\n         &self,\n         ec: &Captures<'_>,\n         sel: Option<Selection<'_>>,\n+        con: &AppContext,\n     ) -> Option<String> {\n         let name = ec.get(1).unwrap().as_str();\n-        self.get_raw_sel_name_standard_replacement(name, sel)\n+        self.get_raw_sel_name_standard_replacement(name, sel, con)\n             .or_else(||{\n                 // it's not one of the standard group names, so we'll look\n                 // into the ones provided by the invocation pattern\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -216,8 +223,12 @@ impl<'b> ExecutionStringBuilder<'b> {\n             })\n     }\n     #[inline]\n-    fn get_capture_replacement(&self, ec: &Captures<'_>) -> String {\n-        self.get_raw_capture_replacement(ec)\n+    fn get_capture_replacement(\n+        &self,\n+        ec: &Captures<'_>,\n+        con: &AppContext,\n+    ) -> String {\n+        self.get_raw_capture_replacement(ec, con)\n             .unwrap_or_else(||\n                 if self.keep_groups { ec[0].to_string() } else { \"\".to_string() }\n             )\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -226,8 +237,9 @@ impl<'b> ExecutionStringBuilder<'b> {\n         &self,\n         ec: &Captures<'_>,\n         sel: Option<Selection<'_>>,\n+        con: &AppContext,\n     ) -> String {\n-        self.get_raw_sel_capture_replacement(ec, sel)\n+        self.get_raw_sel_capture_replacement(ec, sel, con)\n             .unwrap_or_else(||\n                 if self.keep_groups { ec[0].to_string() } else { \"\".to_string() }\n             )\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -239,6 +251,7 @@ impl<'b> ExecutionStringBuilder<'b> {\n     pub fn invocation_with_default(\n         &self,\n         verb_invocation: &VerbInvocation,\n+        con: &AppContext,\n     ) -> VerbInvocation {\n         VerbInvocation {\n             name: verb_invocation.name.clone(),\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -250,7 +263,7 @@ impl<'b> ExecutionStringBuilder<'b> {\n                             .map(|default_name| default_name.as_str())\n                             .and_then(|default_name|\n                                 self.get_raw_replacement(|sel|\n-                                    self.get_raw_sel_name_standard_replacement(default_name, sel)\n+                                    self.get_raw_sel_name_standard_replacement(default_name, sel, con)\n                                 )\n                             )\n                             .unwrap_or_default()\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -279,6 +292,7 @@ impl<'b> ExecutionStringBuilder<'b> {\n         &self,\n         sequence: &Sequence,\n         verb_store: &VerbStore,\n+        con: &AppContext,\n     ) -> Sequence {\n         let mut inputs = Vec::new();\n         for input in sequence.raw.split(&sequence.separator) {\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -297,9 +311,9 @@ impl<'b> ExecutionStringBuilder<'b> {\n                 })\n                 .map_or(false, |verb| verb.get_internal().is_none());\n             let input = if verb_is_external {\n-                self.shell_exec_string(&ExecPattern::from_string(input))\n+                self.shell_exec_string(&ExecPattern::from_string(input), con)\n             } else {\n-                self.string(input)\n+                self.string(input, con)\n             };\n             inputs.push(input);\n         }\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -312,11 +326,12 @@ impl<'b> ExecutionStringBuilder<'b> {\n     pub fn string(\n         &self,\n         pattern: &str,\n+        con: &AppContext,\n     ) -> String {\n         GROUP\n             .replace_all(\n                 pattern,\n-                |ec: &Captures<'_>| self.get_capture_replacement(ec),\n+                |ec: &Captures<'_>| self.get_capture_replacement(ec, con),\n             )\n             .to_string()\n     }\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -324,13 +339,14 @@ impl<'b> ExecutionStringBuilder<'b> {\n     pub fn path(\n         &self,\n         pattern: &str,\n+        con: &AppContext,\n     ) -> PathBuf {\n         path::path_from(\n             self.base_dir(),\n             path::PathAnchor::Unspecified,\n             &GROUP.replace_all(\n                 pattern,\n-                |ec: &Captures<'_>| self.get_capture_replacement(ec),\n+                |ec: &Captures<'_>| self.get_capture_replacement(ec, con),\n             )\n         )\n     }\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -338,12 +354,13 @@ impl<'b> ExecutionStringBuilder<'b> {\n     pub fn shell_exec_string(\n         &self,\n         exec_pattern: &ExecPattern,\n+        con: &AppContext,\n     ) -> String {\n         exec_pattern\n             .apply(&|s| {\n                 GROUP.replace_all(\n                     s,\n-                    |ec: &Captures<'_>| self.get_capture_replacement(ec),\n+                    |ec: &Captures<'_>| self.get_capture_replacement(ec, con),\n                 ).to_string()\n             })\n             .fix_paths()\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -356,12 +373,13 @@ impl<'b> ExecutionStringBuilder<'b> {\n         &self,\n         exec_pattern: &ExecPattern,\n         sel: Option<Selection<'_>>,\n+        con: &AppContext,\n     ) -> String {\n         exec_pattern\n             .apply(&|s| {\n                 GROUP.replace_all(\n                     s,\n-                    |ec: &Captures<'_>| self.get_sel_capture_replacement(ec, sel),\n+                    |ec: &Captures<'_>| self.get_sel_capture_replacement(ec, sel, con),\n                 ).to_string()\n             })\n             .fix_paths()\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -372,12 +390,13 @@ impl<'b> ExecutionStringBuilder<'b> {\n     pub fn exec_token(\n         &self,\n         exec_pattern: &ExecPattern,\n+        con: &AppContext,\n     ) -> Vec<String> {\n         exec_pattern\n             .apply(&|s| {\n                 GROUP.replace_all(\n                     s,\n-                    |ec: &Captures<'_>| self.get_capture_replacement(ec),\n+                    |ec: &Captures<'_>| self.get_capture_replacement(ec, con),\n                 ).to_string()\n             })\n             .fix_paths()\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -389,12 +408,13 @@ impl<'b> ExecutionStringBuilder<'b> {\n         &self,\n         exec_pattern: &ExecPattern,\n         sel: Option<Selection<'_>>,\n+        con: &AppContext,\n     ) -> Vec<String> {\n         exec_pattern\n             .apply(&|s| {\n                 GROUP.replace_all(\n                     s,\n-                    |ec: &Captures<'_>| self.get_sel_capture_replacement(ec, sel),\n+                    |ec: &Captures<'_>| self.get_sel_capture_replacement(ec, sel, con),\n                 ).to_string()\n             })\n             .fix_paths()\ndiff --git a/src/verb/external_execution.rs b/src/verb/external_execution.rs\n--- a/src/verb/external_execution.rs\n+++ b/src/verb/external_execution.rs\n@@ -89,10 +89,11 @@ impl ExternalExecution {\n     fn working_dir_path(\n         &self,\n         builder: &ExecutionStringBuilder<'_>,\n+        con: &AppContext,\n     ) -> Option<PathBuf> {\n         self.working_dir\n             .as_ref()\n-            .map(|pattern| builder.path(pattern))\n+            .map(|pattern| builder.path(pattern, con))\n             .filter(|pb| {\n                 if pb.exists() {\n                     true\ndiff --git a/src/verb/external_execution.rs b/src/verb/external_execution.rs\n--- a/src/verb/external_execution.rs\n+++ b/src/verb/external_execution.rs\n@@ -119,7 +120,7 @@ impl ExternalExecution {\n             // Broot was probably launched as br.\n             // the whole command is exported in the passed file\n             let f = OpenOptions::new().append(true).open(export_path)?;\n-            writeln!(&f, \"{}\", builder.shell_exec_string(&self.exec_pattern))?;\n+            writeln!(&f, \"{}\", builder.shell_exec_string(&self.exec_pattern, con))?;\n             Ok(CmdResult::Quit)\n         } else {\n             Ok(CmdResult::error(\ndiff --git a/src/verb/external_execution.rs b/src/verb/external_execution.rs\n--- a/src/verb/external_execution.rs\n+++ b/src/verb/external_execution.rs\n@@ -141,8 +142,8 @@ impl ExternalExecution {\n             ));\n         }\n         let launchable = Launchable::program(\n-            builder.exec_token(&self.exec_pattern),\n-            self.working_dir_path(&builder),\n+            builder.exec_token(&self.exec_pattern, con),\n+            self.working_dir_path(&builder, con),\n             self.switch_terminal,\n             con,\n         )?;\ndiff --git a/src/verb/external_execution.rs b/src/verb/external_execution.rs\n--- a/src/verb/external_execution.rs\n+++ b/src/verb/external_execution.rs\n@@ -157,12 +158,12 @@ impl ExternalExecution {\n         builder: ExecutionStringBuilder<'_>,\n         con: &AppContext,\n     ) -> Result<CmdResult, ProgramError> {\n-        let working_dir_path = self.working_dir_path(&builder);\n+        let working_dir_path = self.working_dir_path(&builder, con);\n         match &builder.sel_info {\n             SelInfo::None | SelInfo::One(_) => {\n                 // zero or one selection -> only one execution\n                 let launchable = Launchable::program(\n-                    builder.exec_token(&self.exec_pattern),\n+                    builder.exec_token(&self.exec_pattern, con),\n                     working_dir_path,\n                     self.switch_terminal,\n                     con,\ndiff --git a/src/verb/external_execution.rs b/src/verb/external_execution.rs\n--- a/src/verb/external_execution.rs\n+++ b/src/verb/external_execution.rs\n@@ -184,7 +185,7 @@ impl ExternalExecution {\n                     });\n                 for sel in sels {\n                     let launchable = Launchable::program(\n-                        builder.sel_exec_token(&self.exec_pattern, Some(sel)),\n+                        builder.sel_exec_token(&self.exec_pattern, Some(sel), con),\n                         working_dir_path.clone(),\n                         self.switch_terminal,\n                         con,\ndiff --git a/src/verb/internal_focus.rs b/src/verb/internal_focus.rs\n--- a/src/verb/internal_focus.rs\n+++ b/src/verb/internal_focus.rs\n@@ -103,6 +103,7 @@ fn path_from_input(\n     base_path: &Path, // either the selected path or the root path\n     input_arg: Option<&String>,\n     app_state: &AppState,\n+    con: &AppContext,\n ) -> PathBuf {\n     match (input_arg, internal_exec.arg.as_ref()) {\n         (Some(input_arg), Some(verb_arg)) => {\ndiff --git a/src/verb/internal_focus.rs b/src/verb/internal_focus.rs\n--- a/src/verb/internal_focus.rs\n+++ b/src/verb/internal_focus.rs\n@@ -119,7 +120,7 @@ fn path_from_input(\n                 app_state,\n                 Some(input_arg),\n             );\n-            path_builder.path(verb_arg)\n+            path_builder.path(verb_arg, con)\n         }\n         (Some(input_arg), None) => {\n             // the verb defines nothing\ndiff --git a/src/verb/internal_focus.rs b/src/verb/internal_focus.rs\n--- a/src/verb/internal_focus.rs\n+++ b/src/verb/internal_focus.rs\n@@ -142,7 +143,7 @@ fn path_from_input(\n                 app_state,\n                 None,\n             );\n-            path_builder.path(verb_arg)\n+            path_builder.path(verb_arg, con)\n         }\n         (None, None) => {\n             // user only wants to open the selected path, either in the same panel or\ndiff --git a/src/verb/internal_focus.rs b/src/verb/internal_focus.rs\n--- a/src/verb/internal_focus.rs\n+++ b/src/verb/internal_focus.rs\n@@ -158,6 +159,7 @@ pub fn get_status_markdown(\n     sel_info: SelInfo<'_>,\n     invocation: &VerbInvocation,\n     app_state: &AppState,\n+    con: &AppContext,\n ) -> String {\n     let base_path = sel_info\n         .one_path()\ndiff --git a/src/verb/internal_focus.rs b/src/verb/internal_focus.rs\n--- a/src/verb/internal_focus.rs\n+++ b/src/verb/internal_focus.rs\n@@ -168,6 +170,7 @@ pub fn get_status_markdown(\n         base_path,\n         invocation.args.as_ref(),\n         app_state,\n+        con,\n     );\n     format!(\"Hit *enter* to focus `{}`\", path.to_string_lossy())\n }\ndiff --git a/src/verb/internal_focus.rs b/src/verb/internal_focus.rs\n--- a/src/verb/internal_focus.rs\n+++ b/src/verb/internal_focus.rs\n@@ -198,6 +201,7 @@ pub fn on_internal(\n                 selected_path,\n                 input_arg,\n                 app_state,\n+                cc.app.con,\n             );\n             on_path(path, screen, tree_options, bang, con)\n         }\ndiff --git a/src/verb/internal_focus.rs b/src/verb/internal_focus.rs\n--- a/src/verb/internal_focus.rs\n+++ b/src/verb/internal_focus.rs\n@@ -206,10 +210,14 @@ pub fn on_internal(\n             if let Some(arg) = &internal_exec.arg {\n                 // the internal_execution specifies the path to use\n                 // (it may come from a configured verb whose execution is\n-                //  `:focus some/path`).\n+                //  `:focus some/path` or `:focus {initial-root}\u0300).\n                 // The given path may be relative hence the need for the\n                 // state's selection\n-                let path = path::path_from(selected_path, PathAnchor::Unspecified, arg);\n+                let path_builder = ExecutionStringBuilder::without_invocation(\n+                    SelInfo::from_path(selected_path),\n+                    app_state,\n+                );\n+                let path = path_builder.path(arg, con);\n                 let bang = input_invocation\n                     .map(|inv| inv.bang)\n                     .unwrap_or(internal_exec.bang);\ndiff --git a/src/verb/internal_select.rs b/src/verb/internal_select.rs\n--- a/src/verb/internal_select.rs\n+++ b/src/verb/internal_select.rs\n@@ -44,6 +44,7 @@ pub fn on_internal(\n                 &tree.selected_line().path,\n                 input_arg,\n                 app_state,\n+                cc.app.con,\n             );\n             on_path(path, tree, screen, bang)\n         }\ndiff --git a/src/verb/internal_select.rs b/src/verb/internal_select.rs\n--- a/src/verb/internal_select.rs\n+++ b/src/verb/internal_select.rs\n@@ -84,6 +85,7 @@ fn path_from_input(\n     base_path: &Path, // either the selected path or the root path\n     input_arg: Option<&String>,\n     app_state: &AppState,\n+    con: &AppContext,\n ) -> PathBuf {\n     match (input_arg, internal_exec.arg.as_ref()) {\n         (Some(input_arg), Some(verb_arg)) => {\ndiff --git a/src/verb/internal_select.rs b/src/verb/internal_select.rs\n--- a/src/verb/internal_select.rs\n+++ b/src/verb/internal_select.rs\n@@ -100,7 +102,7 @@ fn path_from_input(\n                 app_state,\n                 Some(input_arg),\n             );\n-            path_builder.path(verb_arg)\n+            path_builder.path(verb_arg, con)\n         }\n         (Some(input_arg), None) => {\n             // the verb defines nothing\ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -230,6 +230,7 @@ impl Verb {\n         sel_info: SelInfo<'_>,\n         app_state: &AppState,\n         invocation: &VerbInvocation,\n+        con: &AppContext,\n     ) -> String {\n         let name = self.names.first().unwrap_or(&invocation.name);\n \ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -246,6 +247,7 @@ impl Verb {\n                     sel_info,\n                     invocation,\n                     app_state,\n+                    con,\n                 );\n             }\n         }\ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -260,11 +262,12 @@ impl Verb {\n         };\n         if let VerbExecution::Sequence(seq_ex) = &self.execution {\n             let exec_desc = builder().shell_exec_string(\n-                &ExecPattern::from_string(&seq_ex.sequence.raw)\n+                &ExecPattern::from_string(&seq_ex.sequence.raw),\n+                con,\n             );\n             format!(\"Hit *enter* to **{}**: `{}`\", name, &exec_desc)\n         } else if let VerbExecution::External(external_exec) = &self.execution {\n-            let exec_desc = builder().shell_exec_string(&external_exec.exec_pattern);\n+            let exec_desc = builder().shell_exec_string(&external_exec.exec_pattern, con);\n             format!(\"Hit *enter* to **{}**: `{}`\", name, &exec_desc)\n         } else if self.description.code {\n             format!(\"Hit *enter* to **{}**: `{}`\", name, &self.description.content)\ndiff --git a/website/docs/conf_verbs.md b/website/docs/conf_verbs.md\n--- a/website/docs/conf_verbs.md\n+++ b/website/docs/conf_verbs.md\n@@ -302,6 +302,7 @@ name | expanded to\n `{other-panel-parent}` | complete path of the current selection's parent in the other panel\n `{other-panel-directory}` | closest directory, either `{file}` or `{parent}` in the other panel\n `{root}` | current tree root (top of the displayed files tree)\n+`{initial-root}` | tree root at launch\n `{git-root}` | The working directory of the Git repository containing the current selection\n `{git-name}` | Name of the working directory of the current Git repository\n `{file-git-relative}` | path of the current selection relative to the working directory of the containing Git repository. If the selection is not in a Git repository then the absolute path.\n",
        "test_patch": "diff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -259,6 +259,17 @@ impl AppContext {\n     }\n }\n \n+/// An unsafe implementation of Default, for tests only\n+#[cfg(test)]\n+impl Default for AppContext {\n+    fn default() -> Self {\n+        let mut config = Conf::default();\n+        let verb_store = VerbStore::new(&mut config).unwrap();\n+        let launch_args = parse_default_flags(\"\").unwrap();\n+        Self::from(launch_args, verb_store, &config).unwrap()\n+    }\n+}\n+\n /// try to determine whether the terminal supports true\n /// colors. This doesn't work well, hence the use of an\n /// optional config setting.\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -451,8 +471,9 @@ mod execution_builder_test {\n             map.insert(k.to_owned(), v.to_owned());\n         }\n         builder.invocation_values = Some(map);\n+        let con = AppContext::default();\n         for exec_pattern in exec_patterns {\n-            let exec_token = builder.exec_token(&exec_pattern);\n+            let exec_token = builder.exec_token(&exec_pattern, &con);\n             assert_eq!(exec_token, chk_exec_token);\n         }\n     }\n",
        "problem_statement": "ctrl-esc/shift-esc to go back to the first match.\n<kbd>ctrl</kbd>-<kbd>esc</kbd>/<kbd>shift</kbd>-<kbd>esc</kbd> to go back to the first match.\r\n\r\nIs this possible already?\n",
        "hints_text": "By first match, you mean the first in the list, or the best match ?\n> By first match, you mean the first in the list, or the best match ?\r\n\r\nFirst in the list, my initial location. Where I started br.",
        "created_at": "2024-08-03T20:13:45Z",
        "version": "4.6"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 647,
        "instance_id": "Canop__broot-647",
        "issue_numbers": [
            "375"
        ],
        "base_commit": "4fcd56b59c1fc2fdd5b87040d2e1f87c2e3370be",
        "patch": "diff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -12,7 +12,7 @@ license = \"MIT\"\n categories = [\"command-line-utilities\"]\n readme = \"README.md\"\n build = \"build.rs\"\n-rust-version = \"1.60\"\n+rust-version = \"1.65\"\n exclude = [\"website\", \"broot*.zip\"]\n \n [features]\ndiff --git a/bacon.toml b/bacon.toml\n--- a/bacon.toml\n+++ b/bacon.toml\n@@ -42,6 +42,7 @@ command = [\n \t\"-A\", \"clippy::module_inception\",\n \t\"-A\", \"clippy::neg_multiply\",\n \t\"-A\", \"clippy::vec_init_then_push\",\n+\t\"-A\", \"clippy::if_same_then_else\",\n ]\n need_stdout = false\n \ndiff --git a/src/cli/mod.rs b/src/cli/mod.rs\n--- a/src/cli/mod.rs\n+++ b/src/cli/mod.rs\n@@ -72,7 +72,12 @@ pub fn run() -> Result<Option<Launchable>, ProgramError> {\n     // configuration\n     if specific_conf.is_none() && install_args.install != Some(false) {\n         let mut shell_install = ShellInstall::new(install_args.install == Some(true));\n-        shell_install.check()?;\n+        // TODO clean the next few lines when inspect_err is stable\n+        let res = shell_install.check();\n+        if let Err(e) = &res {\n+            shell_install.comment_error(e);\n+        }\n+        res?;\n         if shell_install.should_quit {\n             return Ok(None);\n         }\ndiff --git a/src/cli/mod.rs b/src/cli/mod.rs\n--- a/src/cli/mod.rs\n+++ b/src/cli/mod.rs\n@@ -137,7 +142,7 @@ pub fn run() -> Result<Option<Launchable>, ProgramError> {\n }\n \n /// wait for user input, return `true` if they didn't answer 'n'\n-pub fn ask_authorization() -> Result<bool, ProgramError> {\n+pub fn ask_authorization() -> io::Result<bool> {\n     let mut answer = String::new();\n     io::stdin().read_line(&mut answer)?;\n     let answer = answer.trim();\ndiff --git a/src/errors.rs b/src/errors.rs\n--- a/src/errors.rs\n+++ b/src/errors.rs\n@@ -8,28 +8,59 @@ use {\n };\n \n custom_error! {pub ProgramError\n-    Io {source: io::Error} = \"IO Error : {source}\",\n-    Termimad {source: termimad::Error} = \"Termimad Error : {source}\",\n+    AmbiguousVerbName {name: String} = \"Ambiguous name: More than one verb matches {name:?}\",\n+    ArgParse {bad: String, valid: String} = \"{bad:?} can't be parsed (valid values: {valid:?})\",\n     Conf {source: ConfError} = \"Bad configuration: {source}\",\n     ConfFile {path:String, details: ConfError} = \"Bad configuration file {path:?} : {details}\",\n-    ArgParse {bad: String, valid: String} = \"{bad:?} can't be parsed (valid values: {valid:?})\",\n-    UnknownVerb {name: String} = \"No verb matches {name:?}\",\n-    AmbiguousVerbName {name: String} = \"Ambiguous name: More than one verb matches {name:?}\",\n-    UnmatchingVerbArgs {name: String} = \"No matching argument found for verb {name:?}\",\n-    TreeBuild {source: TreeBuildError} = \"{source}\",\n-    LaunchError {program: String, source: io::Error} = \"Unable to launch {program}: {source}\",\n-    UnknowShell {shell: String} = \"Unknown shell: {shell}\",\n+    ImageError {source: ImageError } = \"{source}\",\n     InternalError {details: String} = \"Internal error: {details}\", // should not happen\n     InvalidGlobError {pattern: String} = \"Invalid glob: {pattern}\",\n-    Unrecognized {token: String} = \"Unrecognized: {token}\",\n-    NetError {source: NetError} = \"{source}\",\n-    ImageError {source: ImageError } = \"{source}\",\n+    Io {source: io::Error} = \"IO Error : {source}\",\n+    LaunchError {program: String, source: io::Error} = \"Unable to launch {program}: {source}\",\n     Lfs {details: String} = \"Failed to fetch mounts: {details}\",\n-    ZeroLenFile = \"File seems empty\",\n+    NetError {source: NetError} = \"{source}\",\n+    OpenError { source: opener::OpenError } = \"Open error: {source}\",\n+    ShelInstall { source: ShellInstallError } = \"{source}\",\n+    SyntectCrashed { details: String } = \"Syntect crashed on {details:?}\",\n+    Termimad {source: termimad::Error} = \"Termimad Error : {source}\",\n+    TreeBuild {source: TreeBuildError} = \"{source}\",\n+    UnknowShell {shell: String} = \"Unknown shell: {shell}\",\n+    UnknownVerb {name: String} = \"No verb matches {name:?}\",\n     UnmappableFile = \"File can't be mapped\",\n+    UnmatchingVerbArgs {name: String} = \"No matching argument found for verb {name:?}\",\n     UnprintableFile = \"File can't be printed\", // has characters that can't be printed without escaping\n-    SyntectCrashed { details: String } = \"Syntect crashed on {details:?}\",\n-    OpenError { source: opener::OpenError } = \"Open error: {source}\",\n+    Unrecognized {token: String} = \"Unrecognized: {token}\",\n+    ZeroLenFile = \"File seems empty\",\n+}\n+\n+custom_error!{pub ShellInstallError\n+    Io {source: io::Error, when: String} = \"IO Error {source} on {when}\",\n+}\n+impl ShellInstallError {\n+    pub fn is_permission_denied(&self) -> bool {\n+        match self {\n+            Self::Io { source, .. } => {\n+                if source.kind() == io::ErrorKind::PermissionDenied {\n+                    true\n+                } else if cfg!(windows) && source.raw_os_error().unwrap_or(0) == 1314 {\n+                    // https://learn.microsoft.com/en-us/windows/win32/debug/system-error-codes--1300-1699-\n+                    true\n+                } else {\n+                    false\n+                }\n+            }\n+        }\n+    }\n+}\n+pub trait IoToShellInstallError<Ok> {\n+    fn context(self, f: &dyn Fn() -> String) -> Result<Ok, ShellInstallError>;\n+}\n+impl<Ok> IoToShellInstallError<Ok> for Result<Ok, io::Error> {\n+    fn context(self, f: &dyn Fn() -> String) -> Result<Ok, ShellInstallError> {\n+        self.map_err(|source| ShellInstallError::Io {\n+            source, when: f()\n+        })\n+    }\n }\n \n custom_error! {pub TreeBuildError\ndiff --git a/src/shell_install/bash.rs b/src/shell_install/bash.rs\n--- a/src/shell_install/bash.rs\n+++ b/src/shell_install/bash.rs\n@@ -13,12 +13,12 @@ use {\n     super::{util, ShellInstall},\n     crate::{\n         conf,\n-        errors::ProgramError,\n+        errors::*,\n     },\n     directories::UserDirs,\n     lazy_regex::regex,\n     regex::Captures,\n-    std::{env, fs::OpenOptions, io::Write, path::PathBuf},\n+    std::{env, path::PathBuf},\n     termimad::{\n         mad_print_inline,\n     },\ndiff --git a/src/shell_install/bash.rs b/src/shell_install/bash.rs\n--- a/src/shell_install/bash.rs\n+++ b/src/shell_install/bash.rs\n@@ -117,7 +117,7 @@ fn get_sourcing_paths() -> Vec<PathBuf> {\n /// check whether the shell function is installed, install\n /// it if it wasn't refused before or if broot is launched\n /// with --install.\n-pub fn install(si: &mut ShellInstall) -> Result<(), ProgramError> {\n+pub fn install(si: &mut ShellInstall) -> Result<(), ShellInstallError> {\n     let script_path = get_script_path();\n     si.write_script(&script_path, BASH_FUNC)?;\n     let link_path = get_link_path();\ndiff --git a/src/shell_install/bash.rs b/src/shell_install/bash.rs\n--- a/src/shell_install/bash.rs\n+++ b/src/shell_install/bash.rs\n@@ -139,13 +139,7 @@ pub fn install(si: &mut ShellInstall) -> Result<(), ProgramError> {\n                 &sourcing_path_str,\n             );\n         } else {\n-            let mut shellrc = OpenOptions::new()\n-                .write(true)\n-                .append(true)\n-                .open(sourcing_path)?;\n-            shellrc.write_all(b\"\\n\")?;\n-            shellrc.write_all(source_line.as_bytes())?;\n-            shellrc.write_all(b\"\\n\")?;\n+            util::append_to_file(sourcing_path, format!(\"\\n{source_line}\\n\"))?;\n             let is_zsh = sourcing_path_str.contains(\".zshrc\");\n             if is_zsh {\n                 mad_print_inline!(\ndiff --git a/src/shell_install/fish.rs b/src/shell_install/fish.rs\n--- a/src/shell_install/fish.rs\n+++ b/src/shell_install/fish.rs\n@@ -15,7 +15,7 @@\n \n use {\n     super::ShellInstall,\n-    crate::{conf, errors::ProgramError},\n+    crate::{conf, errors::*},\n     directories::BaseDirs,\n     directories::ProjectDirs,\n     std::path::PathBuf,\ndiff --git a/src/shell_install/fish.rs b/src/shell_install/fish.rs\n--- a/src/shell_install/fish.rs\n+++ b/src/shell_install/fish.rs\n@@ -94,7 +94,7 @@ fn get_script_path() -> PathBuf {\n ///\n /// As fish isn't frequently used, we first check that it seems\n /// to be installed. If not, we just do nothing.\n-pub fn install(si: &mut ShellInstall) -> Result<(), ProgramError> {\n+pub fn install(si: &mut ShellInstall) -> Result<(), ShellInstallError> {\n     let fish_dir = get_fish_dir();\n     if !fish_dir.exists() {\n         debug!(\"no fish config directory. Assuming fish isn't used.\");\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -2,11 +2,12 @@ use {\n     crate::{\n         cli::{self, ShellInstallState},\n         conf,\n-        errors::ProgramError,\n+        errors::*,\n         skin,\n     },\n     std::{\n-        fs, io, os,\n+        fs,\n+        os,\n         path::{Path, PathBuf},\n     },\n     termimad::{mad_print_inline, MadSkin},\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -14,6 +15,7 @@ use {\n \n mod bash;\n mod fish;\n+mod nushell;\n mod util;\n \n const MD_INSTALL_REQUEST: &str = r#\"\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -34,6 +36,13 @@ If you want the `br` shell function, you may either\n \n \"#;\n \n+const MD_PERMISSION_DENIED: &str = r#\"\n+Installation check resulted in **Permission Denied**.\n+Please relaunch with elevated privilege.\n+This is typically only needed once.\n+Error details:\n+\"#;\n+\n const MD_INSTALL_DONE: &str = r#\"\n The **br** function has been successfully installed.\n You may have to restart your shell or source your shell init files.\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -116,6 +131,7 @@ impl ShellInstall {\n         match shell {\n             \"bash\" | \"zsh\" => println!(\"{}\", bash::get_script()),\n             \"fish\" => println!(\"{}\", fish::get_script()),\n+            \"nushell\" => println!(\"{}\", nushell::get_script()),\n             _ => {\n                 return Err(ProgramError::UnknowShell {\n                     shell: shell.to_string(),\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -128,7 +144,7 @@ impl ShellInstall {\n     /// check whether the shell function is installed, install\n     /// it if it wasn't refused before or if broot is launched\n     /// with --install.\n-    pub fn check(&mut self) -> Result<(), ProgramError> {\n+    pub fn check(&mut self) -> Result<(), ShellInstallError> {\n         let installed_path = get_installed_path();\n         if self.force_install {\n             self.skin.print_text(\"You requested a clean (re)install.\");\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -152,6 +168,7 @@ impl ShellInstall {\n         debug!(\"Starting install\");\n         bash::install(self)?;\n         fish::install(self)?;\n+        nushell::install(self)?;\n         self.should_quit = true;\n         if self.done {\n             self.skin.print_text(MD_INSTALL_DONE);\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -159,19 +176,28 @@ impl ShellInstall {\n         Ok(())\n     }\n \n-    pub fn remove(&self, path: &Path) -> io::Result<()> {\n+    /// print some additional information on the error (typically before\n+    /// the error itself is dumped)\n+    pub fn comment_error(&self, err: &ShellInstallError) {\n+        if err.is_permission_denied() {\n+            self.skin.print_text(MD_PERMISSION_DENIED);\n+        }\n+    }\n+\n+    pub fn remove(&self, path: &Path) -> Result<(), ShellInstallError> {\n         // path.exists() doesn't work when the file is a link (it checks whether\n         // the link destination exists instead of checking the link exists\n         // so we first check whether the link exists\n         if fs::read_link(path).is_ok() || path.exists() {\n             mad_print_inline!(self.skin, \"Removing `$0`.\\n\", path.to_string_lossy());\n-            fs::remove_file(path)?;\n+            fs::remove_file(path)\n+                .context(&|| format!(\"removing {path:?}\"))?;\n         }\n         Ok(())\n     }\n \n     /// check whether we're allowed to install.\n-    fn can_do(&mut self) -> Result<bool, ProgramError> {\n+    fn can_do(&mut self) -> Result<bool, ShellInstallError> {\n         if let Some(authorization) = self.authorization {\n             return Ok(authorization);\n         }\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -181,7 +207,8 @@ impl ShellInstall {\n             return Ok(false);\n         }\n         self.skin.print_text(MD_INSTALL_REQUEST);\n-        let proceed = cli::ask_authorization()?;\n+        let proceed = cli::ask_authorization()\n+            .context(&|| \"asking user\".to_string())?; // read_line failure\n         debug!(\"proceed: {:?}\", proceed);\n         self.authorization = Some(proceed);\n         if !proceed {\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -192,7 +219,7 @@ impl ShellInstall {\n     }\n \n     /// write the script at the given path\n-    fn write_script(&self, script_path: &Path, content: &str) -> Result<(), ProgramError> {\n+    fn write_script(&self, script_path: &Path, content: &str) -> Result<(), ShellInstallError> {\n         self.remove(script_path)?;\n         info!(\"Writing `br` shell function in `{:?}`\", &script_path);\n         mad_print_inline!(\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -200,13 +227,16 @@ impl ShellInstall {\n             \"Writing *br* shell function in `$0`.\\n\",\n             script_path.to_string_lossy(),\n         );\n-        fs::create_dir_all(script_path.parent().unwrap())?;\n-        fs::write(script_path, content)?;\n+        fs::create_dir_all(script_path.parent().unwrap())\n+            .context(&|| format!(\"creating parent dirs to {script_path:?}\"))?;\n+        fs::write(script_path, content)\n+            .context(&|| format!(\"writing script in {script_path:?}\"))?;\n         Ok(())\n     }\n \n+\n     /// create a link\n-    fn create_link(&self, link_path: &Path, script_path: &Path) -> Result<(), ProgramError> {\n+    fn create_link(&self, link_path: &Path, script_path: &Path) -> Result<(), ShellInstallError> {\n         info!(\"Creating link from {:?} to {:?}\", &link_path, &script_path);\n         self.remove(link_path)?;\n         let link_path_str = link_path.to_string_lossy();\ndiff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -217,11 +247,15 @@ impl ShellInstall {\n             &link_path_str,\n             &script_path_str,\n         );\n-        fs::create_dir_all(link_path.parent().unwrap())?;\n+        let parent = link_path.parent().unwrap();\n+        fs::create_dir_all(parent)\n+            .context(&|| format!(\"creating directory {parent:?}\"))?;\n         #[cfg(unix)]\n-        os::unix::fs::symlink(script_path, link_path)?;\n+        os::unix::fs::symlink(script_path, link_path)\n+            .context(&|| format!(\"linking from {link_path:?} to {script_path:?}\"))?;\n         #[cfg(windows)]\n-        os::windows::fs::symlink_file(&script_path, &link_path)?;\n+        os::windows::fs::symlink_file(&script_path, &link_path)\n+            .context(&|| format!(\"linking from {link_path:?} to {script_path:?}\"))?;\n         Ok(())\n     }\n }\ndiff --git /dev/null b/src/shell_install/nushell.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/shell_install/nushell.rs\n@@ -0,0 +1,123 @@\n+//! The goal of this mod is to ensure the launcher shell function\n+//! is available for nushell i.e. the `br` shell function can\n+//! be used to launch broot (and thus make it possible to execute\n+//! some commands, like `cd`, from the starting shell.\n+//!\n+//! In a correct installation, we have:\n+//! - a function declaration script in ~/.local/share/broot/launcher/nushell/br/1\n+//! - a link to that script in ~/.config/broot/launcher/nushell/br/1\n+//! - a line to source the link in ~/.config/nushell/config.nu\n+//! (exact paths depend on XDG variables)\n+//!\n+//! More info at\n+//!  https://github.com/Canop/broot/issues/375\n+\n+use {\n+    super::{util, ShellInstall},\n+    crate::{\n+        conf,\n+        errors::*,\n+    },\n+    directories::BaseDirs,\n+    std::path::PathBuf,\n+    termimad::{\n+        mad_print_inline,\n+    },\n+};\n+\n+const NAME: &str = \"nushell\";\n+const VERSION: &str = \"1\";\n+\n+const NU_FUNC: &str = r#\"\n+# This script was automatically generated by the broot program\n+# More information can be found in https://github.com/Canop/broot\n+# This function starts broot and executes the command\n+# it produces, if any.\n+# It's needed because some shell commands, like `cd`,\n+# have no useful effect if executed in a subshell.\n+def _br_cmd [] {\n+  let cmd_file = ([ $nu.temp-path, $\"broot-(random chars).tmp\" ] | path join)\n+  touch $cmd_file\n+  ^broot --outcmd $cmd_file\n+  let target_dir = (open $cmd_file | to text | str replace \"^cd\\\\s+\" \"\" | str trim)\n+  rm -p -f $cmd_file\n+\n+  $target_dir\n+}\n+alias br = cd (_br_cmd)\n+\"#;\n+\n+pub fn get_script() -> &'static str {\n+    NU_FUNC\n+}\n+\n+/// return the path to the link to the function script\n+fn get_link_path() -> PathBuf {\n+    conf::dir().join(\"launcher\").join(NAME).join(\"br\")\n+}\n+\n+/// return the root of\n+fn get_nushell_dir() -> Option<PathBuf> {\n+    BaseDirs::new()\n+        .map(|base_dirs| base_dirs.config_dir().join(\"nushell\"))\n+        .filter(|dir| dir.exists())\n+}\n+\n+/// return the path to the script containing the function.\n+///\n+/// In XDG_DATA_HOME (typically ~/.local/share on linux)\n+fn get_script_path() -> PathBuf {\n+    conf::app_dirs()\n+        .data_dir()\n+        .join(\"launcher\")\n+        .join(NAME)\n+        .join(VERSION)\n+}\n+\n+/// Check for nushell.\n+///\n+/// Check whether the shell function is installed, install\n+/// it if it wasn't refused before or if broot is launched\n+/// with --install.\n+pub fn install(si: &mut ShellInstall) -> Result<(), ShellInstallError> {\n+    debug!(\"install {NAME}\");\n+    let Some(nushell_dir) = get_nushell_dir() else {\n+        debug!(\"no nushell config directory. Assuming nushell isn't used.\");\n+        return Ok(());\n+    };\n+    info!(\"nushell seems to be installed\");\n+    let script_path = get_script_path();\n+    si.write_script(&script_path, NU_FUNC)?;\n+    let link_path = get_link_path();\n+    si.create_link(&link_path, &script_path)?;\n+\n+    let escaped_path = link_path.to_string_lossy().replace(' ', \"\\\\ \");\n+    let source_line = format!(\"source {}\", &escaped_path);\n+\n+    let sourcing_path = nushell_dir.join(\"config.nu\");\n+    if !sourcing_path.exists() {\n+        warn!(\"Unexpected lack of config.nu file\");\n+        return Ok(());\n+    }\n+    if sourcing_path.is_dir() {\n+        warn!(\"config.nu file\");\n+        return Ok(());\n+    }\n+    let sourcing_path_str = sourcing_path.to_string_lossy();\n+    if util::file_contains_line(&sourcing_path, &source_line)? {\n+        mad_print_inline!(\n+            &si.skin,\n+            \"`$0` already patched, no change made.\\n\",\n+            &sourcing_path_str,\n+        );\n+    } else {\n+        util::append_to_file(&sourcing_path, format!(\"\\n{source_line}\\n\"))?;\n+        mad_print_inline!(\n+            &si.skin,\n+            \"`$0` successfully patched, you can make the function immediately available with `source $0`\\n\",\n+            &sourcing_path_str,\n+        );\n+    }\n+    si.done = true;\n+    Ok(())\n+}\ndiff --git a/src/shell_install/util.rs b/src/shell_install/util.rs\n--- a/src/shell_install/util.rs\n+++ b/src/shell_install/util.rs\n@@ -1,14 +1,30 @@\n-use std::{\n-    fs,\n-    io::{self, BufRead, BufReader},\n-    path::Path,\n+use {\n+    crate::errors::*,\n+    std::{\n+        fs::{self, OpenOptions},\n+        io::{BufRead, BufReader, Write},\n+        path::Path,\n+    },\n };\n-\n-pub fn file_contains_line(path: &Path, searched_line: &str) -> io::Result<bool> {\n-    for line in BufReader::new(fs::File::open(path)?).lines() {\n-        if line? == searched_line {\n+pub fn file_contains_line(path: &Path, searched_line: &str) -> Result<bool, ShellInstallError> {\n+    let file = fs::File::open(path)\n+        .context(&|| format!(\"opening {path:?}\"))?;\n+    for line in BufReader::new(file).lines() {\n+        let line = line.context(&|| format!(\"reading line in {path:?}\"))?;\n+        if line == searched_line {\n             return Ok(true);\n         }\n     }\n     Ok(false)\n }\n+\n+pub fn append_to_file<S: AsRef<str>>(path: &Path, content: S) -> Result<(), ShellInstallError> {\n+    let mut shellrc = OpenOptions::new()\n+        .write(true)\n+        .append(true)\n+        .open(path)\n+        .context(&|| format!(\"opening {path:?} for append\"))?;\n+    shellrc.write_all(content.as_ref().as_bytes())\n+        .context(&|| format!(\"writing in {path:?}\"))?;\n+    Ok(())\n+}\ndiff --git a/website/broot_theme/css/base.css b/website/broot_theme/css/base.css\n--- a/website/broot_theme/css/base.css\n+++ b/website/broot_theme/css/base.css\n@@ -22,7 +22,7 @@ body > .container {\n }\n \n ul.nav .main {\n-    font-weight: bold;\n+    /*font-weight: bold;*/\n }\n \n .col-md-3 {\ndiff --git a/website/broot_theme/css/base.css b/website/broot_theme/css/base.css\n--- a/website/broot_theme/css/base.css\n+++ b/website/broot_theme/css/base.css\n@@ -177,7 +177,7 @@ footer {\n .bs-sidebar .nav > .active > a,\n .bs-sidebar .nav > .active:hover > a,\n .bs-sidebar .nav > .active:focus > a {\n-    font-weight: bold;\n+    /*font-weight: bold;*/\n     background-color: transparent;\n     border-right: 1px solid;\n }\ndiff --git a/website/broot_theme/css/bootstrap-custom.min.css b/website/broot_theme/css/bootstrap-custom.min.css\n--- a/website/broot_theme/css/bootstrap-custom.min.css\n+++ b/website/broot_theme/css/bootstrap-custom.min.css\n@@ -1,1 +1,1 @@\n-/*! normalize.css v2.1.3 | MIT License | git.io/normalize */article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}audio,canvas,video{display:inline-block}audio:not([controls]){display:none;height:0}[hidden],template{display:none}html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}a{background:transparent}a:focus{outline:thin dotted}a:active,a:hover{outline:0}h1{margin:.67em 0;font-size:2em}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}dfn{font-style:italic}hr{height:0;-moz-box-sizing:content-box;box-sizing:content-box}mark{color:#000;background:#ff0}code,kbd,pre,samp{font-family:monospace,serif;font-size:1em}pre{white-space:pre-wrap}q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:0}fieldset{padding:.35em .625em .75em;margin:0 2px;border:1px solid #c0c0c0}legend{padding:0;border:0}button,input,select,textarea{margin:0;font-family:inherit;font-size:100%}button,input{line-height:normal}button,select{text-transform:none}button,html input[type=\"button\"],input[type=\"reset\"],input[type=\"submit\"]{cursor:pointer;-webkit-appearance:button}button[disabled],html input[disabled]{cursor:default}input[type=\"checkbox\"],input[type=\"radio\"]{padding:0;box-sizing:border-box}input[type=\"search\"]{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;-webkit-appearance:textfield}input[type=\"search\"]::-webkit-search-cancel-button,input[type=\"search\"]::-webkit-search-decoration{-webkit-appearance:none}button::-moz-focus-inner,input::-moz-focus-inner{padding:0;border:0}textarea{overflow:auto;vertical-align:top}table{border-collapse:collapse;border-spacing:0}@media print{*{color:#000!important;text-shadow:none!important;background:transparent!important;box-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:\" (\" attr(href) \")\"}abbr[title]:after{content:\" (\" attr(title) \")\"}a[href^=\"javascript:\"]:after,a[href^=\"#\"]:after{content:\"\"}pre,blockquote{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}tr,img{page-break-inside:avoid}img{max-width:100%!important}@page{margin:2cm .5cm}p,h2,h3{orphans:3;widows:3}h2,h3{page-break-after:avoid}select{background:#fff!important}.navbar{display:none}.table td,.table th{background-color:#fff!important}.btn>.caret,.dropup>.btn>.caret{border-top-color:#000!important}.label{border:1px solid #000}.table{border-collapse:collapse!important}.table-bordered th,.table-bordered td{border:1px solid #ddd!important}}*,*:before,*:after{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}html{font-size:62.5%;-webkit-tap-highlight-color:rgba(0,0,0,0)}body{font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:14px;line-height:1.428571429;color:#555;background-color:#fff}input,button,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}a{color:#2fa4e7;text-decoration:none}a:hover,a:focus{color:#157ab5;text-decoration:underline}a:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}img{vertical-align:middle}.img-responsive{display:block;height:auto;max-width:100%}.img-rounded{border-radius:6px}.img-thumbnail{display:inline-block;height:auto;max-width:100%;padding:4px;line-height:1.428571429;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.img-circle{border-radius:50%}hr{margin-top:20px;margin-bottom:20px;border:0;border-top:1px solid #eee}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6{font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-weight:500;line-height:1.1;color:#317eac}h1 small,h2 small,h3 small,h4 small,h5 small,h6 small,.h1 small,.h2 small,.h3 small,.h4 small,.h5 small,.h6 small,h1 .small,h2 .small,h3 .small,h4 .small,h5 .small,h6 .small,.h1 .small,.h2 .small,.h3 .small,.h4 .small,.h5 .small,.h6 .small{font-weight:normal;line-height:1;color:#999}h1,h2,h3{margin-top:20px;margin-bottom:10px}h1 small,h2 small,h3 small,h1 .small,h2 .small,h3 .small{font-size:65%}h4,h5,h6{margin-top:10px;margin-bottom:10px}h4 small,h5 small,h6 small,h4 .small,h5 .small,h6 .small{font-size:75%}h1,.h1{font-size:36px}h2,.h2{font-size:30px}h3,.h3{font-size:24px}h4,.h4{font-size:18px}h5,.h5{font-size:14px}h6,.h6{font-size:12px}p{margin:0 0 10px}.lead{margin-bottom:20px;font-size:16px;font-weight:200;line-height:1.4}@media(min-width:768px){.lead{font-size:21px}}small,.small{font-size:85%}cite{font-style:normal}.text-muted{color:#999}.text-primary{color:#2fa4e7}.text-primary:hover{color:#178acc}.text-warning{color:#c09853}.text-warning:hover{color:#a47e3c}.text-danger{color:#b94a48}.text-danger:hover{color:#953b39}.text-success{color:#468847}.text-success:hover{color:#356635}.text-info{color:#3a87ad}.text-info:hover{color:#2d6987}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}.page-header{padding-bottom:9px;margin:40px 0 20px;border-bottom:1px solid #eee}ul,ol{margin-top:0;margin-bottom:10px}ul ul,ol ul,ul ol,ol ol{margin-bottom:0}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none}.list-inline>li{display:inline-block;padding-right:5px;padding-left:5px}.list-inline>li:first-child{padding-left:0}dl{margin-top:0;margin-bottom:20px}dt,dd{line-height:1.428571429}dt{font-weight:bold}dd{margin-left:0}@media(min-width:768px){.dl-horizontal dt{float:left;width:160px;overflow:hidden;clear:left;text-align:right;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}.dl-horizontal dd:before,.dl-horizontal dd:after{display:table;content:\" \"}.dl-horizontal dd:after{clear:both}.dl-horizontal dd:before,.dl-horizontal dd:after{display:table;content:\" \"}.dl-horizontal dd:after{clear:both}.dl-horizontal dd:before,.dl-horizontal dd:after{display:table;content:\" \"}.dl-horizontal dd:after{clear:both}.dl-horizontal dd:before,.dl-horizontal dd:after{display:table;content:\" \"}.dl-horizontal dd:after{clear:both}.dl-horizontal dd:before,.dl-horizontal dd:after{display:table;content:\" \"}.dl-horizontal dd:after{clear:both}}abbr[title],abbr[data-original-title]{cursor:help;border-bottom:1px dotted #999}.initialism{font-size:90%;text-transform:uppercase}blockquote{padding:10px 20px;margin:0 0 20px;border-left:5px solid #eee}blockquote p{font-size:17.5px;font-weight:300;line-height:1.25}blockquote p:last-child{margin-bottom:0}blockquote small,blockquote .small{display:block;line-height:1.428571429;color:#999}blockquote small:before,blockquote .small:before{content:'\\2014 \\00A0'}blockquote.pull-right{padding-right:15px;padding-left:0;border-right:5px solid #eee;border-left:0}blockquote.pull-right p,blockquote.pull-right small,blockquote.pull-right .small{text-align:right}blockquote.pull-right small:before,blockquote.pull-right .small:before{content:''}blockquote.pull-right small:after,blockquote.pull-right .small:after{content:'\\00A0 \\2014'}blockquote:before,blockquote:after{content:\"\"}address{margin-bottom:20px;font-style:normal;line-height:1.428571429}code,kbd,pre,samp{font-family:Menlo,Monaco,Consolas,\"Courier New\",monospace}code{padding:2px 4px;font-size:90%;color:#c7254e;white-space:nowrap;background-color:#f9f2f4;border-radius:4px}pre{display:block;padding:9.5px;margin:0 0 10px;font-size:13px;line-height:1.428571429;color:#333;word-break:break-all;word-wrap:break-word;background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px}pre code{padding:0;font-size:inherit;color:inherit;white-space:pre-wrap;background-color:transparent;border-radius:0}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.container:before,.container:after{display:table;content:\" \"}.container:after{clear:both}.container:before,.container:after{display:table;content:\" \"}.container:after{clear:both}.container:before,.container:after{display:table;content:\" \"}.container:after{clear:both}.container:before,.container:after{display:table;content:\" \"}.container:after{clear:both}.container:before,.container:after{display:table;content:\" \"}.container:after{clear:both}@media(min-width:768px){.container{width:750px}}@media(min-width:992px){.container{width:970px}}@media(min-width:1200px){.container{width:1170px}}.row{margin-right:-15px;margin-left:-15px}.row:before,.row:after{display:table;content:\" \"}.row:after{clear:both}.row:before,.row:after{display:table;content:\" \"}.row:after{clear:both}.row:before,.row:after{display:table;content:\" \"}.row:after{clear:both}.row:before,.row:after{display:table;content:\" \"}.row:after{clear:both}.row:before,.row:after{display:table;content:\" \"}.row:after{clear:both}.col-xs-1,.col-sm-1,.col-md-1,.col-lg-1,.col-xs-2,.col-sm-2,.col-md-2,.col-lg-2,.col-xs-3,.col-sm-3,.col-md-3,.col-lg-3,.col-xs-4,.col-sm-4,.col-md-4,.col-lg-4,.col-xs-5,.col-sm-5,.col-md-5,.col-lg-5,.col-xs-6,.col-sm-6,.col-md-6,.col-lg-6,.col-xs-7,.col-sm-7,.col-md-7,.col-lg-7,.col-xs-8,.col-sm-8,.col-md-8,.col-lg-8,.col-xs-9,.col-sm-9,.col-md-9,.col-lg-9,.col-xs-10,.col-sm-10,.col-md-10,.col-lg-10,.col-xs-11,.col-sm-11,.col-md-11,.col-lg-11,.col-xs-12,.col-sm-12,.col-md-12,.col-lg-12{position:relative;min-height:1px;padding-right:15px;padding-left:15px}.col-xs-1,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9,.col-xs-10,.col-xs-11,.col-xs-12{float:left}.col-xs-12{width:100%}.col-xs-11{width:91.66666666666666%}.col-xs-10{width:83.33333333333334%}.col-xs-9{width:75%}.col-xs-8{width:66.66666666666666%}.col-xs-7{width:58.333333333333336%}.col-xs-6{width:50%}.col-xs-5{width:41.66666666666667%}.col-xs-4{width:33.33333333333333%}.col-xs-3{width:25%}.col-xs-2{width:16.666666666666664%}.col-xs-1{width:8.333333333333332%}.col-xs-pull-12{right:100%}.col-xs-pull-11{right:91.66666666666666%}.col-xs-pull-10{right:83.33333333333334%}.col-xs-pull-9{right:75%}.col-xs-pull-8{right:66.66666666666666%}.col-xs-pull-7{right:58.333333333333336%}.col-xs-pull-6{right:50%}.col-xs-pull-5{right:41.66666666666667%}.col-xs-pull-4{right:33.33333333333333%}.col-xs-pull-3{right:25%}.col-xs-pull-2{right:16.666666666666664%}.col-xs-pull-1{right:8.333333333333332%}.col-xs-pull-0{right:0}.col-xs-push-12{left:100%}.col-xs-push-11{left:91.66666666666666%}.col-xs-push-10{left:83.33333333333334%}.col-xs-push-9{left:75%}.col-xs-push-8{left:66.66666666666666%}.col-xs-push-7{left:58.333333333333336%}.col-xs-push-6{left:50%}.col-xs-push-5{left:41.66666666666667%}.col-xs-push-4{left:33.33333333333333%}.col-xs-push-3{left:25%}.col-xs-push-2{left:16.666666666666664%}.col-xs-push-1{left:8.333333333333332%}.col-xs-push-0{left:0}.col-xs-offset-12{margin-left:100%}.col-xs-offset-11{margin-left:91.66666666666666%}.col-xs-offset-10{margin-left:83.33333333333334%}.col-xs-offset-9{margin-left:75%}.col-xs-offset-8{margin-left:66.66666666666666%}.col-xs-offset-7{margin-left:58.333333333333336%}.col-xs-offset-6{margin-left:50%}.col-xs-offset-5{margin-left:41.66666666666667%}.col-xs-offset-4{margin-left:33.33333333333333%}.col-xs-offset-3{margin-left:25%}.col-xs-offset-2{margin-left:16.666666666666664%}.col-xs-offset-1{margin-left:8.333333333333332%}.col-xs-offset-0{margin-left:0}@media(min-width:768px){.col-sm-1,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-10,.col-sm-11,.col-sm-12{float:left}.col-sm-12{width:100%}.col-sm-11{width:91.66666666666666%}.col-sm-10{width:83.33333333333334%}.col-sm-9{width:75%}.col-sm-8{width:66.66666666666666%}.col-sm-7{width:58.333333333333336%}.col-sm-6{width:50%}.col-sm-5{width:41.66666666666667%}.col-sm-4{width:33.33333333333333%}.col-sm-3{width:25%}.col-sm-2{width:16.666666666666664%}.col-sm-1{width:8.333333333333332%}.col-sm-pull-12{right:100%}.col-sm-pull-11{right:91.66666666666666%}.col-sm-pull-10{right:83.33333333333334%}.col-sm-pull-9{right:75%}.col-sm-pull-8{right:66.66666666666666%}.col-sm-pull-7{right:58.333333333333336%}.col-sm-pull-6{right:50%}.col-sm-pull-5{right:41.66666666666667%}.col-sm-pull-4{right:33.33333333333333%}.col-sm-pull-3{right:25%}.col-sm-pull-2{right:16.666666666666664%}.col-sm-pull-1{right:8.333333333333332%}.col-sm-pull-0{right:0}.col-sm-push-12{left:100%}.col-sm-push-11{left:91.66666666666666%}.col-sm-push-10{left:83.33333333333334%}.col-sm-push-9{left:75%}.col-sm-push-8{left:66.66666666666666%}.col-sm-push-7{left:58.333333333333336%}.col-sm-push-6{left:50%}.col-sm-push-5{left:41.66666666666667%}.col-sm-push-4{left:33.33333333333333%}.col-sm-push-3{left:25%}.col-sm-push-2{left:16.666666666666664%}.col-sm-push-1{left:8.333333333333332%}.col-sm-push-0{left:0}.col-sm-offset-12{margin-left:100%}.col-sm-offset-11{margin-left:91.66666666666666%}.col-sm-offset-10{margin-left:83.33333333333334%}.col-sm-offset-9{margin-left:75%}.col-sm-offset-8{margin-left:66.66666666666666%}.col-sm-offset-7{margin-left:58.333333333333336%}.col-sm-offset-6{margin-left:50%}.col-sm-offset-5{margin-left:41.66666666666667%}.col-sm-offset-4{margin-left:33.33333333333333%}.col-sm-offset-3{margin-left:25%}.col-sm-offset-2{margin-left:16.666666666666664%}.col-sm-offset-1{margin-left:8.333333333333332%}.col-sm-offset-0{margin-left:0}}@media(min-width:992px){.col-md-1,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-10,.col-md-11,.col-md-12{float:left}.col-md-12{width:100%}.col-md-11{width:91.66666666666666%}.col-md-10{width:83.33333333333334%}.col-md-9{width:75%}.col-md-8{width:66.66666666666666%}.col-md-7{width:58.333333333333336%}.col-md-6{width:50%}.col-md-5{width:41.66666666666667%}.col-md-4{width:33.33333333333333%}.col-md-3{width:25%}.col-md-2{width:16.666666666666664%}.col-md-1{width:8.333333333333332%}.col-md-pull-12{right:100%}.col-md-pull-11{right:91.66666666666666%}.col-md-pull-10{right:83.33333333333334%}.col-md-pull-9{right:75%}.col-md-pull-8{right:66.66666666666666%}.col-md-pull-7{right:58.333333333333336%}.col-md-pull-6{right:50%}.col-md-pull-5{right:41.66666666666667%}.col-md-pull-4{right:33.33333333333333%}.col-md-pull-3{right:25%}.col-md-pull-2{right:16.666666666666664%}.col-md-pull-1{right:8.333333333333332%}.col-md-pull-0{right:0}.col-md-push-12{left:100%}.col-md-push-11{left:91.66666666666666%}.col-md-push-10{left:83.33333333333334%}.col-md-push-9{left:75%}.col-md-push-8{left:66.66666666666666%}.col-md-push-7{left:58.333333333333336%}.col-md-push-6{left:50%}.col-md-push-5{left:41.66666666666667%}.col-md-push-4{left:33.33333333333333%}.col-md-push-3{left:25%}.col-md-push-2{left:16.666666666666664%}.col-md-push-1{left:8.333333333333332%}.col-md-push-0{left:0}.col-md-offset-12{margin-left:100%}.col-md-offset-11{margin-left:91.66666666666666%}.col-md-offset-10{margin-left:83.33333333333334%}.col-md-offset-9{margin-left:75%}.col-md-offset-8{margin-left:66.66666666666666%}.col-md-offset-7{margin-left:58.333333333333336%}.col-md-offset-6{margin-left:50%}.col-md-offset-5{margin-left:41.66666666666667%}.col-md-offset-4{margin-left:33.33333333333333%}.col-md-offset-3{margin-left:25%}.col-md-offset-2{margin-left:16.666666666666664%}.col-md-offset-1{margin-left:8.333333333333332%}.col-md-offset-0{margin-left:0}}@media(min-width:1200px){.col-lg-1,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-10,.col-lg-11,.col-lg-12{float:left}.col-lg-12{width:100%}.col-lg-11{width:91.66666666666666%}.col-lg-10{width:83.33333333333334%}.col-lg-9{width:75%}.col-lg-8{width:66.66666666666666%}.col-lg-7{width:58.333333333333336%}.col-lg-6{width:50%}.col-lg-5{width:41.66666666666667%}.col-lg-4{width:33.33333333333333%}.col-lg-3{width:25%}.col-lg-2{width:16.666666666666664%}.col-lg-1{width:8.333333333333332%}.col-lg-pull-12{right:100%}.col-lg-pull-11{right:91.66666666666666%}.col-lg-pull-10{right:83.33333333333334%}.col-lg-pull-9{right:75%}.col-lg-pull-8{right:66.66666666666666%}.col-lg-pull-7{right:58.333333333333336%}.col-lg-pull-6{right:50%}.col-lg-pull-5{right:41.66666666666667%}.col-lg-pull-4{right:33.33333333333333%}.col-lg-pull-3{right:25%}.col-lg-pull-2{right:16.666666666666664%}.col-lg-pull-1{right:8.333333333333332%}.col-lg-pull-0{right:0}.col-lg-push-12{left:100%}.col-lg-push-11{left:91.66666666666666%}.col-lg-push-10{left:83.33333333333334%}.col-lg-push-9{left:75%}.col-lg-push-8{left:66.66666666666666%}.col-lg-push-7{left:58.333333333333336%}.col-lg-push-6{left:50%}.col-lg-push-5{left:41.66666666666667%}.col-lg-push-4{left:33.33333333333333%}.col-lg-push-3{left:25%}.col-lg-push-2{left:16.666666666666664%}.col-lg-push-1{left:8.333333333333332%}.col-lg-push-0{left:0}.col-lg-offset-12{margin-left:100%}.col-lg-offset-11{margin-left:91.66666666666666%}.col-lg-offset-10{margin-left:83.33333333333334%}.col-lg-offset-9{margin-left:75%}.col-lg-offset-8{margin-left:66.66666666666666%}.col-lg-offset-7{margin-left:58.333333333333336%}.col-lg-offset-6{margin-left:50%}.col-lg-offset-5{margin-left:41.66666666666667%}.col-lg-offset-4{margin-left:33.33333333333333%}.col-lg-offset-3{margin-left:25%}.col-lg-offset-2{margin-left:16.666666666666664%}.col-lg-offset-1{margin-left:8.333333333333332%}.col-lg-offset-0{margin-left:0}}table{max-width:100%;background-color:transparent}th{text-align:left}.table{width:100%;margin-bottom:20px}.table>thead>tr>th,.table>tbody>tr>th,.table>tfoot>tr>th,.table>thead>tr>td,.table>tbody>tr>td,.table>tfoot>tr>td{padding:8px;line-height:1.428571429;vertical-align:top;border-top:1px solid #ddd}.table>thead>tr>th{vertical-align:bottom;border-bottom:2px solid #ddd}.table>caption+thead>tr:first-child>th,.table>colgroup+thead>tr:first-child>th,.table>thead:first-child>tr:first-child>th,.table>caption+thead>tr:first-child>td,.table>colgroup+thead>tr:first-child>td,.table>thead:first-child>tr:first-child>td{border-top:0}.table>tbody+tbody{border-top:2px solid #ddd}.table .table{background-color:#fff}.table-condensed>thead>tr>th,.table-condensed>tbody>tr>th,.table-condensed>tfoot>tr>th,.table-condensed>thead>tr>td,.table-condensed>tbody>tr>td,.table-condensed>tfoot>tr>td{padding:5px}.table-bordered{border:1px solid #ddd}.table-bordered>thead>tr>th,.table-bordered>tbody>tr>th,.table-bordered>tfoot>tr>th,.table-bordered>thead>tr>td,.table-bordered>tbody>tr>td,.table-bordered>tfoot>tr>td{border:1px solid #ddd}.table-bordered>thead>tr>th,.table-bordered>thead>tr>td{border-bottom-width:2px}.table-striped>tbody>tr:nth-child(odd)>td,.table-striped>tbody>tr:nth-child(odd)>th{background-color:#f9f9f9}.table-hover>tbody>tr:hover>td,.table-hover>tbody>tr:hover>th{background-color:#f5f5f5}table col[class*=\"col-\"]{position:static;display:table-column;float:none}table td[class*=\"col-\"],table th[class*=\"col-\"]{display:table-cell;float:none}.table>thead>tr>.active,.table>tbody>tr>.active,.table>tfoot>tr>.active,.table>thead>.active>td,.table>tbody>.active>td,.table>tfoot>.active>td,.table>thead>.active>th,.table>tbody>.active>th,.table>tfoot>.active>th{background-color:#f5f5f5}.table-hover>tbody>tr>.active:hover,.table-hover>tbody>.active:hover>td,.table-hover>tbody>.active:hover>th{background-color:#e8e8e8}.table>thead>tr>.success,.table>tbody>tr>.success,.table>tfoot>tr>.success,.table>thead>.success>td,.table>tbody>.success>td,.table>tfoot>.success>td,.table>thead>.success>th,.table>tbody>.success>th,.table>tfoot>.success>th{background-color:#dff0d8}.table-hover>tbody>tr>.success:hover,.table-hover>tbody>.success:hover>td,.table-hover>tbody>.success:hover>th{background-color:#d0e9c6}.table>thead>tr>.danger,.table>tbody>tr>.danger,.table>tfoot>tr>.danger,.table>thead>.danger>td,.table>tbody>.danger>td,.table>tfoot>.danger>td,.table>thead>.danger>th,.table>tbody>.danger>th,.table>tfoot>.danger>th{background-color:#f2dede}.table-hover>tbody>tr>.danger:hover,.table-hover>tbody>.danger:hover>td,.table-hover>tbody>.danger:hover>th{background-color:#ebcccc}.table>thead>tr>.warning,.table>tbody>tr>.warning,.table>tfoot>tr>.warning,.table>thead>.warning>td,.table>tbody>.warning>td,.table>tfoot>.warning>td,.table>thead>.warning>th,.table>tbody>.warning>th,.table>tfoot>.warning>th{background-color:#fcf8e3}.table-hover>tbody>tr>.warning:hover,.table-hover>tbody>.warning:hover>td,.table-hover>tbody>.warning:hover>th{background-color:#faf2cc}@media(max-width:767px){.table-responsive{width:100%;margin-bottom:15px;overflow-x:scroll;overflow-y:hidden;border:1px solid #ddd;-ms-overflow-style:-ms-autohiding-scrollbar;-webkit-overflow-scrolling:touch}.table-responsive>.table{margin-bottom:0}.table-responsive>.table>thead>tr>th,.table-responsive>.table>tbody>tr>th,.table-responsive>.table>tfoot>tr>th,.table-responsive>.table>thead>tr>td,.table-responsive>.table>tbody>tr>td,.table-responsive>.table>tfoot>tr>td{white-space:nowrap}.table-responsive>.table-bordered{border:0}.table-responsive>.table-bordered>thead>tr>th:first-child,.table-responsive>.table-bordered>tbody>tr>th:first-child,.table-responsive>.table-bordered>tfoot>tr>th:first-child,.table-responsive>.table-bordered>thead>tr>td:first-child,.table-responsive>.table-bordered>tbody>tr>td:first-child,.table-responsive>.table-bordered>tfoot>tr>td:first-child{border-left:0}.table-responsive>.table-bordered>thead>tr>th:last-child,.table-responsive>.table-bordered>tbody>tr>th:last-child,.table-responsive>.table-bordered>tfoot>tr>th:last-child,.table-responsive>.table-bordered>thead>tr>td:last-child,.table-responsive>.table-bordered>tbody>tr>td:last-child,.table-responsive>.table-bordered>tfoot>tr>td:last-child{border-right:0}.table-responsive>.table-bordered>tbody>tr:last-child>th,.table-responsive>.table-bordered>tfoot>tr:last-child>th,.table-responsive>.table-bordered>tbody>tr:last-child>td,.table-responsive>.table-bordered>tfoot>tr:last-child>td{border-bottom:0}}fieldset{padding:0;margin:0;border:0}legend{display:block;width:100%;padding:0;margin-bottom:20px;font-size:21px;line-height:inherit;color:#555;border:0;border-bottom:1px solid #e5e5e5}label{display:inline-block;margin-bottom:5px;font-weight:bold}input[type=\"search\"]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}input[type=\"radio\"],input[type=\"checkbox\"]{margin:4px 0 0;margin-top:1px \\9;line-height:normal}input[type=\"file\"]{display:block}select[multiple],select[size]{height:auto}select optgroup{font-family:inherit;font-size:inherit;font-style:inherit}input[type=\"file\"]:focus,input[type=\"radio\"]:focus,input[type=\"checkbox\"]:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}input[type=\"number\"]::-webkit-outer-spin-button,input[type=\"number\"]::-webkit-inner-spin-button{height:auto}output{display:block;padding-top:9px;font-size:14px;line-height:1.428571429;color:#555;vertical-align:middle}.form-control{display:block;width:100%;height:38px;padding:8px 12px;font-size:14px;line-height:1.428571429;color:#555;vertical-align:middle;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-webkit-transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s}.form-control:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(102,175,233,0.6);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(102,175,233,0.6)}.form-control:-moz-placeholder{color:#999}.form-control::-moz-placeholder{color:#999;opacity:1}.form-control:-ms-input-placeholder{color:#999}.form-control::-webkit-input-placeholder{color:#999}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control{cursor:not-allowed;background-color:#eee}textarea.form-control{height:auto}.form-group{margin-bottom:15px}.radio,.checkbox{display:block;min-height:20px;padding-left:20px;margin-top:10px;margin-bottom:10px;vertical-align:middle}.radio label,.checkbox label{display:inline;margin-bottom:0;font-weight:normal;cursor:pointer}.radio input[type=\"radio\"],.radio-inline input[type=\"radio\"],.checkbox input[type=\"checkbox\"],.checkbox-inline input[type=\"checkbox\"]{float:left;margin-left:-20px}.radio+.radio,.checkbox+.checkbox{margin-top:-5px}.radio-inline,.checkbox-inline{display:inline-block;padding-left:20px;margin-bottom:0;font-weight:normal;vertical-align:middle;cursor:pointer}.radio-inline+.radio-inline,.checkbox-inline+.checkbox-inline{margin-top:0;margin-left:10px}input[type=\"radio\"][disabled],input[type=\"checkbox\"][disabled],.radio[disabled],.radio-inline[disabled],.checkbox[disabled],.checkbox-inline[disabled],fieldset[disabled] input[type=\"radio\"],fieldset[disabled] input[type=\"checkbox\"],fieldset[disabled] .radio,fieldset[disabled] .radio-inline,fieldset[disabled] .checkbox,fieldset[disabled] .checkbox-inline{cursor:not-allowed}.input-sm{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-sm{height:30px;line-height:30px}textarea.input-sm{height:auto}.input-lg{height:54px;padding:14px 16px;font-size:18px;line-height:1.33;border-radius:6px}select.input-lg{height:54px;line-height:54px}textarea.input-lg{height:auto}.has-warning .help-block,.has-warning .control-label,.has-warning .radio,.has-warning .checkbox,.has-warning .radio-inline,.has-warning .checkbox-inline{color:#c09853}.has-warning .form-control{border-color:#c09853;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.has-warning .form-control:focus{border-color:#a47e3c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #dbc59e;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #dbc59e}.has-warning .input-group-addon{color:#c09853;background-color:#fcf8e3;border-color:#c09853}.has-error .help-block,.has-error .control-label,.has-error .radio,.has-error .checkbox,.has-error .radio-inline,.has-error .checkbox-inline{color:#b94a48}.has-error .form-control{border-color:#b94a48;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.has-error .form-control:focus{border-color:#953b39;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #d59392;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #d59392}.has-error .input-group-addon{color:#b94a48;background-color:#f2dede;border-color:#b94a48}.has-success .help-block,.has-success .control-label,.has-success .radio,.has-success .checkbox,.has-success .radio-inline,.has-success .checkbox-inline{color:#468847}.has-success .form-control{border-color:#468847;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.has-success .form-control:focus{border-color:#356635;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7aba7b;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7aba7b}.has-success .input-group-addon{color:#468847;background-color:#dff0d8;border-color:#468847}.form-control-static{margin-bottom:0}.help-block{display:block;margin-top:5px;margin-bottom:10px;color:#959595}@media(min-width:768px){.form-inline .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.form-inline .form-control{display:inline-block}.form-inline select.form-control{width:auto}.form-inline .radio,.form-inline .checkbox{display:inline-block;padding-left:0;margin-top:0;margin-bottom:0}.form-inline .radio input[type=\"radio\"],.form-inline .checkbox input[type=\"checkbox\"]{float:none;margin-left:0}}.form-horizontal .control-label,.form-horizontal .radio,.form-horizontal .checkbox,.form-horizontal .radio-inline,.form-horizontal .checkbox-inline{padding-top:9px;margin-top:0;margin-bottom:0}.form-horizontal .radio,.form-horizontal .checkbox{min-height:29px}.form-horizontal .form-group{margin-right:-15px;margin-left:-15px}.form-horizontal .form-group:before,.form-horizontal .form-group:after{display:table;content:\" \"}.form-horizontal .form-group:after{clear:both}.form-horizontal .form-group:before,.form-horizontal .form-group:after{display:table;content:\" \"}.form-horizontal .form-group:after{clear:both}.form-horizontal .form-group:before,.form-horizontal .form-group:after{display:table;content:\" \"}.form-horizontal .form-group:after{clear:both}.form-horizontal .form-group:before,.form-horizontal .form-group:after{display:table;content:\" \"}.form-horizontal .form-group:after{clear:both}.form-horizontal .form-group:before,.form-horizontal .form-group:after{display:table;content:\" \"}.form-horizontal .form-group:after{clear:both}.form-horizontal .form-control-static{padding-top:9px}@media(min-width:768px){.form-horizontal .control-label{text-align:right}}.btn{display:inline-block;padding:8px 12px;margin-bottom:0;font-size:14px;font-weight:normal;line-height:1.428571429;text-align:center;white-space:nowrap;vertical-align:middle;cursor:pointer;background-image:none;border:1px solid transparent;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none}.btn:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.btn:hover,.btn:focus{color:#555;text-decoration:none}.btn:active,.btn.active{background-image:none;outline:0;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,0.125);box-shadow:inset 0 3px 5px rgba(0,0,0,0.125)}.btn.disabled,.btn[disabled],fieldset[disabled] .btn{pointer-events:none;cursor:not-allowed;opacity:.65;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none}.btn-default{color:#555;background-color:#fff;border-color:rgba(0,0,0,0.1)}.btn-default:hover,.btn-default:focus,.btn-default:active,.btn-default.active,.open .dropdown-toggle.btn-default{color:#555;background-color:#ebebeb;border-color:rgba(0,0,0,0.1)}.btn-default:active,.btn-default.active,.open .dropdown-toggle.btn-default{background-image:none}.btn-default.disabled,.btn-default[disabled],fieldset[disabled] .btn-default,.btn-default.disabled:hover,.btn-default[disabled]:hover,fieldset[disabled] .btn-default:hover,.btn-default.disabled:focus,.btn-default[disabled]:focus,fieldset[disabled] .btn-default:focus,.btn-default.disabled:active,.btn-default[disabled]:active,fieldset[disabled] .btn-default:active,.btn-default.disabled.active,.btn-default[disabled].active,fieldset[disabled] .btn-default.active{background-color:#fff;border-color:rgba(0,0,0,0.1)}.btn-default .badge{color:#fff;background-color:#fff}.btn-primary{color:#fff;background-color:#2fa4e7;border-color:#2fa4e7}.btn-primary:hover,.btn-primary:focus,.btn-primary:active,.btn-primary.active,.open .dropdown-toggle.btn-primary{color:#fff;background-color:#1990d5;border-color:#1684c2}.btn-primary:active,.btn-primary.active,.open .dropdown-toggle.btn-primary{background-image:none}.btn-primary.disabled,.btn-primary[disabled],fieldset[disabled] .btn-primary,.btn-primary.disabled:hover,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary:hover,.btn-primary.disabled:focus,.btn-primary[disabled]:focus,fieldset[disabled] .btn-primary:focus,.btn-primary.disabled:active,.btn-primary[disabled]:active,fieldset[disabled] .btn-primary:active,.btn-primary.disabled.active,.btn-primary[disabled].active,fieldset[disabled] .btn-primary.active{background-color:#2fa4e7;border-color:#2fa4e7}.btn-primary .badge{color:#2fa4e7;background-color:#fff}.btn-warning{color:#fff;background-color:#dd5600;border-color:#dd5600}.btn-warning:hover,.btn-warning:focus,.btn-warning:active,.btn-warning.active,.open .dropdown-toggle.btn-warning{color:#fff;background-color:#b44600;border-color:#a03e00}.btn-warning:active,.btn-warning.active,.open .dropdown-toggle.btn-warning{background-image:none}.btn-warning.disabled,.btn-warning[disabled],fieldset[disabled] .btn-warning,.btn-warning.disabled:hover,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning:hover,.btn-warning.disabled:focus,.btn-warning[disabled]:focus,fieldset[disabled] .btn-warning:focus,.btn-warning.disabled:active,.btn-warning[disabled]:active,fieldset[disabled] .btn-warning:active,.btn-warning.disabled.active,.btn-warning[disabled].active,fieldset[disabled] .btn-warning.active{background-color:#dd5600;border-color:#dd5600}.btn-warning .badge{color:#dd5600;background-color:#fff}.btn-danger{color:#fff;background-color:#c71c22;border-color:#c71c22}.btn-danger:hover,.btn-danger:focus,.btn-danger:active,.btn-danger.active,.open .dropdown-toggle.btn-danger{color:#fff;background-color:#a3171c;border-color:#911419}.btn-danger:active,.btn-danger.active,.open .dropdown-toggle.btn-danger{background-image:none}.btn-danger.disabled,.btn-danger[disabled],fieldset[disabled] .btn-danger,.btn-danger.disabled:hover,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger:hover,.btn-danger.disabled:focus,.btn-danger[disabled]:focus,fieldset[disabled] .btn-danger:focus,.btn-danger.disabled:active,.btn-danger[disabled]:active,fieldset[disabled] .btn-danger:active,.btn-danger.disabled.active,.btn-danger[disabled].active,fieldset[disabled] .btn-danger.active{background-color:#c71c22;border-color:#c71c22}.btn-danger .badge{color:#c71c22;background-color:#fff}.btn-success{color:#fff;background-color:#73a839;border-color:#73a839}.btn-success:hover,.btn-success:focus,.btn-success:active,.btn-success.active,.open .dropdown-toggle.btn-success{color:#fff;background-color:#5e8a2f;border-color:#547a29}.btn-success:active,.btn-success.active,.open .dropdown-toggle.btn-success{background-image:none}.btn-success.disabled,.btn-success[disabled],fieldset[disabled] .btn-success,.btn-success.disabled:hover,.btn-success[disabled]:hover,fieldset[disabled] .btn-success:hover,.btn-success.disabled:focus,.btn-success[disabled]:focus,fieldset[disabled] .btn-success:focus,.btn-success.disabled:active,.btn-success[disabled]:active,fieldset[disabled] .btn-success:active,.btn-success.disabled.active,.btn-success[disabled].active,fieldset[disabled] .btn-success.active{background-color:#73a839;border-color:#73a839}.btn-success .badge{color:#73a839;background-color:#fff}.btn-info{color:#fff;background-color:#033c73;border-color:#033c73}.btn-info:hover,.btn-info:focus,.btn-info:active,.btn-info.active,.open .dropdown-toggle.btn-info{color:#fff;background-color:#02274b;border-color:#011d37}.btn-info:active,.btn-info.active,.open .dropdown-toggle.btn-info{background-image:none}.btn-info.disabled,.btn-info[disabled],fieldset[disabled] .btn-info,.btn-info.disabled:hover,.btn-info[disabled]:hover,fieldset[disabled] .btn-info:hover,.btn-info.disabled:focus,.btn-info[disabled]:focus,fieldset[disabled] .btn-info:focus,.btn-info.disabled:active,.btn-info[disabled]:active,fieldset[disabled] .btn-info:active,.btn-info.disabled.active,.btn-info[disabled].active,fieldset[disabled] .btn-info.active{background-color:#033c73;border-color:#033c73}.btn-info .badge{color:#033c73;background-color:#fff}.btn-link{font-weight:normal;color:#2fa4e7;cursor:pointer;border-radius:0}.btn-link,.btn-link:active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link,.btn-link:hover,.btn-link:focus,.btn-link:active{border-color:transparent}.btn-link:hover,.btn-link:focus{color:#157ab5;text-decoration:underline;background-color:transparent}.btn-link[disabled]:hover,fieldset[disabled] .btn-link:hover,.btn-link[disabled]:focus,fieldset[disabled] .btn-link:focus{color:#999;text-decoration:none}.btn-lg{padding:14px 16px;font-size:18px;line-height:1.33;border-radius:6px}.btn-sm{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-xs{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-block{display:block;width:100%;padding-right:0;padding-left:0}.btn-block+.btn-block{margin-top:5px}input[type=\"submit\"].btn-block,input[type=\"reset\"].btn-block,input[type=\"button\"].btn-block{width:100%}.fade{opacity:0;-webkit-transition:opacity .15s linear;transition:opacity .15s linear}.fade.in{opacity:1}.collapse{display:none}.collapse.in{display:block}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition:height .35s ease;transition:height .35s ease}@font-face{font-family:'Glyphicons Halflings';src:url('../fonts/glyphicons-halflings-regular.eot');src:url('../fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'),url('../fonts/glyphicons-halflings-regular.woff') format('woff'),url('../fonts/glyphicons-halflings-regular.ttf') format('truetype'),url('../fonts/glyphicons-halflings-regular.svg#glyphicons-halflingsregular') format('svg')}.glyphicon{position:relative;top:1px;display:inline-block;font-family:'Glyphicons Halflings';-webkit-font-smoothing:antialiased;font-style:normal;font-weight:normal;line-height:1;-moz-osx-font-smoothing:grayscale}.glyphicon:empty{width:1em}.glyphicon-asterisk:before{content:\"\\2a\"}.glyphicon-plus:before{content:\"\\2b\"}.glyphicon-euro:before{content:\"\\20ac\"}.glyphicon-minus:before{content:\"\\2212\"}.glyphicon-cloud:before{content:\"\\2601\"}.glyphicon-envelope:before{content:\"\\2709\"}.glyphicon-pencil:before{content:\"\\270f\"}.glyphicon-glass:before{content:\"\\e001\"}.glyphicon-music:before{content:\"\\e002\"}.glyphicon-search:before{content:\"\\e003\"}.glyphicon-heart:before{content:\"\\e005\"}.glyphicon-star:before{content:\"\\e006\"}.glyphicon-star-empty:before{content:\"\\e007\"}.glyphicon-user:before{content:\"\\e008\"}.glyphicon-film:before{content:\"\\e009\"}.glyphicon-th-large:before{content:\"\\e010\"}.glyphicon-th:before{content:\"\\e011\"}.glyphicon-th-list:before{content:\"\\e012\"}.glyphicon-ok:before{content:\"\\e013\"}.glyphicon-remove:before{content:\"\\e014\"}.glyphicon-zoom-in:before{content:\"\\e015\"}.glyphicon-zoom-out:before{content:\"\\e016\"}.glyphicon-off:before{content:\"\\e017\"}.glyphicon-signal:before{content:\"\\e018\"}.glyphicon-cog:before{content:\"\\e019\"}.glyphicon-trash:before{content:\"\\e020\"}.glyphicon-home:before{content:\"\\e021\"}.glyphicon-file:before{content:\"\\e022\"}.glyphicon-time:before{content:\"\\e023\"}.glyphicon-road:before{content:\"\\e024\"}.glyphicon-download-alt:before{content:\"\\e025\"}.glyphicon-download:before{content:\"\\e026\"}.glyphicon-upload:before{content:\"\\e027\"}.glyphicon-inbox:before{content:\"\\e028\"}.glyphicon-play-circle:before{content:\"\\e029\"}.glyphicon-repeat:before{content:\"\\e030\"}.glyphicon-refresh:before{content:\"\\e031\"}.glyphicon-list-alt:before{content:\"\\e032\"}.glyphicon-lock:before{content:\"\\e033\"}.glyphicon-flag:before{content:\"\\e034\"}.glyphicon-headphones:before{content:\"\\e035\"}.glyphicon-volume-off:before{content:\"\\e036\"}.glyphicon-volume-down:before{content:\"\\e037\"}.glyphicon-volume-up:before{content:\"\\e038\"}.glyphicon-qrcode:before{content:\"\\e039\"}.glyphicon-barcode:before{content:\"\\e040\"}.glyphicon-tag:before{content:\"\\e041\"}.glyphicon-tags:before{content:\"\\e042\"}.glyphicon-book:before{content:\"\\e043\"}.glyphicon-bookmark:before{content:\"\\e044\"}.glyphicon-print:before{content:\"\\e045\"}.glyphicon-camera:before{content:\"\\e046\"}.glyphicon-font:before{content:\"\\e047\"}.glyphicon-bold:before{content:\"\\e048\"}.glyphicon-italic:before{content:\"\\e049\"}.glyphicon-text-height:before{content:\"\\e050\"}.glyphicon-text-width:before{content:\"\\e051\"}.glyphicon-align-left:before{content:\"\\e052\"}.glyphicon-align-center:before{content:\"\\e053\"}.glyphicon-align-right:before{content:\"\\e054\"}.glyphicon-align-justify:before{content:\"\\e055\"}.glyphicon-list:before{content:\"\\e056\"}.glyphicon-indent-left:before{content:\"\\e057\"}.glyphicon-indent-right:before{content:\"\\e058\"}.glyphicon-facetime-video:before{content:\"\\e059\"}.glyphicon-picture:before{content:\"\\e060\"}.glyphicon-map-marker:before{content:\"\\e062\"}.glyphicon-adjust:before{content:\"\\e063\"}.glyphicon-tint:before{content:\"\\e064\"}.glyphicon-edit:before{content:\"\\e065\"}.glyphicon-share:before{content:\"\\e066\"}.glyphicon-check:before{content:\"\\e067\"}.glyphicon-move:before{content:\"\\e068\"}.glyphicon-step-backward:before{content:\"\\e069\"}.glyphicon-fast-backward:before{content:\"\\e070\"}.glyphicon-backward:before{content:\"\\e071\"}.glyphicon-play:before{content:\"\\e072\"}.glyphicon-pause:before{content:\"\\e073\"}.glyphicon-stop:before{content:\"\\e074\"}.glyphicon-forward:before{content:\"\\e075\"}.glyphicon-fast-forward:before{content:\"\\e076\"}.glyphicon-step-forward:before{content:\"\\e077\"}.glyphicon-eject:before{content:\"\\e078\"}.glyphicon-chevron-left:before{content:\"\\e079\"}.glyphicon-chevron-right:before{content:\"\\e080\"}.glyphicon-plus-sign:before{content:\"\\e081\"}.glyphicon-minus-sign:before{content:\"\\e082\"}.glyphicon-remove-sign:before{content:\"\\e083\"}.glyphicon-ok-sign:before{content:\"\\e084\"}.glyphicon-question-sign:before{content:\"\\e085\"}.glyphicon-info-sign:before{content:\"\\e086\"}.glyphicon-screenshot:before{content:\"\\e087\"}.glyphicon-remove-circle:before{content:\"\\e088\"}.glyphicon-ok-circle:before{content:\"\\e089\"}.glyphicon-ban-circle:before{content:\"\\e090\"}.glyphicon-arrow-left:before{content:\"\\e091\"}.glyphicon-arrow-right:before{content:\"\\e092\"}.glyphicon-arrow-up:before{content:\"\\e093\"}.glyphicon-arrow-down:before{content:\"\\e094\"}.glyphicon-share-alt:before{content:\"\\e095\"}.glyphicon-resize-full:before{content:\"\\e096\"}.glyphicon-resize-small:before{content:\"\\e097\"}.glyphicon-exclamation-sign:before{content:\"\\e101\"}.glyphicon-gift:before{content:\"\\e102\"}.glyphicon-leaf:before{content:\"\\e103\"}.glyphicon-fire:before{content:\"\\e104\"}.glyphicon-eye-open:before{content:\"\\e105\"}.glyphicon-eye-close:before{content:\"\\e106\"}.glyphicon-warning-sign:before{content:\"\\e107\"}.glyphicon-plane:before{content:\"\\e108\"}.glyphicon-calendar:before{content:\"\\e109\"}.glyphicon-random:before{content:\"\\e110\"}.glyphicon-comment:before{content:\"\\e111\"}.glyphicon-magnet:before{content:\"\\e112\"}.glyphicon-chevron-up:before{content:\"\\e113\"}.glyphicon-chevron-down:before{content:\"\\e114\"}.glyphicon-retweet:before{content:\"\\e115\"}.glyphicon-shopping-cart:before{content:\"\\e116\"}.glyphicon-folder-close:before{content:\"\\e117\"}.glyphicon-folder-open:before{content:\"\\e118\"}.glyphicon-resize-vertical:before{content:\"\\e119\"}.glyphicon-resize-horizontal:before{content:\"\\e120\"}.glyphicon-hdd:before{content:\"\\e121\"}.glyphicon-bullhorn:before{content:\"\\e122\"}.glyphicon-bell:before{content:\"\\e123\"}.glyphicon-certificate:before{content:\"\\e124\"}.glyphicon-thumbs-up:before{content:\"\\e125\"}.glyphicon-thumbs-down:before{content:\"\\e126\"}.glyphicon-hand-right:before{content:\"\\e127\"}.glyphicon-hand-left:before{content:\"\\e128\"}.glyphicon-hand-up:before{content:\"\\e129\"}.glyphicon-hand-down:before{content:\"\\e130\"}.glyphicon-circle-arrow-right:before{content:\"\\e131\"}.glyphicon-circle-arrow-left:before{content:\"\\e132\"}.glyphicon-circle-arrow-up:before{content:\"\\e133\"}.glyphicon-circle-arrow-down:before{content:\"\\e134\"}.glyphicon-globe:before{content:\"\\e135\"}.glyphicon-wrench:before{content:\"\\e136\"}.glyphicon-tasks:before{content:\"\\e137\"}.glyphicon-filter:before{content:\"\\e138\"}.glyphicon-briefcase:before{content:\"\\e139\"}.glyphicon-fullscreen:before{content:\"\\e140\"}.glyphicon-dashboard:before{content:\"\\e141\"}.glyphicon-paperclip:before{content:\"\\e142\"}.glyphicon-heart-empty:before{content:\"\\e143\"}.glyphicon-link:before{content:\"\\e144\"}.glyphicon-phone:before{content:\"\\e145\"}.glyphicon-pushpin:before{content:\"\\e146\"}.glyphicon-usd:before{content:\"\\e148\"}.glyphicon-gbp:before{content:\"\\e149\"}.glyphicon-sort:before{content:\"\\e150\"}.glyphicon-sort-by-alphabet:before{content:\"\\e151\"}.glyphicon-sort-by-alphabet-alt:before{content:\"\\e152\"}.glyphicon-sort-by-order:before{content:\"\\e153\"}.glyphicon-sort-by-order-alt:before{content:\"\\e154\"}.glyphicon-sort-by-attributes:before{content:\"\\e155\"}.glyphicon-sort-by-attributes-alt:before{content:\"\\e156\"}.glyphicon-unchecked:before{content:\"\\e157\"}.glyphicon-expand:before{content:\"\\e158\"}.glyphicon-collapse-down:before{content:\"\\e159\"}.glyphicon-collapse-up:before{content:\"\\e160\"}.glyphicon-log-in:before{content:\"\\e161\"}.glyphicon-flash:before{content:\"\\e162\"}.glyphicon-log-out:before{content:\"\\e163\"}.glyphicon-new-window:before{content:\"\\e164\"}.glyphicon-record:before{content:\"\\e165\"}.glyphicon-save:before{content:\"\\e166\"}.glyphicon-open:before{content:\"\\e167\"}.glyphicon-saved:before{content:\"\\e168\"}.glyphicon-import:before{content:\"\\e169\"}.glyphicon-export:before{content:\"\\e170\"}.glyphicon-send:before{content:\"\\e171\"}.glyphicon-floppy-disk:before{content:\"\\e172\"}.glyphicon-floppy-saved:before{content:\"\\e173\"}.glyphicon-floppy-remove:before{content:\"\\e174\"}.glyphicon-floppy-save:before{content:\"\\e175\"}.glyphicon-floppy-open:before{content:\"\\e176\"}.glyphicon-credit-card:before{content:\"\\e177\"}.glyphicon-transfer:before{content:\"\\e178\"}.glyphicon-cutlery:before{content:\"\\e179\"}.glyphicon-header:before{content:\"\\e180\"}.glyphicon-compressed:before{content:\"\\e181\"}.glyphicon-earphone:before{content:\"\\e182\"}.glyphicon-phone-alt:before{content:\"\\e183\"}.glyphicon-tower:before{content:\"\\e184\"}.glyphicon-stats:before{content:\"\\e185\"}.glyphicon-sd-video:before{content:\"\\e186\"}.glyphicon-hd-video:before{content:\"\\e187\"}.glyphicon-subtitles:before{content:\"\\e188\"}.glyphicon-sound-stereo:before{content:\"\\e189\"}.glyphicon-sound-dolby:before{content:\"\\e190\"}.glyphicon-sound-5-1:before{content:\"\\e191\"}.glyphicon-sound-6-1:before{content:\"\\e192\"}.glyphicon-sound-7-1:before{content:\"\\e193\"}.glyphicon-copyright-mark:before{content:\"\\e194\"}.glyphicon-registration-mark:before{content:\"\\e195\"}.glyphicon-cloud-download:before{content:\"\\e197\"}.glyphicon-cloud-upload:before{content:\"\\e198\"}.glyphicon-tree-conifer:before{content:\"\\e199\"}.glyphicon-tree-deciduous:before{content:\"\\e200\"}.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px solid;border-right:4px solid transparent;border-left:4px solid transparent}.dropdown{position:relative}.dropdown-toggle:focus{outline:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;font-size:14px;list-style:none;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.15);border-radius:4px;-webkit-box-shadow:0 6px 12px rgba(0,0,0,0.175);box-shadow:0 6px 12px rgba(0,0,0,0.175);background-clip:padding-box}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:normal;line-height:1.428571429;color:#333;white-space:nowrap}.dropdown-menu>li>a:hover,.dropdown-menu>li>a:focus{color:#fff;text-decoration:none;background-color:#2fa4e7}.dropdown-menu>.active>a,.dropdown-menu>.active>a:hover,.dropdown-menu>.active>a:focus{color:#fff;text-decoration:none;background-color:#2fa4e7;outline:0}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:hover,.dropdown-menu>.disabled>a:focus{color:#999}.dropdown-menu>.disabled>a:hover,.dropdown-menu>.disabled>a:focus{text-decoration:none;cursor:not-allowed;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.open>.dropdown-menu{display:block}.open>a{outline:0}.dropdown-header{display:block;padding:3px 20px;font-size:12px;line-height:1.428571429;color:#999}.dropdown-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:990}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{border-top:0;border-bottom:4px solid;content:\"\"}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:1px}@media(min-width:768px){.navbar-right .dropdown-menu{right:0;left:auto}}.btn-group,.btn-group-vertical{position:relative;display:inline-block;vertical-align:middle}.btn-group>.btn,.btn-group-vertical>.btn{position:relative;float:left}.btn-group>.btn:hover,.btn-group-vertical>.btn:hover,.btn-group>.btn:focus,.btn-group-vertical>.btn:focus,.btn-group>.btn:active,.btn-group-vertical>.btn:active,.btn-group>.btn.active,.btn-group-vertical>.btn.active{z-index:2}.btn-group>.btn:focus,.btn-group-vertical>.btn:focus{outline:0}.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group{margin-left:-1px}.btn-toolbar:before,.btn-toolbar:after{display:table;content:\" \"}.btn-toolbar:after{clear:both}.btn-toolbar:before,.btn-toolbar:after{display:table;content:\" \"}.btn-toolbar:after{clear:both}.btn-toolbar:before,.btn-toolbar:after{display:table;content:\" \"}.btn-toolbar:after{clear:both}.btn-toolbar:before,.btn-toolbar:after{display:table;content:\" \"}.btn-toolbar:after{clear:both}.btn-toolbar:before,.btn-toolbar:after{display:table;content:\" \"}.btn-toolbar:after{clear:both}.btn-toolbar .btn-group{float:left}.btn-toolbar>.btn+.btn,.btn-toolbar>.btn-group+.btn,.btn-toolbar>.btn+.btn-group,.btn-toolbar>.btn-group+.btn-group{margin-left:5px}.btn-group>.btn:not(:first-child):not(:last-child):not(.dropdown-toggle){border-radius:0}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn:last-child:not(:first-child),.btn-group>.dropdown-toggle:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0}.btn-group>.btn-group{float:left}.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group>.btn-group:first-child>.btn:last-child,.btn-group>.btn-group:first-child>.dropdown-toggle{border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:last-child>.btn:first-child{border-bottom-left-radius:0;border-top-left-radius:0}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle{outline:0}.btn-group-xs>.btn{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-group-sm>.btn{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-group-lg>.btn{padding:14px 16px;font-size:18px;line-height:1.33;border-radius:6px}.btn-group>.btn+.dropdown-toggle{padding-right:8px;padding-left:8px}.btn-group>.btn-lg+.dropdown-toggle{padding-right:12px;padding-left:12px}.btn-group.open .dropdown-toggle{-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,0.125);box-shadow:inset 0 3px 5px rgba(0,0,0,0.125)}.btn-group.open .dropdown-toggle.btn-link{-webkit-box-shadow:none;box-shadow:none}.btn .caret{margin-left:0}.btn-lg .caret{border-width:5px 5px 0;border-bottom-width:0}.dropup .btn-lg .caret{border-width:0 5px 5px}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group,.btn-group-vertical>.btn-group>.btn{display:block;float:none;width:100%;max-width:100%}.btn-group-vertical>.btn-group:before,.btn-group-vertical>.btn-group:after{display:table;content:\" \"}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group:before,.btn-group-vertical>.btn-group:after{display:table;content:\" \"}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group:before,.btn-group-vertical>.btn-group:after{display:table;content:\" \"}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group:before,.btn-group-vertical>.btn-group:after{display:table;content:\" \"}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group:before,.btn-group-vertical>.btn-group:after{display:table;content:\" \"}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group>.btn{float:none}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn:not(:first-child):not(:last-child){border-radius:0}.btn-group-vertical>.btn:first-child:not(:last-child){border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn:last-child:not(:first-child){border-top-right-radius:0;border-bottom-left-radius:4px;border-top-left-radius:0}.btn-group-vertical>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group-vertical>.btn-group:first-child>.btn:last-child,.btn-group-vertical>.btn-group:first-child>.dropdown-toggle{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:last-child>.btn:first-child{border-top-right-radius:0;border-top-left-radius:0}.btn-group-justified{display:table;width:100%;border-collapse:separate;table-layout:fixed}.btn-group-justified>.btn,.btn-group-justified>.btn-group{display:table-cell;float:none;width:1%}.btn-group-justified>.btn-group .btn{width:100%}[data-toggle=\"buttons\"]>.btn>input[type=\"radio\"],[data-toggle=\"buttons\"]>.btn>input[type=\"checkbox\"]{display:none}.input-group{position:relative;display:table;border-collapse:separate}.input-group[class*=\"col-\"]{float:none;padding-right:0;padding-left:0}.input-group .form-control{width:100%;margin-bottom:0}.input-group-lg>.form-control,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.btn{height:54px;padding:14px 16px;font-size:18px;line-height:1.33;border-radius:6px}select.input-group-lg>.form-control,select.input-group-lg>.input-group-addon,select.input-group-lg>.input-group-btn>.btn{height:54px;line-height:54px}textarea.input-group-lg>.form-control,textarea.input-group-lg>.input-group-addon,textarea.input-group-lg>.input-group-btn>.btn{height:auto}.input-group-sm>.form-control,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.btn{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-group-sm>.form-control,select.input-group-sm>.input-group-addon,select.input-group-sm>.input-group-btn>.btn{height:30px;line-height:30px}textarea.input-group-sm>.form-control,textarea.input-group-sm>.input-group-addon,textarea.input-group-sm>.input-group-btn>.btn{height:auto}.input-group-addon,.input-group-btn,.input-group .form-control{display:table-cell}.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child),.input-group .form-control:not(:first-child):not(:last-child){border-radius:0}.input-group-addon,.input-group-btn{width:1%;white-space:nowrap;vertical-align:middle}.input-group-addon{padding:8px 12px;font-size:14px;font-weight:normal;line-height:1;color:#555;text-align:center;background-color:#eee;border:1px solid #ccc;border-radius:4px}.input-group-addon.input-sm{padding:5px 10px;font-size:12px;border-radius:3px}.input-group-addon.input-lg{padding:14px 16px;font-size:18px;border-radius:6px}.input-group-addon input[type=\"radio\"],.input-group-addon input[type=\"checkbox\"]{margin-top:0}.input-group .form-control:first-child,.input-group-addon:first-child,.input-group-btn:first-child>.btn,.input-group-btn:first-child>.dropdown-toggle,.input-group-btn:last-child>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.input-group-addon:first-child{border-right:0}.input-group .form-control:last-child,.input-group-addon:last-child,.input-group-btn:last-child>.btn,.input-group-btn:last-child>.dropdown-toggle,.input-group-btn:first-child>.btn:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0}.input-group-addon:last-child{border-left:0}.input-group-btn{position:relative;white-space:nowrap}.input-group-btn:first-child>.btn{margin-right:-1px}.input-group-btn:last-child>.btn{margin-left:-1px}.input-group-btn>.btn{position:relative}.input-group-btn>.btn+.btn{margin-left:-4px}.input-group-btn>.btn:hover,.input-group-btn>.btn:active{z-index:2}.nav{padding-left:0;margin-bottom:0;list-style:none}.nav:before,.nav:after{display:table;content:\" \"}.nav:after{clear:both}.nav:before,.nav:after{display:table;content:\" \"}.nav:after{clear:both}.nav:before,.nav:after{display:table;content:\" \"}.nav:after{clear:both}.nav:before,.nav:after{display:table;content:\" \"}.nav:after{clear:both}.nav:before,.nav:after{display:table;content:\" \"}.nav:after{clear:both}.nav>li{position:relative;display:block}.nav>li>a{position:relative;display:block;padding:10px 15px}.nav>li>a:hover,.nav>li>a:focus{text-decoration:none;background-color:#eee}.nav>li.disabled>a{color:#999}.nav>li.disabled>a:hover,.nav>li.disabled>a:focus{color:#999;text-decoration:none;cursor:not-allowed;background-color:transparent}.nav .open>a,.nav .open>a:hover,.nav .open>a:focus{background-color:#eee;border-color:#2fa4e7}.nav .nav-divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.nav>li>a>img{max-width:none}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs>li{float:left;margin-bottom:-1px}.nav-tabs>li>a{margin-right:2px;line-height:1.428571429;border:1px solid transparent;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover{border-color:#eee #eee #ddd}.nav-tabs>li.active>a,.nav-tabs>li.active>a:hover,.nav-tabs>li.active>a:focus{color:#555;cursor:default;background-color:#fff;border:1px solid #ddd;border-bottom-color:transparent}.nav-tabs.nav-justified{width:100%;border-bottom:0}.nav-tabs.nav-justified>li{float:none}.nav-tabs.nav-justified>li>a{margin-bottom:5px;text-align:center}.nav-tabs.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media(min-width:768px){.nav-tabs.nav-justified>li{display:table-cell;width:1%}.nav-tabs.nav-justified>li>a{margin-bottom:0}}.nav-tabs.nav-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a:focus{border:1px solid #ddd}@media(min-width:768px){.nav-tabs.nav-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a:focus{border-bottom-color:#fff}}.nav-pills>li{float:left}.nav-pills>li>a{border-radius:4px}.nav-pills>li+li{margin-left:2px}.nav-pills>li.active>a,.nav-pills>li.active>a:hover,.nav-pills>li.active>a:focus{color:#fff;background-color:#2fa4e7}.nav-stacked>li{float:none}.nav-stacked>li+li{margin-top:2px;margin-left:0}.nav-justified{width:100%}.nav-justified>li{float:none}.nav-justified>li>a{margin-bottom:5px;text-align:center}.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media(min-width:768px){.nav-justified>li{display:table-cell;width:1%}.nav-justified>li>a{margin-bottom:0}}.nav-tabs-justified{border-bottom:0}.nav-tabs-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:hover,.nav-tabs-justified>.active>a:focus{border:1px solid #ddd}@media(min-width:768px){.nav-tabs-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:hover,.nav-tabs-justified>.active>a:focus{border-bottom-color:#fff}}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-right-radius:0;border-top-left-radius:0}.navbar{position:relative;min-height:50px;margin-bottom:20px;border:1px solid transparent}.navbar:before,.navbar:after{display:table;content:\" \"}.navbar:after{clear:both}.navbar:before,.navbar:after{display:table;content:\" \"}.navbar:after{clear:both}.navbar:before,.navbar:after{display:table;content:\" \"}.navbar:after{clear:both}.navbar:before,.navbar:after{display:table;content:\" \"}.navbar:after{clear:both}.navbar:before,.navbar:after{display:table;content:\" \"}.navbar:after{clear:both}@media(min-width:768px){.navbar{border-radius:4px}}.navbar-header:before,.navbar-header:after{display:table;content:\" \"}.navbar-header:after{clear:both}.navbar-header:before,.navbar-header:after{display:table;content:\" \"}.navbar-header:after{clear:both}.navbar-header:before,.navbar-header:after{display:table;content:\" \"}.navbar-header:after{clear:both}.navbar-header:before,.navbar-header:after{display:table;content:\" \"}.navbar-header:after{clear:both}.navbar-header:before,.navbar-header:after{display:table;content:\" \"}.navbar-header:after{clear:both}@media(min-width:768px){.navbar-header{float:left}}.navbar-collapse{max-height:340px;padding-right:15px;padding-left:15px;overflow-x:visible;border-top:1px solid transparent;box-shadow:inset 0 1px 0 rgba(255,255,255,0.1);-webkit-overflow-scrolling:touch}.navbar-collapse:before,.navbar-collapse:after{display:table;content:\" \"}.navbar-collapse:after{clear:both}.navbar-collapse:before,.navbar-collapse:after{display:table;content:\" \"}.navbar-collapse:after{clear:both}.navbar-collapse:before,.navbar-collapse:after{display:table;content:\" \"}.navbar-collapse:after{clear:both}.navbar-collapse:before,.navbar-collapse:after{display:table;content:\" \"}.navbar-collapse:after{clear:both}.navbar-collapse:before,.navbar-collapse:after{display:table;content:\" \"}.navbar-collapse:after{clear:both}.navbar-collapse.in{overflow-y:auto}@media(min-width:768px){.navbar-collapse{width:auto;border-top:0;box-shadow:none}.navbar-collapse.collapse{display:block!important;height:auto!important;padding-bottom:0;overflow:visible!important}.navbar-collapse.in{overflow-y:visible}.navbar-fixed-top .navbar-collapse,.navbar-static-top .navbar-collapse,.navbar-fixed-bottom .navbar-collapse{padding-right:0;padding-left:0}}.container>.navbar-header,.container>.navbar-collapse{margin-right:-15px;margin-left:-15px}@media(min-width:768px){.container>.navbar-header,.container>.navbar-collapse{margin-right:0;margin-left:0}}.navbar-static-top{z-index:1000;border-width:0 0 1px}@media(min-width:768px){.navbar-static-top{border-radius:0}}.navbar-fixed-top,.navbar-fixed-bottom{position:fixed;right:0;left:0;z-index:1030}@media(min-width:768px){.navbar-fixed-top,.navbar-fixed-bottom{border-radius:0}}.navbar-fixed-top{top:0;border-width:0 0 1px}.navbar-fixed-bottom{bottom:0;margin-bottom:0;border-width:1px 0 0}.navbar-brand{float:left;padding:15px 15px;font-size:18px;line-height:20px}.navbar-brand:hover,.navbar-brand:focus{text-decoration:none}@media(min-width:768px){.navbar>.container .navbar-brand{margin-left:-15px}}.navbar-toggle{position:relative;float:right;padding:9px 10px;margin-top:8px;margin-right:15px;margin-bottom:8px;background-color:transparent;background-image:none;border:1px solid transparent;border-radius:4px}.navbar-toggle .icon-bar{display:block;width:22px;height:2px;border-radius:1px}.navbar-toggle .icon-bar+.icon-bar{margin-top:4px}@media(min-width:768px){.navbar-toggle{display:none}}.navbar-nav{margin:7.5px -15px}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:20px}@media(max-width:767px){.navbar-nav .open .dropdown-menu{position:static;float:none;width:auto;margin-top:0;background-color:transparent;border:0;box-shadow:none}.navbar-nav .open .dropdown-menu>li>a,.navbar-nav .open .dropdown-menu .dropdown-header{padding:5px 15px 5px 25px}.navbar-nav .open .dropdown-menu>li>a{line-height:20px}.navbar-nav .open .dropdown-menu>li>a:hover,.navbar-nav .open .dropdown-menu>li>a:focus{background-image:none}}@media(min-width:768px){.navbar-nav{float:left;margin:0}.navbar-nav>li{float:left}.navbar-nav>li>a{padding-top:15px;padding-bottom:15px}.navbar-nav.navbar-right:last-child{margin-right:-15px}}@media(min-width:768px){.navbar-left{float:left!important}.navbar-right{float:right!important}}.navbar-form{padding:10px 15px;margin-top:6px;margin-right:-15px;margin-bottom:6px;margin-left:-15px;border-top:1px solid transparent;border-bottom:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1);box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1)}@media(min-width:768px){.navbar-form .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.navbar-form .form-control{display:inline-block}.navbar-form select.form-control{width:auto}.navbar-form .radio,.navbar-form .checkbox{display:inline-block;padding-left:0;margin-top:0;margin-bottom:0}.navbar-form .radio input[type=\"radio\"],.navbar-form .checkbox input[type=\"checkbox\"]{float:none;margin-left:0}}@media(max-width:767px){.navbar-form .form-group{margin-bottom:5px}}@media(min-width:768px){.navbar-form{width:auto;padding-top:0;padding-bottom:0;margin-right:0;margin-left:0;border:0;-webkit-box-shadow:none;box-shadow:none}.navbar-form.navbar-right:last-child{margin-right:-15px}}.navbar-nav>li>.dropdown-menu{margin-top:0;border-top-right-radius:0;border-top-left-radius:0}.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu{border-bottom-right-radius:0;border-bottom-left-radius:0}.navbar-nav.pull-right>li>.dropdown-menu,.navbar-nav>li>.dropdown-menu.pull-right{right:0;left:auto}.navbar-btn{margin-top:6px;margin-bottom:6px}.navbar-btn.btn-sm{margin-top:10px;margin-bottom:10px}.navbar-btn.btn-xs{margin-top:14px;margin-bottom:14px}.navbar-text{margin-top:15px;margin-bottom:15px}@media(min-width:768px){.navbar-text{float:left;margin-right:15px;margin-left:15px}.navbar-text.navbar-right:last-child{margin-right:0}}.navbar-default{background-color:#2fa4e7;border-color:#1995dc}.navbar-default .navbar-brand{color:#fff}.navbar-default .navbar-brand:hover,.navbar-default .navbar-brand:focus{color:#fff;background-color:none}.navbar-default .navbar-text{color:#ddd}.navbar-default .navbar-nav>li>a{color:#fff}.navbar-default .navbar-nav>li>a:hover,.navbar-default .navbar-nav>li>a:focus{color:#fff;background-color:#178acc}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:hover,.navbar-default .navbar-nav>.active>a:focus{color:#fff;background-color:#178acc}.navbar-default .navbar-nav>.disabled>a,.navbar-default .navbar-nav>.disabled>a:hover,.navbar-default .navbar-nav>.disabled>a:focus{color:#ddd;background-color:transparent}.navbar-default .navbar-toggle{border-color:#178acc}.navbar-default .navbar-toggle:hover,.navbar-default .navbar-toggle:focus{background-color:#178acc}.navbar-default .navbar-toggle .icon-bar{background-color:#fff}.navbar-default .navbar-collapse,.navbar-default .navbar-form{border-color:#1995dc}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:hover,.navbar-default .navbar-nav>.open>a:focus{color:#fff;background-color:#178acc}@media(max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#fff}.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover,.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus{color:#fff;background-color:#178acc}.navbar-default .navbar-nav .open .dropdown-menu>.active>a,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus{color:#fff;background-color:#178acc}.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus{color:#ddd;background-color:transparent}}.navbar-default .navbar-link{color:#fff}.navbar-default .navbar-link:hover{color:#fff}.navbar-inverse{background-color:#033c73;border-color:#022f5a}.navbar-inverse .navbar-brand{color:#fff}.navbar-inverse .navbar-brand:hover,.navbar-inverse .navbar-brand:focus{color:#fff;background-color:none}.navbar-inverse .navbar-text{color:#fff}.navbar-inverse .navbar-nav>li>a{color:#fff}.navbar-inverse .navbar-nav>li>a:hover,.navbar-inverse .navbar-nav>li>a:focus{color:#fff;background-color:#022f5a}.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.active>a:hover,.navbar-inverse .navbar-nav>.active>a:focus{color:#fff;background-color:#022f5a}.navbar-inverse .navbar-nav>.disabled>a,.navbar-inverse .navbar-nav>.disabled>a:hover,.navbar-inverse .navbar-nav>.disabled>a:focus{color:#ccc;background-color:transparent}.navbar-inverse .navbar-toggle{border-color:#022f5a}.navbar-inverse .navbar-toggle:hover,.navbar-inverse .navbar-toggle:focus{background-color:#022f5a}.navbar-inverse .navbar-toggle .icon-bar{background-color:#fff}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form{border-color:#022a50}.navbar-inverse .navbar-nav>.open>a,.navbar-inverse .navbar-nav>.open>a:hover,.navbar-inverse .navbar-nav>.open>a:focus{color:#fff;background-color:#022f5a}@media(max-width:767px){.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header{border-color:#022f5a}.navbar-inverse .navbar-nav .open .dropdown-menu .divider{background-color:#022f5a}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a{color:#fff}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover,.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus{color:#fff;background-color:#022f5a}.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus{color:#fff;background-color:#022f5a}.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus{color:#ccc;background-color:transparent}}.navbar-inverse .navbar-link{color:#fff}.navbar-inverse .navbar-link:hover{color:#fff}.breadcrumb{padding:8px 15px;margin-bottom:20px;list-style:none;background-color:#f5f5f5;border-radius:4px}.breadcrumb>li{display:inline-block}.breadcrumb>li+li:before{padding:0 5px;color:#ccc;content:\"/\\00a0\"}.breadcrumb>.active{color:#999}.pagination{display:inline-block;padding-left:0;margin:20px 0;border-radius:4px}.pagination>li{display:inline}.pagination>li>a,.pagination>li>span{position:relative;float:left;padding:8px 12px;margin-left:-1px;line-height:1.428571429;text-decoration:none;background-color:#fff;border:1px solid #ddd}.pagination>li:first-child>a,.pagination>li:first-child>span{margin-left:0;border-bottom-left-radius:4px;border-top-left-radius:4px}.pagination>li:last-child>a,.pagination>li:last-child>span{border-top-right-radius:4px;border-bottom-right-radius:4px}.pagination>li>a:hover,.pagination>li>span:hover,.pagination>li>a:focus,.pagination>li>span:focus{background-color:#eee}.pagination>.active>a,.pagination>.active>span,.pagination>.active>a:hover,.pagination>.active>span:hover,.pagination>.active>a:focus,.pagination>.active>span:focus{z-index:2;color:#999;cursor:default;background-color:#f5f5f5;border-color:#f5f5f5}.pagination>.disabled>span,.pagination>.disabled>span:hover,.pagination>.disabled>span:focus,.pagination>.disabled>a,.pagination>.disabled>a:hover,.pagination>.disabled>a:focus{color:#999;cursor:not-allowed;background-color:#fff;border-color:#ddd}.pagination-lg>li>a,.pagination-lg>li>span{padding:14px 16px;font-size:18px}.pagination-lg>li:first-child>a,.pagination-lg>li:first-child>span{border-bottom-left-radius:6px;border-top-left-radius:6px}.pagination-lg>li:last-child>a,.pagination-lg>li:last-child>span{border-top-right-radius:6px;border-bottom-right-radius:6px}.pagination-sm>li>a,.pagination-sm>li>span{padding:5px 10px;font-size:12px}.pagination-sm>li:first-child>a,.pagination-sm>li:first-child>span{border-bottom-left-radius:3px;border-top-left-radius:3px}.pagination-sm>li:last-child>a,.pagination-sm>li:last-child>span{border-top-right-radius:3px;border-bottom-right-radius:3px}.pager{padding-left:0;margin:20px 0;text-align:center;list-style:none}.pager:before,.pager:after{display:table;content:\" \"}.pager:after{clear:both}.pager:before,.pager:after{display:table;content:\" \"}.pager:after{clear:both}.pager:before,.pager:after{display:table;content:\" \"}.pager:after{clear:both}.pager:before,.pager:after{display:table;content:\" \"}.pager:after{clear:both}.pager:before,.pager:after{display:table;content:\" \"}.pager:after{clear:both}.pager li{display:inline}.pager li>a,.pager li>span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;border-radius:15px}.pager li>a:hover,.pager li>a:focus{text-decoration:none;background-color:#eee}.pager .next>a,.pager .next>span{float:right}.pager .previous>a,.pager .previous>span{float:left}.pager .disabled>a,.pager .disabled>a:hover,.pager .disabled>a:focus,.pager .disabled>span{color:#999;cursor:not-allowed;background-color:#fff}.label{display:inline;padding:.2em .6em .3em;font-size:75%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}.label[href]:hover,.label[href]:focus{color:#fff;text-decoration:none;cursor:pointer}.label:empty{display:none}.btn .label{position:relative;top:-1px}.label-default{background-color:#999}.label-default[href]:hover,.label-default[href]:focus{background-color:#808080}.label-primary{background-color:#2fa4e7}.label-primary[href]:hover,.label-primary[href]:focus{background-color:#178acc}.label-success{background-color:#73a839}.label-success[href]:hover,.label-success[href]:focus{background-color:#59822c}.label-info{background-color:#033c73}.label-info[href]:hover,.label-info[href]:focus{background-color:#022241}.label-warning{background-color:#dd5600}.label-warning[href]:hover,.label-warning[href]:focus{background-color:#aa4200}.label-danger{background-color:#c71c22}.label-danger[href]:hover,.label-danger[href]:focus{background-color:#9a161a}.badge{display:inline-block;min-width:10px;padding:3px 7px;font-size:12px;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;background-color:#999;border-radius:10px}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}a.badge:hover,a.badge:focus{color:#fff;text-decoration:none;cursor:pointer}a.list-group-item.active>.badge,.nav-pills>.active>a>.badge{color:#2fa4e7;background-color:#fff}.nav-pills>li>a>.badge{margin-left:3px}.jumbotron{padding:30px;margin-bottom:30px;font-size:21px;font-weight:200;line-height:2.1428571435;color:inherit;background-color:#eee}.jumbotron h1,.jumbotron .h1{line-height:1;color:inherit}.jumbotron p{line-height:1.4}.container .jumbotron{border-radius:6px}.jumbotron .container{max-width:100%}@media screen and (min-width:768px){.jumbotron{padding-top:48px;padding-bottom:48px}.container .jumbotron{padding-right:60px;padding-left:60px}.jumbotron h1,.jumbotron .h1{font-size:63px}}.thumbnail{display:block;padding:4px;margin-bottom:20px;line-height:1.428571429;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.thumbnail>img,.thumbnail a>img{display:block;height:auto;max-width:100%;margin-right:auto;margin-left:auto}a.thumbnail:hover,a.thumbnail:focus,a.thumbnail.active{border-color:#2fa4e7}.thumbnail .caption{padding:9px;color:#555}.alert{padding:15px;margin-bottom:20px;border:1px solid transparent;border-radius:4px}.alert h4{margin-top:0;color:inherit}.alert .alert-link{font-weight:bold}.alert>p,.alert>ul{margin-bottom:0}.alert>p+p{margin-top:5px}.alert-dismissable{padding-right:35px}.alert-dismissable .close{position:relative;top:-2px;right:-21px;color:inherit}.alert-success{color:#468847;background-color:#dff0d8;border-color:#d6e9c6}.alert-success hr{border-top-color:#c9e2b3}.alert-success .alert-link{color:#356635}.alert-info{color:#3a87ad;background-color:#d9edf7;border-color:#bce8f1}.alert-info hr{border-top-color:#a6e1ec}.alert-info .alert-link{color:#2d6987}.alert-warning{color:#c09853;background-color:#fcf8e3;border-color:#fbeed5}.alert-warning hr{border-top-color:#f8e5be}.alert-warning .alert-link{color:#a47e3c}.alert-danger{color:#b94a48;background-color:#f2dede;border-color:#eed3d7}.alert-danger hr{border-top-color:#e6c1c7}.alert-danger .alert-link{color:#953b39}@-webkit-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}.progress{height:20px;margin-bottom:20px;overflow:hidden;background-color:#f5f5f5;border-radius:4px;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);box-shadow:inset 0 1px 2px rgba(0,0,0,0.1)}.progress-bar{float:left;width:0;height:100%;font-size:12px;line-height:20px;color:#fff;text-align:center;background-color:#2fa4e7;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);-webkit-transition:width .6s ease;transition:width .6s ease}.progress-striped .progress-bar{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-size:40px 40px}.progress.active .progress-bar{-webkit-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}.progress-bar-success{background-color:#73a839}.progress-striped .progress-bar-success{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.progress-bar-info{background-color:#033c73}.progress-striped .progress-bar-info{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.progress-bar-warning{background-color:#dd5600}.progress-striped .progress-bar-warning{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.progress-bar-danger{background-color:#c71c22}.progress-striped .progress-bar-danger{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.media,.media-body{overflow:hidden;zoom:1}.media,.media .media{margin-top:15px}.media:first-child{margin-top:0}.media-object{display:block}.media-heading{margin:0 0 5px}.media>.pull-left{margin-right:10px}.media>.pull-right{margin-left:10px}.media-list{padding-left:0;list-style:none}.list-group{padding-left:0;margin-bottom:20px}.list-group-item{position:relative;display:block;padding:10px 15px;margin-bottom:-1px;background-color:#fff;border:1px solid #ddd}.list-group-item:first-child{border-top-right-radius:4px;border-top-left-radius:4px}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}.list-group-item>.badge{float:right}.list-group-item>.badge+.badge{margin-right:5px}a.list-group-item{color:#555}a.list-group-item .list-group-item-heading{color:#333}a.list-group-item:hover,a.list-group-item:focus{text-decoration:none;background-color:#f5f5f5}a.list-group-item.active,a.list-group-item.active:hover,a.list-group-item.active:focus{z-index:2;color:#fff;background-color:#2fa4e7;border-color:#2fa4e7}a.list-group-item.active .list-group-item-heading,a.list-group-item.active:hover .list-group-item-heading,a.list-group-item.active:focus .list-group-item-heading{color:inherit}a.list-group-item.active .list-group-item-text,a.list-group-item.active:hover .list-group-item-text,a.list-group-item.active:focus .list-group-item-text{color:#e6f4fc}.list-group-item-heading{margin-top:0;margin-bottom:5px}.list-group-item-text{margin-bottom:0;line-height:1.3}.panel{margin-bottom:20px;background-color:#fff;border:1px solid transparent;border-radius:4px;-webkit-box-shadow:0 1px 1px rgba(0,0,0,0.05);box-shadow:0 1px 1px rgba(0,0,0,0.05)}.panel-body{padding:15px}.panel-body:before,.panel-body:after{display:table;content:\" \"}.panel-body:after{clear:both}.panel-body:before,.panel-body:after{display:table;content:\" \"}.panel-body:after{clear:both}.panel-body:before,.panel-body:after{display:table;content:\" \"}.panel-body:after{clear:both}.panel-body:before,.panel-body:after{display:table;content:\" \"}.panel-body:after{clear:both}.panel-body:before,.panel-body:after{display:table;content:\" \"}.panel-body:after{clear:both}.panel>.list-group{margin-bottom:0}.panel>.list-group .list-group-item{border-width:1px 0}.panel>.list-group .list-group-item:first-child{border-top-right-radius:0;border-top-left-radius:0}.panel>.list-group .list-group-item:last-child{border-bottom:0}.panel-heading+.list-group .list-group-item:first-child{border-top-width:0}.panel>.table,.panel>.table-responsive>.table{margin-bottom:0}.panel>.panel-body+.table,.panel>.panel-body+.table-responsive{border-top:1px solid #ddd}.panel>.table>tbody:first-child th,.panel>.table>tbody:first-child td{border-top:0}.panel>.table-bordered,.panel>.table-responsive>.table-bordered{border:0}.panel>.table-bordered>thead>tr>th:first-child,.panel>.table-responsive>.table-bordered>thead>tr>th:first-child,.panel>.table-bordered>tbody>tr>th:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:first-child,.panel>.table-bordered>tfoot>tr>th:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:first-child,.panel>.table-bordered>thead>tr>td:first-child,.panel>.table-responsive>.table-bordered>thead>tr>td:first-child,.panel>.table-bordered>tbody>tr>td:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:first-child,.panel>.table-bordered>tfoot>tr>td:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:first-child{border-left:0}.panel>.table-bordered>thead>tr>th:last-child,.panel>.table-responsive>.table-bordered>thead>tr>th:last-child,.panel>.table-bordered>tbody>tr>th:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:last-child,.panel>.table-bordered>tfoot>tr>th:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:last-child,.panel>.table-bordered>thead>tr>td:last-child,.panel>.table-responsive>.table-bordered>thead>tr>td:last-child,.panel>.table-bordered>tbody>tr>td:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:last-child,.panel>.table-bordered>tfoot>tr>td:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:last-child{border-right:0}.panel>.table-bordered>thead>tr:last-child>th,.panel>.table-responsive>.table-bordered>thead>tr:last-child>th,.panel>.table-bordered>tbody>tr:last-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>th,.panel>.table-bordered>tfoot>tr:last-child>th,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>th,.panel>.table-bordered>thead>tr:last-child>td,.panel>.table-responsive>.table-bordered>thead>tr:last-child>td,.panel>.table-bordered>tbody>tr:last-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>td,.panel>.table-bordered>tfoot>tr:last-child>td,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>td{border-bottom:0}.panel>.table-responsive{margin-bottom:0;border:0}.panel-heading{padding:10px 15px;border-bottom:1px solid transparent;border-top-right-radius:3px;border-top-left-radius:3px}.panel-heading>.dropdown .dropdown-toggle{color:inherit}.panel-title{margin-top:0;margin-bottom:0;font-size:16px;color:inherit}.panel-title>a{color:inherit}.panel-footer{padding:10px 15px;background-color:#f5f5f5;border-top:1px solid #ddd;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel-group .panel{margin-bottom:0;overflow:hidden;border-radius:4px}.panel-group .panel+.panel{margin-top:5px}.panel-group .panel-heading{border-bottom:0}.panel-group .panel-heading+.panel-collapse .panel-body{border-top:1px solid #ddd}.panel-group .panel-footer{border-top:0}.panel-group .panel-footer+.panel-collapse .panel-body{border-bottom:1px solid #ddd}.panel-default{border-color:#ddd}.panel-default>.panel-heading{color:#555;background-color:#f5f5f5;border-color:#ddd}.panel-default>.panel-heading+.panel-collapse .panel-body{border-top-color:#ddd}.panel-default>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ddd}.panel-primary{border-color:#ddd}.panel-primary>.panel-heading{color:#fff;background-color:#2fa4e7;border-color:#ddd}.panel-primary>.panel-heading+.panel-collapse .panel-body{border-top-color:#ddd}.panel-primary>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ddd}.panel-success{border-color:#ddd}.panel-success>.panel-heading{color:#468847;background-color:#73a839;border-color:#ddd}.panel-success>.panel-heading+.panel-collapse .panel-body{border-top-color:#ddd}.panel-success>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ddd}.panel-warning{border-color:#ddd}.panel-warning>.panel-heading{color:#c09853;background-color:#dd5600;border-color:#ddd}.panel-warning>.panel-heading+.panel-collapse .panel-body{border-top-color:#ddd}.panel-warning>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ddd}.panel-danger{border-color:#ddd}.panel-danger>.panel-heading{color:#b94a48;background-color:#c71c22;border-color:#ddd}.panel-danger>.panel-heading+.panel-collapse .panel-body{border-top-color:#ddd}.panel-danger>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ddd}.panel-info{border-color:#ddd}.panel-info>.panel-heading{color:#3a87ad;background-color:#033c73;border-color:#ddd}.panel-info>.panel-heading+.panel-collapse .panel-body{border-top-color:#ddd}.panel-info>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ddd}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.05);box-shadow:inset 0 1px 1px rgba(0,0,0,0.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,0.15)}.well-lg{padding:24px;border-radius:6px}.well-sm{padding:9px;border-radius:3px}.close{float:right;font-size:21px;font-weight:bold;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.2;filter:alpha(opacity=20)}.close:hover,.close:focus{color:#000;text-decoration:none;cursor:pointer;opacity:.5;filter:alpha(opacity=50)}button.close{padding:0;cursor:pointer;background:transparent;border:0;-webkit-appearance:none}.modal-open{overflow:hidden}.modal{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;display:none;overflow:auto;overflow-y:scroll}.modal.fade .modal-dialog{-webkit-transform:translate(0,-25%);-ms-transform:translate(0,-25%);transform:translate(0,-25%);-webkit-transition:-webkit-transform .3s ease-out;-moz-transition:-moz-transform .3s ease-out;-o-transition:-o-transform .3s ease-out;transition:transform .3s ease-out}.modal.in .modal-dialog{-webkit-transform:translate(0,0);-ms-transform:translate(0,0);transform:translate(0,0)}.modal-dialog{position:relative;z-index:1050;width:auto;margin:10px}.modal-content{position:relative;background-color:#fff;border:1px solid #999;border:1px solid rgba(0,0,0,0.2);border-radius:6px;outline:0;-webkit-box-shadow:0 3px 9px rgba(0,0,0,0.5);box-shadow:0 3px 9px rgba(0,0,0,0.5);background-clip:padding-box}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1030;background-color:#000}.modal-backdrop.fade{opacity:0;filter:alpha(opacity=0)}.modal-backdrop.in{opacity:.5;filter:alpha(opacity=50)}.modal-header{min-height:16.428571429px;padding:15px;border-bottom:1px solid #e5e5e5}.modal-header .close{margin-top:-2px}.modal-title{margin:0;line-height:1.428571429}.modal-body{position:relative;padding:20px}.modal-footer{padding:19px 20px 20px;margin-top:15px;text-align:right;border-top:1px solid #e5e5e5}.modal-footer:before,.modal-footer:after{display:table;content:\" \"}.modal-footer:after{clear:both}.modal-footer:before,.modal-footer:after{display:table;content:\" \"}.modal-footer:after{clear:both}.modal-footer:before,.modal-footer:after{display:table;content:\" \"}.modal-footer:after{clear:both}.modal-footer:before,.modal-footer:after{display:table;content:\" \"}.modal-footer:after{clear:both}.modal-footer:before,.modal-footer:after{display:table;content:\" \"}.modal-footer:after{clear:both}.modal-footer .btn+.btn{margin-bottom:0;margin-left:5px}.modal-footer .btn-group .btn+.btn{margin-left:-1px}.modal-footer .btn-block+.btn-block{margin-left:0}@media screen and (min-width:768px){.modal-dialog{width:600px;margin:30px auto}.modal-content{-webkit-box-shadow:0 5px 15px rgba(0,0,0,0.5);box-shadow:0 5px 15px rgba(0,0,0,0.5)}}.tooltip{position:absolute;z-index:1030;display:block;font-size:12px;line-height:1.4;opacity:0;filter:alpha(opacity=0);visibility:visible}.tooltip.in{opacity:.9;filter:alpha(opacity=90)}.tooltip.top{padding:5px 0;margin-top:-3px}.tooltip.right{padding:0 5px;margin-left:3px}.tooltip.bottom{padding:5px 0;margin-top:3px}.tooltip.left{padding:0 5px;margin-left:-3px}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;text-decoration:none;background-color:rgba(0,0,0,0.9);border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-top-color:rgba(0,0,0,0.9);border-width:5px 5px 0}.tooltip.top-left .tooltip-arrow{bottom:0;left:5px;border-top-color:rgba(0,0,0,0.9);border-width:5px 5px 0}.tooltip.top-right .tooltip-arrow{right:5px;bottom:0;border-top-color:rgba(0,0,0,0.9);border-width:5px 5px 0}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-right-color:rgba(0,0,0,0.9);border-width:5px 5px 5px 0}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-left-color:rgba(0,0,0,0.9);border-width:5px 0 5px 5px}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-bottom-color:rgba(0,0,0,0.9);border-width:0 5px 5px}.tooltip.bottom-left .tooltip-arrow{top:0;left:5px;border-bottom-color:rgba(0,0,0,0.9);border-width:0 5px 5px}.tooltip.bottom-right .tooltip-arrow{top:0;right:5px;border-bottom-color:rgba(0,0,0,0.9);border-width:0 5px 5px}.popover{position:absolute;top:0;left:0;z-index:1010;display:none;max-width:276px;padding:1px;text-align:left;white-space:normal;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.2);border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,0.2);box-shadow:0 5px 10px rgba(0,0,0,0.2);background-clip:padding-box}.popover.top{margin-top:-10px}.popover.right{margin-left:10px}.popover.bottom{margin-top:10px}.popover.left{margin-left:-10px}.popover-title{padding:8px 14px;margin:0;font-size:14px;font-weight:normal;line-height:18px;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.popover-content{padding:9px 14px}.popover .arrow,.popover .arrow:after{position:absolute;display:block;width:0;height:0;border-color:transparent;border-style:solid}.popover .arrow{border-width:11px}.popover .arrow:after{border-width:10px;content:\"\"}.popover.top .arrow{bottom:-11px;left:50%;margin-left:-11px;border-top-color:#999;border-top-color:rgba(0,0,0,0.25);border-bottom-width:0}.popover.top .arrow:after{bottom:1px;margin-left:-10px;border-top-color:#fff;border-bottom-width:0;content:\" \"}.popover.right .arrow{top:50%;left:-11px;margin-top:-11px;border-right-color:#999;border-right-color:rgba(0,0,0,0.25);border-left-width:0}.popover.right .arrow:after{bottom:-10px;left:1px;border-right-color:#fff;border-left-width:0;content:\" \"}.popover.bottom .arrow{top:-11px;left:50%;margin-left:-11px;border-bottom-color:#999;border-bottom-color:rgba(0,0,0,0.25);border-top-width:0}.popover.bottom .arrow:after{top:1px;margin-left:-10px;border-bottom-color:#fff;border-top-width:0;content:\" \"}.popover.left .arrow{top:50%;right:-11px;margin-top:-11px;border-left-color:#999;border-left-color:rgba(0,0,0,0.25);border-right-width:0}.popover.left .arrow:after{right:1px;bottom:-10px;border-left-color:#fff;border-right-width:0;content:\" \"}.carousel{position:relative}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner>.item{position:relative;display:none;-webkit-transition:.6s ease-in-out left;transition:.6s ease-in-out left}.carousel-inner>.item>img,.carousel-inner>.item>a>img{display:block;height:auto;max-width:100%;line-height:1}.carousel-inner>.active,.carousel-inner>.next,.carousel-inner>.prev{display:block}.carousel-inner>.active{left:0}.carousel-inner>.next,.carousel-inner>.prev{position:absolute;top:0;width:100%}.carousel-inner>.next{left:100%}.carousel-inner>.prev{left:-100%}.carousel-inner>.next.left,.carousel-inner>.prev.right{left:0}.carousel-inner>.active.left{left:-100%}.carousel-inner>.active.right{left:100%}.carousel-control{position:absolute;top:0;bottom:0;left:0;width:15%;font-size:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,0.6);opacity:.5;filter:alpha(opacity=50)}.carousel-control.left{background-image:-webkit-linear-gradient(left,color-stop(rgba(0,0,0,0.5) 0),color-stop(rgba(0,0,0,0.0001) 100%));background-image:linear-gradient(to right,rgba(0,0,0,0.5) 0,rgba(0,0,0,0.0001) 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000',endColorstr='#00000000',GradientType=1)}.carousel-control.right{right:0;left:auto;background-image:-webkit-linear-gradient(left,color-stop(rgba(0,0,0,0.0001) 0),color-stop(rgba(0,0,0,0.5) 100%));background-image:linear-gradient(to right,rgba(0,0,0,0.0001) 0,rgba(0,0,0,0.5) 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000',endColorstr='#80000000',GradientType=1)}.carousel-control:hover,.carousel-control:focus{color:#fff;text-decoration:none;outline:0;opacity:.9;filter:alpha(opacity=90)}.carousel-control .icon-prev,.carousel-control .icon-next,.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right{position:absolute;top:50%;z-index:5;display:inline-block}.carousel-control .icon-prev,.carousel-control .glyphicon-chevron-left{left:50%}.carousel-control .icon-next,.carousel-control .glyphicon-chevron-right{right:50%}.carousel-control .icon-prev,.carousel-control .icon-next{width:20px;height:20px;margin-top:-10px;margin-left:-10px;font-family:serif}.carousel-control .icon-prev:before{content:'\\2039'}.carousel-control .icon-next:before{content:'\\203a'}.carousel-indicators{position:absolute;bottom:10px;left:50%;z-index:15;width:60%;padding-left:0;margin-left:-30%;text-align:center;list-style:none}.carousel-indicators li{display:inline-block;width:10px;height:10px;margin:1px;text-indent:-999px;cursor:pointer;background-color:#000 \\9;background-color:rgba(0,0,0,0);border:1px solid #fff;border-radius:10px}.carousel-indicators .active{width:12px;height:12px;margin:0;background-color:#fff}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,0.6)}.carousel-caption .btn{text-shadow:none}@media screen and (min-width:768px){.carousel-control .glyphicons-chevron-left,.carousel-control .glyphicons-chevron-right,.carousel-control .icon-prev,.carousel-control .icon-next{width:30px;height:30px;margin-top:-15px;margin-left:-15px;font-size:30px}.carousel-caption{right:20%;left:20%;padding-bottom:30px}.carousel-indicators{bottom:20px}}.clearfix:before,.clearfix:after{display:table;content:\" \"}.clearfix:after{clear:both}.clearfix:before,.clearfix:after{display:table;content:\" \"}.clearfix:after{clear:both}.center-block{display:block;margin-right:auto;margin-left:auto}.pull-right{float:right!important}.pull-left{float:left!important}.hide{display:none!important}.show{display:block!important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none!important;visibility:hidden!important}.affix{position:fixed}@-ms-viewport{width:device-width}.visible-xs,tr.visible-xs,th.visible-xs,td.visible-xs{display:none!important}@media(max-width:767px){.visible-xs{display:block!important}table.visible-xs{display:table}tr.visible-xs{display:table-row!important}th.visible-xs,td.visible-xs{display:table-cell!important}}@media(min-width:768px) and (max-width:991px){.visible-xs.visible-sm{display:block!important}table.visible-xs.visible-sm{display:table}tr.visible-xs.visible-sm{display:table-row!important}th.visible-xs.visible-sm,td.visible-xs.visible-sm{display:table-cell!important}}@media(min-width:992px) and (max-width:1199px){.visible-xs.visible-md{display:block!important}table.visible-xs.visible-md{display:table}tr.visible-xs.visible-md{display:table-row!important}th.visible-xs.visible-md,td.visible-xs.visible-md{display:table-cell!important}}@media(min-width:1200px){.visible-xs.visible-lg{display:block!important}table.visible-xs.visible-lg{display:table}tr.visible-xs.visible-lg{display:table-row!important}th.visible-xs.visible-lg,td.visible-xs.visible-lg{display:table-cell!important}}.visible-sm,tr.visible-sm,th.visible-sm,td.visible-sm{display:none!important}@media(max-width:767px){.visible-sm.visible-xs{display:block!important}table.visible-sm.visible-xs{display:table}tr.visible-sm.visible-xs{display:table-row!important}th.visible-sm.visible-xs,td.visible-sm.visible-xs{display:table-cell!important}}@media(min-width:768px) and (max-width:991px){.visible-sm{display:block!important}table.visible-sm{display:table}tr.visible-sm{display:table-row!important}th.visible-sm,td.visible-sm{display:table-cell!important}}@media(min-width:992px) and (max-width:1199px){.visible-sm.visible-md{display:block!important}table.visible-sm.visible-md{display:table}tr.visible-sm.visible-md{display:table-row!important}th.visible-sm.visible-md,td.visible-sm.visible-md{display:table-cell!important}}@media(min-width:1200px){.visible-sm.visible-lg{display:block!important}table.visible-sm.visible-lg{display:table}tr.visible-sm.visible-lg{display:table-row!important}th.visible-sm.visible-lg,td.visible-sm.visible-lg{display:table-cell!important}}.visible-md,tr.visible-md,th.visible-md,td.visible-md{display:none!important}@media(max-width:767px){.visible-md.visible-xs{display:block!important}table.visible-md.visible-xs{display:table}tr.visible-md.visible-xs{display:table-row!important}th.visible-md.visible-xs,td.visible-md.visible-xs{display:table-cell!important}}@media(min-width:768px) and (max-width:991px){.visible-md.visible-sm{display:block!important}table.visible-md.visible-sm{display:table}tr.visible-md.visible-sm{display:table-row!important}th.visible-md.visible-sm,td.visible-md.visible-sm{display:table-cell!important}}@media(min-width:992px) and (max-width:1199px){.visible-md{display:block!important}table.visible-md{display:table}tr.visible-md{display:table-row!important}th.visible-md,td.visible-md{display:table-cell!important}}@media(min-width:1200px){.visible-md.visible-lg{display:block!important}table.visible-md.visible-lg{display:table}tr.visible-md.visible-lg{display:table-row!important}th.visible-md.visible-lg,td.visible-md.visible-lg{display:table-cell!important}}.visible-lg,tr.visible-lg,th.visible-lg,td.visible-lg{display:none!important}@media(max-width:767px){.visible-lg.visible-xs{display:block!important}table.visible-lg.visible-xs{display:table}tr.visible-lg.visible-xs{display:table-row!important}th.visible-lg.visible-xs,td.visible-lg.visible-xs{display:table-cell!important}}@media(min-width:768px) and (max-width:991px){.visible-lg.visible-sm{display:block!important}table.visible-lg.visible-sm{display:table}tr.visible-lg.visible-sm{display:table-row!important}th.visible-lg.visible-sm,td.visible-lg.visible-sm{display:table-cell!important}}@media(min-width:992px) and (max-width:1199px){.visible-lg.visible-md{display:block!important}table.visible-lg.visible-md{display:table}tr.visible-lg.visible-md{display:table-row!important}th.visible-lg.visible-md,td.visible-lg.visible-md{display:table-cell!important}}@media(min-width:1200px){.visible-lg{display:block!important}table.visible-lg{display:table}tr.visible-lg{display:table-row!important}th.visible-lg,td.visible-lg{display:table-cell!important}}.hidden-xs{display:block!important}table.hidden-xs{display:table}tr.hidden-xs{display:table-row!important}th.hidden-xs,td.hidden-xs{display:table-cell!important}@media(max-width:767px){.hidden-xs,tr.hidden-xs,th.hidden-xs,td.hidden-xs{display:none!important}}@media(min-width:768px) and (max-width:991px){.hidden-xs.hidden-sm,tr.hidden-xs.hidden-sm,th.hidden-xs.hidden-sm,td.hidden-xs.hidden-sm{display:none!important}}@media(min-width:992px) and (max-width:1199px){.hidden-xs.hidden-md,tr.hidden-xs.hidden-md,th.hidden-xs.hidden-md,td.hidden-xs.hidden-md{display:none!important}}@media(min-width:1200px){.hidden-xs.hidden-lg,tr.hidden-xs.hidden-lg,th.hidden-xs.hidden-lg,td.hidden-xs.hidden-lg{display:none!important}}.hidden-sm{display:block!important}table.hidden-sm{display:table}tr.hidden-sm{display:table-row!important}th.hidden-sm,td.hidden-sm{display:table-cell!important}@media(max-width:767px){.hidden-sm.hidden-xs,tr.hidden-sm.hidden-xs,th.hidden-sm.hidden-xs,td.hidden-sm.hidden-xs{display:none!important}}@media(min-width:768px) and (max-width:991px){.hidden-sm,tr.hidden-sm,th.hidden-sm,td.hidden-sm{display:none!important}}@media(min-width:992px) and (max-width:1199px){.hidden-sm.hidden-md,tr.hidden-sm.hidden-md,th.hidden-sm.hidden-md,td.hidden-sm.hidden-md{display:none!important}}@media(min-width:1200px){.hidden-sm.hidden-lg,tr.hidden-sm.hidden-lg,th.hidden-sm.hidden-lg,td.hidden-sm.hidden-lg{display:none!important}}.hidden-md{display:block!important}table.hidden-md{display:table}tr.hidden-md{display:table-row!important}th.hidden-md,td.hidden-md{display:table-cell!important}@media(max-width:767px){.hidden-md.hidden-xs,tr.hidden-md.hidden-xs,th.hidden-md.hidden-xs,td.hidden-md.hidden-xs{display:none!important}}@media(min-width:768px) and (max-width:991px){.hidden-md.hidden-sm,tr.hidden-md.hidden-sm,th.hidden-md.hidden-sm,td.hidden-md.hidden-sm{display:none!important}}@media(min-width:992px) and (max-width:1199px){.hidden-md,tr.hidden-md,th.hidden-md,td.hidden-md{display:none!important}}@media(min-width:1200px){.hidden-md.hidden-lg,tr.hidden-md.hidden-lg,th.hidden-md.hidden-lg,td.hidden-md.hidden-lg{display:none!important}}.hidden-lg{display:block!important}table.hidden-lg{display:table}tr.hidden-lg{display:table-row!important}th.hidden-lg,td.hidden-lg{display:table-cell!important}@media(max-width:767px){.hidden-lg.hidden-xs,tr.hidden-lg.hidden-xs,th.hidden-lg.hidden-xs,td.hidden-lg.hidden-xs{display:none!important}}@media(min-width:768px) and (max-width:991px){.hidden-lg.hidden-sm,tr.hidden-lg.hidden-sm,th.hidden-lg.hidden-sm,td.hidden-lg.hidden-sm{display:none!important}}@media(min-width:992px) and (max-width:1199px){.hidden-lg.hidden-md,tr.hidden-lg.hidden-md,th.hidden-lg.hidden-md,td.hidden-lg.hidden-md{display:none!important}}@media(min-width:1200px){.hidden-lg,tr.hidden-lg,th.hidden-lg,td.hidden-lg{display:none!important}}.visible-print,tr.visible-print,th.visible-print,td.visible-print{display:none!important}@media print{.visible-print{display:block!important}table.visible-print{display:table}tr.visible-print{display:table-row!important}th.visible-print,td.visible-print{display:table-cell!important}.hidden-print,tr.hidden-print,th.hidden-print,td.hidden-print{display:none!important}}.navbar{background-image:-webkit-linear-gradient(#54b4eb,#2fa4e7 60%,#1d9ce5);background-image:linear-gradient(#54b4eb,#2fa4e7 60%,#1d9ce5);background-repeat:no-repeat;border-bottom:1px solid #178acc;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff54b4eb',endColorstr='#ff1d9ce5',GradientType=0);filter:none;-webkit-box-shadow:0 1px 10px rgba(0,0,0,0.1);box-shadow:0 1px 10px rgba(0,0,0,0.1)}.navbar .navbar-nav>li>a,.navbar-brand{text-shadow:0 1px 0 rgba(0,0,0,0.1)}.navbar-inverse{background-image:-webkit-linear-gradient(#04519b,#044687 60%,#033769);background-image:linear-gradient(#04519b,#044687 60%,#033769);background-repeat:no-repeat;border-bottom:1px solid #022241;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff04519b',endColorstr='#ff033769',GradientType=0);filter:none}.btn{text-shadow:0 1px 0 rgba(0,0,0,0.1)}.btn .caret{border-top-color:#fff}.btn-default{background-image:-webkit-linear-gradient(#fff,#fff 60%,#f5f5f5);background-image:linear-gradient(#fff,#fff 60%,#f5f5f5);background-repeat:no-repeat;border-bottom:1px solid #e6e6e6;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff',endColorstr='#fff5f5f5',GradientType=0);filter:none}.btn-default:hover{color:#555}.btn-default .caret{border-top-color:#555}.btn-default{background-image:-webkit-linear-gradient(#fff,#fff 60%,#f5f5f5);background-image:linear-gradient(#fff,#fff 60%,#f5f5f5);background-repeat:no-repeat;border-bottom:1px solid #e6e6e6;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff',endColorstr='#fff5f5f5',GradientType=0);filter:none}.btn-primary{background-image:-webkit-linear-gradient(#54b4eb,#2fa4e7 60%,#1d9ce5);background-image:linear-gradient(#54b4eb,#2fa4e7 60%,#1d9ce5);background-repeat:no-repeat;border-bottom:1px solid #178acc;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff54b4eb',endColorstr='#ff1d9ce5',GradientType=0);filter:none}.btn-success{background-image:-webkit-linear-gradient(#88c149,#73a839 60%,#699934);background-image:linear-gradient(#88c149,#73a839 60%,#699934);background-repeat:no-repeat;border-bottom:1px solid #59822c;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff88c149',endColorstr='#ff699934',GradientType=0);filter:none}.btn-info{background-image:-webkit-linear-gradient(#04519b,#033c73 60%,#02325f);background-image:linear-gradient(#04519b,#033c73 60%,#02325f);background-repeat:no-repeat;border-bottom:1px solid #022241;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff04519b',endColorstr='#ff02325f',GradientType=0);filter:none}.btn-warning{background-image:-webkit-linear-gradient(#ff6707,#dd5600 60%,#c94e00);background-image:linear-gradient(#ff6707,#dd5600 60%,#c94e00);background-repeat:no-repeat;border-bottom:1px solid #aa4200;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffff6707',endColorstr='#ffc94e00',GradientType=0);filter:none}.btn-danger{background-image:-webkit-linear-gradient(#e12b31,#c71c22 60%,#b5191f);background-image:linear-gradient(#e12b31,#c71c22 60%,#b5191f);background-repeat:no-repeat;border-bottom:1px solid #9a161a;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffe12b31',endColorstr='#ffb5191f',GradientType=0);filter:none}.pagination .active>a,.pagination .active>a:hover{border-color:#ddd}.panel-primary .panel-heading,.panel-success .panel-heading,.panel-warning .panel-heading,.panel-danger .panel-heading,.panel-info .panel-heading,.panel-primary .panel-title,.panel-success .panel-title,.panel-warning .panel-title,.panel-danger .panel-title,.panel-info .panel-title{color:#fff}.clearfix:before,.clearfix:after{display:table;content:\" \"}.clearfix:after{clear:both}.clearfix:before,.clearfix:after{display:table;content:\" \"}.clearfix:after{clear:both}.center-block{display:block;margin-right:auto;margin-left:auto}.pull-right{float:right!important}.pull-left{float:left!important}.hide{display:none!important}.show{display:block!important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none!important;visibility:hidden!important}.affix{position:fixed}\n\\ No newline at end of file\n+/*! normalize.css v2.1.3 | MIT License | git.io/normalize */article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}audio,canvas,video{display:inline-block}audio:not([controls]){display:none;height:0}[hidden],template{display:none}html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}a{background:transparent}a:focus{outline:thin dotted}a:active,a:hover{outline:0}h1{margin:.67em 0;font-size:2em}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}dfn{font-style:italic}hr{height:0;-moz-box-sizing:content-box;box-sizing:content-box}mark{color:#000;background:#ff0}code,kbd,pre,samp{font-family:monospace,serif;font-size:1em}pre{white-space:pre-wrap}q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:0}fieldset{padding:.35em .625em .75em;margin:0 2px;border:1px solid #c0c0c0}legend{padding:0;border:0}button,input,select,textarea{margin:0;font-family:inherit;font-size:100%}button,input{line-height:normal}button,select{text-transform:none}button,html input[type=\"button\"],input[type=\"reset\"],input[type=\"submit\"]{cursor:pointer;-webkit-appearance:button}button[disabled],html input[disabled]{cursor:default}input[type=\"checkbox\"],input[type=\"radio\"]{padding:0;box-sizing:border-box}input[type=\"search\"]{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;-webkit-appearance:textfield}input[type=\"search\"]::-webkit-search-cancel-button,input[type=\"search\"]::-webkit-search-decoration{-webkit-appearance:none}button::-moz-focus-inner,input::-moz-focus-inner{padding:0;border:0}textarea{overflow:auto;vertical-align:top}table{border-collapse:collapse;border-spacing:0}@media print{*{color:#000!important;text-shadow:none!important;background:transparent!important;box-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:\" (\" attr(href) \")\"}abbr[title]:after{content:\" (\" attr(title) \")\"}a[href^=\"javascript:\"]:after,a[href^=\"#\"]:after{content:\"\"}pre,blockquote{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}tr,img{page-break-inside:avoid}img{max-width:100%!important}@page{margin:2cm .5cm}p,h2,h3{orphans:3;widows:3}h2,h3{page-break-after:avoid}select{background:#fff!important}.navbar{display:none}.table td,.table th{background-color:#fff!important}.btn>.caret,.dropup>.btn>.caret{border-top-color:#000!important}.label{border:1px solid #000}.table{border-collapse:collapse!important}.table-bordered th,.table-bordered td{border:1px solid #ddd!important}}*,*:before,*:after{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}html{font-size:62.5%;-webkit-tap-highlight-color:rgba(0,0,0,0)}body{font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:14px;line-height:1.428571429;color:#555;background-color:#fff}input,button,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}a{color:#2fa4e7;text-decoration:none}a:hover,a:focus{color:#157ab5;text-decoration:underline}a:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}img{vertical-align:middle}.img-responsive{display:block;height:auto;max-width:100%}.img-rounded{border-radius:6px}.img-thumbnail{display:inline-block;height:auto;max-width:100%;padding:4px;line-height:1.428571429;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.img-circle{border-radius:50%}hr{margin-top:20px;margin-bottom:20px;border:0;border-top:1px solid #eee}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6{font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-weight:500;line-height:1.1;color:#317eac}h1 small,h2 small,h3 small,h4 small,h5 small,h6 small,.h1 small,.h2 small,.h3 small,.h4 small,.h5 small,.h6 small,h1 .small,h2 .small,h3 .small,h4 .small,h5 .small,h6 .small,.h1 .small,.h2 .small,.h3 .small,.h4 .small,.h5 .small,.h6 .small{font-weight:normal;line-height:1;color:#999}h1,h2,h3{margin-top:20px;margin-bottom:10px}h1 small,h2 small,h3 small,h1 .small,h2 .small,h3 .small{font-size:65%}h4,h5,h6{margin-top:10px;margin-bottom:10px}h4 small,h5 small,h6 small,h4 .small,h5 .small,h6 .small{font-size:75%}h1,.h1{font-size:36px}h2,.h2{font-size:30px}h3,.h3{font-size:24px}h4,.h4{font-size:18px}h5,.h5{font-size:14px}h6,.h6{font-size:12px}p{margin:0 0 10px}.lead{margin-bottom:20px;font-size:16px;font-weight:200;line-height:1.4}@media(min-width:768px){.lead{font-size:21px}}small,.small{font-size:85%}cite{font-style:normal}.text-muted{color:#999}.text-primary{color:#2fa4e7}.text-primary:hover{color:#178acc}.text-warning{color:#c09853}.text-warning:hover{color:#a47e3c}.text-danger{color:#b94a48}.text-danger:hover{color:#953b39}.text-success{color:#468847}.text-success:hover{color:#356635}.text-info{color:#3a87ad}.text-info:hover{color:#2d6987}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}.page-header{padding-bottom:9px;margin:40px 0 20px;border-bottom:1px solid #eee}ul,ol{margin-top:0;margin-bottom:10px}ul ul,ol ul,ul ol,ol ol{margin-bottom:0}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none}.list-inline>li{display:inline-block;padding-right:5px;padding-left:5px}.list-inline>li:first-child{padding-left:0}dl{margin-top:0;margin-bottom:20px}dt,dd{line-height:1.428571429}dt{font-weight:bold}dd{margin-left:0}@media(min-width:768px){.dl-horizontal dt{float:left;width:160px;overflow:hidden;clear:left;text-align:right;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}.dl-horizontal dd:before,.dl-horizontal dd:after{display:table;content:\" \"}.dl-horizontal dd:after{clear:both}.dl-horizontal dd:before,.dl-horizontal dd:after{display:table;content:\" \"}.dl-horizontal dd:after{clear:both}.dl-horizontal dd:before,.dl-horizontal dd:after{display:table;content:\" \"}.dl-horizontal dd:after{clear:both}.dl-horizontal dd:before,.dl-horizontal dd:after{display:table;content:\" \"}.dl-horizontal dd:after{clear:both}.dl-horizontal dd:before,.dl-horizontal dd:after{display:table;content:\" \"}.dl-horizontal dd:after{clear:both}}abbr[title],abbr[data-original-title]{cursor:help;border-bottom:1px dotted #999}.initialism{font-size:90%;text-transform:uppercase}blockquote{padding:10px 20px;margin:0 0 20px;border-left:5px solid #eee}blockquote p{font-size:17.5px;font-weight:300;line-height:1.25}blockquote p:last-child{margin-bottom:0}blockquote small,blockquote .small{display:block;line-height:1.428571429;color:#999}blockquote small:before,blockquote .small:before{content:'\\2014 \\00A0'}blockquote.pull-right{padding-right:15px;padding-left:0;border-right:5px solid #eee;border-left:0}blockquote.pull-right p,blockquote.pull-right small,blockquote.pull-right .small{text-align:right}blockquote.pull-right small:before,blockquote.pull-right .small:before{content:''}blockquote.pull-right small:after,blockquote.pull-right .small:after{content:'\\00A0 \\2014'}blockquote:before,blockquote:after{content:\"\"}address{margin-bottom:20px;font-style:normal;line-height:1.428571429}code,kbd,pre,samp{font-family:Menlo,Monaco,Consolas,\"Courier New\",monospace}code{padding:2px 4px;font-size:90%;color:#c7254e;white-space:nowrap;background-color:#f9f2f4;border-radius:4px}pre{display:block;padding:9.5px;margin:0 0 10px;font-size:13px;line-height:1.428571429;color:#333;word-break:break-all;word-wrap:break-word;background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px}pre code{padding:0;font-size:inherit;color:inherit;white-space:pre-wrap;background-color:transparent;border-radius:0}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.container:before,.container:after{display:table;content:\" \"}.container:after{clear:both}.container:before,.container:after{display:table;content:\" \"}.container:after{clear:both}.container:before,.container:after{display:table;content:\" \"}.container:after{clear:both}.container:before,.container:after{display:table;content:\" \"}.container:after{clear:both}.container:before,.container:after{display:table;content:\" \"}.container:after{clear:both}@media(min-width:768px){.container{width:750px}}@media(min-width:992px){.container{width:970px}}@media(min-width:1200px){.container{width:1170px}}.row{margin-right:-15px;margin-left:-15px}.row:before,.row:after{display:table;content:\" \"}.row:after{clear:both}.row:before,.row:after{display:table;content:\" \"}.row:after{clear:both}.row:before,.row:after{display:table;content:\" \"}.row:after{clear:both}.row:before,.row:after{display:table;content:\" \"}.row:after{clear:both}.row:before,.row:after{display:table;content:\" \"}.row:after{clear:both}.col-xs-1,.col-sm-1,.col-md-1,.col-lg-1,.col-xs-2,.col-sm-2,.col-md-2,.col-lg-2,.col-xs-3,.col-sm-3,.col-md-3,.col-lg-3,.col-xs-4,.col-sm-4,.col-md-4,.col-lg-4,.col-xs-5,.col-sm-5,.col-md-5,.col-lg-5,.col-xs-6,.col-sm-6,.col-md-6,.col-lg-6,.col-xs-7,.col-sm-7,.col-md-7,.col-lg-7,.col-xs-8,.col-sm-8,.col-md-8,.col-lg-8,.col-xs-9,.col-sm-9,.col-md-9,.col-lg-9,.col-xs-10,.col-sm-10,.col-md-10,.col-lg-10,.col-xs-11,.col-sm-11,.col-md-11,.col-lg-11,.col-xs-12,.col-sm-12,.col-md-12,.col-lg-12{position:relative;min-height:1px;padding-right:15px;padding-left:15px}.col-xs-1,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9,.col-xs-10,.col-xs-11,.col-xs-12{float:left}.col-xs-12{width:100%}.col-xs-11{width:91.66666666666666%}.col-xs-10{width:83.33333333333334%}.col-xs-9{width:75%}.col-xs-8{width:66.66666666666666%}.col-xs-7{width:58.333333333333336%}.col-xs-6{width:50%}.col-xs-5{width:41.66666666666667%}.col-xs-4{width:33.33333333333333%}.col-xs-3{width:25%}.col-xs-2{width:16.666666666666664%}.col-xs-1{width:8.333333333333332%}.col-xs-pull-12{right:100%}.col-xs-pull-11{right:91.66666666666666%}.col-xs-pull-10{right:83.33333333333334%}.col-xs-pull-9{right:75%}.col-xs-pull-8{right:66.66666666666666%}.col-xs-pull-7{right:58.333333333333336%}.col-xs-pull-6{right:50%}.col-xs-pull-5{right:41.66666666666667%}.col-xs-pull-4{right:33.33333333333333%}.col-xs-pull-3{right:25%}.col-xs-pull-2{right:16.666666666666664%}.col-xs-pull-1{right:8.333333333333332%}.col-xs-pull-0{right:0}.col-xs-push-12{left:100%}.col-xs-push-11{left:91.66666666666666%}.col-xs-push-10{left:83.33333333333334%}.col-xs-push-9{left:75%}.col-xs-push-8{left:66.66666666666666%}.col-xs-push-7{left:58.333333333333336%}.col-xs-push-6{left:50%}.col-xs-push-5{left:41.66666666666667%}.col-xs-push-4{left:33.33333333333333%}.col-xs-push-3{left:25%}.col-xs-push-2{left:16.666666666666664%}.col-xs-push-1{left:8.333333333333332%}.col-xs-push-0{left:0}.col-xs-offset-12{margin-left:100%}.col-xs-offset-11{margin-left:91.66666666666666%}.col-xs-offset-10{margin-left:83.33333333333334%}.col-xs-offset-9{margin-left:75%}.col-xs-offset-8{margin-left:66.66666666666666%}.col-xs-offset-7{margin-left:58.333333333333336%}.col-xs-offset-6{margin-left:50%}.col-xs-offset-5{margin-left:41.66666666666667%}.col-xs-offset-4{margin-left:33.33333333333333%}.col-xs-offset-3{margin-left:25%}.col-xs-offset-2{margin-left:16.666666666666664%}.col-xs-offset-1{margin-left:8.333333333333332%}.col-xs-offset-0{margin-left:0}@media(min-width:768px){.col-sm-1,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-10,.col-sm-11,.col-sm-12{float:left}.col-sm-12{width:100%}.col-sm-11{width:91.66666666666666%}.col-sm-10{width:83.33333333333334%}.col-sm-9{width:75%}.col-sm-8{width:66.66666666666666%}.col-sm-7{width:58.333333333333336%}.col-sm-6{width:50%}.col-sm-5{width:41.66666666666667%}.col-sm-4{width:33.33333333333333%}.col-sm-3{width:25%}.col-sm-2{width:16.666666666666664%}.col-sm-1{width:8.333333333333332%}.col-sm-pull-12{right:100%}.col-sm-pull-11{right:91.66666666666666%}.col-sm-pull-10{right:83.33333333333334%}.col-sm-pull-9{right:75%}.col-sm-pull-8{right:66.66666666666666%}.col-sm-pull-7{right:58.333333333333336%}.col-sm-pull-6{right:50%}.col-sm-pull-5{right:41.66666666666667%}.col-sm-pull-4{right:33.33333333333333%}.col-sm-pull-3{right:25%}.col-sm-pull-2{right:16.666666666666664%}.col-sm-pull-1{right:8.333333333333332%}.col-sm-pull-0{right:0}.col-sm-push-12{left:100%}.col-sm-push-11{left:91.66666666666666%}.col-sm-push-10{left:83.33333333333334%}.col-sm-push-9{left:75%}.col-sm-push-8{left:66.66666666666666%}.col-sm-push-7{left:58.333333333333336%}.col-sm-push-6{left:50%}.col-sm-push-5{left:41.66666666666667%}.col-sm-push-4{left:33.33333333333333%}.col-sm-push-3{left:25%}.col-sm-push-2{left:16.666666666666664%}.col-sm-push-1{left:8.333333333333332%}.col-sm-push-0{left:0}.col-sm-offset-12{margin-left:100%}.col-sm-offset-11{margin-left:91.66666666666666%}.col-sm-offset-10{margin-left:83.33333333333334%}.col-sm-offset-9{margin-left:75%}.col-sm-offset-8{margin-left:66.66666666666666%}.col-sm-offset-7{margin-left:58.333333333333336%}.col-sm-offset-6{margin-left:50%}.col-sm-offset-5{margin-left:41.66666666666667%}.col-sm-offset-4{margin-left:33.33333333333333%}.col-sm-offset-3{margin-left:25%}.col-sm-offset-2{margin-left:16.666666666666664%}.col-sm-offset-1{margin-left:8.333333333333332%}.col-sm-offset-0{margin-left:0}}@media(min-width:992px){.col-md-1,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-10,.col-md-11,.col-md-12{float:left}.col-md-12{width:100%}.col-md-11{width:91.66666666666666%}.col-md-10{width:83.33333333333334%}.col-md-9{width:75%}.col-md-8{width:66.66666666666666%}.col-md-7{width:58.333333333333336%}.col-md-6{width:50%}.col-md-5{width:41.66666666666667%}.col-md-4{width:33.33333333333333%}.col-md-3{width:25%}.col-md-2{width:16.666666666666664%}.col-md-1{width:8.333333333333332%}.col-md-pull-12{right:100%}.col-md-pull-11{right:91.66666666666666%}.col-md-pull-10{right:83.33333333333334%}.col-md-pull-9{right:75%}.col-md-pull-8{right:66.66666666666666%}.col-md-pull-7{right:58.333333333333336%}.col-md-pull-6{right:50%}.col-md-pull-5{right:41.66666666666667%}.col-md-pull-4{right:33.33333333333333%}.col-md-pull-3{right:25%}.col-md-pull-2{right:16.666666666666664%}.col-md-pull-1{right:8.333333333333332%}.col-md-pull-0{right:0}.col-md-push-12{left:100%}.col-md-push-11{left:91.66666666666666%}.col-md-push-10{left:83.33333333333334%}.col-md-push-9{left:75%}.col-md-push-8{left:66.66666666666666%}.col-md-push-7{left:58.333333333333336%}.col-md-push-6{left:50%}.col-md-push-5{left:41.66666666666667%}.col-md-push-4{left:33.33333333333333%}.col-md-push-3{left:25%}.col-md-push-2{left:16.666666666666664%}.col-md-push-1{left:8.333333333333332%}.col-md-push-0{left:0}.col-md-offset-12{margin-left:100%}.col-md-offset-11{margin-left:91.66666666666666%}.col-md-offset-10{margin-left:83.33333333333334%}.col-md-offset-9{margin-left:75%}.col-md-offset-8{margin-left:66.66666666666666%}.col-md-offset-7{margin-left:58.333333333333336%}.col-md-offset-6{margin-left:50%}.col-md-offset-5{margin-left:41.66666666666667%}.col-md-offset-4{margin-left:33.33333333333333%}.col-md-offset-3{margin-left:25%}.col-md-offset-2{margin-left:16.666666666666664%}.col-md-offset-1{margin-left:8.333333333333332%}.col-md-offset-0{margin-left:0}}@media(min-width:1200px){.col-lg-1,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-10,.col-lg-11,.col-lg-12{float:left}.col-lg-12{width:100%}.col-lg-11{width:91.66666666666666%}.col-lg-10{width:83.33333333333334%}.col-lg-9{width:75%}.col-lg-8{width:66.66666666666666%}.col-lg-7{width:58.333333333333336%}.col-lg-6{width:50%}.col-lg-5{width:41.66666666666667%}.col-lg-4{width:33.33333333333333%}.col-lg-3{width:25%}.col-lg-2{width:16.666666666666664%}.col-lg-1{width:8.333333333333332%}.col-lg-pull-12{right:100%}.col-lg-pull-11{right:91.66666666666666%}.col-lg-pull-10{right:83.33333333333334%}.col-lg-pull-9{right:75%}.col-lg-pull-8{right:66.66666666666666%}.col-lg-pull-7{right:58.333333333333336%}.col-lg-pull-6{right:50%}.col-lg-pull-5{right:41.66666666666667%}.col-lg-pull-4{right:33.33333333333333%}.col-lg-pull-3{right:25%}.col-lg-pull-2{right:16.666666666666664%}.col-lg-pull-1{right:8.333333333333332%}.col-lg-pull-0{right:0}.col-lg-push-12{left:100%}.col-lg-push-11{left:91.66666666666666%}.col-lg-push-10{left:83.33333333333334%}.col-lg-push-9{left:75%}.col-lg-push-8{left:66.66666666666666%}.col-lg-push-7{left:58.333333333333336%}.col-lg-push-6{left:50%}.col-lg-push-5{left:41.66666666666667%}.col-lg-push-4{left:33.33333333333333%}.col-lg-push-3{left:25%}.col-lg-push-2{left:16.666666666666664%}.col-lg-push-1{left:8.333333333333332%}.col-lg-push-0{left:0}.col-lg-offset-12{margin-left:100%}.col-lg-offset-11{margin-left:91.66666666666666%}.col-lg-offset-10{margin-left:83.33333333333334%}.col-lg-offset-9{margin-left:75%}.col-lg-offset-8{margin-left:66.66666666666666%}.col-lg-offset-7{margin-left:58.333333333333336%}.col-lg-offset-6{margin-left:50%}.col-lg-offset-5{margin-left:41.66666666666667%}.col-lg-offset-4{margin-left:33.33333333333333%}.col-lg-offset-3{margin-left:25%}.col-lg-offset-2{margin-left:16.666666666666664%}.col-lg-offset-1{margin-left:8.333333333333332%}.col-lg-offset-0{margin-left:0}}table{max-width:100%;background-color:transparent}th{text-align:left}.table{width:100%;margin-bottom:20px}.table>thead>tr>th,.table>tbody>tr>th,.table>tfoot>tr>th,.table>thead>tr>td,.table>tbody>tr>td,.table>tfoot>tr>td{padding:8px;line-height:1.428571429;vertical-align:top;border-top:1px solid #ddd}.table>thead>tr>th{vertical-align:bottom;border-bottom:2px solid #ddd}.table>caption+thead>tr:first-child>th,.table>colgroup+thead>tr:first-child>th,.table>thead:first-child>tr:first-child>th,.table>caption+thead>tr:first-child>td,.table>colgroup+thead>tr:first-child>td,.table>thead:first-child>tr:first-child>td{border-top:0}.table>tbody+tbody{border-top:2px solid #ddd}.table .table{background-color:#fff}.table-condensed>thead>tr>th,.table-condensed>tbody>tr>th,.table-condensed>tfoot>tr>th,.table-condensed>thead>tr>td,.table-condensed>tbody>tr>td,.table-condensed>tfoot>tr>td{padding:5px}.table-bordered{border:1px solid #ddd}.table-bordered>thead>tr>th,.table-bordered>tbody>tr>th,.table-bordered>tfoot>tr>th,.table-bordered>thead>tr>td,.table-bordered>tbody>tr>td,.table-bordered>tfoot>tr>td{border:1px solid #ddd}.table-bordered>thead>tr>th,.table-bordered>thead>tr>td{border-bottom-width:2px}.table-striped>tbody>tr:nth-child(odd)>td,.table-striped>tbody>tr:nth-child(odd)>th{background-color:#f9f9f9}.table-hover>tbody>tr:hover>td,.table-hover>tbody>tr:hover>th{background-color:#f5f5f5}table col[class*=\"col-\"]{position:static;display:table-column;float:none}table td[class*=\"col-\"],table th[class*=\"col-\"]{display:table-cell;float:none}.table>thead>tr>.active,.table>tbody>tr>.active,.table>tfoot>tr>.active,.table>thead>.active>td,.table>tbody>.active>td,.table>tfoot>.active>td,.table>thead>.active>th,.table>tbody>.active>th,.table>tfoot>.active>th{background-color:#f5f5f5}.table-hover>tbody>tr>.active:hover,.table-hover>tbody>.active:hover>td,.table-hover>tbody>.active:hover>th{background-color:#e8e8e8}.table>thead>tr>.success,.table>tbody>tr>.success,.table>tfoot>tr>.success,.table>thead>.success>td,.table>tbody>.success>td,.table>tfoot>.success>td,.table>thead>.success>th,.table>tbody>.success>th,.table>tfoot>.success>th{background-color:#dff0d8}.table-hover>tbody>tr>.success:hover,.table-hover>tbody>.success:hover>td,.table-hover>tbody>.success:hover>th{background-color:#d0e9c6}.table>thead>tr>.danger,.table>tbody>tr>.danger,.table>tfoot>tr>.danger,.table>thead>.danger>td,.table>tbody>.danger>td,.table>tfoot>.danger>td,.table>thead>.danger>th,.table>tbody>.danger>th,.table>tfoot>.danger>th{background-color:#f2dede}.table-hover>tbody>tr>.danger:hover,.table-hover>tbody>.danger:hover>td,.table-hover>tbody>.danger:hover>th{background-color:#ebcccc}.table>thead>tr>.warning,.table>tbody>tr>.warning,.table>tfoot>tr>.warning,.table>thead>.warning>td,.table>tbody>.warning>td,.table>tfoot>.warning>td,.table>thead>.warning>th,.table>tbody>.warning>th,.table>tfoot>.warning>th{background-color:#fcf8e3}.table-hover>tbody>tr>.warning:hover,.table-hover>tbody>.warning:hover>td,.table-hover>tbody>.warning:hover>th{background-color:#faf2cc}@media(max-width:767px){.table-responsive{width:100%;margin-bottom:15px;overflow-x:scroll;overflow-y:hidden;border:1px solid #ddd;-ms-overflow-style:-ms-autohiding-scrollbar;-webkit-overflow-scrolling:touch}.table-responsive>.table{margin-bottom:0}.table-responsive>.table>thead>tr>th,.table-responsive>.table>tbody>tr>th,.table-responsive>.table>tfoot>tr>th,.table-responsive>.table>thead>tr>td,.table-responsive>.table>tbody>tr>td,.table-responsive>.table>tfoot>tr>td{white-space:nowrap}.table-responsive>.table-bordered{border:0}.table-responsive>.table-bordered>thead>tr>th:first-child,.table-responsive>.table-bordered>tbody>tr>th:first-child,.table-responsive>.table-bordered>tfoot>tr>th:first-child,.table-responsive>.table-bordered>thead>tr>td:first-child,.table-responsive>.table-bordered>tbody>tr>td:first-child,.table-responsive>.table-bordered>tfoot>tr>td:first-child{border-left:0}.table-responsive>.table-bordered>thead>tr>th:last-child,.table-responsive>.table-bordered>tbody>tr>th:last-child,.table-responsive>.table-bordered>tfoot>tr>th:last-child,.table-responsive>.table-bordered>thead>tr>td:last-child,.table-responsive>.table-bordered>tbody>tr>td:last-child,.table-responsive>.table-bordered>tfoot>tr>td:last-child{border-right:0}.table-responsive>.table-bordered>tbody>tr:last-child>th,.table-responsive>.table-bordered>tfoot>tr:last-child>th,.table-responsive>.table-bordered>tbody>tr:last-child>td,.table-responsive>.table-bordered>tfoot>tr:last-child>td{border-bottom:0}}fieldset{padding:0;margin:0;border:0}legend{display:block;width:100%;padding:0;margin-bottom:20px;font-size:21px;line-height:inherit;color:#555;border:0;border-bottom:1px solid #e5e5e5}label{display:inline-block;margin-bottom:5px;font-weight:bold}input[type=\"search\"]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}input[type=\"radio\"],input[type=\"checkbox\"]{margin:4px 0 0;margin-top:1px \\9;line-height:normal}input[type=\"file\"]{display:block}select[multiple],select[size]{height:auto}select optgroup{font-family:inherit;font-size:inherit;font-style:inherit}input[type=\"file\"]:focus,input[type=\"radio\"]:focus,input[type=\"checkbox\"]:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}input[type=\"number\"]::-webkit-outer-spin-button,input[type=\"number\"]::-webkit-inner-spin-button{height:auto}output{display:block;padding-top:9px;font-size:14px;line-height:1.428571429;color:#555;vertical-align:middle}.form-control{display:block;width:100%;height:38px;padding:8px 12px;font-size:14px;line-height:1.428571429;color:#555;vertical-align:middle;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-webkit-transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s}.form-control:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(102,175,233,0.6);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(102,175,233,0.6)}.form-control:-moz-placeholder{color:#999}.form-control::-moz-placeholder{color:#999;opacity:1}.form-control:-ms-input-placeholder{color:#999}.form-control::-webkit-input-placeholder{color:#999}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control{cursor:not-allowed;background-color:#eee}textarea.form-control{height:auto}.form-group{margin-bottom:15px}.radio,.checkbox{display:block;min-height:20px;padding-left:20px;margin-top:10px;margin-bottom:10px;vertical-align:middle}.radio label,.checkbox label{display:inline;margin-bottom:0;font-weight:normal;cursor:pointer}.radio input[type=\"radio\"],.radio-inline input[type=\"radio\"],.checkbox input[type=\"checkbox\"],.checkbox-inline input[type=\"checkbox\"]{float:left;margin-left:-20px}.radio+.radio,.checkbox+.checkbox{margin-top:-5px}.radio-inline,.checkbox-inline{display:inline-block;padding-left:20px;margin-bottom:0;font-weight:normal;vertical-align:middle;cursor:pointer}.radio-inline+.radio-inline,.checkbox-inline+.checkbox-inline{margin-top:0;margin-left:10px}input[type=\"radio\"][disabled],input[type=\"checkbox\"][disabled],.radio[disabled],.radio-inline[disabled],.checkbox[disabled],.checkbox-inline[disabled],fieldset[disabled] input[type=\"radio\"],fieldset[disabled] input[type=\"checkbox\"],fieldset[disabled] .radio,fieldset[disabled] .radio-inline,fieldset[disabled] .checkbox,fieldset[disabled] .checkbox-inline{cursor:not-allowed}.input-sm{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-sm{height:30px;line-height:30px}textarea.input-sm{height:auto}.input-lg{height:54px;padding:14px 16px;font-size:18px;line-height:1.33;border-radius:6px}select.input-lg{height:54px;line-height:54px}textarea.input-lg{height:auto}.has-warning .help-block,.has-warning .control-label,.has-warning .radio,.has-warning .checkbox,.has-warning .radio-inline,.has-warning .checkbox-inline{color:#c09853}.has-warning .form-control{border-color:#c09853;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.has-warning .form-control:focus{border-color:#a47e3c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #dbc59e;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #dbc59e}.has-warning .input-group-addon{color:#c09853;background-color:#fcf8e3;border-color:#c09853}.has-error .help-block,.has-error .control-label,.has-error .radio,.has-error .checkbox,.has-error .radio-inline,.has-error .checkbox-inline{color:#b94a48}.has-error .form-control{border-color:#b94a48;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.has-error .form-control:focus{border-color:#953b39;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #d59392;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #d59392}.has-error .input-group-addon{color:#b94a48;background-color:#f2dede;border-color:#b94a48}.has-success .help-block,.has-success .control-label,.has-success .radio,.has-success .checkbox,.has-success .radio-inline,.has-success .checkbox-inline{color:#468847}.has-success .form-control{border-color:#468847;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.has-success .form-control:focus{border-color:#356635;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7aba7b;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7aba7b}.has-success .input-group-addon{color:#468847;background-color:#dff0d8;border-color:#468847}.form-control-static{margin-bottom:0}.help-block{display:block;margin-top:5px;margin-bottom:10px;color:#959595}@media(min-width:768px){.form-inline .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.form-inline .form-control{display:inline-block}.form-inline select.form-control{width:auto}.form-inline .radio,.form-inline .checkbox{display:inline-block;padding-left:0;margin-top:0;margin-bottom:0}.form-inline .radio input[type=\"radio\"],.form-inline .checkbox input[type=\"checkbox\"]{float:none;margin-left:0}}.form-horizontal .control-label,.form-horizontal .radio,.form-horizontal .checkbox,.form-horizontal .radio-inline,.form-horizontal .checkbox-inline{padding-top:9px;margin-top:0;margin-bottom:0}.form-horizontal .radio,.form-horizontal .checkbox{min-height:29px}.form-horizontal .form-group{margin-right:-15px;margin-left:-15px}.form-horizontal .form-group:before,.form-horizontal .form-group:after{display:table;content:\" \"}.form-horizontal .form-group:after{clear:both}.form-horizontal .form-group:before,.form-horizontal .form-group:after{display:table;content:\" \"}.form-horizontal .form-group:after{clear:both}.form-horizontal .form-group:before,.form-horizontal .form-group:after{display:table;content:\" \"}.form-horizontal .form-group:after{clear:both}.form-horizontal .form-group:before,.form-horizontal .form-group:after{display:table;content:\" \"}.form-horizontal .form-group:after{clear:both}.form-horizontal .form-group:before,.form-horizontal .form-group:after{display:table;content:\" \"}.form-horizontal .form-group:after{clear:both}.form-horizontal .form-control-static{padding-top:9px}@media(min-width:768px){.form-horizontal .control-label{text-align:right}}.btn{display:inline-block;padding:8px 12px;margin-bottom:0;font-size:14px;font-weight:normal;line-height:1.428571429;text-align:center;white-space:nowrap;vertical-align:middle;cursor:pointer;background-image:none;border:1px solid transparent;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none}.btn:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.btn:hover,.btn:focus{color:#555;text-decoration:none}.btn:active,.btn.active{background-image:none;outline:0;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,0.125);box-shadow:inset 0 3px 5px rgba(0,0,0,0.125)}.btn.disabled,.btn[disabled],fieldset[disabled] .btn{pointer-events:none;cursor:not-allowed;opacity:.65;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none}.btn-default{color:#555;background-color:#fff;border-color:rgba(0,0,0,0.1)}.btn-default:hover,.btn-default:focus,.btn-default:active,.btn-default.active,.open .dropdown-toggle.btn-default{color:#555;background-color:#ebebeb;border-color:rgba(0,0,0,0.1)}.btn-default:active,.btn-default.active,.open .dropdown-toggle.btn-default{background-image:none}.btn-default.disabled,.btn-default[disabled],fieldset[disabled] .btn-default,.btn-default.disabled:hover,.btn-default[disabled]:hover,fieldset[disabled] .btn-default:hover,.btn-default.disabled:focus,.btn-default[disabled]:focus,fieldset[disabled] .btn-default:focus,.btn-default.disabled:active,.btn-default[disabled]:active,fieldset[disabled] .btn-default:active,.btn-default.disabled.active,.btn-default[disabled].active,fieldset[disabled] .btn-default.active{background-color:#fff;border-color:rgba(0,0,0,0.1)}.btn-default .badge{color:#fff;background-color:#fff}.btn-primary{color:#fff;background-color:#2fa4e7;border-color:#2fa4e7}.btn-primary:hover,.btn-primary:focus,.btn-primary:active,.btn-primary.active,.open .dropdown-toggle.btn-primary{color:#fff;background-color:#1990d5;border-color:#1684c2}.btn-primary:active,.btn-primary.active,.open .dropdown-toggle.btn-primary{background-image:none}.btn-primary.disabled,.btn-primary[disabled],fieldset[disabled] .btn-primary,.btn-primary.disabled:hover,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary:hover,.btn-primary.disabled:focus,.btn-primary[disabled]:focus,fieldset[disabled] .btn-primary:focus,.btn-primary.disabled:active,.btn-primary[disabled]:active,fieldset[disabled] .btn-primary:active,.btn-primary.disabled.active,.btn-primary[disabled].active,fieldset[disabled] .btn-primary.active{background-color:#2fa4e7;border-color:#2fa4e7}.btn-primary .badge{color:#2fa4e7;background-color:#fff}.btn-warning{color:#fff;background-color:#dd5600;border-color:#dd5600}.btn-warning:hover,.btn-warning:focus,.btn-warning:active,.btn-warning.active,.open .dropdown-toggle.btn-warning{color:#fff;background-color:#b44600;border-color:#a03e00}.btn-warning:active,.btn-warning.active,.open .dropdown-toggle.btn-warning{background-image:none}.btn-warning.disabled,.btn-warning[disabled],fieldset[disabled] .btn-warning,.btn-warning.disabled:hover,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning:hover,.btn-warning.disabled:focus,.btn-warning[disabled]:focus,fieldset[disabled] .btn-warning:focus,.btn-warning.disabled:active,.btn-warning[disabled]:active,fieldset[disabled] .btn-warning:active,.btn-warning.disabled.active,.btn-warning[disabled].active,fieldset[disabled] .btn-warning.active{background-color:#dd5600;border-color:#dd5600}.btn-warning .badge{color:#dd5600;background-color:#fff}.btn-danger{color:#fff;background-color:#c71c22;border-color:#c71c22}.btn-danger:hover,.btn-danger:focus,.btn-danger:active,.btn-danger.active,.open .dropdown-toggle.btn-danger{color:#fff;background-color:#a3171c;border-color:#911419}.btn-danger:active,.btn-danger.active,.open .dropdown-toggle.btn-danger{background-image:none}.btn-danger.disabled,.btn-danger[disabled],fieldset[disabled] .btn-danger,.btn-danger.disabled:hover,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger:hover,.btn-danger.disabled:focus,.btn-danger[disabled]:focus,fieldset[disabled] .btn-danger:focus,.btn-danger.disabled:active,.btn-danger[disabled]:active,fieldset[disabled] .btn-danger:active,.btn-danger.disabled.active,.btn-danger[disabled].active,fieldset[disabled] .btn-danger.active{background-color:#c71c22;border-color:#c71c22}.btn-danger .badge{color:#c71c22;background-color:#fff}.btn-success{color:#fff;background-color:#73a839;border-color:#73a839}.btn-success:hover,.btn-success:focus,.btn-success:active,.btn-success.active,.open .dropdown-toggle.btn-success{color:#fff;background-color:#5e8a2f;border-color:#547a29}.btn-success:active,.btn-success.active,.open .dropdown-toggle.btn-success{background-image:none}.btn-success.disabled,.btn-success[disabled],fieldset[disabled] .btn-success,.btn-success.disabled:hover,.btn-success[disabled]:hover,fieldset[disabled] .btn-success:hover,.btn-success.disabled:focus,.btn-success[disabled]:focus,fieldset[disabled] .btn-success:focus,.btn-success.disabled:active,.btn-success[disabled]:active,fieldset[disabled] .btn-success:active,.btn-success.disabled.active,.btn-success[disabled].active,fieldset[disabled] .btn-success.active{background-color:#73a839;border-color:#73a839}.btn-success .badge{color:#73a839;background-color:#fff}.btn-info{color:#fff;background-color:#033c73;border-color:#033c73}.btn-info:hover,.btn-info:focus,.btn-info:active,.btn-info.active,.open .dropdown-toggle.btn-info{color:#fff;background-color:#02274b;border-color:#011d37}.btn-info:active,.btn-info.active,.open .dropdown-toggle.btn-info{background-image:none}.btn-info.disabled,.btn-info[disabled],fieldset[disabled] .btn-info,.btn-info.disabled:hover,.btn-info[disabled]:hover,fieldset[disabled] .btn-info:hover,.btn-info.disabled:focus,.btn-info[disabled]:focus,fieldset[disabled] .btn-info:focus,.btn-info.disabled:active,.btn-info[disabled]:active,fieldset[disabled] .btn-info:active,.btn-info.disabled.active,.btn-info[disabled].active,fieldset[disabled] .btn-info.active{background-color:#033c73;border-color:#033c73}.btn-info .badge{color:#033c73;background-color:#fff}.btn-link{font-weight:normal;color:#2fa4e7;cursor:pointer;border-radius:0}.btn-link,.btn-link:active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link,.btn-link:hover,.btn-link:focus,.btn-link:active{border-color:transparent}.btn-link:hover,.btn-link:focus{color:#157ab5;text-decoration:underline;background-color:transparent}.btn-link[disabled]:hover,fieldset[disabled] .btn-link:hover,.btn-link[disabled]:focus,fieldset[disabled] .btn-link:focus{color:#999;text-decoration:none}.btn-lg{padding:14px 16px;font-size:18px;line-height:1.33;border-radius:6px}.btn-sm{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-xs{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-block{display:block;width:100%;padding-right:0;padding-left:0}.btn-block+.btn-block{margin-top:5px}input[type=\"submit\"].btn-block,input[type=\"reset\"].btn-block,input[type=\"button\"].btn-block{width:100%}.fade{opacity:0;-webkit-transition:opacity .15s linear;transition:opacity .15s linear}.fade.in{opacity:1}.collapse{display:none}.collapse.in{display:block}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition:height .35s ease;transition:height .35s ease}@font-face{font-family:'Glyphicons Halflings';src:url('../fonts/glyphicons-halflings-regular.eot');src:url('../fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'),url('../fonts/glyphicons-halflings-regular.woff') format('woff'),url('../fonts/glyphicons-halflings-regular.ttf') format('truetype'),url('../fonts/glyphicons-halflings-regular.svg#glyphicons-halflingsregular') format('svg')}.glyphicon{position:relative;top:1px;display:inline-block;font-family:'Glyphicons Halflings';-webkit-font-smoothing:antialiased;font-style:normal;font-weight:normal;line-height:1;-moz-osx-font-smoothing:grayscale}.glyphicon:empty{width:1em}.glyphicon-asterisk:before{content:\"\\2a\"}.glyphicon-plus:before{content:\"\\2b\"}.glyphicon-euro:before{content:\"\\20ac\"}.glyphicon-minus:before{content:\"\\2212\"}.glyphicon-cloud:before{content:\"\\2601\"}.glyphicon-envelope:before{content:\"\\2709\"}.glyphicon-pencil:before{content:\"\\270f\"}.glyphicon-glass:before{content:\"\\e001\"}.glyphicon-music:before{content:\"\\e002\"}.glyphicon-search:before{content:\"\\e003\"}.glyphicon-heart:before{content:\"\\e005\"}.glyphicon-star:before{content:\"\\e006\"}.glyphicon-star-empty:before{content:\"\\e007\"}.glyphicon-user:before{content:\"\\e008\"}.glyphicon-film:before{content:\"\\e009\"}.glyphicon-th-large:before{content:\"\\e010\"}.glyphicon-th:before{content:\"\\e011\"}.glyphicon-th-list:before{content:\"\\e012\"}.glyphicon-ok:before{content:\"\\e013\"}.glyphicon-remove:before{content:\"\\e014\"}.glyphicon-zoom-in:before{content:\"\\e015\"}.glyphicon-zoom-out:before{content:\"\\e016\"}.glyphicon-off:before{content:\"\\e017\"}.glyphicon-signal:before{content:\"\\e018\"}.glyphicon-cog:before{content:\"\\e019\"}.glyphicon-trash:before{content:\"\\e020\"}.glyphicon-home:before{content:\"\\e021\"}.glyphicon-file:before{content:\"\\e022\"}.glyphicon-time:before{content:\"\\e023\"}.glyphicon-road:before{content:\"\\e024\"}.glyphicon-download-alt:before{content:\"\\e025\"}.glyphicon-download:before{content:\"\\e026\"}.glyphicon-upload:before{content:\"\\e027\"}.glyphicon-inbox:before{content:\"\\e028\"}.glyphicon-play-circle:before{content:\"\\e029\"}.glyphicon-repeat:before{content:\"\\e030\"}.glyphicon-refresh:before{content:\"\\e031\"}.glyphicon-list-alt:before{content:\"\\e032\"}.glyphicon-lock:before{content:\"\\e033\"}.glyphicon-flag:before{content:\"\\e034\"}.glyphicon-headphones:before{content:\"\\e035\"}.glyphicon-volume-off:before{content:\"\\e036\"}.glyphicon-volume-down:before{content:\"\\e037\"}.glyphicon-volume-up:before{content:\"\\e038\"}.glyphicon-qrcode:before{content:\"\\e039\"}.glyphicon-barcode:before{content:\"\\e040\"}.glyphicon-tag:before{content:\"\\e041\"}.glyphicon-tags:before{content:\"\\e042\"}.glyphicon-book:before{content:\"\\e043\"}.glyphicon-bookmark:before{content:\"\\e044\"}.glyphicon-print:before{content:\"\\e045\"}.glyphicon-camera:before{content:\"\\e046\"}.glyphicon-font:before{content:\"\\e047\"}.glyphicon-bold:before{content:\"\\e048\"}.glyphicon-italic:before{content:\"\\e049\"}.glyphicon-text-height:before{content:\"\\e050\"}.glyphicon-text-width:before{content:\"\\e051\"}.glyphicon-align-left:before{content:\"\\e052\"}.glyphicon-align-center:before{content:\"\\e053\"}.glyphicon-align-right:before{content:\"\\e054\"}.glyphicon-align-justify:before{content:\"\\e055\"}.glyphicon-list:before{content:\"\\e056\"}.glyphicon-indent-left:before{content:\"\\e057\"}.glyphicon-indent-right:before{content:\"\\e058\"}.glyphicon-facetime-video:before{content:\"\\e059\"}.glyphicon-picture:before{content:\"\\e060\"}.glyphicon-map-marker:before{content:\"\\e062\"}.glyphicon-adjust:before{content:\"\\e063\"}.glyphicon-tint:before{content:\"\\e064\"}.glyphicon-edit:before{content:\"\\e065\"}.glyphicon-share:before{content:\"\\e066\"}.glyphicon-check:before{content:\"\\e067\"}.glyphicon-move:before{content:\"\\e068\"}.glyphicon-step-backward:before{content:\"\\e069\"}.glyphicon-fast-backward:before{content:\"\\e070\"}.glyphicon-backward:before{content:\"\\e071\"}.glyphicon-play:before{content:\"\\e072\"}.glyphicon-pause:before{content:\"\\e073\"}.glyphicon-stop:before{content:\"\\e074\"}.glyphicon-forward:before{content:\"\\e075\"}.glyphicon-fast-forward:before{content:\"\\e076\"}.glyphicon-step-forward:before{content:\"\\e077\"}.glyphicon-eject:before{content:\"\\e078\"}.glyphicon-chevron-left:before{content:\"\\e079\"}.glyphicon-chevron-right:before{content:\"\\e080\"}.glyphicon-plus-sign:before{content:\"\\e081\"}.glyphicon-minus-sign:before{content:\"\\e082\"}.glyphicon-remove-sign:before{content:\"\\e083\"}.glyphicon-ok-sign:before{content:\"\\e084\"}.glyphicon-question-sign:before{content:\"\\e085\"}.glyphicon-info-sign:before{content:\"\\e086\"}.glyphicon-screenshot:before{content:\"\\e087\"}.glyphicon-remove-circle:before{content:\"\\e088\"}.glyphicon-ok-circle:before{content:\"\\e089\"}.glyphicon-ban-circle:before{content:\"\\e090\"}.glyphicon-arrow-left:before{content:\"\\e091\"}.glyphicon-arrow-right:before{content:\"\\e092\"}.glyphicon-arrow-up:before{content:\"\\e093\"}.glyphicon-arrow-down:before{content:\"\\e094\"}.glyphicon-share-alt:before{content:\"\\e095\"}.glyphicon-resize-full:before{content:\"\\e096\"}.glyphicon-resize-small:before{content:\"\\e097\"}.glyphicon-exclamation-sign:before{content:\"\\e101\"}.glyphicon-gift:before{content:\"\\e102\"}.glyphicon-leaf:before{content:\"\\e103\"}.glyphicon-fire:before{content:\"\\e104\"}.glyphicon-eye-open:before{content:\"\\e105\"}.glyphicon-eye-close:before{content:\"\\e106\"}.glyphicon-warning-sign:before{content:\"\\e107\"}.glyphicon-plane:before{content:\"\\e108\"}.glyphicon-calendar:before{content:\"\\e109\"}.glyphicon-random:before{content:\"\\e110\"}.glyphicon-comment:before{content:\"\\e111\"}.glyphicon-magnet:before{content:\"\\e112\"}.glyphicon-chevron-up:before{content:\"\\e113\"}.glyphicon-chevron-down:before{content:\"\\e114\"}.glyphicon-retweet:before{content:\"\\e115\"}.glyphicon-shopping-cart:before{content:\"\\e116\"}.glyphicon-folder-close:before{content:\"\\e117\"}.glyphicon-folder-open:before{content:\"\\e118\"}.glyphicon-resize-vertical:before{content:\"\\e119\"}.glyphicon-resize-horizontal:before{content:\"\\e120\"}.glyphicon-hdd:before{content:\"\\e121\"}.glyphicon-bullhorn:before{content:\"\\e122\"}.glyphicon-bell:before{content:\"\\e123\"}.glyphicon-certificate:before{content:\"\\e124\"}.glyphicon-thumbs-up:before{content:\"\\e125\"}.glyphicon-thumbs-down:before{content:\"\\e126\"}.glyphicon-hand-right:before{content:\"\\e127\"}.glyphicon-hand-left:before{content:\"\\e128\"}.glyphicon-hand-up:before{content:\"\\e129\"}.glyphicon-hand-down:before{content:\"\\e130\"}.glyphicon-circle-arrow-right:before{content:\"\\e131\"}.glyphicon-circle-arrow-left:before{content:\"\\e132\"}.glyphicon-circle-arrow-up:before{content:\"\\e133\"}.glyphicon-circle-arrow-down:before{content:\"\\e134\"}.glyphicon-globe:before{content:\"\\e135\"}.glyphicon-wrench:before{content:\"\\e136\"}.glyphicon-tasks:before{content:\"\\e137\"}.glyphicon-filter:before{content:\"\\e138\"}.glyphicon-briefcase:before{content:\"\\e139\"}.glyphicon-fullscreen:before{content:\"\\e140\"}.glyphicon-dashboard:before{content:\"\\e141\"}.glyphicon-paperclip:before{content:\"\\e142\"}.glyphicon-heart-empty:before{content:\"\\e143\"}.glyphicon-link:before{content:\"\\e144\"}.glyphicon-phone:before{content:\"\\e145\"}.glyphicon-pushpin:before{content:\"\\e146\"}.glyphicon-usd:before{content:\"\\e148\"}.glyphicon-gbp:before{content:\"\\e149\"}.glyphicon-sort:before{content:\"\\e150\"}.glyphicon-sort-by-alphabet:before{content:\"\\e151\"}.glyphicon-sort-by-alphabet-alt:before{content:\"\\e152\"}.glyphicon-sort-by-order:before{content:\"\\e153\"}.glyphicon-sort-by-order-alt:before{content:\"\\e154\"}.glyphicon-sort-by-attributes:before{content:\"\\e155\"}.glyphicon-sort-by-attributes-alt:before{content:\"\\e156\"}.glyphicon-unchecked:before{content:\"\\e157\"}.glyphicon-expand:before{content:\"\\e158\"}.glyphicon-collapse-down:before{content:\"\\e159\"}.glyphicon-collapse-up:before{content:\"\\e160\"}.glyphicon-log-in:before{content:\"\\e161\"}.glyphicon-flash:before{content:\"\\e162\"}.glyphicon-log-out:before{content:\"\\e163\"}.glyphicon-new-window:before{content:\"\\e164\"}.glyphicon-record:before{content:\"\\e165\"}.glyphicon-save:before{content:\"\\e166\"}.glyphicon-open:before{content:\"\\e167\"}.glyphicon-saved:before{content:\"\\e168\"}.glyphicon-import:before{content:\"\\e169\"}.glyphicon-export:before{content:\"\\e170\"}.glyphicon-send:before{content:\"\\e171\"}.glyphicon-floppy-disk:before{content:\"\\e172\"}.glyphicon-floppy-saved:before{content:\"\\e173\"}.glyphicon-floppy-remove:before{content:\"\\e174\"}.glyphicon-floppy-save:before{content:\"\\e175\"}.glyphicon-floppy-open:before{content:\"\\e176\"}.glyphicon-credit-card:before{content:\"\\e177\"}.glyphicon-transfer:before{content:\"\\e178\"}.glyphicon-cutlery:before{content:\"\\e179\"}.glyphicon-header:before{content:\"\\e180\"}.glyphicon-compressed:before{content:\"\\e181\"}.glyphicon-earphone:before{content:\"\\e182\"}.glyphicon-phone-alt:before{content:\"\\e183\"}.glyphicon-tower:before{content:\"\\e184\"}.glyphicon-stats:before{content:\"\\e185\"}.glyphicon-sd-video:before{content:\"\\e186\"}.glyphicon-hd-video:before{content:\"\\e187\"}.glyphicon-subtitles:before{content:\"\\e188\"}.glyphicon-sound-stereo:before{content:\"\\e189\"}.glyphicon-sound-dolby:before{content:\"\\e190\"}.glyphicon-sound-5-1:before{content:\"\\e191\"}.glyphicon-sound-6-1:before{content:\"\\e192\"}.glyphicon-sound-7-1:before{content:\"\\e193\"}.glyphicon-copyright-mark:before{content:\"\\e194\"}.glyphicon-registration-mark:before{content:\"\\e195\"}.glyphicon-cloud-download:before{content:\"\\e197\"}.glyphicon-cloud-upload:before{content:\"\\e198\"}.glyphicon-tree-conifer:before{content:\"\\e199\"}.glyphicon-tree-deciduous:before{content:\"\\e200\"}.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px solid;border-right:4px solid transparent;border-left:4px solid transparent}.dropdown{position:relative}.dropdown-toggle:focus{outline:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;font-size:17px;list-style:none;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.15);border-radius:4px;-webkit-box-shadow:0 6px 12px rgba(0,0,0,0.175);box-shadow:0 6px 12px rgba(0,0,0,0.175);background-clip:padding-box}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:normal;line-height:1.428571429;color:#333;white-space:nowrap}.dropdown-menu>li>a:hover,.dropdown-menu>li>a:focus{color:#fff;text-decoration:none;background-color:#2fa4e7}.dropdown-menu>.active>a,.dropdown-menu>.active>a:hover,.dropdown-menu>.active>a:focus{color:#fff;text-decoration:none;background-color:#2fa4e7;outline:0}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:hover,.dropdown-menu>.disabled>a:focus{color:#999}.dropdown-menu>.disabled>a:hover,.dropdown-menu>.disabled>a:focus{text-decoration:none;cursor:not-allowed;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.open>.dropdown-menu{display:block}.open>a{outline:0}.dropdown-header{display:block;padding:3px 20px;font-size:12px;line-height:1.428571429;color:#999}.dropdown-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:990}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{border-top:0;border-bottom:4px solid;content:\"\"}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:1px}@media(min-width:768px){.navbar-right .dropdown-menu{right:0;left:auto}}.btn-group,.btn-group-vertical{position:relative;display:inline-block;vertical-align:middle}.btn-group>.btn,.btn-group-vertical>.btn{position:relative;float:left}.btn-group>.btn:hover,.btn-group-vertical>.btn:hover,.btn-group>.btn:focus,.btn-group-vertical>.btn:focus,.btn-group>.btn:active,.btn-group-vertical>.btn:active,.btn-group>.btn.active,.btn-group-vertical>.btn.active{z-index:2}.btn-group>.btn:focus,.btn-group-vertical>.btn:focus{outline:0}.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group{margin-left:-1px}.btn-toolbar:before,.btn-toolbar:after{display:table;content:\" \"}.btn-toolbar:after{clear:both}.btn-toolbar:before,.btn-toolbar:after{display:table;content:\" \"}.btn-toolbar:after{clear:both}.btn-toolbar:before,.btn-toolbar:after{display:table;content:\" \"}.btn-toolbar:after{clear:both}.btn-toolbar:before,.btn-toolbar:after{display:table;content:\" \"}.btn-toolbar:after{clear:both}.btn-toolbar:before,.btn-toolbar:after{display:table;content:\" \"}.btn-toolbar:after{clear:both}.btn-toolbar .btn-group{float:left}.btn-toolbar>.btn+.btn,.btn-toolbar>.btn-group+.btn,.btn-toolbar>.btn+.btn-group,.btn-toolbar>.btn-group+.btn-group{margin-left:5px}.btn-group>.btn:not(:first-child):not(:last-child):not(.dropdown-toggle){border-radius:0}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn:last-child:not(:first-child),.btn-group>.dropdown-toggle:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0}.btn-group>.btn-group{float:left}.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group>.btn-group:first-child>.btn:last-child,.btn-group>.btn-group:first-child>.dropdown-toggle{border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:last-child>.btn:first-child{border-bottom-left-radius:0;border-top-left-radius:0}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle{outline:0}.btn-group-xs>.btn{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-group-sm>.btn{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-group-lg>.btn{padding:14px 16px;font-size:18px;line-height:1.33;border-radius:6px}.btn-group>.btn+.dropdown-toggle{padding-right:8px;padding-left:8px}.btn-group>.btn-lg+.dropdown-toggle{padding-right:12px;padding-left:12px}.btn-group.open .dropdown-toggle{-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,0.125);box-shadow:inset 0 3px 5px rgba(0,0,0,0.125)}.btn-group.open .dropdown-toggle.btn-link{-webkit-box-shadow:none;box-shadow:none}.btn .caret{margin-left:0}.btn-lg .caret{border-width:5px 5px 0;border-bottom-width:0}.dropup .btn-lg .caret{border-width:0 5px 5px}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group,.btn-group-vertical>.btn-group>.btn{display:block;float:none;width:100%;max-width:100%}.btn-group-vertical>.btn-group:before,.btn-group-vertical>.btn-group:after{display:table;content:\" \"}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group:before,.btn-group-vertical>.btn-group:after{display:table;content:\" \"}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group:before,.btn-group-vertical>.btn-group:after{display:table;content:\" \"}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group:before,.btn-group-vertical>.btn-group:after{display:table;content:\" \"}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group:before,.btn-group-vertical>.btn-group:after{display:table;content:\" \"}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group>.btn{float:none}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn:not(:first-child):not(:last-child){border-radius:0}.btn-group-vertical>.btn:first-child:not(:last-child){border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn:last-child:not(:first-child){border-top-right-radius:0;border-bottom-left-radius:4px;border-top-left-radius:0}.btn-group-vertical>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group-vertical>.btn-group:first-child>.btn:last-child,.btn-group-vertical>.btn-group:first-child>.dropdown-toggle{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:last-child>.btn:first-child{border-top-right-radius:0;border-top-left-radius:0}.btn-group-justified{display:table;width:100%;border-collapse:separate;table-layout:fixed}.btn-group-justified>.btn,.btn-group-justified>.btn-group{display:table-cell;float:none;width:1%}.btn-group-justified>.btn-group .btn{width:100%}[data-toggle=\"buttons\"]>.btn>input[type=\"radio\"],[data-toggle=\"buttons\"]>.btn>input[type=\"checkbox\"]{display:none}.input-group{position:relative;display:table;border-collapse:separate}.input-group[class*=\"col-\"]{float:none;padding-right:0;padding-left:0}.input-group .form-control{width:100%;margin-bottom:0}.input-group-lg>.form-control,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.btn{height:54px;padding:14px 16px;font-size:18px;line-height:1.33;border-radius:6px}select.input-group-lg>.form-control,select.input-group-lg>.input-group-addon,select.input-group-lg>.input-group-btn>.btn{height:54px;line-height:54px}textarea.input-group-lg>.form-control,textarea.input-group-lg>.input-group-addon,textarea.input-group-lg>.input-group-btn>.btn{height:auto}.input-group-sm>.form-control,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.btn{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-group-sm>.form-control,select.input-group-sm>.input-group-addon,select.input-group-sm>.input-group-btn>.btn{height:30px;line-height:30px}textarea.input-group-sm>.form-control,textarea.input-group-sm>.input-group-addon,textarea.input-group-sm>.input-group-btn>.btn{height:auto}.input-group-addon,.input-group-btn,.input-group .form-control{display:table-cell}.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child),.input-group .form-control:not(:first-child):not(:last-child){border-radius:0}.input-group-addon,.input-group-btn{width:1%;white-space:nowrap;vertical-align:middle}.input-group-addon{padding:8px 12px;font-size:14px;font-weight:normal;line-height:1;color:#555;text-align:center;background-color:#eee;border:1px solid #ccc;border-radius:4px}.input-group-addon.input-sm{padding:5px 10px;font-size:12px;border-radius:3px}.input-group-addon.input-lg{padding:14px 16px;font-size:18px;border-radius:6px}.input-group-addon input[type=\"radio\"],.input-group-addon input[type=\"checkbox\"]{margin-top:0}.input-group .form-control:first-child,.input-group-addon:first-child,.input-group-btn:first-child>.btn,.input-group-btn:first-child>.dropdown-toggle,.input-group-btn:last-child>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.input-group-addon:first-child{border-right:0}.input-group .form-control:last-child,.input-group-addon:last-child,.input-group-btn:last-child>.btn,.input-group-btn:last-child>.dropdown-toggle,.input-group-btn:first-child>.btn:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0}.input-group-addon:last-child{border-left:0}.input-group-btn{position:relative;white-space:nowrap}.input-group-btn:first-child>.btn{margin-right:-1px}.input-group-btn:last-child>.btn{margin-left:-1px}.input-group-btn>.btn{position:relative}.input-group-btn>.btn+.btn{margin-left:-4px}.input-group-btn>.btn:hover,.input-group-btn>.btn:active{z-index:2}.nav{padding-left:0;margin-bottom:0;list-style:none}.nav:before,.nav:after{display:table;content:\" \"}.nav:after{clear:both}.nav:before,.nav:after{display:table;content:\" \"}.nav:after{clear:both}.nav:before,.nav:after{display:table;content:\" \"}.nav:after{clear:both}.nav:before,.nav:after{display:table;content:\" \"}.nav:after{clear:both}.nav:before,.nav:after{display:table;content:\" \"}.nav:after{clear:both}.nav>li{position:relative;display:block}.nav>li>a{position:relative;display:block;padding:10px 15px}.nav>li>a:hover,.nav>li>a:focus{text-decoration:none;background-color:#eee}.nav>li.disabled>a{color:#999}.nav>li.disabled>a:hover,.nav>li.disabled>a:focus{color:#999;text-decoration:none;cursor:not-allowed;background-color:transparent}.nav .open>a,.nav .open>a:hover,.nav .open>a:focus{background-color:#eee;border-color:#2fa4e7}.nav .nav-divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.nav>li>a>img{max-width:none}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs>li{float:left;margin-bottom:-1px}.nav-tabs>li>a{margin-right:2px;line-height:1.428571429;border:1px solid transparent;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover{border-color:#eee #eee #ddd}.nav-tabs>li.active>a,.nav-tabs>li.active>a:hover,.nav-tabs>li.active>a:focus{color:#555;cursor:default;background-color:#fff;border:1px solid #ddd;border-bottom-color:transparent}.nav-tabs.nav-justified{width:100%;border-bottom:0}.nav-tabs.nav-justified>li{float:none}.nav-tabs.nav-justified>li>a{margin-bottom:5px;text-align:center}.nav-tabs.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media(min-width:768px){.nav-tabs.nav-justified>li{display:table-cell;width:1%}.nav-tabs.nav-justified>li>a{margin-bottom:0}}.nav-tabs.nav-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a:focus{border:1px solid #ddd}@media(min-width:768px){.nav-tabs.nav-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a:focus{border-bottom-color:#fff}}.nav-pills>li{float:left}.nav-pills>li>a{border-radius:4px}.nav-pills>li+li{margin-left:2px}.nav-pills>li.active>a,.nav-pills>li.active>a:hover,.nav-pills>li.active>a:focus{color:#fff;background-color:#2fa4e7}.nav-stacked>li{float:none}.nav-stacked>li+li{margin-top:2px;margin-left:0}.nav-justified{width:100%}.nav-justified>li{float:none}.nav-justified>li>a{margin-bottom:5px;text-align:center}.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media(min-width:768px){.nav-justified>li{display:table-cell;width:1%}.nav-justified>li>a{margin-bottom:0}}.nav-tabs-justified{border-bottom:0}.nav-tabs-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:hover,.nav-tabs-justified>.active>a:focus{border:1px solid #ddd}@media(min-width:768px){.nav-tabs-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:hover,.nav-tabs-justified>.active>a:focus{border-bottom-color:#fff}}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-right-radius:0;border-top-left-radius:0}.navbar{position:relative;min-height:50px;margin-bottom:20px;border:1px solid transparent}.navbar:before,.navbar:after{display:table;content:\" \"}.navbar:after{clear:both}.navbar:before,.navbar:after{display:table;content:\" \"}.navbar:after{clear:both}.navbar:before,.navbar:after{display:table;content:\" \"}.navbar:after{clear:both}.navbar:before,.navbar:after{display:table;content:\" \"}.navbar:after{clear:both}.navbar:before,.navbar:after{display:table;content:\" \"}.navbar:after{clear:both}@media(min-width:768px){.navbar{border-radius:4px}}.navbar-header:before,.navbar-header:after{display:table;content:\" \"}.navbar-header:after{clear:both}.navbar-header:before,.navbar-header:after{display:table;content:\" \"}.navbar-header:after{clear:both}.navbar-header:before,.navbar-header:after{display:table;content:\" \"}.navbar-header:after{clear:both}.navbar-header:before,.navbar-header:after{display:table;content:\" \"}.navbar-header:after{clear:both}.navbar-header:before,.navbar-header:after{display:table;content:\" \"}.navbar-header:after{clear:both}@media(min-width:768px){.navbar-header{float:left}}.navbar-collapse{max-height:340px;padding-right:15px;padding-left:15px;overflow-x:visible;border-top:1px solid transparent;box-shadow:inset 0 1px 0 rgba(255,255,255,0.1);-webkit-overflow-scrolling:touch}.navbar-collapse:before,.navbar-collapse:after{display:table;content:\" \"}.navbar-collapse:after{clear:both}.navbar-collapse:before,.navbar-collapse:after{display:table;content:\" \"}.navbar-collapse:after{clear:both}.navbar-collapse:before,.navbar-collapse:after{display:table;content:\" \"}.navbar-collapse:after{clear:both}.navbar-collapse:before,.navbar-collapse:after{display:table;content:\" \"}.navbar-collapse:after{clear:both}.navbar-collapse:before,.navbar-collapse:after{display:table;content:\" \"}.navbar-collapse:after{clear:both}.navbar-collapse.in{overflow-y:auto}@media(min-width:768px){.navbar-collapse{width:auto;border-top:0;box-shadow:none}.navbar-collapse.collapse{display:block!important;height:auto!important;padding-bottom:0;overflow:visible!important}.navbar-collapse.in{overflow-y:visible}.navbar-fixed-top .navbar-collapse,.navbar-static-top .navbar-collapse,.navbar-fixed-bottom .navbar-collapse{padding-right:0;padding-left:0}}.container>.navbar-header,.container>.navbar-collapse{margin-right:-15px;margin-left:-15px}@media(min-width:768px){.container>.navbar-header,.container>.navbar-collapse{margin-right:0;margin-left:0}}.navbar-static-top{z-index:1000;border-width:0 0 1px}@media(min-width:768px){.navbar-static-top{border-radius:0}}.navbar-fixed-top,.navbar-fixed-bottom{position:fixed;right:0;left:0;z-index:1030}@media(min-width:768px){.navbar-fixed-top,.navbar-fixed-bottom{border-radius:0}}.navbar-fixed-top{top:0;border-width:0 0 1px}.navbar-fixed-bottom{bottom:0;margin-bottom:0;border-width:1px 0 0}.navbar-brand{float:left;padding:15px 15px;font-size:18px;line-height:20px}.navbar-brand:hover,.navbar-brand:focus{text-decoration:none}@media(min-width:768px){.navbar>.container .navbar-brand{margin-left:-15px}}.navbar-toggle{position:relative;float:right;padding:9px 10px;margin-top:8px;margin-right:15px;margin-bottom:8px;background-color:transparent;background-image:none;border:1px solid transparent;border-radius:4px}.navbar-toggle .icon-bar{display:block;width:22px;height:2px;border-radius:1px}.navbar-toggle .icon-bar+.icon-bar{margin-top:4px}@media(min-width:768px){.navbar-toggle{display:none}}.navbar-nav{margin:7.5px -15px}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:20px}@media(max-width:767px){.navbar-nav .open .dropdown-menu{position:static;float:none;width:auto;margin-top:0;background-color:transparent;border:0;box-shadow:none}.navbar-nav .open .dropdown-menu>li>a,.navbar-nav .open .dropdown-menu .dropdown-header{padding:5px 15px 5px 25px}.navbar-nav .open .dropdown-menu>li>a{line-height:20px}.navbar-nav .open .dropdown-menu>li>a:hover,.navbar-nav .open .dropdown-menu>li>a:focus{background-image:none}}@media(min-width:768px){.navbar-nav{float:left;margin:0}.navbar-nav>li{float:left}.navbar-nav>li>a{padding-top:15px;padding-bottom:15px}.navbar-nav.navbar-right:last-child{margin-right:-15px}}@media(min-width:768px){.navbar-left{float:left!important}.navbar-right{float:right!important}}.navbar-form{padding:10px 15px;margin-top:6px;margin-right:-15px;margin-bottom:6px;margin-left:-15px;border-top:1px solid transparent;border-bottom:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1);box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1)}@media(min-width:768px){.navbar-form .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.navbar-form .form-control{display:inline-block}.navbar-form select.form-control{width:auto}.navbar-form .radio,.navbar-form .checkbox{display:inline-block;padding-left:0;margin-top:0;margin-bottom:0}.navbar-form .radio input[type=\"radio\"],.navbar-form .checkbox input[type=\"checkbox\"]{float:none;margin-left:0}}@media(max-width:767px){.navbar-form .form-group{margin-bottom:5px}}@media(min-width:768px){.navbar-form{width:auto;padding-top:0;padding-bottom:0;margin-right:0;margin-left:0;border:0;-webkit-box-shadow:none;box-shadow:none}.navbar-form.navbar-right:last-child{margin-right:-15px}}.navbar-nav>li>.dropdown-menu{margin-top:0;border-top-right-radius:0;border-top-left-radius:0}.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu{border-bottom-right-radius:0;border-bottom-left-radius:0}.navbar-nav.pull-right>li>.dropdown-menu,.navbar-nav>li>.dropdown-menu.pull-right{right:0;left:auto}.navbar-btn{margin-top:6px;margin-bottom:6px}.navbar-btn.btn-sm{margin-top:10px;margin-bottom:10px}.navbar-btn.btn-xs{margin-top:14px;margin-bottom:14px}.navbar-text{margin-top:15px;margin-bottom:15px}@media(min-width:768px){.navbar-text{float:left;margin-right:15px;margin-left:15px}.navbar-text.navbar-right:last-child{margin-right:0}}.navbar-default{background-color:#2fa4e7;border-color:#1995dc}.navbar-default .navbar-brand{color:#fff}.navbar-default .navbar-brand:hover,.navbar-default .navbar-brand:focus{color:#fff;background-color:none}.navbar-default .navbar-text{color:#ddd}.navbar-default .navbar-nav>li>a{color:#fff}.navbar-default .navbar-nav>li>a:hover,.navbar-default .navbar-nav>li>a:focus{color:#fff;background-color:#178acc}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:hover,.navbar-default .navbar-nav>.active>a:focus{color:#fff;background-color:#178acc}.navbar-default .navbar-nav>.disabled>a,.navbar-default .navbar-nav>.disabled>a:hover,.navbar-default .navbar-nav>.disabled>a:focus{color:#ddd;background-color:transparent}.navbar-default .navbar-toggle{border-color:#178acc}.navbar-default .navbar-toggle:hover,.navbar-default .navbar-toggle:focus{background-color:#178acc}.navbar-default .navbar-toggle .icon-bar{background-color:#fff}.navbar-default .navbar-collapse,.navbar-default .navbar-form{border-color:#1995dc}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:hover,.navbar-default .navbar-nav>.open>a:focus{color:#fff;background-color:#178acc}@media(max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#fff}.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover,.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus{color:#fff;background-color:#178acc}.navbar-default .navbar-nav .open .dropdown-menu>.active>a,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus{color:#fff;background-color:#178acc}.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus{color:#ddd;background-color:transparent}}.navbar-default .navbar-link{color:#fff}.navbar-default .navbar-link:hover{color:#fff}.navbar-inverse{background-color:#033c73;border-color:#022f5a}.navbar-inverse .navbar-brand{color:#fff}.navbar-inverse .navbar-brand:hover,.navbar-inverse .navbar-brand:focus{color:#fff;background-color:none}.navbar-inverse .navbar-text{color:#fff}.navbar-inverse .navbar-nav>li>a{color:#fff}.navbar-inverse .navbar-nav>li>a:hover,.navbar-inverse .navbar-nav>li>a:focus{color:#fff;background-color:#022f5a}.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.active>a:hover,.navbar-inverse .navbar-nav>.active>a:focus{color:#fff;background-color:#022f5a}.navbar-inverse .navbar-nav>.disabled>a,.navbar-inverse .navbar-nav>.disabled>a:hover,.navbar-inverse .navbar-nav>.disabled>a:focus{color:#ccc;background-color:transparent}.navbar-inverse .navbar-toggle{border-color:#022f5a}.navbar-inverse .navbar-toggle:hover,.navbar-inverse .navbar-toggle:focus{background-color:#022f5a}.navbar-inverse .navbar-toggle .icon-bar{background-color:#fff}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form{border-color:#022a50}.navbar-inverse .navbar-nav>.open>a,.navbar-inverse .navbar-nav>.open>a:hover,.navbar-inverse .navbar-nav>.open>a:focus{color:#fff;background-color:#022f5a}@media(max-width:767px){.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header{border-color:#022f5a}.navbar-inverse .navbar-nav .open .dropdown-menu .divider{background-color:#022f5a}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a{color:#fff}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover,.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus{color:#fff;background-color:#022f5a}.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus{color:#fff;background-color:#022f5a}.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus{color:#ccc;background-color:transparent}}.navbar-inverse .navbar-link{color:#fff}.navbar-inverse .navbar-link:hover{color:#fff}.breadcrumb{padding:8px 15px;margin-bottom:20px;list-style:none;background-color:#f5f5f5;border-radius:4px}.breadcrumb>li{display:inline-block}.breadcrumb>li+li:before{padding:0 5px;color:#ccc;content:\"/\\00a0\"}.breadcrumb>.active{color:#999}.pagination{display:inline-block;padding-left:0;margin:20px 0;border-radius:4px}.pagination>li{display:inline}.pagination>li>a,.pagination>li>span{position:relative;float:left;padding:8px 12px;margin-left:-1px;line-height:1.428571429;text-decoration:none;background-color:#fff;border:1px solid #ddd}.pagination>li:first-child>a,.pagination>li:first-child>span{margin-left:0;border-bottom-left-radius:4px;border-top-left-radius:4px}.pagination>li:last-child>a,.pagination>li:last-child>span{border-top-right-radius:4px;border-bottom-right-radius:4px}.pagination>li>a:hover,.pagination>li>span:hover,.pagination>li>a:focus,.pagination>li>span:focus{background-color:#eee}.pagination>.active>a,.pagination>.active>span,.pagination>.active>a:hover,.pagination>.active>span:hover,.pagination>.active>a:focus,.pagination>.active>span:focus{z-index:2;color:#999;cursor:default;background-color:#f5f5f5;border-color:#f5f5f5}.pagination>.disabled>span,.pagination>.disabled>span:hover,.pagination>.disabled>span:focus,.pagination>.disabled>a,.pagination>.disabled>a:hover,.pagination>.disabled>a:focus{color:#999;cursor:not-allowed;background-color:#fff;border-color:#ddd}.pagination-lg>li>a,.pagination-lg>li>span{padding:14px 16px;font-size:18px}.pagination-lg>li:first-child>a,.pagination-lg>li:first-child>span{border-bottom-left-radius:6px;border-top-left-radius:6px}.pagination-lg>li:last-child>a,.pagination-lg>li:last-child>span{border-top-right-radius:6px;border-bottom-right-radius:6px}.pagination-sm>li>a,.pagination-sm>li>span{padding:5px 10px;font-size:12px}.pagination-sm>li:first-child>a,.pagination-sm>li:first-child>span{border-bottom-left-radius:3px;border-top-left-radius:3px}.pagination-sm>li:last-child>a,.pagination-sm>li:last-child>span{border-top-right-radius:3px;border-bottom-right-radius:3px}.pager{padding-left:0;margin:20px 0;text-align:center;list-style:none}.pager:before,.pager:after{display:table;content:\" \"}.pager:after{clear:both}.pager:before,.pager:after{display:table;content:\" \"}.pager:after{clear:both}.pager:before,.pager:after{display:table;content:\" \"}.pager:after{clear:both}.pager:before,.pager:after{display:table;content:\" \"}.pager:after{clear:both}.pager:before,.pager:after{display:table;content:\" \"}.pager:after{clear:both}.pager li{display:inline}.pager li>a,.pager li>span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;border-radius:15px}.pager li>a:hover,.pager li>a:focus{text-decoration:none;background-color:#eee}.pager .next>a,.pager .next>span{float:right}.pager .previous>a,.pager .previous>span{float:left}.pager .disabled>a,.pager .disabled>a:hover,.pager .disabled>a:focus,.pager .disabled>span{color:#999;cursor:not-allowed;background-color:#fff}.label{display:inline;padding:.2em .6em .3em;font-size:75%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}.label[href]:hover,.label[href]:focus{color:#fff;text-decoration:none;cursor:pointer}.label:empty{display:none}.btn .label{position:relative;top:-1px}.label-default{background-color:#999}.label-default[href]:hover,.label-default[href]:focus{background-color:#808080}.label-primary{background-color:#2fa4e7}.label-primary[href]:hover,.label-primary[href]:focus{background-color:#178acc}.label-success{background-color:#73a839}.label-success[href]:hover,.label-success[href]:focus{background-color:#59822c}.label-info{background-color:#033c73}.label-info[href]:hover,.label-info[href]:focus{background-color:#022241}.label-warning{background-color:#dd5600}.label-warning[href]:hover,.label-warning[href]:focus{background-color:#aa4200}.label-danger{background-color:#c71c22}.label-danger[href]:hover,.label-danger[href]:focus{background-color:#9a161a}.badge{display:inline-block;min-width:10px;padding:3px 7px;font-size:12px;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;background-color:#999;border-radius:10px}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}a.badge:hover,a.badge:focus{color:#fff;text-decoration:none;cursor:pointer}a.list-group-item.active>.badge,.nav-pills>.active>a>.badge{color:#2fa4e7;background-color:#fff}.nav-pills>li>a>.badge{margin-left:3px}.jumbotron{padding:30px;margin-bottom:30px;font-size:21px;font-weight:200;line-height:2.1428571435;color:inherit;background-color:#eee}.jumbotron h1,.jumbotron .h1{line-height:1;color:inherit}.jumbotron p{line-height:1.4}.container .jumbotron{border-radius:6px}.jumbotron .container{max-width:100%}@media screen and (min-width:768px){.jumbotron{padding-top:48px;padding-bottom:48px}.container .jumbotron{padding-right:60px;padding-left:60px}.jumbotron h1,.jumbotron .h1{font-size:63px}}.thumbnail{display:block;padding:4px;margin-bottom:20px;line-height:1.428571429;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.thumbnail>img,.thumbnail a>img{display:block;height:auto;max-width:100%;margin-right:auto;margin-left:auto}a.thumbnail:hover,a.thumbnail:focus,a.thumbnail.active{border-color:#2fa4e7}.thumbnail .caption{padding:9px;color:#555}.alert{padding:15px;margin-bottom:20px;border:1px solid transparent;border-radius:4px}.alert h4{margin-top:0;color:inherit}.alert .alert-link{font-weight:bold}.alert>p,.alert>ul{margin-bottom:0}.alert>p+p{margin-top:5px}.alert-dismissable{padding-right:35px}.alert-dismissable .close{position:relative;top:-2px;right:-21px;color:inherit}.alert-success{color:#468847;background-color:#dff0d8;border-color:#d6e9c6}.alert-success hr{border-top-color:#c9e2b3}.alert-success .alert-link{color:#356635}.alert-info{color:#3a87ad;background-color:#d9edf7;border-color:#bce8f1}.alert-info hr{border-top-color:#a6e1ec}.alert-info .alert-link{color:#2d6987}.alert-warning{color:#c09853;background-color:#fcf8e3;border-color:#fbeed5}.alert-warning hr{border-top-color:#f8e5be}.alert-warning .alert-link{color:#a47e3c}.alert-danger{color:#b94a48;background-color:#f2dede;border-color:#eed3d7}.alert-danger hr{border-top-color:#e6c1c7}.alert-danger .alert-link{color:#953b39}@-webkit-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}.progress{height:20px;margin-bottom:20px;overflow:hidden;background-color:#f5f5f5;border-radius:4px;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);box-shadow:inset 0 1px 2px rgba(0,0,0,0.1)}.progress-bar{float:left;width:0;height:100%;font-size:12px;line-height:20px;color:#fff;text-align:center;background-color:#2fa4e7;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);-webkit-transition:width .6s ease;transition:width .6s ease}.progress-striped .progress-bar{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-size:40px 40px}.progress.active .progress-bar{-webkit-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}.progress-bar-success{background-color:#73a839}.progress-striped .progress-bar-success{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.progress-bar-info{background-color:#033c73}.progress-striped .progress-bar-info{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.progress-bar-warning{background-color:#dd5600}.progress-striped .progress-bar-warning{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.progress-bar-danger{background-color:#c71c22}.progress-striped .progress-bar-danger{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.media,.media-body{overflow:hidden;zoom:1}.media,.media .media{margin-top:15px}.media:first-child{margin-top:0}.media-object{display:block}.media-heading{margin:0 0 5px}.media>.pull-left{margin-right:10px}.media>.pull-right{margin-left:10px}.media-list{padding-left:0;list-style:none}.list-group{padding-left:0;margin-bottom:20px}.list-group-item{position:relative;display:block;padding:10px 15px;margin-bottom:-1px;background-color:#fff;border:1px solid #ddd}.list-group-item:first-child{border-top-right-radius:4px;border-top-left-radius:4px}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}.list-group-item>.badge{float:right}.list-group-item>.badge+.badge{margin-right:5px}a.list-group-item{color:#555}a.list-group-item .list-group-item-heading{color:#333}a.list-group-item:hover,a.list-group-item:focus{text-decoration:none;background-color:#f5f5f5}a.list-group-item.active,a.list-group-item.active:hover,a.list-group-item.active:focus{z-index:2;color:#fff;background-color:#2fa4e7;border-color:#2fa4e7}a.list-group-item.active .list-group-item-heading,a.list-group-item.active:hover .list-group-item-heading,a.list-group-item.active:focus .list-group-item-heading{color:inherit}a.list-group-item.active .list-group-item-text,a.list-group-item.active:hover .list-group-item-text,a.list-group-item.active:focus .list-group-item-text{color:#e6f4fc}.list-group-item-heading{margin-top:0;margin-bottom:5px}.list-group-item-text{margin-bottom:0;line-height:1.3}.panel{margin-bottom:20px;background-color:#fff;border:1px solid transparent;border-radius:4px;-webkit-box-shadow:0 1px 1px rgba(0,0,0,0.05);box-shadow:0 1px 1px rgba(0,0,0,0.05)}.panel-body{padding:15px}.panel-body:before,.panel-body:after{display:table;content:\" \"}.panel-body:after{clear:both}.panel-body:before,.panel-body:after{display:table;content:\" \"}.panel-body:after{clear:both}.panel-body:before,.panel-body:after{display:table;content:\" \"}.panel-body:after{clear:both}.panel-body:before,.panel-body:after{display:table;content:\" \"}.panel-body:after{clear:both}.panel-body:before,.panel-body:after{display:table;content:\" \"}.panel-body:after{clear:both}.panel>.list-group{margin-bottom:0}.panel>.list-group .list-group-item{border-width:1px 0}.panel>.list-group .list-group-item:first-child{border-top-right-radius:0;border-top-left-radius:0}.panel>.list-group .list-group-item:last-child{border-bottom:0}.panel-heading+.list-group .list-group-item:first-child{border-top-width:0}.panel>.table,.panel>.table-responsive>.table{margin-bottom:0}.panel>.panel-body+.table,.panel>.panel-body+.table-responsive{border-top:1px solid #ddd}.panel>.table>tbody:first-child th,.panel>.table>tbody:first-child td{border-top:0}.panel>.table-bordered,.panel>.table-responsive>.table-bordered{border:0}.panel>.table-bordered>thead>tr>th:first-child,.panel>.table-responsive>.table-bordered>thead>tr>th:first-child,.panel>.table-bordered>tbody>tr>th:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:first-child,.panel>.table-bordered>tfoot>tr>th:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:first-child,.panel>.table-bordered>thead>tr>td:first-child,.panel>.table-responsive>.table-bordered>thead>tr>td:first-child,.panel>.table-bordered>tbody>tr>td:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:first-child,.panel>.table-bordered>tfoot>tr>td:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:first-child{border-left:0}.panel>.table-bordered>thead>tr>th:last-child,.panel>.table-responsive>.table-bordered>thead>tr>th:last-child,.panel>.table-bordered>tbody>tr>th:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:last-child,.panel>.table-bordered>tfoot>tr>th:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:last-child,.panel>.table-bordered>thead>tr>td:last-child,.panel>.table-responsive>.table-bordered>thead>tr>td:last-child,.panel>.table-bordered>tbody>tr>td:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:last-child,.panel>.table-bordered>tfoot>tr>td:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:last-child{border-right:0}.panel>.table-bordered>thead>tr:last-child>th,.panel>.table-responsive>.table-bordered>thead>tr:last-child>th,.panel>.table-bordered>tbody>tr:last-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>th,.panel>.table-bordered>tfoot>tr:last-child>th,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>th,.panel>.table-bordered>thead>tr:last-child>td,.panel>.table-responsive>.table-bordered>thead>tr:last-child>td,.panel>.table-bordered>tbody>tr:last-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>td,.panel>.table-bordered>tfoot>tr:last-child>td,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>td{border-bottom:0}.panel>.table-responsive{margin-bottom:0;border:0}.panel-heading{padding:10px 15px;border-bottom:1px solid transparent;border-top-right-radius:3px;border-top-left-radius:3px}.panel-heading>.dropdown .dropdown-toggle{color:inherit}.panel-title{margin-top:0;margin-bottom:0;font-size:16px;color:inherit}.panel-title>a{color:inherit}.panel-footer{padding:10px 15px;background-color:#f5f5f5;border-top:1px solid #ddd;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel-group .panel{margin-bottom:0;overflow:hidden;border-radius:4px}.panel-group .panel+.panel{margin-top:5px}.panel-group .panel-heading{border-bottom:0}.panel-group .panel-heading+.panel-collapse .panel-body{border-top:1px solid #ddd}.panel-group .panel-footer{border-top:0}.panel-group .panel-footer+.panel-collapse .panel-body{border-bottom:1px solid #ddd}.panel-default{border-color:#ddd}.panel-default>.panel-heading{color:#555;background-color:#f5f5f5;border-color:#ddd}.panel-default>.panel-heading+.panel-collapse .panel-body{border-top-color:#ddd}.panel-default>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ddd}.panel-primary{border-color:#ddd}.panel-primary>.panel-heading{color:#fff;background-color:#2fa4e7;border-color:#ddd}.panel-primary>.panel-heading+.panel-collapse .panel-body{border-top-color:#ddd}.panel-primary>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ddd}.panel-success{border-color:#ddd}.panel-success>.panel-heading{color:#468847;background-color:#73a839;border-color:#ddd}.panel-success>.panel-heading+.panel-collapse .panel-body{border-top-color:#ddd}.panel-success>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ddd}.panel-warning{border-color:#ddd}.panel-warning>.panel-heading{color:#c09853;background-color:#dd5600;border-color:#ddd}.panel-warning>.panel-heading+.panel-collapse .panel-body{border-top-color:#ddd}.panel-warning>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ddd}.panel-danger{border-color:#ddd}.panel-danger>.panel-heading{color:#b94a48;background-color:#c71c22;border-color:#ddd}.panel-danger>.panel-heading+.panel-collapse .panel-body{border-top-color:#ddd}.panel-danger>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ddd}.panel-info{border-color:#ddd}.panel-info>.panel-heading{color:#3a87ad;background-color:#033c73;border-color:#ddd}.panel-info>.panel-heading+.panel-collapse .panel-body{border-top-color:#ddd}.panel-info>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ddd}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.05);box-shadow:inset 0 1px 1px rgba(0,0,0,0.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,0.15)}.well-lg{padding:24px;border-radius:6px}.well-sm{padding:9px;border-radius:3px}.close{float:right;font-size:21px;font-weight:bold;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.2;filter:alpha(opacity=20)}.close:hover,.close:focus{color:#000;text-decoration:none;cursor:pointer;opacity:.5;filter:alpha(opacity=50)}button.close{padding:0;cursor:pointer;background:transparent;border:0;-webkit-appearance:none}.modal-open{overflow:hidden}.modal{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;display:none;overflow:auto;overflow-y:scroll}.modal.fade .modal-dialog{-webkit-transform:translate(0,-25%);-ms-transform:translate(0,-25%);transform:translate(0,-25%);-webkit-transition:-webkit-transform .3s ease-out;-moz-transition:-moz-transform .3s ease-out;-o-transition:-o-transform .3s ease-out;transition:transform .3s ease-out}.modal.in .modal-dialog{-webkit-transform:translate(0,0);-ms-transform:translate(0,0);transform:translate(0,0)}.modal-dialog{position:relative;z-index:1050;width:auto;margin:10px}.modal-content{position:relative;background-color:#fff;border:1px solid #999;border:1px solid rgba(0,0,0,0.2);border-radius:6px;outline:0;-webkit-box-shadow:0 3px 9px rgba(0,0,0,0.5);box-shadow:0 3px 9px rgba(0,0,0,0.5);background-clip:padding-box}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1030;background-color:#000}.modal-backdrop.fade{opacity:0;filter:alpha(opacity=0)}.modal-backdrop.in{opacity:.5;filter:alpha(opacity=50)}.modal-header{min-height:16.428571429px;padding:15px;border-bottom:1px solid #e5e5e5}.modal-header .close{margin-top:-2px}.modal-title{margin:0;line-height:1.428571429}.modal-body{position:relative;padding:20px}.modal-footer{padding:19px 20px 20px;margin-top:15px;text-align:right;border-top:1px solid #e5e5e5}.modal-footer:before,.modal-footer:after{display:table;content:\" \"}.modal-footer:after{clear:both}.modal-footer:before,.modal-footer:after{display:table;content:\" \"}.modal-footer:after{clear:both}.modal-footer:before,.modal-footer:after{display:table;content:\" \"}.modal-footer:after{clear:both}.modal-footer:before,.modal-footer:after{display:table;content:\" \"}.modal-footer:after{clear:both}.modal-footer:before,.modal-footer:after{display:table;content:\" \"}.modal-footer:after{clear:both}.modal-footer .btn+.btn{margin-bottom:0;margin-left:5px}.modal-footer .btn-group .btn+.btn{margin-left:-1px}.modal-footer .btn-block+.btn-block{margin-left:0}@media screen and (min-width:768px){.modal-dialog{width:600px;margin:30px auto}.modal-content{-webkit-box-shadow:0 5px 15px rgba(0,0,0,0.5);box-shadow:0 5px 15px rgba(0,0,0,0.5)}}.tooltip{position:absolute;z-index:1030;display:block;font-size:12px;line-height:1.4;opacity:0;filter:alpha(opacity=0);visibility:visible}.tooltip.in{opacity:.9;filter:alpha(opacity=90)}.tooltip.top{padding:5px 0;margin-top:-3px}.tooltip.right{padding:0 5px;margin-left:3px}.tooltip.bottom{padding:5px 0;margin-top:3px}.tooltip.left{padding:0 5px;margin-left:-3px}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;text-decoration:none;background-color:rgba(0,0,0,0.9);border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-top-color:rgba(0,0,0,0.9);border-width:5px 5px 0}.tooltip.top-left .tooltip-arrow{bottom:0;left:5px;border-top-color:rgba(0,0,0,0.9);border-width:5px 5px 0}.tooltip.top-right .tooltip-arrow{right:5px;bottom:0;border-top-color:rgba(0,0,0,0.9);border-width:5px 5px 0}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-right-color:rgba(0,0,0,0.9);border-width:5px 5px 5px 0}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-left-color:rgba(0,0,0,0.9);border-width:5px 0 5px 5px}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-bottom-color:rgba(0,0,0,0.9);border-width:0 5px 5px}.tooltip.bottom-left .tooltip-arrow{top:0;left:5px;border-bottom-color:rgba(0,0,0,0.9);border-width:0 5px 5px}.tooltip.bottom-right .tooltip-arrow{top:0;right:5px;border-bottom-color:rgba(0,0,0,0.9);border-width:0 5px 5px}.popover{position:absolute;top:0;left:0;z-index:1010;display:none;max-width:276px;padding:1px;text-align:left;white-space:normal;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.2);border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,0.2);box-shadow:0 5px 10px rgba(0,0,0,0.2);background-clip:padding-box}.popover.top{margin-top:-10px}.popover.right{margin-left:10px}.popover.bottom{margin-top:10px}.popover.left{margin-left:-10px}.popover-title{padding:8px 14px;margin:0;font-size:14px;font-weight:normal;line-height:18px;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.popover-content{padding:9px 14px}.popover .arrow,.popover .arrow:after{position:absolute;display:block;width:0;height:0;border-color:transparent;border-style:solid}.popover .arrow{border-width:11px}.popover .arrow:after{border-width:10px;content:\"\"}.popover.top .arrow{bottom:-11px;left:50%;margin-left:-11px;border-top-color:#999;border-top-color:rgba(0,0,0,0.25);border-bottom-width:0}.popover.top .arrow:after{bottom:1px;margin-left:-10px;border-top-color:#fff;border-bottom-width:0;content:\" \"}.popover.right .arrow{top:50%;left:-11px;margin-top:-11px;border-right-color:#999;border-right-color:rgba(0,0,0,0.25);border-left-width:0}.popover.right .arrow:after{bottom:-10px;left:1px;border-right-color:#fff;border-left-width:0;content:\" \"}.popover.bottom .arrow{top:-11px;left:50%;margin-left:-11px;border-bottom-color:#999;border-bottom-color:rgba(0,0,0,0.25);border-top-width:0}.popover.bottom .arrow:after{top:1px;margin-left:-10px;border-bottom-color:#fff;border-top-width:0;content:\" \"}.popover.left .arrow{top:50%;right:-11px;margin-top:-11px;border-left-color:#999;border-left-color:rgba(0,0,0,0.25);border-right-width:0}.popover.left .arrow:after{right:1px;bottom:-10px;border-left-color:#fff;border-right-width:0;content:\" \"}.carousel{position:relative}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner>.item{position:relative;display:none;-webkit-transition:.6s ease-in-out left;transition:.6s ease-in-out left}.carousel-inner>.item>img,.carousel-inner>.item>a>img{display:block;height:auto;max-width:100%;line-height:1}.carousel-inner>.active,.carousel-inner>.next,.carousel-inner>.prev{display:block}.carousel-inner>.active{left:0}.carousel-inner>.next,.carousel-inner>.prev{position:absolute;top:0;width:100%}.carousel-inner>.next{left:100%}.carousel-inner>.prev{left:-100%}.carousel-inner>.next.left,.carousel-inner>.prev.right{left:0}.carousel-inner>.active.left{left:-100%}.carousel-inner>.active.right{left:100%}.carousel-control{position:absolute;top:0;bottom:0;left:0;width:15%;font-size:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,0.6);opacity:.5;filter:alpha(opacity=50)}.carousel-control.left{background-image:-webkit-linear-gradient(left,color-stop(rgba(0,0,0,0.5) 0),color-stop(rgba(0,0,0,0.0001) 100%));background-image:linear-gradient(to right,rgba(0,0,0,0.5) 0,rgba(0,0,0,0.0001) 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000',endColorstr='#00000000',GradientType=1)}.carousel-control.right{right:0;left:auto;background-image:-webkit-linear-gradient(left,color-stop(rgba(0,0,0,0.0001) 0),color-stop(rgba(0,0,0,0.5) 100%));background-image:linear-gradient(to right,rgba(0,0,0,0.0001) 0,rgba(0,0,0,0.5) 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000',endColorstr='#80000000',GradientType=1)}.carousel-control:hover,.carousel-control:focus{color:#fff;text-decoration:none;outline:0;opacity:.9;filter:alpha(opacity=90)}.carousel-control .icon-prev,.carousel-control .icon-next,.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right{position:absolute;top:50%;z-index:5;display:inline-block}.carousel-control .icon-prev,.carousel-control .glyphicon-chevron-left{left:50%}.carousel-control .icon-next,.carousel-control .glyphicon-chevron-right{right:50%}.carousel-control .icon-prev,.carousel-control .icon-next{width:20px;height:20px;margin-top:-10px;margin-left:-10px;font-family:serif}.carousel-control .icon-prev:before{content:'\\2039'}.carousel-control .icon-next:before{content:'\\203a'}.carousel-indicators{position:absolute;bottom:10px;left:50%;z-index:15;width:60%;padding-left:0;margin-left:-30%;text-align:center;list-style:none}.carousel-indicators li{display:inline-block;width:10px;height:10px;margin:1px;text-indent:-999px;cursor:pointer;background-color:#000 \\9;background-color:rgba(0,0,0,0);border:1px solid #fff;border-radius:10px}.carousel-indicators .active{width:12px;height:12px;margin:0;background-color:#fff}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,0.6)}.carousel-caption .btn{text-shadow:none}@media screen and (min-width:768px){.carousel-control .glyphicons-chevron-left,.carousel-control .glyphicons-chevron-right,.carousel-control .icon-prev,.carousel-control .icon-next{width:30px;height:30px;margin-top:-15px;margin-left:-15px;font-size:30px}.carousel-caption{right:20%;left:20%;padding-bottom:30px}.carousel-indicators{bottom:20px}}.clearfix:before,.clearfix:after{display:table;content:\" \"}.clearfix:after{clear:both}.clearfix:before,.clearfix:after{display:table;content:\" \"}.clearfix:after{clear:both}.center-block{display:block;margin-right:auto;margin-left:auto}.pull-right{float:right!important}.pull-left{float:left!important}.hide{display:none!important}.show{display:block!important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none!important;visibility:hidden!important}.affix{position:fixed}@-ms-viewport{width:device-width}.visible-xs,tr.visible-xs,th.visible-xs,td.visible-xs{display:none!important}@media(max-width:767px){.visible-xs{display:block!important}table.visible-xs{display:table}tr.visible-xs{display:table-row!important}th.visible-xs,td.visible-xs{display:table-cell!important}}@media(min-width:768px) and (max-width:991px){.visible-xs.visible-sm{display:block!important}table.visible-xs.visible-sm{display:table}tr.visible-xs.visible-sm{display:table-row!important}th.visible-xs.visible-sm,td.visible-xs.visible-sm{display:table-cell!important}}@media(min-width:992px) and (max-width:1199px){.visible-xs.visible-md{display:block!important}table.visible-xs.visible-md{display:table}tr.visible-xs.visible-md{display:table-row!important}th.visible-xs.visible-md,td.visible-xs.visible-md{display:table-cell!important}}@media(min-width:1200px){.visible-xs.visible-lg{display:block!important}table.visible-xs.visible-lg{display:table}tr.visible-xs.visible-lg{display:table-row!important}th.visible-xs.visible-lg,td.visible-xs.visible-lg{display:table-cell!important}}.visible-sm,tr.visible-sm,th.visible-sm,td.visible-sm{display:none!important}@media(max-width:767px){.visible-sm.visible-xs{display:block!important}table.visible-sm.visible-xs{display:table}tr.visible-sm.visible-xs{display:table-row!important}th.visible-sm.visible-xs,td.visible-sm.visible-xs{display:table-cell!important}}@media(min-width:768px) and (max-width:991px){.visible-sm{display:block!important}table.visible-sm{display:table}tr.visible-sm{display:table-row!important}th.visible-sm,td.visible-sm{display:table-cell!important}}@media(min-width:992px) and (max-width:1199px){.visible-sm.visible-md{display:block!important}table.visible-sm.visible-md{display:table}tr.visible-sm.visible-md{display:table-row!important}th.visible-sm.visible-md,td.visible-sm.visible-md{display:table-cell!important}}@media(min-width:1200px){.visible-sm.visible-lg{display:block!important}table.visible-sm.visible-lg{display:table}tr.visible-sm.visible-lg{display:table-row!important}th.visible-sm.visible-lg,td.visible-sm.visible-lg{display:table-cell!important}}.visible-md,tr.visible-md,th.visible-md,td.visible-md{display:none!important}@media(max-width:767px){.visible-md.visible-xs{display:block!important}table.visible-md.visible-xs{display:table}tr.visible-md.visible-xs{display:table-row!important}th.visible-md.visible-xs,td.visible-md.visible-xs{display:table-cell!important}}@media(min-width:768px) and (max-width:991px){.visible-md.visible-sm{display:block!important}table.visible-md.visible-sm{display:table}tr.visible-md.visible-sm{display:table-row!important}th.visible-md.visible-sm,td.visible-md.visible-sm{display:table-cell!important}}@media(min-width:992px) and (max-width:1199px){.visible-md{display:block!important}table.visible-md{display:table}tr.visible-md{display:table-row!important}th.visible-md,td.visible-md{display:table-cell!important}}@media(min-width:1200px){.visible-md.visible-lg{display:block!important}table.visible-md.visible-lg{display:table}tr.visible-md.visible-lg{display:table-row!important}th.visible-md.visible-lg,td.visible-md.visible-lg{display:table-cell!important}}.visible-lg,tr.visible-lg,th.visible-lg,td.visible-lg{display:none!important}@media(max-width:767px){.visible-lg.visible-xs{display:block!important}table.visible-lg.visible-xs{display:table}tr.visible-lg.visible-xs{display:table-row!important}th.visible-lg.visible-xs,td.visible-lg.visible-xs{display:table-cell!important}}@media(min-width:768px) and (max-width:991px){.visible-lg.visible-sm{display:block!important}table.visible-lg.visible-sm{display:table}tr.visible-lg.visible-sm{display:table-row!important}th.visible-lg.visible-sm,td.visible-lg.visible-sm{display:table-cell!important}}@media(min-width:992px) and (max-width:1199px){.visible-lg.visible-md{display:block!important}table.visible-lg.visible-md{display:table}tr.visible-lg.visible-md{display:table-row!important}th.visible-lg.visible-md,td.visible-lg.visible-md{display:table-cell!important}}@media(min-width:1200px){.visible-lg{display:block!important}table.visible-lg{display:table}tr.visible-lg{display:table-row!important}th.visible-lg,td.visible-lg{display:table-cell!important}}.hidden-xs{display:block!important}table.hidden-xs{display:table}tr.hidden-xs{display:table-row!important}th.hidden-xs,td.hidden-xs{display:table-cell!important}@media(max-width:767px){.hidden-xs,tr.hidden-xs,th.hidden-xs,td.hidden-xs{display:none!important}}@media(min-width:768px) and (max-width:991px){.hidden-xs.hidden-sm,tr.hidden-xs.hidden-sm,th.hidden-xs.hidden-sm,td.hidden-xs.hidden-sm{display:none!important}}@media(min-width:992px) and (max-width:1199px){.hidden-xs.hidden-md,tr.hidden-xs.hidden-md,th.hidden-xs.hidden-md,td.hidden-xs.hidden-md{display:none!important}}@media(min-width:1200px){.hidden-xs.hidden-lg,tr.hidden-xs.hidden-lg,th.hidden-xs.hidden-lg,td.hidden-xs.hidden-lg{display:none!important}}.hidden-sm{display:block!important}table.hidden-sm{display:table}tr.hidden-sm{display:table-row!important}th.hidden-sm,td.hidden-sm{display:table-cell!important}@media(max-width:767px){.hidden-sm.hidden-xs,tr.hidden-sm.hidden-xs,th.hidden-sm.hidden-xs,td.hidden-sm.hidden-xs{display:none!important}}@media(min-width:768px) and (max-width:991px){.hidden-sm,tr.hidden-sm,th.hidden-sm,td.hidden-sm{display:none!important}}@media(min-width:992px) and (max-width:1199px){.hidden-sm.hidden-md,tr.hidden-sm.hidden-md,th.hidden-sm.hidden-md,td.hidden-sm.hidden-md{display:none!important}}@media(min-width:1200px){.hidden-sm.hidden-lg,tr.hidden-sm.hidden-lg,th.hidden-sm.hidden-lg,td.hidden-sm.hidden-lg{display:none!important}}.hidden-md{display:block!important}table.hidden-md{display:table}tr.hidden-md{display:table-row!important}th.hidden-md,td.hidden-md{display:table-cell!important}@media(max-width:767px){.hidden-md.hidden-xs,tr.hidden-md.hidden-xs,th.hidden-md.hidden-xs,td.hidden-md.hidden-xs{display:none!important}}@media(min-width:768px) and (max-width:991px){.hidden-md.hidden-sm,tr.hidden-md.hidden-sm,th.hidden-md.hidden-sm,td.hidden-md.hidden-sm{display:none!important}}@media(min-width:992px) and (max-width:1199px){.hidden-md,tr.hidden-md,th.hidden-md,td.hidden-md{display:none!important}}@media(min-width:1200px){.hidden-md.hidden-lg,tr.hidden-md.hidden-lg,th.hidden-md.hidden-lg,td.hidden-md.hidden-lg{display:none!important}}.hidden-lg{display:block!important}table.hidden-lg{display:table}tr.hidden-lg{display:table-row!important}th.hidden-lg,td.hidden-lg{display:table-cell!important}@media(max-width:767px){.hidden-lg.hidden-xs,tr.hidden-lg.hidden-xs,th.hidden-lg.hidden-xs,td.hidden-lg.hidden-xs{display:none!important}}@media(min-width:768px) and (max-width:991px){.hidden-lg.hidden-sm,tr.hidden-lg.hidden-sm,th.hidden-lg.hidden-sm,td.hidden-lg.hidden-sm{display:none!important}}@media(min-width:992px) and (max-width:1199px){.hidden-lg.hidden-md,tr.hidden-lg.hidden-md,th.hidden-lg.hidden-md,td.hidden-lg.hidden-md{display:none!important}}@media(min-width:1200px){.hidden-lg,tr.hidden-lg,th.hidden-lg,td.hidden-lg{display:none!important}}.visible-print,tr.visible-print,th.visible-print,td.visible-print{display:none!important}@media print{.visible-print{display:block!important}table.visible-print{display:table}tr.visible-print{display:table-row!important}th.visible-print,td.visible-print{display:table-cell!important}.hidden-print,tr.hidden-print,th.hidden-print,td.hidden-print{display:none!important}}.navbar{background-image:-webkit-linear-gradient(#54b4eb,#2fa4e7 60%,#1d9ce5);background-image:linear-gradient(#54b4eb,#2fa4e7 60%,#1d9ce5);background-repeat:no-repeat;border-bottom:1px solid #178acc;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff54b4eb',endColorstr='#ff1d9ce5',GradientType=0);filter:none;-webkit-box-shadow:0 1px 10px rgba(0,0,0,0.1);box-shadow:0 1px 10px rgba(0,0,0,0.1)}.navbar .navbar-nav>li>a,.navbar-brand{text-shadow:0 1px 0 rgba(0,0,0,0.1)}.navbar-inverse{background-image:-webkit-linear-gradient(#04519b,#044687 60%,#033769);background-image:linear-gradient(#04519b,#044687 60%,#033769);background-repeat:no-repeat;border-bottom:1px solid #022241;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff04519b',endColorstr='#ff033769',GradientType=0);filter:none}.btn{text-shadow:0 1px 0 rgba(0,0,0,0.1)}.btn .caret{border-top-color:#fff}.btn-default{background-image:-webkit-linear-gradient(#fff,#fff 60%,#f5f5f5);background-image:linear-gradient(#fff,#fff 60%,#f5f5f5);background-repeat:no-repeat;border-bottom:1px solid #e6e6e6;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff',endColorstr='#fff5f5f5',GradientType=0);filter:none}.btn-default:hover{color:#555}.btn-default .caret{border-top-color:#555}.btn-default{background-image:-webkit-linear-gradient(#fff,#fff 60%,#f5f5f5);background-image:linear-gradient(#fff,#fff 60%,#f5f5f5);background-repeat:no-repeat;border-bottom:1px solid #e6e6e6;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff',endColorstr='#fff5f5f5',GradientType=0);filter:none}.btn-primary{background-image:-webkit-linear-gradient(#54b4eb,#2fa4e7 60%,#1d9ce5);background-image:linear-gradient(#54b4eb,#2fa4e7 60%,#1d9ce5);background-repeat:no-repeat;border-bottom:1px solid #178acc;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff54b4eb',endColorstr='#ff1d9ce5',GradientType=0);filter:none}.btn-success{background-image:-webkit-linear-gradient(#88c149,#73a839 60%,#699934);background-image:linear-gradient(#88c149,#73a839 60%,#699934);background-repeat:no-repeat;border-bottom:1px solid #59822c;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff88c149',endColorstr='#ff699934',GradientType=0);filter:none}.btn-info{background-image:-webkit-linear-gradient(#04519b,#033c73 60%,#02325f);background-image:linear-gradient(#04519b,#033c73 60%,#02325f);background-repeat:no-repeat;border-bottom:1px solid #022241;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff04519b',endColorstr='#ff02325f',GradientType=0);filter:none}.btn-warning{background-image:-webkit-linear-gradient(#ff6707,#dd5600 60%,#c94e00);background-image:linear-gradient(#ff6707,#dd5600 60%,#c94e00);background-repeat:no-repeat;border-bottom:1px solid #aa4200;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffff6707',endColorstr='#ffc94e00',GradientType=0);filter:none}.btn-danger{background-image:-webkit-linear-gradient(#e12b31,#c71c22 60%,#b5191f);background-image:linear-gradient(#e12b31,#c71c22 60%,#b5191f);background-repeat:no-repeat;border-bottom:1px solid #9a161a;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffe12b31',endColorstr='#ffb5191f',GradientType=0);filter:none}.pagination .active>a,.pagination .active>a:hover{border-color:#ddd}.panel-primary .panel-heading,.panel-success .panel-heading,.panel-warning .panel-heading,.panel-danger .panel-heading,.panel-info .panel-heading,.panel-primary .panel-title,.panel-success .panel-title,.panel-warning .panel-title,.panel-danger .panel-title,.panel-info .panel-title{color:#fff}.clearfix:before,.clearfix:after{display:table;content:\" \"}.clearfix:after{clear:both}.clearfix:before,.clearfix:after{display:table;content:\" \"}.clearfix:after{clear:both}.center-block{display:block;margin-right:auto;margin-left:auto}.pull-right{float:right!important}.pull-left{float:left!important}.hide{display:none!important}.show{display:block!important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none!important;visibility:hidden!important}.affix{position:fixed}\ndiff --git a/website/docs/css/extra.css b/website/docs/css/extra.css\n--- a/website/docs/css/extra.css\n+++ b/website/docs/css/extra.css\n@@ -6,7 +6,7 @@ body::before {\n }\n \n body {\n-\tfont-size: 15px;\n+\tfont-size: 17px;\n }\n \n body .col-md-9 p img {\ndiff --git a/website/docs/css/extra.css b/website/docs/css/extra.css\n--- a/website/docs/css/extra.css\n+++ b/website/docs/css/extra.css\n@@ -94,7 +94,7 @@ kbd.b {\n .bs-sidebar .nav > .main.active > a,\n .bs-sidebar .nav > .main.active:hover > a,\n .bs-sidebar .nav > .main.active:focus > a {\n-\tfont-weight: bold;\n+    /*font-weight: bold;*/\n }\n \n /******************/\n",
        "test_patch": "diff --git a/src/shell_install/mod.rs b/src/shell_install/mod.rs\n--- a/src/shell_install/mod.rs\n+++ b/src/shell_install/mod.rs\n@@ -68,23 +77,29 @@ pub struct ShellInstall {\n /// or test scripts when we don't want the user to be prompted\n /// to install the function, or in case something doesn't properly\n /// work in shell detections\n-pub fn write_state(state: ShellInstallState) -> Result<(), ProgramError> {\n+pub fn write_state(state: ShellInstallState) -> Result<(), ShellInstallError> {\n     let refused_path = get_refused_path();\n     let installed_path = get_installed_path();\n     if installed_path.exists() {\n-        fs::remove_file(&installed_path)?;\n+        fs::remove_file(&installed_path)\n+            .context(&|| format!(\"removing {:?}\", &installed_path))?;\n     }\n     if refused_path.exists() {\n-        fs::remove_file(&refused_path)?;\n+        fs::remove_file(&refused_path)\n+            .context(&|| format!(\"removing {:?}\", &refused_path))?;\n     }\n     match state {\n         ShellInstallState::Refused => {\n-            fs::create_dir_all(refused_path.parent().unwrap())?;\n-            fs::write(&refused_path, REFUSED_FILE_CONTENT)?;\n+            fs::create_dir_all(refused_path.parent().unwrap())\n+                .context(&|| format!(\"creating parents of {refused_path:?}\"))?;\n+            fs::write(&refused_path, REFUSED_FILE_CONTENT)\n+                .context(&|| format!(\"writing in {refused_path:?}\"))?;\n         }\n         ShellInstallState::Installed => {\n-            fs::create_dir_all(installed_path.parent().unwrap())?;\n-            fs::write(&installed_path, INSTALLED_FILE_CONTENT)?;\n+            fs::create_dir_all(installed_path.parent().unwrap())\n+                .context(&|| format!(\"creating parents of {installed_path:?}\"))?;\n+            fs::write(&installed_path, INSTALLED_FILE_CONTENT)\n+                .context(&|| format!(\"writing in {installed_path:?}\"))?;\n         }\n         _ => {}\n     }\n",
        "problem_statement": "Need a br shell function for nushell\nAn alias was previously proposed:\r\n\r\n    alias br [] { broot | trim | cd $it }\r\n\r\nbut it doesn't seem to work now, either because of changes in nushell or because of changes in broot.\r\n\r\nHelp appreciated.\n",
        "hints_text": "This one (adapted from https://github.com/Canop/broot/issues/373) partially works: it doesn't allow flags\r\n\r\n```\r\ndef br [...rest] {\r\n  let path = $(broot --color yes --out /dev/stdout $rest | str trim)\r\n  let is_empty = $(= $path | empty?)\r\n  if $is_empty {} {\r\n    cd $path\r\n  }\r\n}\r\n```\r\n\r\n\nHey, noob question. Where do I write the def?\n> Hey, noob question. Where do I write the def?\r\n\r\nSee my comment in #373\n> > Hey, noob question. Where do I write the def?\r\n> \r\n> See my comment in #373\r\n\r\nThanks, that did it\nOk, I found a way to do it with Python: \r\n\r\n```\r\nimport sys\r\nimport tempfile\r\n\r\ntemp_file = tempfile.NamedTemporaryFile()\r\nargs = \" \".join(sys.argv[1:])\r\nstart_cmd = \"broot --color yes --outcmd {} {}\".format(temp_file.name, args)\r\n\r\nexit_status = os.system(start_cmd)\r\nif (exit_status != 0):\r\n    temp_file.close()\r\n    print(exit_status)\r\n    exit()\r\n\r\nthen_cmd = temp_file.read().decode('utf-8')\r\ntemp_file.close()\r\n\r\nif (then_cmd[:3] == 'cd '):\r\n    target = then_cmd[3:-1].replace('\\\\', \"/\")\r\n    os.chdir(target)\r\n    os.system('nu')\r\nelse:\r\n    print('running: ' + then_cmd)\r\n    os.system(then_cmd)\r\n```\r\n\r\nStash that into a file and then add an alias to call up that file to config. Eg.\r\n\r\n`alias br = python c:/path/to/your/file.py`\r\n\r\nObviously you need to have Python installed, but it works (and so do flags!)\nI'll try. I'd appreciate opinions from other nushell users\nThis solution should in theory work for any shell and os combo that can run Python, just changing the os.system('nu') call to whatever shell the user is using. maybe by passing a param to the python script. I can try to help if needed.  \nBtw you might have tried it already, but wouldn't this same approach also work from Rust instead of Python? What I'm doing is setting the current directory and resetting shell after that to apply the directory change. You could set the dir with [std::env::set_current_dir](https://doc.rust-lang.org/std/env/fn.set_current_dir.html) and then reset the shell using [std::process::Command](https://doc.rust-lang.org/std/process/struct.Command.html) no?\nThis might work for most shells I think. But I'm not sure. I'm also not a Rust programmer so I might be wrong about the above also.\n> You could set the dir with std::env::set_current_dir and then reset the shell using std::process::Command no?\r\n\r\nNo you can't because `std::env::set_current_dir` changes the current dir for the current process, not for the parent shell. As soon as you leave the Rust application, you're back to the old current dir. Or am I missing something in your suggestion ? What do you mean with \"reset the shell\" ? Do you mean starting with a new shell instead of the previous one (and probably technically a child of the previous one) ?\r\n\nAhh I always assumed that the old shell is killed when you start a new one, but you are right. When you start a new one and exit it you drop back into the old one, so they are nesting. I found something of a way around it, or at least it seems to work on windows. \r\n\r\n```\r\nimport os\r\nimport sys\r\nimport signal\r\nimport tempfile\r\n\r\ntemp_file = tempfile.NamedTemporaryFile()\r\nargs = \" \".join(sys.argv[1:])\r\nstart_cmd = \"broot --color yes --outcmd {} {}\".format(temp_file.name, args)\r\n\r\nexit_status = os.system(start_cmd)\r\nif (exit_status != 0):\r\n    temp_file.close()\r\n    print(exit_status)\r\n    exit()\r\n\r\nthen_cmd = temp_file.read().decode('utf-8')\r\ntemp_file.close()\r\n\r\nif (then_cmd[:3] == 'cd '):\r\n    pid = os.getppid()\r\n    target = then_cmd[3:-1].replace('\\\\', '/').replace('\"', '')\r\n    os.chdir(target)\r\n    os.system('nu')\r\n    os.kill(pid, signal.SIGTERM)\r\nelse:\r\n    os.system(then_cmd)\r\n```\r\n\r\nThis kills the parent shell after starting the new one so it doesn't linger. Its not perfect but its better than not having this functionality. Note that this new version also fixes an issue that the previous one had where paths with spaces would not load.  \nI may propose that one way or another but this is kind of annoying: killing the previous shell and starting with a new one may be surprising or slow, as the init scripts are executed again.\r\n\r\nWe should try to discuss this with the nushell authors. I'll try to visit them when I find the time.\n> Ahh I always assumed that the old shell is killed when you start a new one, but you are right. When you start a new one and exit it you drop back into the old one, so they are nesting. I found something of a way around it, or at least it seems to work on windows.\r\n> \r\n> ```\r\n> import os\r\n> import sys\r\n> import signal\r\n> import tempfile\r\n> \r\n> temp_file = tempfile.NamedTemporaryFile()\r\n> args = \" \".join(sys.argv[1:])\r\n> start_cmd = \"broot --color yes --outcmd {} {}\".format(temp_file.name, args)\r\n> \r\n> exit_status = os.system(start_cmd)\r\n> if (exit_status != 0):\r\n>     temp_file.close()\r\n>     print(exit_status)\r\n>     exit()\r\n> \r\n> then_cmd = temp_file.read().decode('utf-8')\r\n> temp_file.close()\r\n> \r\n> if (then_cmd[:3] == 'cd '):\r\n>     pid = os.getppid()\r\n>     target = then_cmd[3:-1].replace('\\\\', '/').replace('\"', '')\r\n>     os.chdir(target)\r\n>     os.system('nu')\r\n>     os.kill(pid, signal.SIGTERM)\r\n> else:\r\n>     os.system(then_cmd)\r\n> ```\r\n> \r\n> This kills the parent shell after starting the new one so it doesn't linger. Its not perfect but its better than not having this functionality. Note that this new version also fixes an issue that the previous one had where paths with spaces would not load.\r\n\r\nto be frank, a program that kill my shell would go to `/dev/null` faster than light.\nAfter adapted from https://github.com/Canop/broot/issues/373 I try this works.\r\n\r\nadd definitions, aliases to the global [config.nu](https://www.nushell.sh/book/configuration.html#nushell-configuration-with-env-nu-and-config-nu) then start an new nushell\r\n\r\n```\r\ndef-env br_cmd [] {\r\n  let cmd_file = (^mktemp | str trim);\r\n  ^broot --outcmd $cmd_file;\r\n  let-env cmd = ((open $cmd_file) | str trim);\r\n  ^rm $cmd_file;\r\n}\r\nalias br = (br_cmd | cd ($env.cmd | str replace \"cd\" \"\" | str trim))\r\n```\r\n\r\n![WindowsTerminal_rROYSZPE0U](https://user-images.githubusercontent.com/125309/163905327-4b8e0698-730d-4ef2-a586-628555d123e6.gif)\r\n\r\n\nupdate my br command for nushell, use parameters with some restrictions.\r\n```\r\nUsage:\r\n  > br {flags}\r\n\r\nFlags:\r\n  -h, --help\r\n      Display this help message\r\n  -a, --args <String>\r\n```\r\nFor example\r\n\r\nlaunched in the c:\\ directory\r\n`br -a c:\\`\r\n\r\nShow the size of files and directories\r\n`br -a -s`\r\n\r\ncombine show the size and show the last modified date of files and directories\r\n`br -a -ds`\r\n\r\n```\r\ndef-env br [\r\n  --args (-a): string\r\n] {\r\n  let cmd_file = (^mktemp | str trim)\r\n  if ($args | empty?) {\r\n    ^broot --outcmd $cmd_file\r\n  } else {\r\n    ^broot $args --outcmd $cmd_file\r\n  }\r\n  let-env cmd = ((open $cmd_file) | str trim)\r\n  ^rm $cmd_file\r\n  cd ($env.cmd | str replace \"cd\" \"\" | str trim)\r\n}\r\n```\n@Hipfox that might be a nice contribution to https://github.com/nushell/nu_scripts \ud83d\udc4d \nCan we give some love to the shell written in rust? Nushell could make great use of official \"br\" support! \r\n\r\nIs there a pr already in works?\n@luccahuguet There's no registered PR, and I don't have time now to dive into nushell, so your help would be welcome here.\n@luccahuguet this works for me.\r\n\r\n```Nu\r\ndef-env br_cmd [] {\r\n  let cmd_file = (^mktemp | str trim);\r\n  ^broot --outcmd $cmd_file;\r\n  let-env cmd = ((open $cmd_file) | str trim);\r\n  ^rm $cmd_file;\r\n}\r\n# Broot file manager\r\nalias br = (br_cmd | cd ($env.cmd | str replace \"cd\" \"\" | str trim))\r\n```\nIdeal would be a tested PR (I mean the shell initialization process tested) with other nushell users confirming it works for them too and it seems consistent with good nushell practices.\nThank you so much @azzamsa! I can confirm this works in a linux environment, namely Fedora 36 in WSL2\r\n\r\nit does not work in windows though, it does not recognize mktemp (but wsl2 was my main worry)\r\n\r\nThanks for the fast answer @Canop, I hope someone is able to tackle this problem\nNew version, based on @azzamsa's code. Working on Nushell 0.72.0.\r\n\r\nChanges:\r\n  - Added cross-platform (Windows!) support\r\n  - Cleanup (no more environment variable, use nu pipelines instead of bash-isms)\r\n  - Bug fix: if \"cd\" is a substring of target path, `cd` will fail\r\n\r\n```nushell\r\ndef _br_cmd [] {\r\n  let cmd_file = ([ $nu.temp-path, $\"broot-(random chars).tmp\" ] | path join)\r\n  touch $cmd_file\r\n  ^broot --outcmd $cmd_file\r\n  let target_dir = (open $cmd_file | to text | str replace \"^cd\\\\s+\" \"\" | str trim)\r\n  rm -p -f $cmd_file\r\n  \r\n  $target_dir\r\n}\r\nalias br = cd (_br_cmd)\r\n```\r\n\r\nUse: run `config nu` and paste snippet in the file opened\nI can confirm @mediumrarez br command works fine in windows too (nu=0.73, broot 1.17.0, Windows 11 (22621))\n> Use: run config nu and paste snippet in the file opened\r\n\r\nNow, what would be the clean way for nushell to have the script installed by broot at first run like for other shells ?\n@Canop I don't think there's any way to load it modularly (i.e. like `/etc/profile.d` on Linux). The best we can do is to insert the `br` snippet into `config.nu` programmatically and add comments to mark the start and end.\r\n\r\n```nushell\r\n# BROOT_BEGIN\r\n# THIS SNIPPET IS AUTOMATICALLY GENERATED. DO NOT EDIT. ALL CHANGES WILL BE UNDONE.\r\ndef _br_cmd [] {\r\n  let cmd_file = ([ $nu.temp-path, $\"broot-(random chars).tmp\" ] | path join)\r\n  touch $cmd_file\r\n  ^broot --outcmd $cmd_file\r\n  let target_dir = (open $cmd_file | to text | str replace \"^cd\\\\s+\" \"\" | str trim)\r\n  rm -p -f $cmd_file\r\n  \r\n  $target_dir\r\n}\r\nalias br = cd (_br_cmd)\r\n# BROOT_END\r\n```\r\n\r\nWe can get `config.nu` filepath by running `nu -c $nu.config-path`. It should be enough to just tack it on to the end of the file.\r\n\r\n---\r\n\r\nAlternatively, we could write `br.nu` into the config dir and `source` it inside the main config. But we'd still need the comment markers in case we want to update the snippet, auto-uninstall, etc.\r\n\r\n```nushell\r\n# BROOT_BEGIN\r\n# THIS SNIPPET IS AUTOMATICALLY GENERATED. DO NOT EDIT. ALL CHANGES WILL BE UNDONE.\r\nsource ([($nu.config-path | path dirname), \"br.nu\"] | path join) \r\n# BROOT_END\r\n```\nThe br.nu file with a sourcing line is what's done by broot for zsh, bash, fish, etc.\nThat'd work as well. You could make the sourcing a one-liner too.\r\n\r\n```nushell\r\nsource ([($nu.config-path | path dirname), \"br.nu\"] | path join)  # BROOT (automatically generated. do not edit.)\r\n```\r\n\r\nThe nushell language still changes from time to time though. Even the sourcing line might need to be updated in the future.",
        "created_at": "2023-01-01T17:00:10Z",
        "version": "1.18"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 628,
        "instance_id": "Canop__broot-628",
        "issue_numbers": [
            "626"
        ],
        "base_commit": "6549df4bc93aef3961cd8350fe8b7d775d6506b5",
        "patch": "diff --git a/resources/default-conf/conf.hjson b/resources/default-conf/conf.hjson\n--- a/resources/default-conf/conf.hjson\n+++ b/resources/default-conf/conf.hjson\n@@ -141,6 +141,13 @@\n     #     rs: yellow\n     # }\n \n+    ###############################################################\n+    # Max file size for content search\n+    #\n+    # Bigger files are ignored when searching their content. You\n+    # can specify this size either in ISO units (eg 5GB) or in\n+    # the old binary units (eg 44Kib)\n+    content_search_max_file_size: 10MB\n \n     ###############################################################\n     # Max Panels Count\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -3,6 +3,7 @@ use {\n     crate::{\n         cli::{Args, TriBool},\n         conf::Conf,\n+        content_search,\n         errors::*,\n         file_sum,\n         icon::*,\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -86,6 +87,9 @@ pub struct AppContext {\n \n     /// number of files which may be staged in one staging operation\n     pub max_staged_count: usize,\n+\n+    /// max file size when searching file content\n+    pub content_search_max_file_size: usize,\n }\n \n impl AppContext {\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -143,6 +147,10 @@ impl AppContext {\n             initial_tree_options.show_selection_mark = true;\n         }\n \n+        let content_search_max_file_size = config.content_search_max_file_size\n+            .map(|u64value| usize::try_from(u64value).unwrap_or(usize::MAX))\n+            .unwrap_or(content_search::DEFAULT_MAX_FILE_SIZE);\n+\n         Ok(Self {\n             initial_root,\n             initial_tree_options,\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -163,6 +171,7 @@ impl AppContext {\n             quit_on_last_cancel: config.quit_on_last_cancel.unwrap_or(false),\n             file_sum_threads_count,\n             max_staged_count,\n+            content_search_max_file_size,\n         })\n     }\n }\ndiff --git a/src/conf/conf.rs b/src/conf/conf.rs\n--- a/src/conf/conf.rs\n+++ b/src/conf/conf.rs\n@@ -104,6 +104,9 @@ pub struct Conf {\n \n     #[serde(alias=\"show-matching-characters-on-path-searches\")]\n     pub show_matching_characters_on_path_searches: Option<bool>,\n+\n+    #[serde(alias=\"content-search-max-file-size\", deserialize_with=\"file_size::deserialize\", default)]\n+    pub content_search_max_file_size: Option<u64>,\n }\n \n impl Conf {\ndiff --git a/src/conf/conf.rs b/src/conf/conf.rs\n--- a/src/conf/conf.rs\n+++ b/src/conf/conf.rs\n@@ -182,6 +185,7 @@ impl Conf {\n         overwrite!(self, file_sum_threads_count, conf);\n         overwrite!(self, max_staged_count, conf);\n         overwrite!(self, show_matching_characters_on_path_searches, conf);\n+        overwrite!(self, content_search_max_file_size, conf);\n         self.verbs.append(&mut conf.verbs);\n         // the following maps are \"additive\": we can add entries from several\n         // config files and they still make sense\ndiff --git a/src/conf/conf.rs b/src/conf/conf.rs\n--- a/src/conf/conf.rs\n+++ b/src/conf/conf.rs\n@@ -207,3 +211,5 @@ impl Conf {\n     }\n }\n \n+\n+\ndiff --git a/src/conf/mod.rs b/src/conf/mod.rs\n--- a/src/conf/mod.rs\n+++ b/src/conf/mod.rs\n@@ -6,6 +6,7 @@ use {\n mod conf;\n mod default;\n mod format;\n+pub mod file_size;\n mod import;\n mod verb_conf;\n \ndiff --git a/src/content_search/mod.rs b/src/content_search/mod.rs\n--- a/src/content_search/mod.rs\n+++ b/src/content_search/mod.rs\n@@ -21,7 +21,7 @@ use {\n     },\n };\n \n-pub const MAX_FILE_SIZE: usize = 10 * 1024 * 1024;\n+pub const DEFAULT_MAX_FILE_SIZE: usize = 10 * 1024 * 1024;\n \n pub fn get_mmap<P: AsRef<Path>>(hay_path: P) -> io::Result<Mmap> {\n     let file = File::open(hay_path.as_ref())?;\ndiff --git a/src/content_search/mod.rs b/src/content_search/mod.rs\n--- a/src/content_search/mod.rs\n+++ b/src/content_search/mod.rs\n@@ -31,28 +31,26 @@ pub fn get_mmap<P: AsRef<Path>>(hay_path: P) -> io::Result<Mmap> {\n \n /// return the memmap to the file except if it was determined\n /// that the file is binary (from its extension, size, or first bytes)\n-pub fn get_mmap_if_not_binary<P: AsRef<Path>>(hay_path: P) -> io::Result<Option<Mmap>> {\n+/// or is too big\n+pub fn get_mmap_if_suitable<P: AsRef<Path>>(hay_path: P, max_size: usize) -> io::Result<Option<Mmap>> {\n     if let Some(ext) = hay_path.as_ref().extension().and_then(|s| s.to_str()) {\n         if extensions::is_known_binary(ext) {\n             return Ok(None);\n         }\n     }\n     let hay = get_mmap(&hay_path)?;\n-    if hay.len() > MAX_FILE_SIZE || magic_numbers::is_known_binary(&hay) {\n+    if hay.len() > max_size || magic_numbers::is_known_binary(&hay) {\n         return Ok(None);\n     }\n     Ok(Some(hay))\n }\n \n-/// return false when the file looks suitable for searching as text.\n+/// return true when the file looks suitable for searching as text.\n ///\n /// This function is quite slow as it creates a memmap just to check\n /// a few bytes. If the memmap can be used, prefer `get_mmap_if_not_binary`\n-pub fn is_path_binary<P: AsRef<Path>>(path: P) -> bool {\n-    match get_mmap_if_not_binary(path) {\n-        Ok(Some(_)) => false,\n-        _ => true,\n-    }\n+pub fn is_path_suitable<P: AsRef<Path>>(path: P, max_size: usize) -> bool {\n+    matches!(get_mmap_if_suitable(path, max_size), Ok(Some(_)))\n }\n \n pub fn line_count_at_pos<P: AsRef<Path>>(path: P, pos: usize) -> io::Result<usize> {\ndiff --git a/src/content_search/needle.rs b/src/content_search/needle.rs\n--- a/src/content_search/needle.rs\n+++ b/src/content_search/needle.rs\n@@ -22,6 +22,7 @@ pub struct Needle {\n     /// (guaranteed to be valid UTF8 by construct)\n     bytes: Box<[u8]>,\n \n+    max_file_size: usize,\n }\n \n impl fmt::Debug for Needle {\ndiff --git a/src/content_search/needle.rs b/src/content_search/needle.rs\n--- a/src/content_search/needle.rs\n+++ b/src/content_search/needle.rs\n@@ -35,9 +36,9 @@ impl fmt::Debug for Needle {\n \n impl Needle {\n \n-    pub fn new(pat: &str) -> Self {\n+    pub fn new(pat: &str, max_file_size: usize) -> Self {\n         let bytes = pat.as_bytes().to_vec().into_boxed_slice();\n-        Self { bytes }\n+        Self { bytes, max_file_size }\n     }\n \n     pub fn is_empty(&self) -> bool {\ndiff --git a/src/content_search/needle.rs b/src/content_search/needle.rs\n--- a/src/content_search/needle.rs\n+++ b/src/content_search/needle.rs\n@@ -198,7 +199,7 @@ impl Needle {\n \n     /// determine whether the file contains the needle\n     pub fn search<P: AsRef<Path>>(&self, hay_path: P) -> io::Result<ContentSearchResult> {\n-        super::get_mmap_if_not_binary(hay_path)\n+        super::get_mmap_if_suitable(hay_path, self.max_file_size)\n             .map(|om| om.map_or(\n                 ContentSearchResult::NotSuitable,\n                 |hay| self.search_mmap(&hay),\ndiff --git a/src/pattern/content_pattern.rs b/src/pattern/content_pattern.rs\n--- a/src/pattern/content_pattern.rs\n+++ b/src/pattern/content_pattern.rs\n@@ -24,10 +24,8 @@ impl fmt::Display for ContentExactPattern {\n \n impl ContentExactPattern {\n \n-    pub fn from(pat: &str) -> Self {\n-        Self {\n-            needle: Needle::new(pat),\n-        }\n+    pub fn new(pat: &str, max_file_size: usize) -> Self {\n+        Self { needle: Needle::new(pat, max_file_size) }\n     }\n \n     pub fn as_str(&self) -> &str {\ndiff --git a/src/pattern/content_pattern.rs b/src/pattern/content_pattern.rs\n--- a/src/pattern/content_pattern.rs\n+++ b/src/pattern/content_pattern.rs\n@@ -50,11 +48,9 @@ impl ContentExactPattern {\n             Ok(ContentSearchResult::Found { .. }) => Some(1),\n             Ok(ContentSearchResult::NotFound) => None,\n             Ok(ContentSearchResult::NotSuitable) => {\n-                // debug!(\"{:?} isn't suitable for search\", &candidate.path);\n                 None\n             }\n             Err(e) => {\n-                // today it mostly happens on empty files\n                 debug!(\"error while scanning {:?} : {:?}\", &candidate.path, e);\n                 None\n             }\ndiff --git a/src/pattern/content_regex_pattern.rs b/src/pattern/content_regex_pattern.rs\n--- a/src/pattern/content_regex_pattern.rs\n+++ b/src/pattern/content_regex_pattern.rs\n@@ -18,6 +18,7 @@ use {\n pub struct ContentRegexPattern {\n     rex: regex::Regex,\n     flags: String,\n+    max_file_size: usize\n }\n \n impl fmt::Display for ContentRegexPattern {\ndiff --git a/src/pattern/content_regex_pattern.rs b/src/pattern/content_regex_pattern.rs\n--- a/src/pattern/content_regex_pattern.rs\n+++ b/src/pattern/content_regex_pattern.rs\n@@ -28,10 +29,11 @@ impl fmt::Display for ContentRegexPattern {\n \n impl ContentRegexPattern {\n \n-    pub fn from(pat: &str, flags: &str) -> Result<Self, PatternError> {\n+    pub fn new(pat: &str, flags: &str, max_file_size: usize) -> Result<Self, PatternError> {\n         Ok(Self {\n             rex: super::build_regex(pat, flags)?,\n             flags: flags.to_string(),\n+            max_file_size,\n         })\n     }\n \ndiff --git a/src/pattern/content_regex_pattern.rs b/src/pattern/content_regex_pattern.rs\n--- a/src/pattern/content_regex_pattern.rs\n+++ b/src/pattern/content_regex_pattern.rs\n@@ -54,7 +56,7 @@ impl ContentRegexPattern {\n     }\n \n     pub fn score_of(&self, candidate: Candidate) -> Option<i32> {\n-        if !candidate.regular_file || is_path_binary(candidate.path) {\n+        if !candidate.regular_file || !is_path_suitable(candidate.path, self.max_file_size) {\n             return None;\n         }\n         match self.has_match(candidate.path) {\ndiff --git a/src/pattern/input_pattern.rs b/src/pattern/input_pattern.rs\n--- a/src/pattern/input_pattern.rs\n+++ b/src/pattern/input_pattern.rs\n@@ -36,7 +36,7 @@ impl InputPattern {\n         parts_expr: &BeTree<PatternOperator, PatternParts>,\n         con: &AppContext,\n     ) -> Result<Self, PatternError> {\n-        let pattern = Pattern::new(parts_expr, &con.search_modes)?;\n+        let pattern = Pattern::new(parts_expr, &con.search_modes, con.content_search_max_file_size)?;\n         Ok(Self { raw, pattern })\n     }\n     pub fn is_none(&self) -> bool {\ndiff --git a/src/pattern/pattern.rs b/src/pattern/pattern.rs\n--- a/src/pattern/pattern.rs\n+++ b/src/pattern/pattern.rs\n@@ -32,6 +32,7 @@ impl Pattern {\n     pub fn new(\n         raw_expr: &BeTree<PatternOperator, PatternParts>,\n         search_modes: &SearchModeMap,\n+        content_search_max_file_size: usize,\n     ) -> Result<Self, PatternError> {\n         let expr: BeTree<PatternOperator, Pattern> = raw_expr\n             .try_map_atoms::<_, PatternError, _>(|pattern_parts| {\ndiff --git a/src/pattern/pattern.rs b/src/pattern/pattern.rs\n--- a/src/pattern/pattern.rs\n+++ b/src/pattern/pattern.rs\n@@ -69,10 +70,14 @@ impl Pattern {\n                                 TokPattern::new(core)\n                             ),\n                             SearchMode::ContentExact => Self::ContentExact(\n-                                ContentExactPattern::from(core)\n+                                ContentExactPattern::new(core, content_search_max_file_size)\n                             ),\n                             SearchMode::ContentRegex => Self::ContentRegex(\n-                                ContentRegexPattern::from(core, flags.unwrap_or(\"\"))?\n+                                ContentRegexPattern::new(\n+                                    core,\n+                                    flags.unwrap_or(\"\"),\n+                                    content_search_max_file_size,\n+                                )?\n                             ),\n                         }\n                     }\n",
        "test_patch": "diff --git /dev/null b/src/conf/file_size.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/conf/file_size.rs\n@@ -0,0 +1,52 @@\n+use::serde::{\n+    de,\n+    Deserialize,\n+};\n+\n+pub fn parse_file_size(input: &str) -> Result<u64, String> {\n+    let s = input.to_lowercase();\n+    let s = s.trim_end_matches('b');\n+    let (s, binary) = match s.strip_suffix('i') {\n+        Some(s) => (s, true),\n+        None => (s, false),\n+    };\n+    let cut = s.find(|c: char| !(c.is_ascii_digit() || c=='.'));\n+    let (digits, factor): (&str, u64) = match cut {\n+        Some(idx) => (\n+            &s[..idx],\n+            match (&s[idx..], binary) {\n+                (\"k\", false) => 1000,\n+                (\"k\", true) => 1024,\n+                (\"m\", false) => 1000*1000,\n+                (\"m\", true) => 1024*1024,\n+                (\"g\", false) => 1000*1000*1000,\n+                (\"g\", true) => 1024*1024*1024,\n+                (\"t\", false) => 1000*1000*1000*1000,\n+                (\"t\", true) => 1024*1024*1024*1024,\n+                _ => {\n+                    // it's not a number\n+                    return Err(format!(\"{input:?} can't be parsed as file size\"));\n+                }\n+            }\n+        ),\n+        None => (s, 1),\n+    };\n+    match digits.parse::<f64>() {\n+        Ok(n) => Ok((n * factor as f64).ceil() as u64),\n+        _ => Err(format!(\"{input:?} can't be parsed as file size\"))\n+    }\n+}\n+\n+#[test]\n+fn test_parse_file_size(){\n+    assert_eq!(parse_file_size(\"33\"), Ok(33));\n+    assert_eq!(parse_file_size(\"55G\"), Ok(55_000_000_000));\n+    assert_eq!(parse_file_size(\"2kb\"), Ok(2_000));\n+    assert_eq!(parse_file_size(\"1.23kiB\"), Ok(1260));\n+}\n+\n+pub fn deserialize<'de, D>(d: D) -> Result<Option<u64>, D::Error> where D: de::Deserializer<'de> {\n+    <Option<String> as Deserialize>::deserialize(d)?\n+        .map(|s| parse_file_size(&s).map_err(de::Error::custom))\n+        .transpose()\n+}\ndiff --git a/src/content_search/needle.rs b/src/content_search/needle.rs\n--- a/src/content_search/needle.rs\n+++ b/src/content_search/needle.rs\n@@ -231,7 +232,7 @@ mod content_search_tests {\n \n     #[test]\n     fn test_found() -> Result<(), io::Error> {\n-        let needle = Needle::new(\"inception\");\n+        let needle = Needle::new(\"inception\", 1_000_000);\n         let res = needle.search(\"src/content_search/needle.rs\")?;\n         assert!(res.is_found());\n         Ok(())\n",
        "problem_statement": "Cannot search the content of files over 10M\nThe content search by \"c/\" will ignore the files over 10M and the files with some extensions, such as bak, dat, etc.\r\n\r\nThis seems to be because these files are treated as binaries https://github.com/Canop/broot/blob/7379b16eaf7dd060fa3729c3950117c884608a22/src/content_search/mod.rs. \r\n\r\nSo is it possible to provide some way to override this judgment, such as by making it configurable? Thanks.\r\n\r\n\n",
        "hints_text": "Making the 10MB limit configurable is probably easy.\r\nThe list of extensions to ignore is currently a little more painful as the set is optimized at compilation for efficiency (it's a \"perfect hash\" set).\nThanks for your quick reply. Please make the file size limit configurable. Thank you.",
        "created_at": "2022-11-04T17:50:10Z",
        "version": "1.16"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 798,
        "instance_id": "Canop__broot-798",
        "issue_numbers": [
            "794"
        ],
        "base_commit": "996b34fb5cb2dfafe87269ee97b895b4e09bf937",
        "patch": "diff --git a/resources/default-conf/conf.hjson b/resources/default-conf/conf.hjson\n--- a/resources/default-conf/conf.hjson\n+++ b/resources/default-conf/conf.hjson\n@@ -26,6 +26,17 @@\n #\n # default_flags:\n \n+###############################################################\n+# Terminal's title\n+# If you want the terminal's title to be updated when you change\n+# directory, set a terminal_title pattern by uncommenting one of\n+# the examples below and tuning it to your taste.\n+# Note that this may slow down some systems.\n+#\n+# terminal_title: \"[broot] {git-name}\"\n+# terminal_title: \"\ud83d\udc04 {file}\"\n+# terminal_title: \"-= {file-name} =-\"\n+\n ###############################################################\n # Date/Time format\n # If you want to change the format for date/time, uncomment the\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -3,9 +3,16 @@ use {\n     crate::{\n         browser::BrowserState,\n         cli::TriBool,\n-        command::{Command, Sequence},\n+        command::{\n+            Command,\n+            Sequence,\n+        },\n         conf::Conf,\n-        display::{Areas, Screen, W},\n+        display::{\n+            Areas,\n+            Screen,\n+            W,\n+        },\n         errors::ProgramError,\n         file_sum,\n         git,\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -17,26 +24,32 @@ use {\n         skin::*,\n         stage::Stage,\n         syntactic::SyntaxTheme,\n-        task_sync::{Dam, Either},\n+        task_sync::{\n+            Dam,\n+            Either,\n+        },\n+        terminal,\n         verb::Internal,\n     },\n+    crokey::crossterm::event::Event,\n     crossbeam::channel::{\n+        unbounded,\n         Receiver,\n         Sender,\n-        unbounded,\n     },\n-    crokey::crossterm::event::Event,\n     std::{\n         io::Write,\n         path::PathBuf,\n         str::FromStr,\n-        sync::{Arc, Mutex},\n+        sync::{\n+            Arc,\n+            Mutex,\n+        },\n     },\n     strict::NonEmptyVec,\n     termimad::EventSource,\n };\n \n-\n /// The GUI\n pub struct App {\n     /// dimensions of the screen\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -76,20 +89,15 @@ pub struct App {\n }\n \n impl App {\n-\n-    pub fn new(\n-        con: &AppContext,\n-    ) -> Result<App, ProgramError> {\n+    pub fn new(con: &AppContext) -> Result<App, ProgramError> {\n         let screen = Screen::new(con)?;\n-        let mut browser_state = Box::new(\n-            BrowserState::new(\n-                con.initial_root.clone(),\n-                con.initial_tree_options.clone(),\n-                screen,\n-                con,\n-                &Dam::unlimited(),\n-            )?\n-        );\n+        let mut browser_state = Box::new(BrowserState::new(\n+            con.initial_root.clone(),\n+            con.initial_tree_options.clone(),\n+            screen,\n+            con,\n+            &Dam::unlimited(),\n+        )?);\n         if let Some(path) = con.initial_file.as_ref() {\n             browser_state.tree.try_select_path(path);\n         }\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -150,7 +161,10 @@ impl App {\n     }\n \n     /// return the current index of the panel with given id\n-    fn panel_id_to_idx(&self, id: PanelId) -> Option<usize> {\n+    fn panel_id_to_idx(\n+        &self,\n+        id: PanelId,\n+    ) -> Option<usize> {\n         self.panels.iter().position(|panel| panel.id == id)\n     }\n \ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -174,7 +188,10 @@ impl App {\n     /// close the panel if it's not the last one\n     ///\n     /// Return true when the panel has been removed (ie it wasn't the last one)\n-    fn close_panel(&mut self, panel_idx: usize) -> bool {\n+    fn close_panel(\n+        &mut self,\n+        panel_idx: usize,\n+    ) -> bool {\n         let active_panel_id = self.panels[self.active_panel_idx].id;\n         if let Some(preview_id) = self.preview_panel {\n             if self.panels.has_len(2) && self.panels[panel_idx].id != preview_id {\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -233,7 +250,11 @@ impl App {\n         self.drawing_count += 1;\n         for (idx, panel) in self.panels.as_mut_slice().iter_mut().enumerate() {\n             let active = idx == self.active_panel_idx;\n-            let panel_skin = if active { &skin.focused } else { &skin.unfocused };\n+            let panel_skin = if active {\n+                &skin.focused\n+            } else {\n+                &skin.unfocused\n+            };\n             let disc = DisplayContext {\n                 count: self.drawing_count,\n                 active,\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -243,12 +264,12 @@ impl App {\n                 app_state,\n                 con,\n             };\n-            time!(\n-                \"display panel\",\n-                panel.display(w, &disc)?,\n-            );\n+            time!(\"display panel\", panel.display(w, &disc)?,);\n         }\n-        kitty::manager().lock().unwrap().erase_images_before(w, self.drawing_count)?;\n+        kitty::manager()\n+            .lock()\n+            .unwrap()\n+            .erase_images_before(w, self.drawing_count)?;\n         w.flush()?;\n         Ok(())\n     }\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -261,15 +282,16 @@ impl App {\n             if let Some(preview_id) = self.preview_panel {\n                 for (idx, panel) in self.panels.iter().enumerate() {\n                     if self.active_panel_idx != idx && panel.id != preview_id {\n-                        return panel.state().selected_path()\n-                            .map(|p| p.to_path_buf());\n+                        return panel.state().selected_path().map(|p| p.to_path_buf());\n                     }\n                 }\n             }\n             None\n         } else if self.panels.len().get() == 2 && self.preview_panel.is_none() {\n             let non_focused_panel_idx = if self.active_panel_idx == 0 { 1 } else { 0 };\n-            self.panels[non_focused_panel_idx].state().selected_path()\n+            self.panels[non_focused_panel_idx]\n+                .state()\n+                .selected_path()\n                 .map(|p| p.to_path_buf())\n         } else {\n             None\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -295,14 +317,16 @@ impl App {\n             screen: self.screen, // it can't change in this function\n             con,\n         };\n-        let cmd_result = self.mut_panel().apply_command(w, &cmd, app_state, &app_cmd_context)?;\n+        let cmd_result = self\n+            .mut_panel()\n+            .apply_command(w, &cmd, app_state, &app_cmd_context)?;\n         debug!(\"cmd_result: {:?}\", &cmd_result);\n         match cmd_result {\n             ApplyOnPanel { id } => {\n                 if let Some(idx) = self.panel_id_to_idx(id) {\n-                    if let DisplayError(txt) = self.panels[idx].apply_command(\n-                        w, &cmd, app_state, &app_cmd_context\n-                    )? {\n+                    if let DisplayError(txt) =\n+                        self.panels[idx].apply_command(w, &cmd, app_state, &app_cmd_context)?\n+                    {\n                         // we should probably handle other results\n                         // which implies the possibility of a recursion\n                         error = Some(txt);\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -313,7 +337,10 @@ impl App {\n                     warn!(\"no panel found for ApplyOnPanel\");\n                 }\n             }\n-            ClosePanel { validate_purpose, panel_ref } => {\n+            ClosePanel {\n+                validate_purpose,\n+                panel_ref,\n+            } => {\n                 if is_input_invocation {\n                     self.mut_panel().clear_input_invocation(con);\n                 }\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -350,7 +377,8 @@ impl App {\n                             screen,\n                             con,\n                         };\n-                        self.mut_panel().apply_command(w, &cmd, app_state, &app_cmd_context)?;\n+                        self.mut_panel()\n+                            .apply_command(w, &cmd, app_state, &app_cmd_context)?;\n                     }\n                 } else {\n                     self.quitting = true;\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -402,12 +431,15 @@ impl App {\n                                 screen: self.screen,\n                                 con,\n                             };\n-                            self.mut_panel().refresh_input_status(app_state, &app_cmd_context);\n+                            self.mut_panel()\n+                                .refresh_input_status(app_state, &app_cmd_context);\n                         }\n                     }\n                     Internal::toggle_second_tree => {\n                         let panels_count = self.panels.len().get();\n-                        let trees_count = self.panels.iter()\n+                        let trees_count = self\n+                            .panels\n+                            .iter()\n                             .filter(|p| p.state().get_type() == PanelStateType::Tree)\n                             .count();\n                         if trees_count < 2 {\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -454,21 +486,17 @@ impl App {\n                         }\n                     }\n                     Internal::set_syntax_theme => {\n-                        let arg = cmd\n-                            .as_verb_invocation()\n-                            .and_then(|vi| vi.args.as_ref());\n+                        let arg = cmd.as_verb_invocation().and_then(|vi| vi.args.as_ref());\n                         match arg {\n-                            Some(arg) => {\n-                                match SyntaxTheme::from_str(arg) {\n-                                    Ok(theme) => {\n-                                        con.syntax_theme = Some(theme);\n-                                        self.update_preview(con, true);\n-                                    }\n-                                    Err(e) => {\n-                                        error = Some(e.to_string());\n-                                    }\n+                            Some(arg) => match SyntaxTheme::from_str(arg) {\n+                                Ok(theme) => {\n+                                    con.syntax_theme = Some(theme);\n+                                    self.update_preview(con, true);\n                                 }\n-                            }\n+                                Err(e) => {\n+                                    error = Some(e.to_string());\n+                                }\n+                            },\n                             None => {\n                                 error = Some(\"no theme provided\".to_string());\n                             }\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -503,7 +531,8 @@ impl App {\n                 if let Some(md) = message {\n                     self.mut_panel().set_message(md);\n                 } else {\n-                    self.mut_panel().refresh_input_status(app_state, &app_cmd_context);\n+                    self.mut_panel()\n+                        .refresh_input_status(app_state, &app_cmd_context);\n                 }\n             }\n             PopState => {\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -512,7 +541,8 @@ impl App {\n                 }\n                 if self.remove_state() {\n                     self.mut_state().refresh(app_cmd_context.screen, con);\n-                    self.mut_panel().refresh_input_status(app_state, &app_cmd_context);\n+                    self.mut_panel()\n+                        .refresh_input_status(app_state, &app_cmd_context);\n                 } else if con.quit_on_last_cancel {\n                     self.quitting = true;\n                 }\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -529,7 +559,8 @@ impl App {\n                         screen: self.screen,\n                         con,\n                     };\n-                    self.mut_panel().apply_command(w, &cmd, app_state, &app_cmd_context)?;\n+                    self.mut_panel()\n+                        .apply_command(w, &cmd, app_state, &app_cmd_context)?;\n                 } else if con.quit_on_last_cancel {\n                     self.quitting = true;\n                 }\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -557,11 +588,11 @@ impl App {\n         app_state.other_panel_path = self.get_other_panel_path();\n         if let Some(path) = self.state().tree_root() {\n             app_state.root = path.to_path_buf();\n-        }\n-\n-        if let Some(shared_root) = &mut self.shared_root {\n-            if let Ok(mut root) = shared_root.lock() {\n-                *root = app_state.root.clone();\n+            terminal::update_title(w, app_state, con);\n+            if let Some(shared_root) = &mut self.shared_root {\n+                if let Ok(mut root) = shared_root.lock() {\n+                    *root = app_state.root.clone();\n+                }\n             }\n         }\n \ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -571,21 +602,31 @@ impl App {\n     }\n \n     /// update the state of the preview, if there's some\n-    fn update_preview(&mut self, con: &AppContext, refresh: bool) {\n+    fn update_preview(\n+        &mut self,\n+        con: &AppContext,\n+        refresh: bool,\n+    ) {\n         let preview_idx = self.preview_panel.and_then(|id| self.panel_id_to_idx(id));\n         if let Some(preview_idx) = preview_idx {\n             if let Some(path) = self.state().selected_path() {\n                 let old_path = self.panels[preview_idx].state().selected_path();\n                 if refresh || Some(path) != old_path {\n                     let path = path.to_path_buf();\n-                    self.panels[preview_idx].mut_state().set_selected_path(path, con);\n+                    self.panels[preview_idx]\n+                        .mut_state()\n+                        .set_selected_path(path, con);\n                 }\n             }\n         }\n     }\n \n     /// get the index of the panel at x\n-    fn clicked_panel_index(&self, x: u16, _y: u16) -> usize {\n+    fn clicked_panel_index(\n+        &self,\n+        x: u16,\n+        _y: u16,\n+    ) -> usize {\n         let len = self.panels.len().get();\n         (len * x as usize) / (self.screen.width as usize + 1)\n     }\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -669,7 +710,8 @@ impl App {\n                     screen: self.screen, // it can't change in this function\n                     con,\n                 };\n-                self.mut_panel().refresh_input_status(app_state, &app_cmd_context);\n+                self.mut_panel()\n+                    .refresh_input_status(app_state, &app_cmd_context);\n             }\n             self.display_panels(w, skin, app_state, con)?;\n             if error.is_some() {\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -689,7 +731,9 @@ impl App {\n         let screen = self.screen;\n         // we start with the focused panel\n         if self.panel().has_pending_task() {\n-            return self.mut_panel().do_pending_task(app_state, screen, con, dam);\n+            return self\n+                .mut_panel()\n+                .do_pending_task(app_state, screen, con, dam);\n         }\n         // then the other ones\n         for idx in 0..self.panels.len().get() {\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -732,6 +776,7 @@ impl App {\n             root: con.initial_root.clone(),\n             other_panel_path: None,\n         };\n+        terminal::update_title(w, &app_state, con);\n \n         self.screen.clear_bottom_right_char(w, &skin.focused)?;\n \ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -756,7 +801,10 @@ impl App {\n         }\n \n         #[cfg(unix)]\n-        let _server = con.launch_args.listen.as_ref()\n+        let _server = con\n+            .launch_args\n+            .listen\n+            .as_ref()\n             .map(|server_name| {\n                 let shared_root = Arc::new(Mutex::new(app_state.root.clone()));\n                 let server = crate::net::Server::new(\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -816,7 +864,6 @@ impl App {\n                         let cmd = self.mut_panel().add_event(w, event, &app_state, con)?;\n                         debug!(\"command after add_event: {:?}\", &cmd);\n                         self.apply_command(w, cmd, &skin.focused, &mut app_state, con)?;\n-\n                     }\n \n                     event_source.unblock(self.quitting);\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -12,7 +12,7 @@ use {\n         skin::ExtColorMap,\n         syntactic::SyntaxTheme,\n         tree::TreeOptions,\n-        verb::VerbStore,\n+        verb::*,\n     },\n     std::{\n         convert::{TryFrom, TryInto},\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -97,6 +97,10 @@ pub struct AppContext {\n \n     /// max file size when searching file content\n     pub content_search_max_file_size: usize,\n+\n+    /// the optional pattern used to change the terminal's title\n+    /// (if none, the title isn't modified)\n+    pub terminal_title_pattern: Option<ExecPattern>,\n }\n \n impl AppContext {\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -167,6 +171,8 @@ impl AppContext {\n             .map(|u64value| usize::try_from(u64value).unwrap_or(usize::MAX))\n             .unwrap_or(content_search::DEFAULT_MAX_FILE_SIZE);\n \n+        let terminal_title_pattern = config.terminal_title.clone();\n+\n         Ok(Self {\n             initial_root,\n             initial_file,\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -190,6 +196,7 @@ impl AppContext {\n             file_sum_threads_count,\n             max_staged_count,\n             content_search_max_file_size,\n+            terminal_title_pattern,\n         })\n     }\n     /// Return the --cmd argument, coming from the launch arguments (prefered)\ndiff --git a/src/conf/conf.rs b/src/conf/conf.rs\n--- a/src/conf/conf.rs\n+++ b/src/conf/conf.rs\n@@ -14,6 +14,7 @@ use {\n         },\n         skin::SkinEntry,\n         syntactic::SyntaxTheme,\n+        verb::ExecPattern,\n     },\n     ahash::AHashMap,\n     crokey::crossterm::style::Attribute,\ndiff --git a/src/conf/conf.rs b/src/conf/conf.rs\n--- a/src/conf/conf.rs\n+++ b/src/conf/conf.rs\n@@ -107,6 +108,12 @@ pub struct Conf {\n \n     #[serde(alias=\"content-search-max-file-size\", deserialize_with=\"file_size::deserialize\", default)]\n     pub content_search_max_file_size: Option<u64>,\n+\n+    #[serde(alias=\"terminal-title\")]\n+    pub terminal_title: Option<ExecPattern>,\n+\n+    // BEWARE: entries added here won't be usable unless also\n+    // added in read_file!\n }\n \n impl Conf {\ndiff --git a/src/conf/conf.rs b/src/conf/conf.rs\n--- a/src/conf/conf.rs\n+++ b/src/conf/conf.rs\n@@ -187,6 +194,7 @@ impl Conf {\n         overwrite!(self, max_staged_count, conf);\n         overwrite!(self, show_matching_characters_on_path_searches, conf);\n         overwrite!(self, content_search_max_file_size, conf);\n+        overwrite!(self, terminal_title, conf);\n         self.verbs.append(&mut conf.verbs);\n         // the following maps are \"additive\": we can add entries from several\n         // config files and they still make sense\ndiff --git a/src/lib.rs b/src/lib.rs\n--- a/src/lib.rs\n+++ b/src/lib.rs\n@@ -29,6 +29,7 @@ pub mod shell_install;\n pub mod skin;\n pub mod syntactic;\n pub mod task_sync;\n+pub mod terminal;\n pub mod tree;\n pub mod tree_build;\n pub mod verb;\ndiff --git /dev/null b/src/terminal.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/terminal.rs\n@@ -0,0 +1,43 @@\n+use {\n+    crate::{\n+        app::*,\n+        display::W,\n+        verb::*,\n+    },\n+    std::io::Write,\n+};\n+\n+/// Change the terminal's title if broot was configured with\n+/// a `terminal_title` entry\n+#[inline]\n+pub fn update_title(\n+    w: &mut W,\n+    app_state: &AppState,\n+    con: &AppContext,\n+) {\n+    if let Some(pattern) = &con.terminal_title_pattern {\n+        set_title(w, pattern, app_state);\n+    }\n+}\n+\n+fn set_title(\n+    w: &mut W,\n+    pattern: &ExecPattern,\n+    app_state: &AppState,\n+) {\n+    let builder = ExecutionStringBuilder::without_invocation(\n+        SelInfo::from_path(&app_state.root),\n+        app_state,\n+    );\n+    let title = builder.shell_exec_string(pattern);\n+    set_title_str(w, &title)\n+}\n+\n+#[inline]\n+fn set_title_str(\n+    w: &mut W,\n+    title: &str,\n+) {\n+    let _ = write!(w, \"\\u{1b}]0;{title}\\u{07}\");\n+    let _ = w.flush();\n+}\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -24,6 +24,9 @@ pub struct ExecutionStringBuilder<'b> {\n \n     /// parsed arguments\n     invocation_values: Option<AHashMap<String, String>>,\n+\n+    /// whether to keep groups which can't be solved or remove them\n+    keep_groups: bool,\n }\n \n impl<'b> ExecutionStringBuilder<'b> {\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -39,6 +42,7 @@ impl<'b> ExecutionStringBuilder<'b> {\n             root: &app_state.root,\n             other_file: app_state.other_panel_path.as_ref(),\n             invocation_values: None,\n+            keep_groups: false,\n         }\n     }\n     pub fn with_invocation(\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -56,6 +60,7 @@ impl<'b> ExecutionStringBuilder<'b> {\n             root: &app_state.root,\n             other_file: app_state.other_panel_path.as_ref(),\n             invocation_values,\n+            keep_groups: false,\n         }\n     }\n     fn get_raw_replacement<F>(\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -148,18 +153,20 @@ impl<'b> ExecutionStringBuilder<'b> {\n                 .other_file\n                 .and_then(|p| p.parent())\n                 .map(path_to_string),\n-            \"git-root\" => {\n+            \"git-root\" => { // path to git repo workdir\n                 debug!(\"finding git root\");\n-                sel.and_then(|s| match git2::Repository::discover(s.path) {\n-                    Ok(repo) => repo.workdir().map(path_to_string),\n-                    Err(err) => {\n-                        warn!(\n-                            \"Failed to open Git repository at {}: {err}\",\n-                            s.path.display()\n-                        );\n-                        None\n-                    }\n-                })\n+                sel\n+                    .and_then(|s| git2::Repository::discover(s.path).ok())\n+                    .and_then(|repo| repo.workdir().map(path_to_string))\n+            }\n+            \"git-name\" => { // name of the git repo workdir\n+                sel\n+                    .and_then(|s| git2::Repository::discover(s.path).ok())\n+                    .and_then(|repo| repo.workdir().and_then(|path| {\n+                        path.file_name()\n+                        .and_then(|oss| oss.to_str())\n+                        .map(|s| s.to_string())\n+                    }))\n             }\n             _ => None,\n         }\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -195,9 +202,12 @@ impl<'b> ExecutionStringBuilder<'b> {\n                     })\n             })\n     }\n+    #[inline]\n     fn get_capture_replacement(&self, ec: &Captures<'_>) -> String {\n         self.get_raw_capture_replacement(ec)\n-            .unwrap_or_else(|| ec[0].to_string())\n+            .unwrap_or_else(||\n+                if self.keep_groups { ec[0].to_string() } else { \"\".to_string() }\n+            )\n     }\n     fn get_sel_capture_replacement(\n         &self,\ndiff --git a/src/verb/execution_builder.rs b/src/verb/execution_builder.rs\n--- a/src/verb/execution_builder.rs\n+++ b/src/verb/execution_builder.rs\n@@ -205,7 +215,9 @@ impl<'b> ExecutionStringBuilder<'b> {\n         sel: Option<Selection<'_>>,\n     ) -> String {\n         self.get_raw_sel_capture_replacement(ec, sel)\n-            .unwrap_or_else(|| ec[0].to_string())\n+            .unwrap_or_else(||\n+                if self.keep_groups { ec[0].to_string() } else { \"\".to_string() }\n+            )\n     }\n     /// fills groups having a default value (after the colon)\n     ///\n",
        "test_patch": "diff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -139,7 +147,10 @@ impl App {\n         Ok(app)\n     }\n \n-    fn panel_ref_to_idx(&self, panel_ref: PanelReference) -> Option<usize> {\n+    fn panel_ref_to_idx(\n+        &self,\n+        panel_ref: PanelReference,\n+    ) -> Option<usize> {\n         match panel_ref {\n             PanelReference::Active => Some(self.active_panel_idx),\n             PanelReference::Leftest => Some(0),\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -376,12 +404,13 @@ impl App {\n                             // we're here because the state wants us to either move to the panel\n                             // to the left, or close the rightest one\n                             if self.active_panel_idx == 0 {\n-                                self.close_panel(self.panels.len().get()-1);\n+                                self.close_panel(self.panels.len().get() - 1);\n                                 None\n                             } else {\n                                 Some(self.active_panel_idx - 1)\n                             }\n-                        } else { // panel_right\n+                        } else {\n+                            // panel_right\n                             // we either move to the right or close the leftest panel\n                             if self.active_panel_idx + 1 == self.panels.len().get() {\n                                 self.close_panel(0);\n",
        "problem_statement": "automatic title update when changing focused directory\nHi, I have a request for the possibility of updating the title automatically, whenever the focused directory (not \"working\" directory) change, which include all uses of \":focus\" or when switching from one panel to another (assuming different focuses). Dystroy came up with this code, using escape sequences, but it's both limited (no multi-panel support) and according himself, of questionable reliability depending on terminal emulators.\r\n```\r\n{\r\n    invocation: title\r\n    external: [\"echo\", \"-en\", \"\\\\033]0;{file-name}\\\\a\"]\r\n    leave_broot: false\r\n}\r\n{\r\n    invocation: focus_and_title\r\n    key: enter\r\n    cmd: \":focus;:title\"\r\n    apply_to: directory\r\n    leave_broot: false\r\n}\r\n```\r\nSo a hard-wired solution would be much appreciated, for I'm certain other people have a heavy use of tiling window manager and don't find the constant \"foot\" or \"xterm\" or \"~\" very helpful.\r\nThanks :-)\n",
        "hints_text": "",
        "created_at": "2023-11-17T10:44:47Z",
        "version": "1.28"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 939,
        "instance_id": "Canop__broot-939",
        "issue_numbers": [
            "926"
        ],
        "base_commit": "8a2b82081ceb14aba2a892cb21feeb184eecd15f",
        "patch": "diff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -307,6 +307,7 @@ impl App {\n     ) -> Result<(), ProgramError> {\n         use CmdResult::*;\n         let mut error: Option<String> = None;\n+        let mut new_active_panel_idx = None;\n         let is_input_invocation = cmd.is_verb_invocated_from_input();\n         let app_cmd_context = AppCmdContext {\n             panel_skin,\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -604,6 +594,22 @@ impl App {\n             self.mut_panel().set_error(text);\n         }\n \n+        if let Some(idx) = new_active_panel_idx {\n+            if is_input_invocation {\n+                self.mut_panel().clear_input();\n+            }\n+            self.active_panel_idx = idx;\n+            let app_cmd_context = AppCmdContext {\n+                panel_skin,\n+                preview_panel: self.preview_panel,\n+                stage_panel: self.stage_panel,\n+                screen: self.screen,\n+                con,\n+            };\n+            self.mut_panel()\n+                .refresh_input_status(app_state, &app_cmd_context);\n+        }\n+\n         app_state.other_panel_path = self.get_other_panel_path();\n         if let Some(path) = self.state().tree_root() {\n             app_state.root = path.to_path_buf();\ndiff --git a/src/app/panel_state.rs b/src/app/panel_state.rs\n--- a/src/app/panel_state.rs\n+++ b/src/app/panel_state.rs\n@@ -585,9 +585,16 @@ pub trait PanelState {\n             Internal::escape => {\n                 CmdResult::HandleInApp(Internal::escape)\n             }\n+            Internal::focus_staging_area_no_open => {\n+                CmdResult::HandleInApp(Internal::focus_staging_area_no_open)\n+            }\n+            // panel_left depends on the kind of panel and is usually handled\n+            // in a specific state, contrary to panel_left_no_open\n             Internal::panel_left | Internal::panel_left_no_open => {\n                 CmdResult::HandleInApp(Internal::panel_left_no_open)\n             }\n+            // panel_right depends on the kind of panel and is usually handled\n+            // in a specific state, contrary to panel_right_no_open\n             Internal::panel_right | Internal::panel_right_no_open => {\n                 CmdResult::HandleInApp(Internal::panel_right_no_open)\n             }\ndiff --git a/src/verb/internal.rs b/src/verb/internal.rs\n--- a/src/verb/internal.rs\n+++ b/src/verb/internal.rs\n@@ -67,6 +67,7 @@ Internals! {\n     escape: \"escape from edition, completion, page, etc.\" false,\n     filesystems: \"list mounted filesystems\" false,\n     focus: \"display the directory (mapped to *enter*)\" true,\n+    focus_staging_area_no_open: \"focus the staging area if already open\" false,\n     help: \"display broot's help\" false,\n     input_clear: \"empty the input\" false,\n     input_del_char_below: \"delete the char left at the cursor's position\" false,\ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -261,11 +261,9 @@ impl Verb {\n             )\n         };\n         if let VerbExecution::Sequence(seq_ex) = &self.execution {\n-            let exec_desc = builder().shell_exec_string(\n-                &ExecPattern::from_string(&seq_ex.sequence.raw),\n-                con,\n-            );\n-            format!(\"Hit *enter* to **{}**: `{}`\", name, &exec_desc)\n+            // We can't determine before execution what will be the arguments, except\n+            // for the first item of the sequence. It's cleaner to just not try expand it\n+            format!(\"Hit *enter* to **{}**: `{}`\", name, seq_ex.sequence.raw)\n         } else if let VerbExecution::External(external_exec) = &self.execution {\n             let exec_desc = builder().shell_exec_string(&external_exec.exec_pattern, con);\n             format!(\"Hit *enter* to **{}**: `{}`\", name, &exec_desc)\ndiff --git a/src/verb/verb_store.rs b/src/verb/verb_store.rs\n--- a/src/verb/verb_store.rs\n+++ b/src/verb/verb_store.rs\n@@ -172,6 +172,7 @@ impl VerbStore {\n         #[cfg(unix)]\n         self.add_internal(filesystems)\n             .with_shortcut(\"fs\");\n+        self.add_internal(focus_staging_area_no_open);\n         // :focus is also hardcoded on Enter on directories\n         // but ctrl-f is useful for focusing on a file's parent\n         // (and keep the filter)\n",
        "test_patch": "diff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -406,41 +407,30 @@ impl App {\n                         debug!(\"cmd on escape: {cmd:?}\");\n                         self.apply_command(w, cmd, panel_skin, app_state, con)?;\n                     }\n-                    Internal::panel_left_no_open | Internal::panel_right_no_open => {\n-                        let new_active_panel_idx = if internal == Internal::panel_left_no_open {\n-                            // we're here because the state wants us to either move to the panel\n-                            // to the left, or close the rightest one\n-                            if self.active_panel_idx == 0 {\n-                                self.close_panel(self.panels.len().get() - 1, con);\n-                                None\n-                            } else {\n-                                Some(self.active_panel_idx - 1)\n-                            }\n+                    Internal::focus_staging_area_no_open => {\n+                        new_active_panel_idx = self\n+                            .panels\n+                            .iter()\n+                            .position(|p| p.state().get_type() == PanelStateType::Stage);\n+                    }\n+                    Internal::panel_left_no_open => {\n+                        // we're here because the state wants us to either move to the panel\n+                        // to the left, or close the rightest one\n+                        new_active_panel_idx = if self.active_panel_idx == 0 {\n+                            self.close_panel(self.panels.len().get() - 1, con);\n+                            None\n                         } else {\n-                            // panel_right\n-                            // we either move to the right or close the leftest panel\n-                            if self.active_panel_idx + 1 == self.panels.len().get() {\n-                                self.close_panel(0, con);\n-                                None\n-                            } else {\n-                                Some(self.active_panel_idx + 1)\n-                            }\n+                            Some(self.active_panel_idx - 1)\n+                        };\n+                    }\n+                    Internal::panel_right_no_open => {\n+                        // we either move to the right or close the leftest panel\n+                        new_active_panel_idx = if self.active_panel_idx + 1 == self.panels.len().get() {\n+                            self.close_panel(0, con);\n+                            None\n+                        } else {\n+                            Some(self.active_panel_idx + 1)\n                         };\n-                        if let Some(idx) = new_active_panel_idx {\n-                            if is_input_invocation {\n-                                self.mut_panel().clear_input();\n-                            }\n-                            self.active_panel_idx = idx;\n-                            let app_cmd_context = AppCmdContext {\n-                                panel_skin,\n-                                preview_panel: self.preview_panel,\n-                                stage_panel: self.stage_panel,\n-                                screen: self.screen,\n-                                con,\n-                            };\n-                            self.mut_panel()\n-                                .refresh_input_status(app_state, &app_cmd_context);\n-                        }\n                     }\n                     Internal::search_again => {\n                         if let Some(raw_pattern) = &self.panel().last_raw_pattern {\n",
        "problem_statement": "Something like :panel_right_no_open for staging area -- :focus_staging_no_open ?\nMaybe I'm thinking about this wrong, but basically, sometimes I add a bunch of files to the staging area, then want to `rm` them. But the way it works makes it easy to accidentally `rm` some selected file in the left pane, whereas I want `rm` to apply to the staging area if and when there *is* one.\r\n\r\nSo I would want to define my own `rm` verb that does something like `:focus_staging_no_open` (has no effect if there is no staging area, even if there is a right-hand pane), then `rm`. \n",
        "hints_text": "Filtering verbs by the kind of panel might find more use.\r\n\r\nSomething like\r\n\r\n```\r\n    {\r\n        invocation: my_rm\r\n        internal: trash\r\n        panels: [\"stage\"]\r\n    }\r\n\r\n```\r\n?\r\n\r\n(edit: fixed the example)\nOh, thanks! I'm looking at that filter description (docs say it should be `stage`) but am unclear on the behavior.\r\n\r\nIf I assign that to the invocation `rm`, and invoke it while the non-staging panel has focus, will that run and apply to the staging panel? And if no staging panel is open, it will continue to do the default `rm` thing?\nThat's the idea. \r\nBut it looks like this filter is broken (implementation is missing for some verb triggering types). I'll have a look.\nWith https://github.com/Canop/broot/pull/934, if you define a `rm` with a `panels: [\"stage\"]` filter, it will be applied when called in the staging area, while the other one will be applied in other panel types.\nI think there may have been a misreading of the behavior I'm after, especially as written in my last comment. I just tested with 1.43.0 and the `my_rm` verb from here, with the following setup (Zsh):\r\n\r\n```console\r\n$ mkdir rmtest\r\n$ touch rmtest/do_{,not_}trash_{1,2,3}\r\n$ br rmtest\r\n```\r\n\r\nI then mark/select the three `do_trash_*` files, and move focus to one of the `do_not_trash_*` files.\r\n\r\nIf I try `my_rm` here it says \"verb not found\" (because of the filter). I was looking for something that would act on the non-focused staging panel. \r\n\r\nBut also, when I change focus to the staging panel and try the `my_rm` verb, nothing happens when I hit enter (it still says \"Hit enter to my_rm: :trash\").\n> I think there may have been a misreading of the behavior I'm after\r\n\r\nThis is exact. I reopened.",
        "created_at": "2024-09-02T15:15:14Z",
        "version": "1.43"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 897,
        "instance_id": "Canop__broot-897",
        "issue_numbers": [
            "885"
        ],
        "base_commit": "3a38bf890358c9ae96b58c8ff62073aaff50c09c",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -49,47 +49,48 @@ dependencies = [\n \n [[package]]\n name = \"anstream\"\n-version = \"0.6.13\"\n+version = \"0.6.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d96bd03f33fe50a863e394ee9718a706f988b9079b20c3784fb726e7678b62fb\"\n+checksum = \"418c75fa768af9c03be99d17643f93f79bbba589895012a80e3452a19ddda15b\"\n dependencies = [\n  \"anstyle\",\n  \"anstyle-parse\",\n  \"anstyle-query\",\n  \"anstyle-wincon\",\n  \"colorchoice\",\n+ \"is_terminal_polyfill\",\n  \"utf8parse\",\n ]\n \n [[package]]\n name = \"anstyle\"\n-version = \"1.0.6\"\n+version = \"1.0.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8901269c6307e8d93993578286ac0edf7f195079ffff5ebdeea6a59ffb7e36bc\"\n+checksum = \"038dfcf04a5feb68e9c60b21c9625a54c2c0616e79b72b0fd87075a056ae1d1b\"\n \n [[package]]\n name = \"anstyle-parse\"\n-version = \"0.2.3\"\n+version = \"0.2.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c75ac65da39e5fe5ab759307499ddad880d724eed2f6ce5b5e8a26f4f387928c\"\n+checksum = \"c03a11a9034d92058ceb6ee011ce58af4a9bf61491aa7e1e59ecd24bd40d22d4\"\n dependencies = [\n  \"utf8parse\",\n ]\n \n [[package]]\n name = \"anstyle-query\"\n-version = \"1.0.2\"\n+version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e28923312444cdd728e4738b3f9c9cac739500909bb3d3c94b43551b16517648\"\n+checksum = \"ad186efb764318d35165f1758e7dcef3b10628e26d41a44bc5550652e6804391\"\n dependencies = [\n  \"windows-sys 0.52.0\",\n ]\n \n [[package]]\n name = \"anstyle-wincon\"\n-version = \"3.0.2\"\n+version = \"3.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1cd54b81ec8d6180e24654d0b371ad22fc3dd083b6ff8ba325b72e00c87660a7\"\n+checksum = \"61a38449feb7068f52bb06c12759005cf459ee52bb4adc1d5a7c4322d716fb19\"\n dependencies = [\n  \"anstyle\",\n  \"windows-sys 0.52.0\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -97,9 +98,9 @@ dependencies = [\n \n [[package]]\n name = \"anyhow\"\n-version = \"1.0.82\"\n+version = \"1.0.86\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f538837af36e6f6a9be0faa67f9a314f8119e4e4b5867c6ab40ed60360142519\"\n+checksum = \"b3d1d046238990b9cf5bcde22a3fb3584ee5cf65fb2765f454ed428c7a0063da\"\n \n [[package]]\n name = \"argh\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -120,7 +121,7 @@ dependencies = [\n  \"argh_shared\",\n  \"proc-macro2\",\n  \"quote\",\n- \"syn 2.0.60\",\n+ \"syn 2.0.68\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -146,9 +147,9 @@ checksum = \"96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711\"\n \n [[package]]\n name = \"autocfg\"\n-version = \"1.2.0\"\n+version = \"1.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f1fdabc7756949593fe60f30ec81974b613357de856987752631dea1e3394c80\"\n+checksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n \n [[package]]\n name = \"base64\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -162,6 +163,12 @@ version = \"0.21.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567\"\n \n+[[package]]\n+name = \"base64\"\n+version = \"0.22.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6\"\n+\n [[package]]\n name = \"bet\"\n version = \"1.0.3\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -191,9 +198,9 @@ checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n [[package]]\n name = \"bitflags\"\n-version = \"2.5.0\"\n+version = \"2.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1\"\n+checksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\n \n [[package]]\n name = \"block\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -203,7 +210,7 @@ checksum = \"0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a\"\n \n [[package]]\n name = \"broot\"\n-version = \"1.39.0\"\n+version = \"1.39.1-dev\"\n dependencies = [\n  \"ansi_colours\",\n  \"base64 0.21.7\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -221,7 +228,6 @@ dependencies = [\n  \"deser-hjson\",\n  \"directories 4.0.1\",\n  \"file-size\",\n- \"fnv\",\n  \"git2\",\n  \"glassbench\",\n  \"glob\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -278,9 +284,9 @@ checksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n \n [[package]]\n name = \"bytemuck\"\n-version = \"1.15.0\"\n+version = \"1.16.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5d6d68c57235a3a081186990eca2867354726650f42f7516ca50c28d6281fd15\"\n+checksum = \"b236fc92302c97ed75b38da1f4917b5cdda4984745740f153a5d3059e48d725e\"\n \n [[package]]\n name = \"byteorder\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -290,9 +296,9 @@ checksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.95\"\n+version = \"1.0.104\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d32a725bc159af97c3e629873bb9f88fb8cf8a4867175f76dc987815ea07c83b\"\n+checksum = \"74b6a57f98764a267ff415d50a25e6e166f3831a5071af4995296ea97d210490\"\n dependencies = [\n  \"jobserver\",\n  \"libc\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -329,14 +335,14 @@ dependencies = [\n  \"num-traits\",\n  \"serde\",\n  \"wasm-bindgen\",\n- \"windows-targets 0.52.5\",\n+ \"windows-targets 0.52.6\",\n ]\n \n [[package]]\n name = \"clap\"\n-version = \"4.5.4\"\n+version = \"4.5.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"90bc066a67923782aa8515dbaea16946c5bcc5addbd668bb80af688e53e548a0\"\n+checksum = \"84b3edb18336f4df585bc9aa31dd99c036dfa5dc5e9a2939a722a188f3a8970d\"\n dependencies = [\n  \"clap_builder\",\n  \"clap_derive\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -367,36 +373,36 @@ dependencies = [\n \n [[package]]\n name = \"clap_complete\"\n-version = \"4.5.2\"\n+version = \"4.5.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dd79504325bf38b10165b02e89b4347300f855f273c4cb30c4a3209e6583275e\"\n+checksum = \"1d598e88f6874d4b888ed40c71efbcbf4076f1dfbae128a08a8c9e45f710605d\"\n dependencies = [\n  \"clap\",\n ]\n \n [[package]]\n name = \"clap_derive\"\n-version = \"4.5.4\"\n+version = \"4.5.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"528131438037fd55894f62d6e9f068b8f45ac57ffa77517819645d10aed04f64\"\n+checksum = \"2bac35c6dafb060fd4d275d9a4ffae97917c13a6327903a8be2153cd964f7085\"\n dependencies = [\n  \"heck 0.5.0\",\n  \"proc-macro2\",\n  \"quote\",\n- \"syn 2.0.60\",\n+ \"syn 2.0.68\",\n ]\n \n [[package]]\n name = \"clap_lex\"\n-version = \"0.7.0\"\n+version = \"0.7.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"98cc8fbded0c607b7ba9dd60cd98df59af97e84d24e49c8557331cfc26d301ce\"\n+checksum = \"4b82cf0babdbd58558212896d1a4272303a57bdb245c2bf1147185fb45640e70\"\n \n [[package]]\n name = \"clap_mangen\"\n-version = \"0.2.20\"\n+version = \"0.2.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e1dd95b5ebb5c1c54581dd6346f3ed6a79a3eef95dd372fc2ac13d535535300e\"\n+checksum = \"f50dde5bc0c853d6248de457e5eb6e5a674a54b93810a34ded88d882ca1fe2de\"\n dependencies = [\n  \"clap\",\n  \"roff\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -444,9 +450,9 @@ checksum = \"3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b\"\n \n [[package]]\n name = \"colorchoice\"\n-version = \"1.0.0\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7\"\n+checksum = \"0b6a852b24ab71dffc585bcb46eaf7959d175cb865a7152e35b348d1b2960422\"\n \n [[package]]\n name = \"coolor\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -465,18 +471,18 @@ checksum = \"06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f\"\n \n [[package]]\n name = \"crc32fast\"\n-version = \"1.4.0\"\n+version = \"1.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b3855a8a784b474f333699ef2bbca9db2c4a1f6d9088a90a2d25b1eb53111eaa\"\n+checksum = \"a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3\"\n dependencies = [\n  \"cfg-if\",\n ]\n \n [[package]]\n name = \"crokey\"\n-version = \"1.0.0\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b48209802ec5862bb034cb16719eec24d1c759e62921be7d3c899d0d85f3344b\"\n+checksum = \"b015414137feca6f4137550d60d233b580a09307e2de329412b8e8c661b6dfab\"\n dependencies = [\n  \"crokey-proc_macros\",\n  \"crossterm\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -487,9 +493,9 @@ dependencies = [\n \n [[package]]\n name = \"crokey-proc_macros\"\n-version = \"0.6.4\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"397d3c009d8df93c4b063ddaa44a81ee7098feb056f99b00896c36e2cee9a9f7\"\n+checksum = \"6085c6385034f0847d2b3120547a88da1e5e35727970a70f32b555eb3c47051c\"\n dependencies = [\n  \"crossterm\",\n  \"proc-macro2\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -513,9 +519,9 @@ dependencies = [\n \n [[package]]\n name = \"crossbeam-channel\"\n-version = \"0.5.12\"\n+version = \"0.5.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ab3db02a9c5b5121e1e42fbdb1aeb65f5e02624cc58c43f2884c6ccac0b82f95\"\n+checksum = \"33480d6946193aa8033910124896ca395333cae7e2d1113d1fef6c3272217df2\"\n dependencies = [\n  \"crossbeam-utils\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -550,9 +556,9 @@ dependencies = [\n \n [[package]]\n name = \"crossbeam-utils\"\n-version = \"0.8.19\"\n+version = \"0.8.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"248e3bacc7dc6baa3b21e405ee045c3047101a49145e7e9eca583ab4c2ca5345\"\n+checksum = \"22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80\"\n \n [[package]]\n name = \"crossterm\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -560,7 +566,7 @@ version = \"0.27.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f476fe445d41c9e991fd07515a6f463074b782242ccf4a5b7b1d1012e70824df\"\n dependencies = [\n- \"bitflags 2.5.0\",\n+ \"bitflags 2.6.0\",\n  \"crossterm_winapi\",\n  \"libc\",\n  \"mio\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -706,9 +712,9 @@ checksum = \"fea41bba32d969b513997752735605054bc0dfa92b4c56bf1189f2e174be7a10\"\n \n [[package]]\n name = \"either\"\n-version = \"1.11.0\"\n+version = \"1.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a47c1c47d2f5964e29c61246e81db715514cd532db6b5116a25ea3c03d6780a2\"\n+checksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n \n [[package]]\n name = \"equivalent\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -718,9 +724,9 @@ checksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n \n [[package]]\n name = \"errno\"\n-version = \"0.3.8\"\n+version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a258e46cdc063eb8519c00b9fc845fc47bcfca4130e2f08e88665ceda8474245\"\n+checksum = \"534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba\"\n dependencies = [\n  \"libc\",\n  \"windows-sys 0.52.0\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -787,9 +793,9 @@ checksum = \"9544f10105d33957765016b8a9baea7e689bf1f0f2f32c2fa2f568770c38d2b3\"\n \n [[package]]\n name = \"flate2\"\n-version = \"1.0.29\"\n+version = \"1.0.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4556222738635b7a3417ae6130d8f52201e45a0c4d1a907f0826383adb5f85e7\"\n+checksum = \"5f54427cfd1c7829e2a139fcefea601bf088ebca651d2bf53ebc600eac295dae\"\n dependencies = [\n  \"crc32fast\",\n  \"miniz_oxide\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -860,9 +866,9 @@ dependencies = [\n \n [[package]]\n name = \"getrandom\"\n-version = \"0.2.14\"\n+version = \"0.2.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"94b22e06ecb0110981051723910cbf0b5f5e09a2062dd7663334ee79a9d1286c\"\n+checksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -949,9 +955,9 @@ dependencies = [\n \n [[package]]\n name = \"hashbrown\"\n-version = \"0.14.3\"\n+version = \"0.14.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"290f1a1d9242c78d09ce40a5e87e7554ee637af1351968159f4952f028f75604\"\n+checksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n \n [[package]]\n name = \"hashlink\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1048,18 +1054,18 @@ checksum = \"029d73f573d8e8d63e6d5020011d3255b28c3ba85d6cf870a07184ed23de9284\"\n \n [[package]]\n name = \"include_dir\"\n-version = \"0.7.3\"\n+version = \"0.7.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"18762faeff7122e89e0857b02f7ce6fcc0d101d5e9ad2ad7846cc01d61b7f19e\"\n+checksum = \"923d117408f1e49d914f1a379a309cffe4f18c05cf4e3d12e613a15fc81bd0dd\"\n dependencies = [\n  \"include_dir_macros\",\n ]\n \n [[package]]\n name = \"include_dir_macros\"\n-version = \"0.7.3\"\n+version = \"0.7.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b139284b5cf57ecfa712bcc66950bb635b31aff41c188e8a4cfc758eca374a3f\"\n+checksum = \"7cab85a7ed0bd5f0e76d93846e0147172bed2e2d3f859bcc33a8d9699cad1a75\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1072,7 +1078,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"168fb715dda47215e360912c096649d23d58bf392ac62f73919e831745e40f26\"\n dependencies = [\n  \"equivalent\",\n- \"hashbrown 0.14.3\",\n+ \"hashbrown 0.14.5\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1084,6 +1090,12 @@ dependencies = [\n  \"winapi\",\n ]\n \n+[[package]]\n+name = \"is_terminal_polyfill\"\n+version = \"1.70.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f8478577c03552c21db0e2724ffb8986a5ce7af88107e6be5d2ee6e158c12800\"\n+\n [[package]]\n name = \"itoa\"\n version = \"1.0.11\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1146,14 +1158,14 @@ dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n  \"regex\",\n- \"syn 2.0.60\",\n+ \"syn 2.0.68\",\n ]\n \n [[package]]\n name = \"lazy_static\"\n-version = \"1.4.0\"\n+version = \"1.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n+checksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n \n [[package]]\n name = \"lebe\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1174,9 +1186,9 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.153\"\n+version = \"0.2.155\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9c198f91728a82281a64e1f4f9eeb25d82cb32a5de251c6bd1b5154d63a8e7bd\"\n+checksum = \"97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c\"\n \n [[package]]\n name = \"libgit2-sys\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1196,7 +1208,7 @@ version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d\"\n dependencies = [\n- \"bitflags 2.5.0\",\n+ \"bitflags 2.6.0\",\n  \"libc\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1213,9 +1225,9 @@ dependencies = [\n \n [[package]]\n name = \"libz-sys\"\n-version = \"1.1.16\"\n+version = \"1.1.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5e143b5e666b2695d28f6bca6497720813f699c9602dd7f5cac91008b8ada7f9\"\n+checksum = \"c15da26e5af7e25c90b37a2d75cdbf940cf4a55316de9d84c679c9b8bfabf82e\"\n dependencies = [\n  \"cc\",\n  \"libc\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1223,12 +1235,6 @@ dependencies = [\n  \"vcpkg\",\n ]\n \n-[[package]]\n-name = \"line-wrap\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dd1bc4d24ad230d21fb898d1116b1801d7adfc449d42026475862ab48b11e70e\"\n-\n [[package]]\n name = \"linked-hash-map\"\n version = \"0.5.6\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1237,9 +1243,9 @@ checksum = \"0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f\"\n \n [[package]]\n name = \"linux-raw-sys\"\n-version = \"0.4.13\"\n+version = \"0.4.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"01cda141df6706de531b6c46c3a33ecca755538219bd484262fa09410c13539c\"\n+checksum = \"78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89\"\n \n [[package]]\n name = \"lock_api\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1253,9 +1259,9 @@ dependencies = [\n \n [[package]]\n name = \"log\"\n-version = \"0.4.21\"\n+version = \"0.4.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c\"\n+checksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n \n [[package]]\n name = \"malloc_buf\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1268,9 +1274,9 @@ dependencies = [\n \n [[package]]\n name = \"memchr\"\n-version = \"2.7.2\"\n+version = \"2.7.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6c8640c5d730cb13ebd907d8d04b52f55ac9a2eec55b440c8892f40d56c76c1d\"\n+checksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n \n [[package]]\n name = \"memmap2\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1310,18 +1316,18 @@ dependencies = [\n \n [[package]]\n name = \"minimad\"\n-version = \"0.13.0\"\n+version = \"0.13.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f6c4610f430e49b882fcaad0186134150d4d74fc76080b0a61f7000460c2e268\"\n+checksum = \"a9c5d708226d186590a7b6d4a9780e2bdda5f689e0d58cd17012a298efd745d2\"\n dependencies = [\n  \"once_cell\",\n ]\n \n [[package]]\n name = \"miniz_oxide\"\n-version = \"0.7.2\"\n+version = \"0.7.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9d811f3e15f28568be3407c8e7fdb6514c1cda3cb30683f15b6a1a1dc4ea14a7\"\n+checksum = \"b8a240ddb74feaf34a79a7add65a741f3167852fba007066dcac1ca548d89c08\"\n dependencies = [\n  \"adler\",\n  \"simd-adler32\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1370,7 +1376,7 @@ version = \"0.28.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ab2156c4fce2f8df6c499cc1c763e4394b7482525bf2a9701c9d79d215f519e4\"\n dependencies = [\n- \"bitflags 2.5.0\",\n+ \"bitflags 2.6.0\",\n  \"cfg-if\",\n  \"cfg_aliases\",\n  \"libc\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1393,9 +1399,9 @@ checksum = \"51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9\"\n \n [[package]]\n name = \"num-traits\"\n-version = \"0.2.18\"\n+version = \"0.2.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"da0df0e5185db44f69b44f26786fe401b6c293d1907744beaa7fa62b2e5a517a\"\n+checksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\n dependencies = [\n  \"autocfg\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1486,9 +1492,9 @@ checksum = \"04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d\"\n \n [[package]]\n name = \"parking_lot\"\n-version = \"0.12.2\"\n+version = \"0.12.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7e4af0ca4f6caed20e900d564c242b8e5d4903fdacf31d3daf527b66fe6f42fb\"\n+checksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\n dependencies = [\n  \"lock_api\",\n  \"parking_lot_core\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1504,7 +1510,7 @@ dependencies = [\n  \"libc\",\n  \"redox_syscall\",\n  \"smallvec\",\n- \"windows-targets 0.52.5\",\n+ \"windows-targets 0.52.6\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1549,7 +1555,7 @@ dependencies = [\n  \"phf_shared\",\n  \"proc-macro2\",\n  \"quote\",\n- \"syn 2.0.60\",\n+ \"syn 2.0.68\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1575,13 +1581,12 @@ checksum = \"d231b230927b5e4ad203db57bbcbee2802f6bce620b1e4a9024a07d94e2907ec\"\n \n [[package]]\n name = \"plist\"\n-version = \"1.6.1\"\n+version = \"1.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d9d34169e64b3c7a80c8621a48adaf44e0cf62c78a9b25dd9dd35f1881a17cf9\"\n+checksum = \"42cf17e9a1800f5f396bc67d193dc9411b59012a5876445ef450d449881e1016\"\n dependencies = [\n- \"base64 0.21.7\",\n+ \"base64 0.22.1\",\n  \"indexmap\",\n- \"line-wrap\",\n  \"quick-xml\",\n  \"serde\",\n  \"time\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1608,9 +1613,9 @@ checksum = \"439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.81\"\n+version = \"1.0.86\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3d1597b0c024618f09a9c3b8655b7e430397a36d23fdafec26d6965e9eec3eba\"\n+checksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\n dependencies = [\n  \"unicode-ident\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1694,11 +1699,11 @@ checksum = \"3b42e27ef78c35d3998403c1d26f3efd9e135d3e5121b0a4845cc5cc27547f4f\"\n \n [[package]]\n name = \"redox_syscall\"\n-version = \"0.5.1\"\n+version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"469052894dcb553421e483e4209ee581a45100d31b4018de03e5a7ad86374a7e\"\n+checksum = \"c82cf8cff14456045f55ec4241383baeff27af886adb72ffb2162f99911de0fd\"\n dependencies = [\n- \"bitflags 2.5.0\",\n+ \"bitflags 2.6.0\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1714,25 +1719,25 @@ dependencies = [\n \n [[package]]\n name = \"regex\"\n-version = \"1.10.4\"\n+version = \"1.10.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c117dbdfde9c8308975b6a18d71f3f385c89461f7b3fb054288ecf2a2058ba4c\"\n+checksum = \"b91213439dad192326a0d7c6ee3955910425f441d7038e0d6933b0aec5c4517f\"\n dependencies = [\n  \"aho-corasick\",\n  \"memchr\",\n  \"regex-automata\",\n- \"regex-syntax 0.8.3\",\n+ \"regex-syntax 0.8.4\",\n ]\n \n [[package]]\n name = \"regex-automata\"\n-version = \"0.4.6\"\n+version = \"0.4.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"86b83b8b9847f9bf95ef68afb0b8e6cdb80f498442f5179a29fad448fcc1eaea\"\n+checksum = \"38caf58cc5ef2fed281f89292ef23f6365465ed9a41b7a7754eb4e26496c92df\"\n dependencies = [\n  \"aho-corasick\",\n  \"memchr\",\n- \"regex-syntax 0.8.3\",\n+ \"regex-syntax 0.8.4\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1743,9 +1748,9 @@ checksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.8.3\"\n+version = \"0.8.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"adad44e29e4c806119491a7f06f03de4d1af22c3a680dd47f1e6e179439d1f56\"\n+checksum = \"7a66a03ae7c801facd77a29370b4faec201768915ac14a721ba36f20bc9c209b\"\n \n [[package]]\n name = \"resvg\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1766,9 +1771,9 @@ dependencies = [\n \n [[package]]\n name = \"rgb\"\n-version = \"0.8.37\"\n+version = \"0.8.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"05aaa8004b64fd573fc9d002f4e632d51ad4f026c2b5ba95fcb6c2f32c2c47d8\"\n+checksum = \"a7439be6844e40133eda024efd85bf07f59d0dd2f59b10c00dd6cfb92cc5c741\"\n dependencies = [\n  \"bytemuck\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1821,7 +1826,7 @@ version = \"0.38.34\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f\"\n dependencies = [\n- \"bitflags 2.5.0\",\n+ \"bitflags 2.6.0\",\n  \"errno\",\n  \"libc\",\n  \"linux-raw-sys\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1846,9 +1851,9 @@ dependencies = [\n \n [[package]]\n name = \"ryu\"\n-version = \"1.0.17\"\n+version = \"1.0.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e86697c916019a8588c99b5fac3cead74ec0b4b819707a682fd4d23fa0ce1ba1\"\n+checksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n \n [[package]]\n name = \"same-file\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1876,29 +1881,29 @@ dependencies = [\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.199\"\n+version = \"1.0.203\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0c9f6e76df036c77cd94996771fb40db98187f096dd0b9af39c6c6e452ba966a\"\n+checksum = \"7253ab4de971e72fb7be983802300c30b5a7f0c2e56fab8abfc6a214307c0094\"\n dependencies = [\n  \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.199\"\n+version = \"1.0.203\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"11bd257a6541e141e42ca6d24ae26f7714887b47e89aa739099104c7e4d3b7fc\"\n+checksum = \"500cbc0ebeb6f46627f50f3f5811ccf6bf00643be300b4c3eabc0ef55dc5b5ba\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn 2.0.60\",\n+ \"syn 2.0.68\",\n ]\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.116\"\n+version = \"1.0.120\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3e17db7126d17feb94eb3fad46bf1a96b034e8aacbc2e775fe81505f8b0b2813\"\n+checksum = \"4e0d21c9a8cae1235ad58a00c11cb40d4b1e5c784f1ef2c537876ed6ffd8b7c5\"\n dependencies = [\n  \"itoa\",\n  \"ryu\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1907,9 +1912,9 @@ dependencies = [\n \n [[package]]\n name = \"serde_spanned\"\n-version = \"0.6.5\"\n+version = \"0.6.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eb3622f419d1296904700073ea6cc23ad690adbd66f13ea683df73298736f0c1\"\n+checksum = \"79e674e01f999af37c49f70a6ede167a8a60b2503e56c5599532a65baa5969a0\"\n dependencies = [\n  \"serde\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2079,9 +2084,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"2.0.60\"\n+version = \"2.0.68\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"909518bc7b1c9b779f1bbf07f2929d35af9f0f37e47c6e9ef7f9dddc1e1821f3\"\n+checksum = \"901fa70d88b9d6c98022e23b4136f9f3e54e4662c3bc1bd1d84a42a9a0f0c1e9\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2124,9 +2129,9 @@ dependencies = [\n \n [[package]]\n name = \"termimad\"\n-version = \"0.29.2\"\n+version = \"0.29.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aab6c8572830b10362f27e242c7c5e749f062ec310b76a0d0b56670eca81f28e\"\n+checksum = \"eff854b510d076163c3b8628ebfe6bfbe6f01c3254b8b8e77cac7ad2d8c72b06\"\n dependencies = [\n  \"coolor\",\n  \"crokey\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2171,22 +2176,22 @@ checksum = \"9f6aff13ca3293315b94f6dbd9c69e1c958fe421c294681e2ffda80c9858e36f\"\n \n [[package]]\n name = \"thiserror\"\n-version = \"1.0.59\"\n+version = \"1.0.61\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f0126ad08bff79f29fc3ae6a55cc72352056dfff61e3ff8bb7129476d44b23aa\"\n+checksum = \"c546c80d6be4bc6a00c0f01730c08df82eaa7a7a61f11d656526506112cc1709\"\n dependencies = [\n  \"thiserror-impl\",\n ]\n \n [[package]]\n name = \"thiserror-impl\"\n-version = \"1.0.59\"\n+version = \"1.0.61\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d1cd413b5d558b4c5bf3680e324a6fa5014e7b7c067a51e69dbdf47eb7148b66\"\n+checksum = \"46c3384250002a6d5af4d114f2845d37b57521033f30d5c3f46c4d70e1197533\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn 2.0.60\",\n+ \"syn 2.0.68\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2259,9 +2264,9 @@ dependencies = [\n \n [[package]]\n name = \"tinyvec\"\n-version = \"1.6.0\"\n+version = \"1.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50\"\n+checksum = \"c55115c6fbe2d2bef26eb09ad74bde02d8255476fc0c7b515ef09fbb35742d82\"\n dependencies = [\n  \"tinyvec_macros\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2274,9 +2279,9 @@ checksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n \n [[package]]\n name = \"toml\"\n-version = \"0.8.12\"\n+version = \"0.8.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e9dd1545e8208b4a5af1aa9bbd0b4cf7e9ea08fabc5d0a5c67fcaafa17433aa3\"\n+checksum = \"6f49eb2ab21d2f26bd6db7bf383edc527a7ebaee412d17af4d40fdccd442f335\"\n dependencies = [\n  \"serde\",\n  \"serde_spanned\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2286,18 +2291,18 @@ dependencies = [\n \n [[package]]\n name = \"toml_datetime\"\n-version = \"0.6.5\"\n+version = \"0.6.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3550f4e9685620ac18a50ed434eb3aec30db8ba93b0287467bca5826ea25baf1\"\n+checksum = \"4badfd56924ae69bcc9039335b2e017639ce3f9b001c393c1b2d1ef846ce2cbf\"\n dependencies = [\n  \"serde\",\n ]\n \n [[package]]\n name = \"toml_edit\"\n-version = \"0.22.12\"\n+version = \"0.22.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d3328d4f68a705b2a4498da1d580585d39a6510f98318a2cec3018a7ec61ddef\"\n+checksum = \"f21c7aaf97f1bd9ca9d4f9e73b0a6c74bd5afef56f2bc931943a6e1c37e04e38\"\n dependencies = [\n  \"indexmap\",\n  \"serde\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2390,15 +2395,15 @@ checksum = \"b1d386ff53b415b7fe27b50bb44679e2cc4660272694b7b6f3326d8480823a94\"\n \n [[package]]\n name = \"unicode-width\"\n-version = \"0.1.12\"\n+version = \"0.1.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"68f5e5f3158ecfd4b8ff6fe086db7c8467a2dfdac97fe420f2b7c4aa97af66d6\"\n+checksum = \"0336d538f7abc86d282a4189614dfaa90810dfc2c6f6427eaf88e16311dd225d\"\n \n [[package]]\n name = \"url\"\n-version = \"2.5.0\"\n+version = \"2.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"31e6302e3bb753d46e83516cae55ae196fc0c309407cf11ab35cc51a4c2a4633\"\n+checksum = \"22784dbdf76fdde8af1aeda5622b546b422b6fc585325248a2bf9f5e41e94d6c\"\n dependencies = [\n  \"form_urlencoded\",\n  \"idna\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2468,9 +2473,9 @@ dependencies = [\n \n [[package]]\n name = \"utf8parse\"\n-version = \"0.2.1\"\n+version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a\"\n+checksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n \n [[package]]\n name = \"uzers\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2531,7 +2536,7 @@ dependencies = [\n  \"once_cell\",\n  \"proc-macro2\",\n  \"quote\",\n- \"syn 2.0.60\",\n+ \"syn 2.0.68\",\n  \"wasm-bindgen-shared\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2553,7 +2558,7 @@ checksum = \"e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"syn 2.0.60\",\n+ \"syn 2.0.68\",\n  \"wasm-bindgen-backend\",\n  \"wasm-bindgen-shared\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2637,7 +2642,7 @@ version = \"0.52.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\n dependencies = [\n- \"windows-targets 0.52.5\",\n+ \"windows-targets 0.52.6\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2655,7 +2660,7 @@ version = \"0.52.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\n dependencies = [\n- \"windows-targets 0.52.5\",\n+ \"windows-targets 0.52.6\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2690,18 +2695,18 @@ dependencies = [\n \n [[package]]\n name = \"windows-targets\"\n-version = \"0.52.5\"\n+version = \"0.52.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6f0713a46559409d202e70e28227288446bf7841d3211583a4b53e3f6d96e7eb\"\n+checksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\n dependencies = [\n- \"windows_aarch64_gnullvm 0.52.5\",\n- \"windows_aarch64_msvc 0.52.5\",\n- \"windows_i686_gnu 0.52.5\",\n+ \"windows_aarch64_gnullvm 0.52.6\",\n+ \"windows_aarch64_msvc 0.52.6\",\n+ \"windows_i686_gnu 0.52.6\",\n  \"windows_i686_gnullvm\",\n- \"windows_i686_msvc 0.52.5\",\n- \"windows_x86_64_gnu 0.52.5\",\n- \"windows_x86_64_gnullvm 0.52.5\",\n- \"windows_x86_64_msvc 0.52.5\",\n+ \"windows_i686_msvc 0.52.6\",\n+ \"windows_x86_64_gnu 0.52.6\",\n+ \"windows_x86_64_gnullvm 0.52.6\",\n+ \"windows_x86_64_msvc 0.52.6\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2718,9 +2723,9 @@ checksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n \n [[package]]\n name = \"windows_aarch64_gnullvm\"\n-version = \"0.52.5\"\n+version = \"0.52.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7088eed71e8b8dda258ecc8bac5fb1153c5cffaf2578fc8ff5d61e23578d3263\"\n+checksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n \n [[package]]\n name = \"windows_aarch64_msvc\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2736,9 +2741,9 @@ checksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n \n [[package]]\n name = \"windows_aarch64_msvc\"\n-version = \"0.52.5\"\n+version = \"0.52.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9985fd1504e250c615ca5f281c3f7a6da76213ebd5ccc9561496568a2752afb6\"\n+checksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n \n [[package]]\n name = \"windows_i686_gnu\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2754,15 +2759,15 @@ checksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n \n [[package]]\n name = \"windows_i686_gnu\"\n-version = \"0.52.5\"\n+version = \"0.52.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"88ba073cf16d5372720ec942a8ccbf61626074c6d4dd2e745299726ce8b89670\"\n+checksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n \n [[package]]\n name = \"windows_i686_gnullvm\"\n-version = \"0.52.5\"\n+version = \"0.52.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"87f4261229030a858f36b459e748ae97545d6f1ec60e5e0d6a3d32e0dc232ee9\"\n+checksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n \n [[package]]\n name = \"windows_i686_msvc\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2778,9 +2783,9 @@ checksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n \n [[package]]\n name = \"windows_i686_msvc\"\n-version = \"0.52.5\"\n+version = \"0.52.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"db3c2bf3d13d5b658be73463284eaf12830ac9a26a90c717b7f771dfe97487bf\"\n+checksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n \n [[package]]\n name = \"windows_x86_64_gnu\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2796,9 +2801,9 @@ checksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n \n [[package]]\n name = \"windows_x86_64_gnu\"\n-version = \"0.52.5\"\n+version = \"0.52.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4e4246f76bdeff09eb48875a0fd3e2af6aada79d409d33011886d3e1581517d9\"\n+checksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n \n [[package]]\n name = \"windows_x86_64_gnullvm\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2814,9 +2819,9 @@ checksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n \n [[package]]\n name = \"windows_x86_64_gnullvm\"\n-version = \"0.52.5\"\n+version = \"0.52.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"852298e482cd67c356ddd9570386e2862b5673c85bd5f88df9ab6802b334c596\"\n+checksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n \n [[package]]\n name = \"windows_x86_64_msvc\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2832,15 +2837,15 @@ checksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n \n [[package]]\n name = \"windows_x86_64_msvc\"\n-version = \"0.52.5\"\n+version = \"0.52.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bec47e5bfd1bff0eeaf6d8b485cc1074891a197ab4225d504cb7a1ab88b02bf0\"\n+checksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n \n [[package]]\n name = \"winnow\"\n-version = \"0.6.7\"\n+version = \"0.6.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"14b9415ee827af173ebb3f15f9083df5a122eb93572ec28741fb153356ea2578\"\n+checksum = \"59b5e5f6c299a3c7890b876a2a587f3115162487e704907d9b6cd29473052ba1\"\n dependencies = [\n  \"memchr\",\n ]\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -1,6 +1,6 @@\n [package]\n name = \"broot\"\n-version = \"1.39.0\"\n+version = \"1.39.1-dev\"\n authors = [\"dystroy <denys.seguret@gmail.com>\"]\n repository = \"https://github.com/Canop/broot\"\n homepage = \"https://dystroy.org/broot\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -17,7 +17,6 @@ exclude = [\"website\", \"broot*.zip\"]\n \n [features]\n default = []\n-\n clipboard = [\"terminal-clipboard\"]\n kitty-csi-check = [\"xterm-query\"]\n trash = [\"dep:trash\"]\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -37,7 +36,6 @@ custom_error = \"1.6\"\n deser-hjson = \"2.2.3\"\n directories = \"4.0\"\n file-size = \"1.0.3\"\n-fnv = \"1.0.7\"\n git2 = { version = \"0.14\", default-features = false }\n glob = \"0.3\"\n id-arena = \"2.2.1\"\ndiff --git a/src/conf/conf.rs b/src/conf/conf.rs\n--- a/src/conf/conf.rs\n+++ b/src/conf/conf.rs\n@@ -18,7 +18,6 @@ use {\n     },\n     rustc_hash::FxHashMap,\n     crokey::crossterm::style::Attribute,\n-    fnv::FnvHashMap,\n     serde::Deserialize,\n     std::collections::HashMap,\n     std::path::PathBuf,\ndiff --git a/src/conf/conf.rs b/src/conf/conf.rs\n--- a/src/conf/conf.rs\n+++ b/src/conf/conf.rs\n@@ -104,7 +103,7 @@ pub struct Conf {\n     pub quit_on_last_cancel: Option<bool>,\n \n     #[serde(alias=\"search-modes\")]\n-    pub search_modes: Option<FnvHashMap<String, String>>,\n+    pub search_modes: Option<FxHashMap<String, String>>,\n \n     #[serde(alias=\"show-matching-characters-on-path-searches\")]\n     pub show_matching_characters_on_path_searches: Option<bool>,\ndiff --git a/src/display/cell_size.rs b/src/display/cell_size.rs\n--- a/src/display/cell_size.rs\n+++ b/src/display/cell_size.rs\n@@ -23,20 +23,21 @@ pub fn cell_size_in_pixels() -> std::io::Result<(u32, u32)> {\n         ws_xpixel: c_ushort, /* horizontal size, pixels */\n         ws_ypixel: c_ushort, /* vertical size, pixels */\n     }\n-    let w = winsize {\n+    let mut w = winsize {\n         ws_row: 0,\n         ws_col: 0,\n         ws_xpixel: 0,\n         ws_ypixel: 0,\n     };\n     #[allow(clippy::useless_conversion)]\n-    let r = unsafe { ioctl(STDOUT_FILENO, TIOCGWINSZ.into(), &w) };\n+    let r = unsafe { ioctl(STDOUT_FILENO, TIOCGWINSZ.into(), &mut w) };\n     if r == 0 && w.ws_xpixel > w.ws_col && w.ws_ypixel > w.ws_row {\n         Ok((\n             (w.ws_xpixel / w.ws_col) as u32,\n             (w.ws_ypixel / w.ws_row) as u32,\n         ))\n     } else {\n+        warn!(\"failed to fetch cell dimension with ioctl\");\n         Err(io::Error::new(\n             io::ErrorKind::Other,\n             \"failed to fetch terminal dimension with ioctl\",\ndiff --git a/src/errors.rs b/src/errors.rs\n--- a/src/errors.rs\n+++ b/src/errors.rs\n@@ -70,6 +70,7 @@ custom_error! {pub TreeBuildError\n     NotADirectory { path: String } = \"Not a directory: {path}\",\n     FileNotFound { path: String } = \"File not found: {path}\",\n     Interrupted = \"Task Interrupted\",\n+    InvalidUtf8 { path: String } = \"Invalid UTF-8 in {path}\",\n     TooManyMatches { max: usize } = \"Too many matches (max allowed: {max})\",\n }\n \ndiff --git a/src/file_sum/sum_computation.rs b/src/file_sum/sum_computation.rs\n--- a/src/file_sum/sum_computation.rs\n+++ b/src/file_sum/sum_computation.rs\n@@ -10,7 +10,10 @@ use {\n         ThreadPool,\n         ThreadPoolBuilder,\n     },\n-    rustc_hash::FxHashMap,\n+    rustc_hash::{\n+        FxHashMap,\n+        FxHashSet,\n+    },\n     std::{\n         convert::TryInto,\n         fs,\ndiff --git a/src/file_sum/sum_computation.rs b/src/file_sum/sum_computation.rs\n--- a/src/file_sum/sum_computation.rs\n+++ b/src/file_sum/sum_computation.rs\n@@ -31,7 +34,6 @@ use {\n \n #[cfg(unix)]\n use {\n-    fnv::FnvHashSet,\n     std::os::unix::fs::MetadataExt,\n };\n \ndiff --git a/src/file_sum/sum_computation.rs b/src/file_sum/sum_computation.rs\n--- a/src/file_sum/sum_computation.rs\n+++ b/src/file_sum/sum_computation.rs\n@@ -91,7 +93,7 @@ impl DirSummer {\n \n         // to avoid counting twice a node, we store their id in a set\n         #[cfg(unix)]\n-        let nodes = Arc::new(Mutex::new(FnvHashSet::<NodeId>::default()));\n+        let nodes = Arc::new(Mutex::new(FxHashSet::<NodeId>::default()));\n \n         // busy is the number of directories which are either being processed or queued\n         // We use this count to determine when threads can stop waiting for tasks\ndiff --git a/src/pattern/search_mode.rs b/src/pattern/search_mode.rs\n--- a/src/pattern/search_mode.rs\n+++ b/src/pattern/search_mode.rs\n@@ -4,7 +4,7 @@ use {\n         app::AppContext,\n         errors::{ConfError, PatternError},\n     },\n-    fnv::FnvHashMap,\n+    rustc_hash::FxHashMap,\n     lazy_regex::regex_is_match,\n     std::convert::TryFrom,\n };\ndiff --git a/src/pattern/search_mode.rs b/src/pattern/search_mode.rs\n--- a/src/pattern/search_mode.rs\n+++ b/src/pattern/search_mode.rs\n@@ -214,9 +214,9 @@ impl Default for SearchModeMap {\n     }\n }\n \n-impl TryFrom<&FnvHashMap<String, String>> for SearchModeMap {\n+impl TryFrom<&FxHashMap<String, String>> for SearchModeMap {\n     type Error = ConfError;\n-    fn try_from(map: &FnvHashMap<String, String>) -> Result<Self, Self::Error> {\n+    fn try_from(map: &FxHashMap<String, String>) -> Result<Self, Self::Error> {\n         let mut smm = Self::default();\n         for (k, v) in map {\n             smm.entries.push(SearchModeMapEntry::parse(k, v)?);\ndiff --git a/src/permissions/permissions_unix.rs b/src/permissions/permissions_unix.rs\n--- a/src/permissions/permissions_unix.rs\n+++ b/src/permissions/permissions_unix.rs\n@@ -1,5 +1,5 @@\n use {\n-    fnv::FnvHashMap,\n+    rustc_hash::FxHashMap,\n     once_cell::sync::Lazy,\n     std::sync::Mutex,\n };\ndiff --git a/src/permissions/permissions_unix.rs b/src/permissions/permissions_unix.rs\n--- a/src/permissions/permissions_unix.rs\n+++ b/src/permissions/permissions_unix.rs\n@@ -9,8 +9,8 @@ pub fn supported() -> bool {\n }\n \n pub fn user_name(uid: u32) -> String {\n-    static USERS_CACHE_MUTEX: Lazy<Mutex<FnvHashMap<u32, String>>> = Lazy::new(|| {\n-            Mutex::new(FnvHashMap::default())\n+    static USERS_CACHE_MUTEX: Lazy<Mutex<FxHashMap<u32, String>>> = Lazy::new(|| {\n+            Mutex::new(FxHashMap::default())\n     });\n     let mut users_cache = USERS_CACHE_MUTEX.lock().unwrap();\n     let name = users_cache\ndiff --git a/src/permissions/permissions_unix.rs b/src/permissions/permissions_unix.rs\n--- a/src/permissions/permissions_unix.rs\n+++ b/src/permissions/permissions_unix.rs\n@@ -25,8 +25,8 @@ pub fn user_name(uid: u32) -> String {\n }\n \n pub fn group_name(gid: u32) -> String {\n-    static GROUPS_CACHE_MUTEX: Lazy<Mutex<FnvHashMap<u32, String>>> = Lazy::new(|| {\n-        Mutex::new(FnvHashMap::default())\n+    static GROUPS_CACHE_MUTEX: Lazy<Mutex<FxHashMap<u32, String>>> = Lazy::new(|| {\n+        Mutex::new(FxHashMap::default())\n     });\n     let mut groups_cache = GROUPS_CACHE_MUTEX.lock().unwrap();\n     let name = groups_cache\ndiff --git a/src/tree/tree.rs b/src/tree/tree.rs\n--- a/src/tree/tree.rs\n+++ b/src/tree/tree.rs\n@@ -9,7 +9,7 @@ use {\n         task_sync::Dam,\n         tree_build::{BId, BuildReport, TreeBuilder},\n     },\n-    fnv::FnvHashMap,\n+    rustc_hash::FxHashMap,\n     std::{\n         cmp::Ord,\n         mem,\ndiff --git a/src/tree/tree.rs b/src/tree/tree.rs\n--- a/src/tree/tree.rs\n+++ b/src/tree/tree.rs\n@@ -73,15 +73,15 @@ impl Tree {\n         //  - we want a case insensitive sort\n         //  - we still don't want to confuse the children of AA and Aa\n         //  - a node can come from a not parent node, when we followed a link\n-        let mut bid_parents: FnvHashMap<BId, BId> = FnvHashMap::default();\n-        let mut bid_lines: FnvHashMap<BId, &TreeLine> = FnvHashMap::default();\n+        let mut bid_parents: FxHashMap<BId, BId> = FxHashMap::default();\n+        let mut bid_lines: FxHashMap<BId, &TreeLine> = FxHashMap::default();\n         for line in self.lines[..].iter() {\n             if let Some(parent_bid) = line.parent_bid {\n                 bid_parents.insert(line.bid, parent_bid);\n             }\n             bid_lines.insert(line.bid, line);\n         }\n-        let mut sort_paths: FnvHashMap<BId, String> = FnvHashMap::default();\n+        let mut sort_paths: FxHashMap<BId, String> = FxHashMap::default();\n         for line in self.lines[1..].iter() {\n             let mut sort_path = String::new();\n             let mut bid = line.bid;\ndiff --git a/src/tree_build/bline.rs b/src/tree_build/bline.rs\n--- a/src/tree_build/bline.rs\n+++ b/src/tree_build/bline.rs\n@@ -1,7 +1,6 @@\n use {\n     super::bid::BId,\n     crate::{\n-        app::AppContext,\n         errors::TreeBuildError,\n         git::GitIgnoreChain,\n         path::{normalize_path, Directive, SpecialHandling},\ndiff --git a/src/tree_build/bline.rs b/src/tree_build/bline.rs\n--- a/src/tree_build/bline.rs\n+++ b/src/tree_build/bline.rs\n@@ -22,8 +21,6 @@ pub struct BLine {\n     pub parent_id: Option<BId>,\n     pub path: PathBuf,\n     pub depth: u16,\n-    pub subpath: String,\n-    pub name: String,\n     pub file_type: fs::FileType,\n     pub children: Option<Vec<BId>>, // sorted and filtered\n     pub next_child_idx: usize,      // index for iteration, among the children\ndiff --git a/src/tree_build/bline.rs b/src/tree_build/bline.rs\n--- a/src/tree_build/bline.rs\n+++ b/src/tree_build/bline.rs\n@@ -37,6 +34,15 @@ pub struct BLine {\n }\n \n impl BLine {\n+    pub fn name(\n+        &self\n+    ) -> &str {\n+        self\n+            .path\n+            .file_name()\n+            .and_then(|os_str| os_str.to_str())\n+            .unwrap_or(\"\")\n+    }\n     /// a special constructor, checking nothing\n     pub fn from_root(\n         blines: &mut Arena<BLine>,\ndiff --git a/src/tree_build/bline.rs b/src/tree_build/bline.rs\n--- a/src/tree_build/bline.rs\n+++ b/src/tree_build/bline.rs\n@@ -44,18 +50,12 @@ impl BLine {\n         git_ignore_chain: GitIgnoreChain,\n         _options: &TreeOptions,\n     ) -> Result<BId, TreeBuildError> {\n-        let name = match path.file_name() {\n-            Some(name) => name.to_string_lossy().to_string(),\n-            None => String::from(\"???\"), // should not happen\n-        };\n         if let Ok(md) = fs::metadata(&path) {\n             let file_type = md.file_type();\n             Ok(blines.alloc(BLine {\n                 parent_id: None,\n                 path,\n                 depth: 0,\n-                name,\n-                subpath: String::new(),\n                 children: None,\n                 next_child_idx: 0,\n                 file_type,\ndiff --git a/src/tree_build/bline.rs b/src/tree_build/bline.rs\n--- a/src/tree_build/bline.rs\n+++ b/src/tree_build/bline.rs\n@@ -118,49 +118,4 @@ impl BLine {\n         }\n         false\n     }\n-    pub fn to_tree_line(&self, bid: BId, con: &AppContext) -> std::io::Result<TreeLine> {\n-        let has_error = self.has_error;\n-        let line_type = TreeLineType::new(&self.path, &self.file_type);\n-        let unlisted = if let Some(children) = &self.children {\n-            // number of not listed children\n-            children.len() - self.next_child_idx\n-        } else {\n-            0\n-        };\n-        let metadata = fs::symlink_metadata(&self.path)?;\n-        let subpath = self.subpath.replace('\\n', \"\");\n-        let name = self.name.replace('\\n', \"\");\n-        let icon = con.icons.as_ref()\n-            .map(|icon_plugin| {\n-                let extension = TreeLine::extension_from_name(&name);\n-                let double_extension = extension\n-                    .and_then(|_| TreeLine::double_extension_from_name(&name));\n-                icon_plugin.get_icon(\n-                    &line_type,\n-                    &name,\n-                    double_extension,\n-                    extension,\n-                )\n-            });\n-\n-        Ok(TreeLine {\n-            bid,\n-            parent_bid: self.parent_id,\n-            left_branches: vec![false; self.depth as usize].into_boxed_slice(),\n-            depth: self.depth,\n-            icon,\n-            name,\n-            subpath,\n-            path: self.path.clone(),\n-            line_type,\n-            has_error,\n-            nb_kept_children: self.nb_kept_children as usize,\n-            unlisted,\n-            score: self.score,\n-            direct_match: self.direct_match,\n-            sum: None,\n-            metadata,\n-            git_status: None,\n-        })\n-    }\n }\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -19,7 +19,9 @@ use {\n     std::{\n         collections::{BinaryHeap, VecDeque},\n         fs,\n-        path::PathBuf,\n+        path::{\n+            PathBuf,\n+        },\n         result::Result,\n         time::{Duration, Instant},\n     },\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -58,6 +60,7 @@ pub struct TreeBuilder<'c> {\n     targeted_size: usize, // the number of lines we should fill (height of the screen)\n     blines: Arena<BLine>,\n     root_id: BId,\n+    subpath_offset: usize,\n     total_search: bool,\n     git_ignorer: GitIgnorer,\n     line_status_computer: Option<LineStatusComputer>,\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -76,6 +79,11 @@ impl<'c> TreeBuilder<'c> {\n         con: &'c AppContext,\n     ) -> Result<TreeBuilder<'c>, TreeBuildError> {\n         let mut blines = Arena::new();\n+        let subpath_offset = path\n+            .as_os_str()\n+            .as_bytes()\n+            .len()\n+            + 1; // +1 for the separator\n         let mut git_ignorer = time!(GitIgnorer::default());\n         let root_ignore_chain = git_ignorer.root_chain(&path);\n         let line_status_computer = if options.filter_by_git_status || options.show_git_file_info {\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -104,6 +112,7 @@ impl<'c> TreeBuilder<'c> {\n             targeted_size,\n             blines,\n             root_id,\n+            subpath_offset,\n             total_search: true, // we'll set it to false if we don't look at all children\n             git_ignorer,\n             line_status_computer,\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -116,7 +125,7 @@ impl<'c> TreeBuilder<'c> {\n     }\n \n     /// Return a bline if the dir_entry directly matches the options and there's no error\n-    fn make_line(\n+    fn make_bline(\n         &mut self,\n         parent_id: BId,\n         e: &fs::DirEntry,\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -124,6 +133,8 @@ impl<'c> TreeBuilder<'c> {\n     ) -> Option<BLine> {\n         let name = e.file_name();\n         if name.is_empty() {\n+            // this should not really happen as the only path with an empty name is the root\n+            // and we don't call this function for the tree root\n             self.report.error_count += 1;\n             return None;\n         }\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -139,7 +150,11 @@ impl<'c> TreeBuilder<'c> {\n             self.report.hidden_count += 1;\n             return None;\n         }\n-        let name = name.to_string_lossy();\n+        let Some(name) = name.to_str() else {\n+            warn!(\"invalid utf8 file name: {:?}\", name);\n+            self.report.error_count += 1;\n+            return None;\n+        };\n         let mut has_match = true;\n         let mut score = 10000 - i32::from(depth); // we dope less deep entries\n         let file_type = match e.file_type() {\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -149,15 +164,16 @@ impl<'c> TreeBuilder<'c> {\n                 return None;\n             }\n         };\n-        let parent_subpath = &self.blines[parent_id].subpath;\n-        let subpath = if !parent_subpath.is_empty() {\n-            format!(\"{}/{}\", parent_subpath, &name)\n-        } else {\n-            name.to_string()\n+\n+        let subpath_bytes = &path\n+            .as_os_str()\n+            .as_bytes()[self.subpath_offset..];\n+        let subpath = unsafe {\n+            std::str::from_utf8_unchecked(subpath_bytes)\n         };\n         let candidate = Candidate {\n-            name: &name,\n-            subpath: &subpath,\n+            name,\n+            subpath,\n             path: &path,\n             regular_file: file_type.is_file(),\n         };\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -169,7 +185,6 @@ impl<'c> TreeBuilder<'c> {\n             has_match = false;\n             false\n         };\n-        let name = name.to_string();\n         if has_match && self.options.filter_by_git_status {\n             if let Some(line_status_computer) = &self.line_status_computer {\n                 if !line_status_computer.is_interesting(&path) {\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -197,7 +212,7 @@ impl<'c> TreeBuilder<'c> {\n             let parent_chain = &self.blines[parent_id].git_ignore_chain;\n             if !self\n                 .git_ignorer\n-                .accepts(parent_chain, &path, &name, file_type.is_dir())\n+                .accepts(parent_chain, &path, name, file_type.is_dir())\n             {\n                 if special_handling.show != Directive::Always {\n                     return None;\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -208,8 +223,6 @@ impl<'c> TreeBuilder<'c> {\n             parent_id: Some(parent_id),\n             path,\n             depth,\n-            subpath,\n-            name,\n             file_type,\n             children: None,\n             next_child_idx: 0,\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -223,6 +236,8 @@ impl<'c> TreeBuilder<'c> {\n         })\n     }\n \n+    /// Fill the bline's children vec of blines.\n+    ///\n     /// Return true when there are direct matches among children\n     fn load_children(&mut self, bid: BId) -> bool {\n         let mut has_child_match = false;\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -232,7 +247,7 @@ impl<'c> TreeBuilder<'c> {\n                 let child_depth = self.blines[bid].depth + 1;\n                 let mut lines = Vec::new();\n                 for e in entries.flatten() {\n-                    if let Some(line) = self.make_line(bid, &e, child_depth) {\n+                    if let Some(line) = self.make_bline(bid, &e, child_depth) {\n                         lines.push(line);\n                     }\n                 }\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -254,9 +269,9 @@ impl<'c> TreeBuilder<'c> {\n                 }\n                 children.sort_by(|&a, &b| {\n                     self.blines[a]\n-                        .name\n+                        .name()\n                         .to_lowercase()\n-                        .cmp(&self.blines[b].name.to_lowercase())\n+                        .cmp(&self.blines[b].name().to_lowercase())\n                 });\n                 self.blines[bid].children = Some(children);\n             }\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -428,6 +443,70 @@ impl<'c> TreeBuilder<'c> {\n         }\n     }\n \n+    fn make_tree_line(\n+        &self,\n+        bid: BId,\n+    ) -> Result<TreeLine, TreeBuildError> {\n+        let bline = &self.blines[bid];\n+        let line_type = TreeLineType::new(&bline.path, &bline.file_type);\n+        let unlisted = bline.children.as_ref()\n+            .map_or(0, |children| children.len() - bline.next_child_idx);\n+        let metadata = fs::symlink_metadata(&bline.path)\n+            .map_err(|_| TreeBuildError::FileNotFound {\n+                path: bline.path.to_string_lossy().to_string(),\n+            })?;\n+        let subpath_bytes = bline.path.as_os_str().as_bytes();\n+        let subpath = if self.subpath_offset > subpath_bytes.len() {\n+            // This should be the root line\n+            bline.path.to_string_lossy().to_string()\n+        } else {\n+            String::from_utf8(subpath_bytes[self.subpath_offset..].to_vec())\n+                .map_err(|_| TreeBuildError::InvalidUtf8 {\n+                    path: bline.path.to_string_lossy().to_string(),\n+                })?\n+        };\n+        let name = bline\n+            .path\n+            .file_name()\n+            .and_then(|os_str| os_str.to_str())\n+            .unwrap_or(\"\")\n+            .replace('\\n', \"\");\n+        let icon = self.con.icons.as_ref()\n+            .map(|icon_plugin| {\n+                let extension = TreeLine::extension_from_name(&name);\n+                let double_extension = extension\n+                    .and_then(|_| TreeLine::double_extension_from_name(&name));\n+                icon_plugin.get_icon(\n+                    &line_type,\n+                    &name,\n+                    double_extension,\n+                    extension,\n+                )\n+            });\n+\n+        Ok(TreeLine {\n+            bid,\n+            parent_bid: bline.parent_id,\n+            left_branches: vec![false; bline.depth as usize].into_boxed_slice(),\n+            depth: bline.depth,\n+            icon,\n+            name,\n+            subpath,\n+            path: bline.path.clone(),\n+            line_type,\n+            has_error: bline.has_error,\n+            nb_kept_children: bline.nb_kept_children as usize,\n+            unlisted,\n+            score: bline.score,\n+            direct_match: bline.direct_match,\n+            sum: None,\n+            metadata,\n+            git_status: None,\n+        })\n+\n+\n+    }\n+\n     /// make a tree from the builder's specific structure\n     fn take_as_tree(mut self, out_blines: &[BId]) -> Tree {\n         let mut lines: Vec<TreeLine> = Vec::new();\ndiff --git a/src/tree_build/builder.rs b/src/tree_build/builder.rs\n--- a/src/tree_build/builder.rs\n+++ b/src/tree_build/builder.rs\n@@ -437,7 +516,7 @@ impl<'c> TreeBuilder<'c> {\n                 if self.blines[*id].can_enter() && self.blines[*id].children.is_none() {\n                     self.load_children(*id);\n                 }\n-                if let Ok(tree_line) = self.blines[*id].to_tree_line(*id, self.con) {\n+                if let Ok(tree_line) = self.make_tree_line(*id) {\n                     lines.push(tree_line);\n                 } else {\n                     // I guess the file went missing during tree computation\n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -355,9 +361,9 @@ dependencies = [\n \n [[package]]\n name = \"clap_builder\"\n-version = \"4.5.2\"\n+version = \"4.5.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ae129e2e766ae0ec03484e609954119f123cc1fe650337e155d03b022f24f7b4\"\n+checksum = \"c1c09dd5ada6c6c78075d6fd0da3f90d8080651e2d6cc8eb2f1aaa4034ced708\"\n dependencies = [\n  \"anstream\",\n  \"anstyle\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1635,9 +1640,9 @@ dependencies = [\n \n [[package]]\n name = \"quick-xml\"\n-version = \"0.31.0\"\n+version = \"0.32.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1004a344b30a54e2ee58d66a71b32d2db2feb0a31f9a2d302bf0536f15de2a33\"\n+checksum = \"1d3a6e5838b60e0e8fa7a43f22ade549a37d61f8bdbe636d0d7816191de969c2\"\n dependencies = [\n  \"memchr\",\n ]\n",
        "problem_statement": "Version 1.37.0 image preview works fine, but 1.38.0 and 1.39.0 is broken. MacOS; WezTerm;\n# 1.37\r\n<img width=\"1105\" alt=\"broot_version_1 37\" src=\"https://github.com/Canop/broot/assets/87678394/f40a345a-6b24-4f05-b573-4294402f8fbf\">\r\n\r\n# 1.39\r\n<img width=\"1109\" alt=\"broot_version_1 39\" src=\"https://github.com/Canop/broot/assets/87678394/35625369-53f7-4382-a5c3-6d94a2827a08\">\r\n\n",
        "hints_text": "",
        "created_at": "2024-07-04T20:00:04Z",
        "version": "1.39"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 882,
        "instance_id": "Canop__broot-882",
        "issue_numbers": [
            "855"
        ],
        "base_commit": "8f50c72f58fbfd48d686aeb6ed1b1e79b5069204",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -1,5 +1,6 @@\n ### next\n - fix build on Android - thanks @dead10ck\n+- `:open_trash` shows the content of the trash. Other new internals & verbs: `:delete_trashed_file`, `:restore_trashed_file`, `:purge_trash` - Fix #855\n \n ### v1.38.0 - 2024-05-04\n <a name=\"v1.38.0\"></a>\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -512,6 +512,12 @@ impl App {\n                     self.mut_panel().clear_input_invocation(con);\n                 }\n             }\n+            Message(md) => {\n+                if is_input_invocation {\n+                    self.mut_panel().clear_input_invocation(con);\n+                }\n+                self.mut_panel().set_message(md);\n+            }\n             Launch(launchable) => {\n                 self.launch_at_end = Some(*launchable);\n                 self.quitting = true;\ndiff --git a/src/app/cmd_result.rs b/src/app/cmd_result.rs\n--- a/src/app/cmd_result.rs\n+++ b/src/app/cmd_result.rs\n@@ -42,6 +42,7 @@ pub enum CmdResult {\n     },\n     HandleInApp(Internal), // command must be handled at the app level\n     Keep,\n+    Message(String),\n     Launch(Box<Launchable>),\n     NewPanel {\n         state: Box<dyn PanelState>,\ndiff --git a/src/app/cmd_result.rs b/src/app/cmd_result.rs\n--- a/src/app/cmd_result.rs\n+++ b/src/app/cmd_result.rs\n@@ -118,6 +119,7 @@ impl fmt::Debug for CmdResult {\n                 CmdResult::DisplayError(_) => \"DisplayError\",\n                 CmdResult::ExecuteSequence{ .. } => \"ExecuteSequence\",\n                 CmdResult::Keep => \"Keep\",\n+                CmdResult::Message { .. } => \"Message\",\n                 CmdResult::Launch(_) => \"Launch\",\n                 CmdResult::NewState { .. } => \"NewState\",\n                 CmdResult::NewPanel { .. } => \"NewPanel\",\ndiff --git a/src/app/panel_state.rs b/src/app/panel_state.rs\n--- a/src/app/panel_state.rs\n+++ b/src/app/panel_state.rs\n@@ -157,6 +157,41 @@ pub trait PanelState {\n                 validate_purpose: false,\n                 panel_ref: PanelReference::Active,\n             },\n+            #[cfg(feature = \"trash\")]\n+            Internal::purge_trash => {\n+                let res = trash::os_limited::list()\n+                    .and_then(|items| {\n+                        trash::os_limited::purge_all(items)\n+                    });\n+                match res {\n+                    Ok(()) => CmdResult::RefreshState { clear_cache: false },\n+                    Err(e) => CmdResult::DisplayError(format!(\"{e}\")),\n+                }\n+            }\n+            #[cfg(feature = \"trash\")]\n+            Internal::open_trash => {\n+                let trash_state = crate::trash::TrashState::new(\n+                    self.tree_options(),\n+                    con,\n+                );\n+                match trash_state {\n+                    Ok(state) => {\n+                        let bang = input_invocation\n+                            .map(|inv| inv.bang)\n+                            .unwrap_or(internal_exec.bang);\n+                        if bang && cc.app.preview_panel.is_none() {\n+                            CmdResult::NewPanel {\n+                                state: Box::new(state),\n+                                purpose: PanelPurpose::None,\n+                                direction: HDir::Right,\n+                            }\n+                        } else {\n+                            CmdResult::new_state(Box::new(state))\n+                        }\n+                    }\n+                    Err(e) => CmdResult::DisplayError(format!(\"{e}\")),\n+                }\n+            }\n             #[cfg(unix)]\n             Internal::filesystems => {\n                 let fs_state = crate::filesystems::FilesystemState::new(\ndiff --git a/src/app/standard_status.rs b/src/app/standard_status.rs\n--- a/src/app/standard_status.rs\n+++ b/src/app/standard_status.rs\n@@ -223,10 +223,13 @@ impl<'s> StandardStatusBuilder<'s> {\n                 }\n             }\n             PanelStateType::Fs => {\n-                warn!(\"TODO fs status\");\n+                // TODO fs status\n             }\n             PanelStateType::Stage => {\n-                warn!(\"TODO stage status\");\n+                // TODO stage status\n+            }\n+            PanelStateType::Trash => {\n+                // TODO stage status ? Maybe the shortcuts to restore or delete ?\n             }\n         }\n         parts.to_status(self.width)\ndiff --git a/src/app/state_type.rs b/src/app/state_type.rs\n--- a/src/app/state_type.rs\n+++ b/src/app/state_type.rs\n@@ -8,9 +8,6 @@ use {\n #[serde(rename_all = \"snake_case\")]\n pub enum PanelStateType {\n \n-    /// standard browsing tree\n-    Tree,\n-\n     /// filesystems\n     Fs,\n \ndiff --git a/src/app/state_type.rs b/src/app/state_type.rs\n--- a/src/app/state_type.rs\n+++ b/src/app/state_type.rs\n@@ -22,4 +19,10 @@ pub enum PanelStateType {\n \n     /// stage panel, never alone on screen\n     Stage,\n+\n+    /// content of the trash\n+    Trash,\n+\n+    /// standard browsing tree\n+    Tree,\n }\ndiff --git a/src/command/panel_input.rs b/src/command/panel_input.rs\n--- a/src/command/panel_input.rs\n+++ b/src/command/panel_input.rs\n@@ -377,8 +377,6 @@ impl PanelInput {\n         let raw = self.input_field.get_content();\n         let parts = CommandParts::from(raw.clone());\n \n-        info!(\"parts: {:#?}\", parts);\n-\n         let verb = if self.is_key_allowed_for_verb(key, mode) {\n             self.find_key_verb(\n                 key,\ndiff --git a/src/display/matched_string.rs b/src/display/matched_string.rs\n--- a/src/display/matched_string.rs\n+++ b/src/display/matched_string.rs\n@@ -77,7 +77,7 @@ impl<'a, 'w> MatchedString<'a> {\n         let mut width = self.width();\n         for (idx, c) in self.string.char_indices() {\n             if width <= max_width { break; }\n-            break_idx = idx;\n+            break_idx = idx + c.len_utf8();\n             let char_width = c.width().unwrap_or(0);\n             if char_width > width {\n                 warn!(\"inconsistent char/str widths\");\ndiff --git a/src/errors.rs b/src/errors.rs\n--- a/src/errors.rs\n+++ b/src/errors.rs\n@@ -32,6 +32,7 @@ custom_error! {pub ProgramError\n     UnprintableFile = \"File can't be printed\", // has characters that can't be printed without escaping\n     Unrecognized {token: String} = \"Unrecognized: {token}\",\n     ZeroLenFile = \"File seems empty\",\n+    Trash {message: String} = \"Trash error: {message}\",\n }\n \n custom_error! {pub ShellInstallError\ndiff --git a/src/lib.rs b/src/lib.rs\n--- a/src/lib.rs\n+++ b/src/lib.rs\n@@ -30,6 +30,7 @@ pub mod skin;\n pub mod syntactic;\n pub mod task_sync;\n pub mod terminal;\n+pub mod trash;\n pub mod tree;\n pub mod tree_build;\n pub mod verb;\ndiff --git /dev/null b/src/trash/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/trash/mod.rs\n@@ -0,0 +1,6 @@\n+\n+#[cfg(feature = \"trash\")]\n+mod trash_state;\n+\n+#[cfg(feature = \"trash\")]\n+pub use trash_state::*;\ndiff --git /dev/null b/src/trash/trash_state.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/trash/trash_state.rs\n@@ -0,0 +1,583 @@\n+use {\n+    crate::{\n+        app::*,\n+        command::*,\n+        display::*,\n+        errors::ProgramError,\n+        pattern::*,\n+        tree::TreeOptions,\n+        verb::*,\n+    },\n+    crokey::crossterm::{\n+        cursor,\n+        style::Color,\n+        QueueableCommand,\n+    },\n+    std::{\n+        path::Path,\n+    },\n+    termimad::{\n+        minimad::Alignment,\n+        *,\n+    },\n+    trash::{\n+        self as trash_crate,\n+        TrashItem,\n+    },\n+    unicode_width::UnicodeWidthStr,\n+};\n+\n+struct FilteredContent {\n+    pattern: Pattern,\n+    items: Vec<TrashItem>,\n+    selection_idx: Option<usize>,\n+}\n+\n+/// an application state showing the content of the trash\n+pub struct TrashState {\n+    items: Vec<TrashItem>,\n+    selection_idx: Option<usize>,\n+    scroll: usize,\n+    page_height: usize,\n+    tree_options: TreeOptions,\n+    filtered: Option<FilteredContent>,\n+    mode: Mode,\n+}\n+\n+impl TrashState {\n+    /// create a state listing the content of the system's trash\n+    pub fn new(\n+        tree_options: TreeOptions,\n+        con: &AppContext,\n+    ) -> Result<TrashState, ProgramError> {\n+        let items = trash::os_limited::list()\n+            .map_err(|e| ProgramError::Trash { message: e.to_string() })?;\n+        let selection_idx = None;\n+        Ok(TrashState {\n+            items,\n+            selection_idx,\n+            scroll: 0,\n+            page_height: 0,\n+            tree_options,\n+            filtered: None,\n+            mode: con.initial_mode(),\n+        })\n+    }\n+    pub fn count(&self) -> usize {\n+        self.filtered\n+            .as_ref()\n+            .map(|f| f.items.len())\n+            .unwrap_or_else(|| self.items.len().into())\n+    }\n+    pub fn try_scroll(\n+        &mut self,\n+        cmd: ScrollCommand,\n+    ) -> bool {\n+        let old_scroll = self.scroll;\n+        self.scroll = cmd.apply(self.scroll, self.count(), self.page_height);\n+        // move selection to an item in view\n+        if let Some(f) = self.filtered.as_mut() {\n+            if let Some(idx) = f.selection_idx {\n+                if idx < self.scroll {\n+                    f.selection_idx = Some(self.scroll);\n+                } else if idx >= self.scroll + self.page_height {\n+                    f.selection_idx = Some(self.scroll + self.page_height - 1);\n+                }\n+            }\n+        } else {\n+            if let Some(idx) = self.selection_idx {\n+                if idx < self.scroll {\n+                    self.selection_idx = Some(self.scroll);\n+                } else if idx >= self.scroll + self.page_height {\n+                    self.selection_idx = Some(self.scroll + self.page_height - 1);\n+                }\n+            }\n+        }\n+        self.scroll != old_scroll\n+    }\n+    /// If there's a selection, adjust the scroll to make it visible\n+    pub fn show_selection(&mut self) {\n+        let selection_idx = if let Some(f) = self.filtered.as_ref() {\n+            f.selection_idx\n+        } else {\n+            self.selection_idx\n+        };\n+        if let Some(idx) = selection_idx {\n+            if idx < self.scroll {\n+                self.scroll = idx;\n+            } else if idx >= self.scroll + self.page_height {\n+                self.scroll = idx - self.page_height + 1;\n+            }\n+        }\n+    }\n+\n+    /// change the selection\n+    fn move_line(\n+        &mut self,\n+        internal_exec: &InternalExecution,\n+        input_invocation: Option<&VerbInvocation>,\n+        dir: i32, // -1 for up, 1 for down\n+        cycle: bool,\n+    ) -> CmdResult {\n+        let count = get_arg(input_invocation, internal_exec, 1);\n+        let dec = dir * count;\n+        let selection_idx;\n+        if let Some(f) = self.filtered.as_mut() {\n+            selection_idx = if let Some(idx) = f.selection_idx {\n+                Some(move_sel(idx, f.items.len(), dec, cycle))\n+            } else if !f.items.is_empty() {\n+                Some(if dec > 0 { 0 } else { f.items.len() - 1 })\n+            } else {\n+                None\n+            };\n+            f.selection_idx = selection_idx;\n+        } else {\n+            selection_idx = if let Some(idx) = self.selection_idx {\n+                Some(move_sel(idx, self.items.len(), dec, cycle))\n+            } else if !self.items.is_empty() {\n+                Some(if dec > 0 { 0 } else { self.items.len() - 1 })\n+            } else {\n+                None\n+            };\n+            self.selection_idx = selection_idx;\n+        }\n+        if let Some(selection_idx) = selection_idx {\n+            if selection_idx < self.scroll {\n+                self.scroll = selection_idx;\n+            } else if selection_idx >= self.scroll + self.page_height {\n+                self.scroll = selection_idx + 1 - self.page_height;\n+            }\n+        }\n+        CmdResult::Keep\n+    }\n+\n+    fn selected_item(&self) -> Option<&TrashItem> {\n+        if let Some(f) = self.filtered.as_ref() {\n+            f.selection_idx.map(|idx| &f.items[idx])\n+        } else {\n+            self.selection_idx.map(|idx| &self.items[idx])\n+        }\n+    }\n+\n+    fn take_selected_item(&mut self) -> Option<TrashItem> {\n+        if let Some(f) = self.filtered.as_mut() {\n+            if let Some(idx) = f.selection_idx {\n+                let item = f.items.remove(idx);\n+                if f.items.is_empty() {\n+                    f.selection_idx = None;\n+                } else if idx == f.items.len() {\n+                    f.selection_idx = Some(idx - 1);\n+                }\n+                Some(item)\n+            } else {\n+                None\n+            }\n+        } else {\n+            if let Some(idx) = self.selection_idx {\n+                let item = self.items.remove(idx);\n+                if self.items.is_empty() {\n+                    self.selection_idx = None;\n+                } else if idx == self.items.len() {\n+                    self.selection_idx = Some(idx - 1);\n+                }\n+                Some(item)\n+            } else {\n+                None\n+            }\n+        }\n+    }\n+}\n+\n+impl PanelState for TrashState {\n+    fn get_type(&self) -> PanelStateType {\n+        PanelStateType::Trash\n+    }\n+\n+    fn set_mode(\n+        &mut self,\n+        mode: Mode,\n+    ) {\n+        self.mode = mode;\n+    }\n+\n+    fn get_mode(&self) -> Mode {\n+        self.mode\n+    }\n+\n+    /// We don't want to expose path to verbs because you can't\n+    /// normally access files in the trash\n+    fn selected_path(&self) -> Option<&Path> {\n+        None\n+    }\n+\n+    fn tree_options(&self) -> TreeOptions {\n+        self.tree_options.clone()\n+    }\n+\n+    fn with_new_options(\n+        &mut self,\n+        _screen: Screen,\n+        change_options: &dyn Fn(&mut TreeOptions) -> &'static str,\n+        _in_new_panel: bool, // TODO open tree if true\n+        _con: &AppContext,\n+    ) -> CmdResult {\n+        change_options(&mut self.tree_options);\n+        CmdResult::Keep\n+    }\n+\n+    /// We don't want to expose path to verbs because you can't\n+    /// normally access files in the trash\n+    fn selection(&self) -> Option<Selection<'_>> {\n+        None\n+    }\n+\n+    fn refresh(\n+        &mut self,\n+        _screen: Screen,\n+        _con: &AppContext,\n+    ) -> Command {\n+        // minimal implementation. It would be better to keep filtering, and\n+        // also selection & scroll whenever possible\n+        if let Ok(items) = trash::os_limited::list() {\n+            self.items = items;\n+            self.selection_idx = None;\n+            self.scroll = 0;\n+        }\n+        Command::empty()\n+    }\n+\n+    fn on_pattern(\n+        &mut self,\n+        pattern: InputPattern,\n+        _app_state: &AppState,\n+        _con: &AppContext,\n+    ) -> Result<CmdResult, ProgramError> {\n+        if pattern.is_none() {\n+            if let Some(f) = self.filtered.take() {\n+                if let Some(idx) = f.selection_idx {\n+                    self.selection_idx = self.items\n+                        .iter()\n+                        .position(|m| m.id == f.items[idx].id);\n+                }\n+            }\n+        } else {\n+            let pattern = pattern.pattern;\n+            let mut best_score = 0;\n+            let mut selection_idx = None;\n+            let mut items = Vec::new();\n+            for item in &self.items {\n+                let score = pattern.score_of_string(&item.name).unwrap_or(0)\n+                    + pattern\n+                        .score_of_string(&item.original_parent.to_string_lossy())\n+                        .unwrap_or(0);\n+                if score > 0 {\n+                    items.push(item.clone());\n+                    if score > best_score {\n+                        best_score = score;\n+                        selection_idx = Some(items.len() - 1);\n+                    }\n+                }\n+            }\n+            self.filtered = Some(FilteredContent {\n+                pattern,\n+                items,\n+                selection_idx,\n+            });\n+        }\n+        self.show_selection();\n+        Ok(CmdResult::Keep)\n+    }\n+\n+    fn display(\n+        &mut self,\n+        w: &mut W,\n+        disc: &DisplayContext,\n+    ) -> Result<(), ProgramError> {\n+        let title_parent = \"Original parent\";\n+        let title_name = \"Deleted file name\";\n+        let area = &disc.state_area;\n+        let con = &disc.con;\n+        self.page_height = area.height as usize - 2;\n+        let (items, selection_idx) = if let Some(filtered) = &self.filtered {\n+            (filtered.items.as_slice(), filtered.selection_idx)\n+        } else {\n+            (self.items.as_slice(), self.selection_idx)\n+        };\n+        let scrollbar = area.scrollbar(self.scroll, items.len());\n+        //- style preparation\n+        let styles = &disc.panel_skin.styles;\n+        let selection_bg = styles\n+            .selected_line\n+            .get_bg()\n+            .unwrap_or(Color::AnsiValue(240));\n+        let match_style = &styles.char_match;\n+        let mut selected_match_style = styles.char_match.clone();\n+        selected_match_style.set_bg(selection_bg);\n+        let border_style = &styles.help_table_border;\n+        let mut selected_border_style = styles.help_table_border.clone();\n+        selected_border_style.set_bg(selection_bg);\n+        //- width computations\n+        let width = area.width as usize;\n+        let optimal_parent_width = items\n+            .iter()\n+            .map(|m| m.original_parent.to_string_lossy().width())\n+            .max()\n+            .unwrap_or(0)\n+            .max(title_parent.len());\n+        let optimal_name_width = items\n+            .iter()\n+            .map(|m| m.name.width())\n+            .max()\n+            .unwrap_or(0)\n+            .max(title_name.len());\n+        let available_width = if con.show_selection_mark {\n+            width - 1\n+        } else {\n+            width\n+        };\n+        let mut w_parent = optimal_parent_width;\n+        let mut w_name = optimal_name_width;\n+        if w_name + w_parent > available_width {\n+            w_name = (width * 2 / 3).min(optimal_name_width);\n+            w_parent = width - w_name;\n+        }\n+        info!(\"optimal_parent_width: {}, optimal_name_width: {}\", optimal_parent_width, optimal_name_width);\n+        info!(\"available_width: {}, w_parent: {}, w_name: {}\", available_width, w_parent, w_name);\n+        //- titles\n+        w.queue(cursor::MoveTo(area.left, area.top))?;\n+        let mut cw = CropWriter::new(w, width);\n+        if con.show_selection_mark {\n+            cw.queue_char(&styles.default, ' ')?;\n+        }\n+        let title = if title_parent.len() > w_parent {\n+            &title_parent[..w_parent]\n+        } else {\n+            title_parent\n+        };\n+        cw.queue_g_string(&styles.default, format!(\"{:^w_parent$}\", title))?;\n+        cw.queue_char(border_style, '\u2502')?;\n+        let title = if title_name.len() > w_name {\n+            &title_name[..w_name]\n+        } else {\n+            title_name\n+        };\n+        cw.queue_g_string(&styles.default, format!(\"{:^w_name$}\", title))?;\n+        cw.fill(border_style, &SPACE_FILLING)?;\n+        //- horizontal line\n+        w.queue(cursor::MoveTo(area.left, 1 + area.top))?;\n+        let mut cw = CropWriter::new(w, width);\n+        if con.show_selection_mark {\n+            cw.queue_char(&styles.default, ' ')?;\n+        }\n+        cw.queue_g_string(border_style, format!(\"{:\u2500>width$}\", '\u253c', width = w_parent + 1))?;\n+        cw.fill(border_style, &BRANCH_FILLING)?;\n+        //- content\n+        let mut idx = self.scroll;\n+        for y in 2..area.height {\n+            w.queue(cursor::MoveTo(area.left, y + area.top))?;\n+            let selected = selection_idx == Some(idx);\n+            let mut cw = CropWriter::new(w, width - 1); // -1 for scrollbar\n+            let txt_style = if selected {\n+                &styles.selected_line\n+            } else {\n+                &styles.default\n+            };\n+            if let Some(item) = items.get(idx) {\n+                let match_style = if selected {\n+                    &selected_match_style\n+                } else {\n+                    match_style\n+                };\n+                let border_style = if selected {\n+                    &selected_border_style\n+                } else {\n+                    border_style\n+                };\n+                if con.show_selection_mark {\n+                    cw.queue_char(txt_style, if selected { '\u25b6' } else { ' ' })?;\n+                }\n+                // parent\n+                let s = item.original_parent.to_string_lossy();\n+                let mut matched_string = MatchedString::new(\n+                    self.filtered\n+                        .as_ref()\n+                        .and_then(|f| f.pattern.search_string(&s)),\n+                    &s,\n+                    txt_style,\n+                    match_style,\n+                );\n+                if s.width() > w_parent {\n+                    //info!(\"CUT w_parent: {}, s.width(): {}\", w_parent, s.width());\n+                    cw.queue_char(txt_style, '\u2026')?;\n+                    matched_string.cut_left_to_fit(w_parent - 1);\n+                    //info!(\" cut string width: {}\", matched_string.string.width());\n+                    matched_string.queue_on(&mut cw)?;\n+                } else {\n+                    matched_string.fill(w_parent, Alignment::Left);\n+                    matched_string.queue_on(&mut cw)?;\n+                }\n+                cw.queue_char(border_style, '\u2502')?;\n+                // name\n+                let s = &item.name;\n+                let mut matched_string = MatchedString::new(\n+                    self.filtered\n+                        .as_ref()\n+                        .and_then(|f| f.pattern.search_string(s)),\n+                    s,\n+                    txt_style,\n+                    match_style,\n+                );\n+                matched_string.fill(w_name, Alignment::Left);\n+                matched_string.queue_on(&mut cw)?;\n+                idx += 1;\n+            } else {\n+                if con.show_selection_mark {\n+                    cw.queue_char(&styles.default, ' ')?;\n+                }\n+                cw.queue_g_string(border_style, format!(\"{: >width$}\", '\u2502', width = w_parent + 1))?;\n+            }\n+            cw.fill(txt_style, &SPACE_FILLING)?;\n+            let scrollbar_style = if ScrollCommand::is_thumb(y, scrollbar) {\n+                &styles.scrollbar_thumb\n+            } else {\n+                &styles.scrollbar_track\n+            };\n+            scrollbar_style.queue_str(w, \"\u2590\")?;\n+        }\n+        Ok(())\n+    }\n+\n+    fn on_internal(\n+        &mut self,\n+        w: &mut W,\n+        invocation_parser: Option<&InvocationParser>,\n+        internal_exec: &InternalExecution,\n+        input_invocation: Option<&VerbInvocation>,\n+        trigger_type: TriggerType,\n+        app_state: &mut AppState,\n+        cc: &CmdContext,\n+    ) -> Result<CmdResult, ProgramError> {\n+        use Internal::*;\n+        Ok(match internal_exec.internal {\n+            Internal::restore_trashed_file => {\n+                if let Some(item) = self.selected_item() {\n+                    match trash_crate::os_limited::restore_all([item.clone()]) {\n+                        Ok(_) => {\n+                            let path = item.original_path();\n+                            self.take_selected_item();\n+                            CmdResult::Message(format!(\n+                                \"File *{}* restored\",\n+                                path.to_string_lossy(),\n+                            ))\n+                        }\n+                        Err(trash_crate::Error::RestoreCollision { path, .. }) => {\n+                            CmdResult::DisplayError(format!(\n+                                \"collision: *{}* already exists\",\n+                                path.to_string_lossy(),\n+                            ))\n+                        }\n+                        Err(e) => {\n+                            CmdResult::DisplayError(format!(\n+                                \"restore failed: {}\",\n+                                e.to_string(),\n+                            ))\n+                        }\n+                    }\n+                } else {\n+                    CmdResult::DisplayError(\n+                        \"an item must be selected\".to_string(),\n+                    )\n+                }\n+            }\n+            Internal::delete_trashed_file => {\n+                if let Some(item) = self.selected_item() {\n+                    match trash_crate::os_limited::purge_all([item.clone()]) {\n+                        Ok(_) => {\n+                            let path = item.original_path();\n+                            self.take_selected_item();\n+                            CmdResult::Message(format!(\n+                                \"File *{}* restored\",\n+                                path.to_string_lossy(),\n+                            ))\n+                        }\n+                        Err(e) => {\n+                            CmdResult::DisplayError(format!(\n+                                \"deletion failed: {}\",\n+                                e.to_string(),\n+                            ))\n+                        }\n+                    }\n+                } else {\n+                    CmdResult::DisplayError(\n+                        \"an item must be selected\".to_string(),\n+                    )\n+                }\n+            }\n+            Internal::back => {\n+                if let Some(f) = self.filtered.take() {\n+                    if let Some(idx) = f.selection_idx {\n+                        self.selection_idx = self.items\n+                            .iter()\n+                            .position(|m| m.id == f.items[idx].id);\n+                    }\n+                    self.show_selection();\n+                    CmdResult::Keep\n+                } else {\n+                    CmdResult::PopState\n+                }\n+            }\n+            Internal::line_down => self.move_line(internal_exec, input_invocation, 1, true),\n+            Internal::line_up => self.move_line(internal_exec, input_invocation, -1, true),\n+            Internal::line_down_no_cycle => {\n+                self.move_line(internal_exec, input_invocation, 1, false)\n+            }\n+            Internal::line_up_no_cycle => {\n+                self.move_line(internal_exec, input_invocation, -1, false)\n+            }\n+            Internal::open_stay => {\n+                // it would probably be a good idea to bind enter to restore_trash_file ?\n+                CmdResult::DisplayError(\"can't open a file from the trash\".to_string())\n+            }\n+            Internal::panel_left_no_open => CmdResult::HandleInApp(Internal::panel_left_no_open),\n+            Internal::panel_right_no_open => CmdResult::HandleInApp(Internal::panel_right_no_open),\n+            Internal::page_down => {\n+                if !self.try_scroll(ScrollCommand::Pages(1)) {\n+                    self.selection_idx = Some(self.count() - 1);\n+                }\n+                CmdResult::Keep\n+            }\n+            Internal::page_up => {\n+                if !self.try_scroll(ScrollCommand::Pages(-1)) {\n+                    self.selection_idx = Some(0);\n+                }\n+                CmdResult::Keep\n+            }\n+            open_leave => CmdResult::PopStateAndReapply,\n+            _ => self.on_internal_generic(\n+                w,\n+                invocation_parser,\n+                internal_exec,\n+                input_invocation,\n+                trigger_type,\n+                app_state,\n+                cc,\n+            )?,\n+        })\n+    }\n+\n+    fn on_click(\n+        &mut self,\n+        _x: u16,\n+        y: u16,\n+        _screen: Screen,\n+        _con: &AppContext,\n+    ) -> Result<CmdResult, ProgramError> {\n+        if y >= 2 {\n+            let y = y as usize - 2 + self.scroll;\n+            if y < self.items.len().into() {\n+                self.selection_idx = Some(y);\n+            }\n+        }\n+        Ok(CmdResult::Keep)\n+    }\n+}\ndiff --git a/src/verb/internal.rs b/src/verb/internal.rs\n--- a/src/verb/internal.rs\n+++ b/src/verb/internal.rs\n@@ -96,6 +96,7 @@ Internals! {\n     open_staging_area: \"open the staging area\" false,\n     open_stay: \"open file or directory according to OS (stay in broot)\" true,\n     open_stay_filter: \"display the directory, keeping the current pattern\" true,\n+    open_trash: \"show the content of the trash\" false,\n     page_down: \"scroll one page down\" false,\n     page_up: \"scroll one page up\" false,\n     panel_left: \"focus or open panel on left\" false,\ndiff --git a/src/verb/internal.rs b/src/verb/internal.rs\n--- a/src/verb/internal.rs\n+++ b/src/verb/internal.rs\n@@ -114,6 +115,9 @@ Internals! {\n     print_tree: \"print tree and leaves broot\" true,\n     quit: \"quit Broot\" false,\n     refresh: \"refresh tree and clear size cache\" false,\n+    delete_trashed_file: \"irreversibly delete a file which is in the trash\" false,\n+    restore_trashed_file: \"restore a file which is in the trash\" false,\n+    purge_trash: \"irreversibly delete the trash's content\" false,\n     root_down: \"move tree root down\" true,\n     root_up: \"move tree root up\" true,\n     select: \"select a file by path\" true,\ndiff --git a/src/verb/verb_store.rs b/src/verb/verb_store.rs\n--- a/src/verb/verb_store.rs\n+++ b/src/verb/verb_store.rs\n@@ -147,6 +147,20 @@ impl VerbStore {\n             StayInBroot,\n         )\n             .with_shortcut(\"cpp\");\n+        #[cfg(feature = \"trash\")]\n+        self.add_internal(trash);\n+        #[cfg(feature = \"trash\")]\n+        self.add_internal(open_trash)\n+            .with_shortcut(\"ot\");\n+        #[cfg(feature = \"trash\")]\n+        self.add_internal(restore_trashed_file)\n+            .with_shortcut(\"rt\");\n+        #[cfg(feature = \"trash\")]\n+        self.add_internal(delete_trashed_file)\n+            .with_shortcut(\"dt\");\n+        #[cfg(feature = \"trash\")]\n+        self.add_internal(purge_trash)\n+            .with_shortcut(\"pt\");\n         #[cfg(unix)]\n         self.add_internal(filesystems)\n             .with_shortcut(\"fs\");\ndiff --git a/src/verb/verb_store.rs b/src/verb/verb_store.rs\n--- a/src/verb/verb_store.rs\n+++ b/src/verb/verb_store.rs\n@@ -311,7 +325,6 @@ impl VerbStore {\n         self.add_internal(toggle_perm).with_shortcut(\"perm\");\n         self.add_internal(toggle_sizes).with_shortcut(\"sizes\");\n         self.add_internal(toggle_trim_root);\n-        self.add_internal(trash);\n         self.add_internal(total_search).with_key(key!(ctrl-s));\n         self.add_internal(up_tree).with_shortcut(\"up\");\n \ndiff --git /dev/null b/website/docs/trash.md\nnew file mode 100644\n--- /dev/null\n+++ b/website/docs/trash.md\n@@ -0,0 +1,13 @@\n+\n+## Commands\n+\n+When broot is compiled with the `trash` feature enabled (which is done for Linux and Windows in standard distributions), some additional commands are available:\n+\n+* `:trash` : move the selected file to the trash\n+* `:open_trash` : display the content of the trash\n+* `:restore_trashed_file` : restore the file to its original location\n+* `:delete_trashed_file` : irreversibly delete a file which is in the trash\n+* `:purge_trash` : irreversibly delete the whole content of the trash\n+\n+`:restore_trashed_file` and `:delete_trashed_file` are only available when the trash content is displayed.\n+\ndiff --git a/website/mkdocs.yml b/website/mkdocs.yml\n--- a/website/mkdocs.yml\n+++ b/website/mkdocs.yml\n@@ -18,6 +18,7 @@ nav:\n                 - Verbs & Commands: verbs.md\n                 - Panels: panels.md\n                 - Staging Area: staging-area.md\n+                - Trash: trash.md\n                 - Tree export: export.md\n                 - Tips & tricks: tricks.md\n                 - Common file operations: file-operations.md\n",
        "test_patch": "diff --git a/bacon.toml b/bacon.toml\n--- a/bacon.toml\n+++ b/bacon.toml\n@@ -14,7 +14,7 @@ watch = [\"tests\", \"benches\", \"examples\"]\n command = [\n \t\"cargo\", \"check\",\n \t\"--color\", \"always\",\n-\t\"--features\", \"clipboard, kitty-csi-check\",\n+\t\"--features\", \"clipboard kitty-csi-check trash\",\n ]\n need_stdout = false\n watch = [\"benches\"]\n",
        "problem_statement": "Add features for Trash management\nAs broot now includes the `trashy` crate for the `:trash` internal (if i understand it correctly), it could make use of more of its features for managing the Trash.\r\n\r\nI would like to have commands to\r\n- `cd` into the system trash directory\r\n- restore files\r\n- clear the Trash directory\r\n\r\nThis way, broot could replace [trashy](https://github.com/oberblastmeister/trashy), which is not up-to-date anyway. \n",
        "hints_text": "It makes sense",
        "created_at": "2024-05-27T17:26:22Z",
        "version": "1.38"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 791,
        "instance_id": "Canop__broot-791",
        "issue_numbers": [
            "790"
        ],
        "base_commit": "4856d360c83ca0ac6a341afa577ec3e875de113c",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -1,5 +1,6 @@\n ### next\n - left and right keys mapped to verbs can be used when the input isn't empty, if they would have no effect to the input\n+- default_flags now accept long parameters, including --cmd - Fix #790\n \n ### v1.27.0 - 2023-1029\n <a name=\"v1.27.0\"></a>\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1148,9 +1148,9 @@ dependencies = [\n \n [[package]]\n name = \"lazy-regex\"\n-version = \"3.0.2\"\n+version = \"3.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e723bd417b2df60a0f6a2b6825f297ea04b245d4ba52b5a22cb679bdf58b05fa\"\n+checksum = \"5d12be4595afdf58bd19e4a9f4e24187da2a66700786ff660a418e9059937a4c\"\n dependencies = [\n  \"lazy-regex-proc_macros\",\n  \"once_cell\",\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -42,7 +42,7 @@ glob = \"0.3\"\n id-arena = \"2.2.1\"\n image = \"0.24\"\n include_dir = \"0.7\"\n-lazy-regex = \"3.0.2\"\n+lazy-regex = \"3.1.0\"\n libc = \"0.2\"\n memmap2 = \"0.6\"\n once_cell = \"1.7\" # waiting for https://github.com/rust-lang/rust/issues/109736\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -736,7 +736,7 @@ impl App {\n         self.screen.clear_bottom_right_char(w, &skin.focused)?;\n \n         #[cfg(windows)]\n-        if con.launch_args.cmd.is_some() {\n+        if con.cmd().is_some() {\n             // Powershell sends to broot a resize event after it was launched\n             // which interrupts its task queue. An easy fix is to wait for a\n             // few ms for the terminal to be stabilized.\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -749,7 +749,7 @@ impl App {\n             event_source.unblock(self.quitting);\n         }\n \n-        if let Some(raw_sequence) = &con.launch_args.cmd {\n+        if let Some(raw_sequence) = &con.cmd() {\n             self.tx_seqs\n                 .send(Sequence::new_local(raw_sequence.to_string()))\n                 .unwrap();\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -2,7 +2,7 @@ use {\n     super::*,\n     crate::{\n         cli::{Args, TriBool},\n-        conf::Conf,\n+        conf::*,\n         content_search,\n         errors::*,\n         file_sum,\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -41,6 +41,10 @@ pub struct AppContext {\n     /// all the arguments specified at launch\n     pub launch_args: Args,\n \n+    /// the \"launch arguments\" found in the default_flags\n+    /// of the config file(s)\n+    pub config_default_args: Option<Args>,\n+\n     /// the verbs in use (builtins and configured ones)\n     pub verb_store: VerbStore,\n \ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -101,6 +105,11 @@ impl AppContext {\n         verb_store: VerbStore,\n         config: &Conf,\n     ) -> Result<Self, ProgramError> {\n+        let config_default_args = config\n+            .default_flags\n+            .as_ref()\n+            .map(|flags| parse_default_flags(flags))\n+            .transpose()?;\n         let config_paths = config.files.clone();\n         let standard_status = StandardStatus::new(&verb_store);\n         let true_colors = if let Some(value) = config.true_colors {\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -143,9 +152,12 @@ impl AppContext {\n \n         // tree options are built from the default_flags\n         // found in the config file(s) (if any) then overridden\n-        // by the cli args\n+        // by the cli args (order is important)\n         let mut initial_tree_options = TreeOptions::default();\n         initial_tree_options.apply_config(config)?;\n+        if let Some(args) = &config_default_args {\n+            initial_tree_options.apply_launch_args(args);\n+        }\n         initial_tree_options.apply_launch_args(&launch_args);\n         if launch_args.color == TriBool::No {\n             initial_tree_options.show_selection_mark = true;\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -161,6 +173,7 @@ impl AppContext {\n             initial_tree_options,\n             config_paths,\n             launch_args,\n+            config_default_args,\n             verb_store,\n             special_paths,\n             search_modes,\ndiff --git a/src/app/app_context.rs b/src/app/app_context.rs\n--- a/src/app/app_context.rs\n+++ b/src/app/app_context.rs\n@@ -179,6 +192,13 @@ impl AppContext {\n             content_search_max_file_size,\n         })\n     }\n+    /// Return the --cmd argument, coming from the launch arguments (prefered)\n+    /// or from the default_flags parameter of a config file\n+    pub fn cmd(&self) -> Option<&str> {\n+        self.launch_args.cmd.as_ref().or(\n+            self.config_default_args.as_ref().and_then(|args| args.cmd.as_ref())\n+        ).map(|s| s.as_str())\n+    }\n }\n \n /// try to determine whether the terminal supports true\ndiff --git /dev/null b/src/conf/default_flags.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/conf/default_flags.rs\n@@ -0,0 +1,25 @@\n+use {\n+    crate::{\n+        cli::Args,\n+        errors::ConfError,\n+    },\n+    clap::Parser,\n+    lazy_regex::*,\n+};\n+\n+/// parse the 'default_flags' parameter of a conf.\n+pub fn parse_default_flags(s: &str) -> Result<Args, ConfError> {\n+    let prefixed;\n+    let mut tokens: Vec<&str> = if regex_is_match!(\"^[a-zA-Z]+$\", s) {\n+        // this covers the old syntax like `default_flags: gh`\n+        prefixed = format!(\"-{s}\");\n+        vec![&prefixed]\n+    } else {\n+        splitty::split_unquoted_whitespace(s).collect()\n+    };\n+    tokens.insert(0, \"broot\");\n+    Args::try_parse_from(&tokens)\n+        .map_err(|_| ConfError::InvalidDefaultFlags {\n+            flags: s.to_string()\n+        })\n+}\ndiff --git a/src/conf/mod.rs b/src/conf/mod.rs\n--- a/src/conf/mod.rs\n+++ b/src/conf/mod.rs\n@@ -7,6 +7,7 @@ use {\n \n mod conf;\n mod default;\n+mod default_flags;\n mod format;\n pub mod file_size;\n mod import;\ndiff --git a/src/conf/mod.rs b/src/conf/mod.rs\n--- a/src/conf/mod.rs\n+++ b/src/conf/mod.rs\n@@ -15,6 +16,7 @@ mod verb_conf;\n pub use {\n     conf::Conf,\n     default::write_default_conf_in,\n+    default_flags::*,\n     format::*,\n     import::*,\n     verb_conf::VerbConf,\ndiff --git a/src/tree/tree_options.rs b/src/tree/tree_options.rs\n--- a/src/tree/tree_options.rs\n+++ b/src/tree/tree_options.rs\n@@ -7,7 +7,6 @@ use {\n         errors::ConfError,\n         pattern::*,\n     },\n-    clap::Parser,\n     std::convert::TryFrom,\n };\n \ndiff --git a/src/tree/tree_options.rs b/src/tree/tree_options.rs\n--- a/src/tree/tree_options.rs\n+++ b/src/tree/tree_options.rs\n@@ -79,15 +78,8 @@ impl TreeOptions {\n         self.date_time_format = Box::leak(format.into_boxed_str());\n     }\n     /// change tree options according to configuration\n+    /// (but not the default_flags part, which is handled separately)\n     pub fn apply_config(&mut self, config: &Conf) -> Result<(), ConfError> {\n-        if let Some(default_flags) = &config.default_flags {\n-            let flags_args = format!(\"-{default_flags}\");\n-            let conf_matches = Args::try_parse_from(vec![\"broot\", &flags_args])\n-                .map_err(|_| ConfError::InvalidDefaultFlags {\n-                    flags: default_flags.to_string()\n-                })?;\n-            self.apply_launch_args(&conf_matches);\n-        }\n         if let Some(b) = config.show_selection_mark {\n             self.show_selection_mark = b;\n         }\ndiff --git a/website/docs/conf_file.md b/website/docs/conf_file.md\n--- a/website/docs/conf_file.md\n+++ b/website/docs/conf_file.md\n@@ -78,7 +78,8 @@ Starting from version 1.14, the default configuration is released in several fil\n \n # Default flags\n \n-Broot accepts a few flags at launch (the complete list is available with `broot --help`.\n+Broot accepts a few flags at launch (the complete list is available with `broot --help`).\n+The `default_flags` entry lets you specify them in configuration, with the same syntax.\n \n For example, if you want to see hidden files (the ones whose name starts with a dot) and the status of files related to git, you launch broot with\n \ndiff --git a/website/docs/conf_file.md b/website/docs/conf_file.md\n--- a/website/docs/conf_file.md\n+++ b/website/docs/conf_file.md\n@@ -87,13 +88,13 @@ For example, if you want to see hidden files (the ones whose name starts with a\n If you almost always want those flags, you may define them as default in the configuration file file, with the `default_flags` setting.\n \n ```Hjson\n-default_flags: gh\n+default_flags: -gh\n ```\n ```TOML\n-default_flags = \"gh\"\n+default_flags = \"-gh\"\n ```\n \n-Those flags can still be overridden at launch with the negating ones. For example if you don't want to see hidden files at a specific launch, do\n+Those flags can still be overridden at launch with the negating ones. For example, with the above `default_flags`, if you don't want to see hidden files on a specific launch, do\n \n     br -H\n \n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1159,9 +1159,9 @@ dependencies = [\n \n [[package]]\n name = \"lazy-regex-proc_macros\"\n-version = \"3.0.1\"\n+version = \"3.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0f0a1d9139f0ee2e862e08a9c5d0ba0470f2aa21cd1e1aa1b1562f83116c725f\"\n+checksum = \"44bcd58e6c97a7fcbaffcdc95728b393b8d98933bfadad49ed4097845b57ef0b\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n",
        "problem_statement": "Clarify docs regarding `default_flags` usage\nRegarding default flags, [the docs](https://dystroy.org/broot/conf_file/#default-flags) currently state:\r\n\r\n> If you almost always want those flags, you may define them as default in the configuration file file, with the `default_flags` setting.\r\n>> Hjson\r\n>> `default_flags: gh`\r\n\r\nHowever, using long options for readability doesn't seem to work. For example, my entry ...\r\n\r\n> default_flags: show-git-info\r\n\r\n... results in an error:\r\n\r\n> Bad configuration: invalid default flags: \"show-git-info\"\r\n\r\nI also tried several variations, such as prepending `--` or wrapping the flag in `\"...\"`. But the error persisted.\r\n\r\nSo I'd propose one of the following changes:\r\n\r\n1. **feature request:** if long options ARE NOT allowed in the conf file, allow for them **(my strong preference)**\r\n2. **improve documentation:** if long options ARE NOT allowed and will never be, make this explicit in the docs\r\n3. **improve documentation:** if long options ARE allowed, clarify in the docs how to use them, incl. examples\r\n\r\nbroot 1.26.1\n",
        "hints_text": "",
        "created_at": "2023-11-11T13:56:13Z",
        "version": "0.8"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 769,
        "instance_id": "Canop__broot-769",
        "issue_numbers": [
            "764"
        ],
        "base_commit": "aead8106a202d900439be867c11a0c29a55565aa",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -1,4 +1,5 @@\n ### next\n+- the `apply_to` verb filter accepts new values: `text_file` and `binary_file`. Broot users editing files in their terminal (vi, emacs, etc.) should configure broot to open their text editor on `enter`: see https://dystroy.org/broot/tricks/#change-standard-file-opening\n - small breaking change: `:stage_all_files` now stages also symlinks - Fix #606\n - new `{git-root}` verb argument - Fix 760 - Thanks @9999years\n \ndiff --git a/resources/default-conf/verbs.hjson b/resources/default-conf/verbs.hjson\n--- a/resources/default-conf/verbs.hjson\n+++ b/resources/default-conf/verbs.hjson\n@@ -6,23 +6,10 @@\n \n verbs: [\n \n-    # Example 1: launching `tail -n` on the selected file (leaving broot)\n-    # {\n-    #     name: tail_lines\n-    #     invocation: tl {lines_count}\n-    #     execution: \"tail -f -n {lines_count} {file}\"\n-    # }\n-\n-    # Example 2: creating a new file without leaving broot\n-    # {\n-    #     name: touch\n-    #     invocation: touch {new_file}\n-    #     execution: \"touch {directory}/{new_file}\"\n-    #     leave_broot: false\n-    # }\n-\n-    # A standard recommended command for editing files, that you\n-    # can customize.\n+    # You should customize this standard opening of text files.\n+    # If you edit text files in your terminal (vi, emacs, helix, eg.), then\n+    #  you'll find it convenient to change the 'key' from 'ctrl-e' to 'enter'.\n+    #\n     # If $EDITOR isn't set on your computer, you should either set it using\n     #  something similar to\n     #    export EDITOR=/usr/local/bin/nvim\ndiff --git a/resources/default-conf/verbs.hjson b/resources/default-conf/verbs.hjson\n--- a/resources/default-conf/verbs.hjson\n+++ b/resources/default-conf/verbs.hjson\n@@ -37,10 +24,27 @@ verbs: [\n     {\n         invocation: edit\n         shortcut: e\n+        key: ctrl-e\n+        apply_to: text_file\n         execution: \"$EDITOR {file}\"\n         leave_broot: false\n     }\n \n+    # Example 1: launching `tail -n` on the selected file (leaving broot)\n+    # {\n+    #     name: tail_lines\n+    #     invocation: tl {lines_count}\n+    #     execution: \"tail -f -n {lines_count} {file}\"\n+    # }\n+\n+    # Example 2: creating a new file without leaving broot\n+    # {\n+    #     name: touch\n+    #     invocation: touch {new_file}\n+    #     execution: \"touch {directory}/{new_file}\"\n+    #     leave_broot: false\n+    # }\n+\n     # A convenient shortcut to create new text files in\n     #  the current directory or below\n     {\ndiff --git a/resources/default-conf/verbs.hjson b/resources/default-conf/verbs.hjson\n--- a/resources/default-conf/verbs.hjson\n+++ b/resources/default-conf/verbs.hjson\n@@ -86,6 +90,12 @@ verbs: [\n     #     execution: \":focus ~\"\n     # }\n \n+    # Here's going to the work-dir root of the current git repository\n+    # {\n+    #     invocation: gtr\n+    #     execution: \":focus {git-root}\"\n+    # }\n+\n     # A popular set of shortcuts for going up and down:\n     #\n     # {\ndiff --git a/src/app/selection.rs b/src/app/selection.rs\n--- a/src/app/selection.rs\n+++ b/src/app/selection.rs\n@@ -7,6 +7,7 @@ use {\n         errors::ProgramError,\n         launchable::Launchable,\n         stage::Stage,\n+        verb::FileTypeCondition,\n     },\n     std::{\n         fs::OpenOptions,\ndiff --git a/src/app/selection.rs b/src/app/selection.rs\n--- a/src/app/selection.rs\n+++ b/src/app/selection.rs\n@@ -112,6 +113,20 @@ impl<'a> SelInfo<'a> {\n             SelInfo::More(stage) => stage.len(),\n         }\n     }\n+    pub fn is_accepted_by(&self, condition: FileTypeCondition) -> bool {\n+        match self {\n+            SelInfo::None => true,\n+            SelInfo::One(sel) => condition.accepts_path(sel.path),\n+            SelInfo::More(stage) => {\n+                for path in stage.paths().iter() {\n+                    if !condition.accepts_path(path) {\n+                        return false;\n+                    }\n+                }\n+                true\n+            }\n+        }\n+    }\n     pub fn common_stype(&self) -> Option<SelectionType> {\n         match self {\n             SelInfo::None => None,\ndiff --git a/src/command/panel_input.rs b/src/command/panel_input.rs\n--- a/src/command/panel_input.rs\n+++ b/src/command/panel_input.rs\n@@ -287,7 +287,7 @@ impl PanelInput {\n             if !verb.keys.contains(&key) {\n                 continue;\n             }\n-            if !verb.selection_condition.is_respected_by(sel_info.common_stype()) {\n+            if !sel_info.is_accepted_by(verb.selection_condition) {\n                 continue;\n             }\n             if !verb.can_be_called_in_panel(panel_state_type) {\ndiff --git a/src/conf/verb_conf.rs b/src/conf/verb_conf.rs\n--- a/src/conf/verb_conf.rs\n+++ b/src/conf/verb_conf.rs\n@@ -38,7 +38,8 @@ pub struct VerbConf {\n \n     pub from_shell: Option<bool>,\n \n-    pub apply_to: Option<String>,\n+    #[serde(default)]\n+    pub apply_to: FileTypeCondition,\n \n     pub set_working_dir: Option<bool>,\n \ndiff --git a/src/content_search/mod.rs b/src/content_search/mod.rs\n--- a/src/content_search/mod.rs\n+++ b/src/content_search/mod.rs\n@@ -1,11 +1,10 @@\n \n mod content_match;\n mod content_search_result;\n-mod magic_numbers;\n-mod extensions;\n mod needle;\n \n pub use {\n+    crate::content_type::{self, extensions, magic_numbers},\n     content_match::ContentMatch,\n     content_search_result::ContentSearchResult,\n     needle::Needle,\ndiff --git a/src/content_search/extensions.rs b/src/content_type/extensions.rs\n--- a/src/content_search/extensions.rs\n+++ b/src/content_type/extensions.rs\n@@ -88,3 +88,4 @@ static BINARY_EXTENSIONS: Set<&'static str> = phf_set! {\n pub fn is_known_binary(ext: &str) -> bool {\n     BINARY_EXTENSIONS.contains(ext)\n }\n+\ndiff --git a/src/content_search/magic_numbers.rs b/src/content_type/magic_numbers.rs\n--- a/src/content_search/magic_numbers.rs\n+++ b/src/content_type/magic_numbers.rs\n@@ -1,7 +1,11 @@\n \n use {\n-    memmap2::Mmap,\n     phf::{phf_set, Set},\n+    std::{\n+        path::Path,\n+        fs::File,\n+        io::{self, Read},\n+    },\n };\n \n pub const MIN_FILE_SIZE: usize = 100;\ndiff --git a/src/content_search/magic_numbers.rs b/src/content_type/magic_numbers.rs\n--- a/src/content_search/magic_numbers.rs\n+++ b/src/content_type/magic_numbers.rs\n@@ -73,11 +77,11 @@ static SIGNATURES_4: Set<[u8; 4]> = phf_set! {\n ///\n /// If you feel this list should maybe be changed, contact\n /// me on miaou or raise an issue.\n-pub fn is_known_binary(hay: &Mmap) -> bool {\n-    if hay.len() < MIN_FILE_SIZE {\n+pub fn is_known_binary(bytes: &[u8]) -> bool {\n+    if bytes.len() < 4 {\n         return false;\n     }\n-    let c = unsafe { *hay.get_unchecked(0) };\n+    let c = bytes[0];\n     if c < 9 || (c > 13 && c < 32) || c >= 254 {\n         // c < 9 include several signatures\n         // 14 to 31 includes several signatures among them some variants of zip, gzip, etc.\ndiff --git a/src/content_search/magic_numbers.rs b/src/content_type/magic_numbers.rs\n--- a/src/content_search/magic_numbers.rs\n+++ b/src/content_type/magic_numbers.rs\n@@ -87,27 +91,35 @@ pub fn is_known_binary(hay: &Mmap) -> bool {\n         return true;\n     }\n     // for signature in &SIGNATURES_2 {\n-    //     if signature == &hay[0..2] {\n+    //     if signature == &bytes[0..2] {\n     //         return true;\n     //     }\n     // }\n     // for signature in &SIGNATURES_3 {\n-    //     if signature == &hay[0..3] {\n+    //     if signature == &bytes[0..3] {\n     //         return true;\n     //     }\n     // }\n-    if SIGNATURES_4.contains(&hay[0..4]) {\n+    if SIGNATURES_4.contains(&bytes[0..4]) {\n         return true;\n     }\n     // for signature in &SIGNATURES_5 {\n-    //     if signature == &hay[0..5] {\n+    //     if signature == &bytes[0..5] {\n     //         return true;\n     //     }\n     // }\n     // for signature in &SIGNATURES_6 {\n-    //     if signature == &hay[0..6] {\n+    //     if signature == &bytes[0..6] {\n     //         return true;\n     //     }\n     // }\n     false\n }\n+\n+/// Tell whether the file i\n+pub fn is_file_known_binary<P: AsRef<Path>>(path: P) -> io::Result<bool> {\n+    let mut buf = [0; 4];\n+    let mut file = File::open(path)?;\n+    let n = file.read(&mut buf)?;\n+    Ok(is_known_binary(&buf[0..n]))\n+}\ndiff --git /dev/null b/src/content_type/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/content_type/mod.rs\n@@ -0,0 +1,28 @@\n+pub mod magic_numbers;\n+pub mod extensions;\n+\n+use {\n+    std::{\n+        io,\n+        path::Path,\n+    },\n+};\n+\n+/// Assuming the path is already checked to be to a file\n+/// (not a link or directory), tell whether it looks like a text file\n+pub fn is_file_text<P: AsRef<Path>>(path: P) -> io::Result<bool> {\n+    // the current algorithm is rather crude. If needed I'll add\n+    // more, like checking the start of the file is UTF8 compatible\n+    Ok(!is_file_binary(path)?)\n+}\n+\n+/// Assuming the path is already checked to be to a file\n+/// (not a link or directory), tell whether it looks like a binary file\n+pub fn is_file_binary<P: AsRef<Path>>(path: P) -> io::Result<bool> {\n+    if let Some(ext) = path.as_ref().extension().and_then(|s| s.to_str()) {\n+        if extensions::is_known_binary(ext) {\n+            return Ok(true);\n+        }\n+    }\n+    magic_numbers::is_file_known_binary(path)\n+}\ndiff --git a/src/lib.rs b/src/lib.rs\n--- a/src/lib.rs\n+++ b/src/lib.rs\n@@ -6,6 +6,7 @@ pub mod cli;\n pub mod command;\n pub mod conf;\n pub mod content_search;\n+pub mod content_type;\n pub mod display;\n pub mod errors;\n pub mod file_sum;\ndiff --git /dev/null b/src/verb/file_type_condition.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/verb/file_type_condition.rs\n@@ -0,0 +1,63 @@\n+use {\n+    crate::{\n+        app::SelectionType,\n+        content_type,\n+        tree::{TreeLine, TreeLineType},\n+    },\n+    serde::Deserialize,\n+    std::path::Path,\n+};\n+\n+#[derive(Debug, Clone, Copy, Default, PartialEq, Eq, Deserialize)]\n+#[serde(rename_all = \"snake_case\")]\n+pub enum FileTypeCondition {\n+    #[default]\n+    Any,\n+    // directory or link to a directory\n+    Directory,\n+    File,\n+    TextFile,\n+    BinaryFile,\n+}\n+\n+impl FileTypeCondition {\n+    pub fn accepts_path(self, path: &Path) -> bool {\n+        match self {\n+            Self::Any => true,\n+            Self::Directory => path.is_dir(),\n+            Self::File => path.is_file(),\n+            Self::TextFile => {\n+                path.is_file() && matches!(content_type::is_file_text(path), Ok(true))\n+            }\n+            Self::BinaryFile => {\n+                path.is_file() && matches!(content_type::is_file_binary(path), Ok(true))\n+            }\n+        }\n+    }\n+    pub fn accepts_line(self, line: &TreeLine) -> bool {\n+        match self {\n+            Self::Any => true,\n+            Self::Directory => line.is_dir(),\n+            Self::File => matches!(line.line_type, TreeLineType::File),\n+            Self::TextFile => {\n+                line.is_file() && matches!(content_type::is_file_text(&line.path), Ok(true))\n+            }\n+            Self::BinaryFile => {\n+                line.is_file() && matches!(content_type::is_file_binary(&line.path), Ok(true))\n+            }\n+        }\n+    }\n+    /// a little clunky, should be used only on well defined cases, like documenting\n+    /// internals\n+    pub fn accepts_selection_type(\n+        self,\n+        stype: SelectionType,\n+    ) -> bool {\n+        match (self, stype) {\n+            (Self::Any, _) => true,\n+            (Self::Directory, SelectionType::Directory) => true,\n+            (Self::File, SelectionType::File) => true,\n+            _ => false,\n+        }\n+    }\n+}\ndiff --git a/src/verb/mod.rs b/src/verb/mod.rs\n--- a/src/verb/mod.rs\n+++ b/src/verb/mod.rs\n@@ -3,6 +3,7 @@ mod exec_pattern;\n mod execution_builder;\n mod external_execution;\n mod external_execution_mode;\n+mod file_type_condition;\n mod internal;\n mod internal_execution;\n pub mod internal_focus;\ndiff --git a/src/verb/mod.rs b/src/verb/mod.rs\n--- a/src/verb/mod.rs\n+++ b/src/verb/mod.rs\n@@ -21,6 +22,7 @@ pub use {\n     execution_builder::ExecutionStringBuilder,\n     external_execution::ExternalExecution,\n     external_execution_mode::ExternalExecutionMode,\n+    file_type_condition::*,\n     internal::Internal,\n     internal_execution::InternalExecution,\n     invocation_parser::InvocationParser,\ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -53,7 +53,7 @@ pub struct Verb {\n     pub description: VerbDescription,\n \n     /// the type of selection this verb applies to\n-    pub selection_condition: SelectionType,\n+    pub selection_condition: FileTypeCondition,\n \n     /// extension filtering. If empty, all extensions apply\n     pub file_extensions: Vec<String>,\ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -119,7 +119,7 @@ impl Verb {\n             invocation_parser,\n             execution,\n             description,\n-            selection_condition: SelectionType::Any,\n+            selection_condition: FileTypeCondition::Any,\n             file_extensions: Vec::new(),\n             needs_selection,\n             needs_another_panel,\ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -149,8 +149,8 @@ impl Verb {\n         self.names.push(shortcut.to_string());\n         self\n     }\n-    pub fn with_stype(&mut self, stype: SelectionType) -> &mut Self {\n-        self.selection_condition = stype;\n+    pub fn with_condition(&mut self, selection_condition: FileTypeCondition) -> &mut Self {\n+        self.selection_condition = selection_condition;\n         self\n     }\n     pub fn needing_another_panel(&mut self) -> &mut Self {\ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -289,4 +289,12 @@ impl Verb {\n     pub fn can_be_called_in_panel(&self, panel_state_type: PanelStateType) -> bool {\n         self.panels.is_empty() || self.panels.contains(&panel_state_type)\n     }\n+    pub fn accepts_extension(&self, extension: Option<&str>) -> bool {\n+        if self.file_extensions.is_empty() {\n+            true\n+        } else {\n+            extension\n+                .map_or(false, |ext| self.file_extensions.iter().any(|ve| ve == ext))\n+        }\n+    }\n }\ndiff --git a/src/verb/verb_store.rs b/src/verb/verb_store.rs\n--- a/src/verb/verb_store.rs\n+++ b/src/verb/verb_store.rs\n@@ -75,21 +75,21 @@ impl VerbStore {\n         // those two operations are mapped on ALT-ENTER, one\n         // for directories and the other one for the other files\n         self.add_internal(open_leave) // calls the system open\n-            .with_stype(SelectionType::File)\n+            .with_condition(FileTypeCondition::File)\n             .with_key(key!(alt-enter))\n             .with_shortcut(\"ol\");\n         self.add_external(\"cd\", \"cd {directory}\", FromParentShell)\n-            .with_stype(SelectionType::Directory)\n+            .with_condition(FileTypeCondition::Directory)\n             .with_key(key!(alt-enter))\n             .with_shortcut(\"ol\")\n             .with_description(\"change directory and quit\");\n \n         #[cfg(unix)]\n         self.add_external(\"chmod {args}\", \"chmod {args} {file}\", StayInBroot)\n-            .with_stype(SelectionType::File);\n+            .with_condition(FileTypeCondition::File);\n         #[cfg(unix)]\n         self.add_external(\"chmod {args}\", \"chmod -R {args} {file}\", StayInBroot)\n-            .with_stype(SelectionType::Directory);\n+            .with_condition(FileTypeCondition::Directory);\n         self.add_internal(open_preview);\n         self.add_internal(close_preview);\n         self.add_internal(toggle_preview);\ndiff --git a/src/verb/verb_store.rs b/src/verb/verb_store.rs\n--- a/src/verb/verb_store.rs\n+++ b/src/verb/verb_store.rs\n@@ -276,10 +276,10 @@ impl VerbStore {\n         self.add_external(\"rm\", \"rm -rf {file}\", StayInBroot);\n         #[cfg(windows)]\n         self.add_external(\"rm\", \"cmd /c rmdir /Q /S {file}\", StayInBroot)\n-            .with_stype(SelectionType::Directory);\n+            .with_condition(FileTypeCondition::Directory);\n         #[cfg(windows)]\n         self.add_external(\"rm\", \"cmd /c del /Q {file}\", StayInBroot)\n-            .with_stype(SelectionType::File);\n+            .with_condition(FileTypeCondition::File);\n         self.add_internal(toggle_counts).with_shortcut(\"counts\");\n         self.add_internal(toggle_dates).with_shortcut(\"dates\");\n         self.add_internal(toggle_device_id).with_shortcut(\"dev\");\ndiff --git a/src/verb/verb_store.rs b/src/verb/verb_store.rs\n--- a/src/verb/verb_store.rs\n+++ b/src/verb/verb_store.rs\n@@ -469,17 +469,7 @@ impl VerbStore {\n         if !vc.panels.is_empty() {\n             verb.panels = vc.panels.clone();\n         }\n-        verb.selection_condition = match vc.apply_to.as_deref() {\n-            Some(\"file\") => SelectionType::File,\n-            Some(\"directory\") => SelectionType::Directory,\n-            Some(\"any\") => SelectionType::Any,\n-            None => SelectionType::Any,\n-            Some(s) => {\n-                return Err(ConfError::InvalidVerbConf {\n-                    details: format!(\"{s:?} isn't a valid value of apply_to\"),\n-                });\n-            }\n-        };\n+        verb.selection_condition = vc.apply_to;\n         Ok(())\n     }\n \ndiff --git a/src/verb/verb_store.rs b/src/verb/verb_store.rs\n--- a/src/verb/verb_store.rs\n+++ b/src/verb/verb_store.rs\n@@ -488,16 +478,14 @@ impl VerbStore {\n         prefix: &str,\n         sel_info: SelInfo<'_>,\n     ) -> PrefixSearchResult<'v, &Verb> {\n-        let stype = sel_info.common_stype();\n-        let count = sel_info.count_paths();\n-        self.search(prefix, stype, Some(count), sel_info.extension())\n+        self.search(prefix, Some(sel_info))\n     }\n \n     pub fn search_prefix<'v>(\n         &'v self,\n         prefix: &str,\n     ) -> PrefixSearchResult<'v, &Verb> {\n-        self.search(prefix, None, None, None)\n+        self.search(prefix, None)\n     }\n \n     /// Return either the only match, or None if there's not\ndiff --git a/src/verb/verb_store.rs b/src/verb/verb_store.rs\n--- a/src/verb/verb_store.rs\n+++ b/src/verb/verb_store.rs\n@@ -516,16 +504,16 @@ impl VerbStore {\n     pub fn search<'v>(\n         &'v self,\n         prefix: &str,\n-        stype: Option<SelectionType>,\n-        sel_count: Option<usize>,\n-        extension: Option<&str>,\n+        sel_info: Option<SelInfo>,\n     ) -> PrefixSearchResult<'v, &Verb> {\n         let mut found_index = 0;\n         let mut nb_found = 0;\n         let mut completions: Vec<&str> = Vec::new();\n+        let extension = sel_info.as_ref().and_then(|si| si.extension());\n+        let sel_count = sel_info.map(|si| si.count_paths());\n         for (index, verb) in self.verbs.iter().enumerate() {\n-            if let Some(stype) = stype {\n-                if !stype.respects(verb.selection_condition) {\n+            if let Some(sel_info) = sel_info {\n+                if !sel_info.is_accepted_by(verb.selection_condition) {\n                     continue;\n                 }\n             }\ndiff --git a/src/verb/verb_store.rs b/src/verb/verb_store.rs\n--- a/src/verb/verb_store.rs\n+++ b/src/verb/verb_store.rs\n@@ -537,7 +525,7 @@ impl VerbStore {\n                     continue;\n                 }\n             }\n-            if !verb.file_extensions.is_empty() && !extension.map_or(false, |ext| verb.file_extensions.iter().any(|ve| ve == ext)) {\n+            if !verb.accepts_extension(extension) {\n                 continue;\n             }\n             for name in &verb.names {\ndiff --git a/src/verb/verb_store.rs b/src/verb/verb_store.rs\n--- a/src/verb/verb_store.rs\n+++ b/src/verb/verb_store.rs\n@@ -565,7 +553,7 @@ impl VerbStore {\n         stype: SelectionType,\n     ) -> Option<String> {\n         for verb in &self.verbs {\n-            if verb.get_internal() == Some(internal) && stype.respects(verb.selection_condition) {\n+            if verb.get_internal() == Some(internal) && verb.selection_condition.accepts_selection_type(stype) {\n                 return verb.keys.get(0).map(|&k| KEY_FORMAT.to_string(k));\n             }\n         }\ndiff --git a/website/docs/conf_verbs.md b/website/docs/conf_verbs.md\n--- a/website/docs/conf_verbs.md\n+++ b/website/docs/conf_verbs.md\n@@ -39,7 +39,7 @@ keys | | several keyboard shortcuts triggering execution (if you want to have th\n shortcut | | an alternate way to call the verb (without the arguments part)\n leave_broot | `true` | whether to quit broot on execution\n from_shell | `false` | whether the verb must be executed from the parent shell (needs `br`). As this is executed after broot closed, this isn't compatible with `leave_broot = false`\n-apply_to | | the type of selection this verb applies to, may be `\"file\"`, `\"directory\"` or `\"any\"`. You may declare two verbs with the same key if the first one applies to only files or only directories\n+apply_to | | the type of selection this verb applies to: `\"file\"`, `\"text_file\"`, `\"binary_file\"`, `\"directory\"` or `\"any\"`. You may declare two verbs with the same key if the first one applies, eg, to only text files or only to directories\n working_dir | | the working directory of the external application, for example `\"{directory}\"` for the closest directory (the working dir isn't set if the directory doesn't exist)\n set_working_dir | `false` | whether the working dir of the process must be set to the currently selected directory (it's equivalent to `workding_dir: \"{directory}\"`)\n auto_exec | `true` | whether to execute the verb as soon as it's key-triggered (instead of waiting for <kbd>enter</kbd>)\ndiff --git a/website/docs/install.md b/website/docs/install.md\n--- a/website/docs/install.md\n+++ b/website/docs/install.md\n@@ -176,4 +176,7 @@ The simplest solution is to remove your old configuration directory (or rename i\n \n # After installation\n \n-Now you should [install the br shell function](../install-br/).\n+Now you should\n+\n+1. [install the br shell function](../install-br/)\n+2. have a look at the verbs.hjson configuration file, and especially setup the editor of your choice\ndiff --git a/website/docs/tricks.md b/website/docs/tricks.md\n--- a/website/docs/tricks.md\n+++ b/website/docs/tricks.md\n@@ -114,37 +114,38 @@ This can be done with the `:focus` verb which can be called with <kbd>ctrl</kbd>\n \n # Run a script or program from broot\n \n-If your system is normally configured, doing `alt`-`enter` on an executable will close broot and executes the file.\n+If your system is normally configured, doing `alt`-`enter` on an executable will close broot and execute the file.\n \n # Change standard file opening\n \n-When you hit enter on a file, broot asks the system to open the file. It's usually the best solution as it selects the program according to the file's type and settings you set system wide.\n+When you hit enter on a file, broot asks the system to open the file.\n+It's usually the best solution as it selects the program according to the file's type and to settings you set system wide.\n \n-You might still wish to change that, for example when you're on a server without xdg-open or equivalent.\n+If you're editing text files in your terminal (vi, emacs, helix, etc.), then you'd rather have your editor open in the same terminal on enter, and be back to broot on quitting it.\n \n-Here's an example of configuration changing the behaviour on open:\n+Here's an example:\n \n ```Hjson\n-verbs: [\n-    {\n-        invocation: edit\n-        key: enter\n-        external: \"$EDITOR {file}\"\n-        leave_broot: false\n-        apply_to: file\n-    }\n-]\n+{\n+    invocation: edit\n+    key: enter\n+    shortcut: e\n+    execution: \"/usr/bin/nvim +{line} {file}\"\n+    apply_to: text_file\n+    leave_broot: false\n+}\n ```\n ```TOML\n [[verbs]]\n invocation = \"edit\"\n key = \"enter\"\n-external = \"$EDITOR {file}\"\n+shortcut = \"e\"\n+execution = \"/usr/bin/nvim +{line} {file}\"\n+apply_to = \"text_file\"\n leave_broot = false\n-apply_to = \"file\"\n ```\n \n-(the `apply_to` line ensures this verb isn't called when the selected line is a directory)\n+You'll also need such kind of setting if your computer is missing xdg-open or equivalent.\n \n If you need to use a different application for some kind(s) of file, you may additionally [filter by extension](../conf_verbs/#file-extensions).\n \n",
        "test_patch": "diff --git a/src/content_search/mod.rs b/src/content_search/mod.rs\n--- a/src/content_search/mod.rs\n+++ b/src/content_search/mod.rs\n@@ -47,12 +46,20 @@ pub fn get_mmap_if_suitable<P: AsRef<Path>>(hay_path: P, max_size: usize) -> io:\n \n /// return true when the file looks suitable for searching as text.\n ///\n-/// This function is quite slow as it creates a memmap just to check\n-/// a few bytes. If the memmap can be used, prefer `get_mmap_if_not_binary`\n+/// If a memmap will be needed afterwards, prefer to use `get_mmap_if_not_binary`\n+/// which optimizes testing and getting the mmap.\n pub fn is_path_suitable<P: AsRef<Path>>(path: P, max_size: usize) -> bool {\n-    matches!(get_mmap_if_suitable(path, max_size), Ok(Some(_)))\n+    let path = path.as_ref();\n+    let Ok(metadata) = path.metadata() else {\n+        return false;\n+    };\n+    if metadata.len() > max_size as u64 {\n+        return false;\n+    }\n+    content_type::is_file_text(path).unwrap_or(false)\n }\n \n+/// Return the 1-indexed line number for the byte at position pos\n pub fn line_count_at_pos<P: AsRef<Path>>(path: P, pos: usize) -> io::Result<usize> {\n     let mut reader = BufReader::new(File::open(path)?);\n     let mut line = String::new();\n",
        "problem_statement": "Automatically open text files with `$EDITOR`\nTerminal file managers like `nnn`, `lf`, `yazi` can automatically detect text files and open them in your `$EDITOR`, instead of `xdg-open`. `broot` requires you to specify an explicit key for this, I think it'd be more convenient if we can use a single key to open anything.\n",
        "hints_text": "You're totally right. There's even the code in broot to detect text files (it's used in content search). There should be a verb filtering attribute like `is_text: true`. I see no problem with that so I'll probably do it soon.",
        "created_at": "2023-10-19T11:43:42Z",
        "version": "0.8"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 779,
        "instance_id": "Canop__broot-779",
        "issue_numbers": [
            "778"
        ],
        "base_commit": "be58ab6dad64a670ffcb18ad7589894cdf6c98a3",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -3,6 +3,7 @@\n - small breaking change: `:stage_all_files` now stages also symlinks - Fix #606\n - new `{git-root}` verb argument - Fix 760 - Thanks @9999years\n - fix a freeze on windows when launching a search with `-c` - Thanks @3tilley\n+- fix automatic preview pattern not escaping spaces and colons - Fix #778\n \n ### v1.26.1 - 2023-09-30\n <a name=\"v1.26.1\"></a>\ndiff --git a/src/pattern/input_pattern.rs b/src/pattern/input_pattern.rs\n--- a/src/pattern/input_pattern.rs\n+++ b/src/pattern/input_pattern.rs\n@@ -3,9 +3,13 @@ use {\n     crate::{\n         app::AppContext,\n         errors::PatternError,\n-        pattern::{Pattern, PatternParts},\n+        pattern::{\n+            Pattern,\n+            PatternParts,\n+        },\n     },\n     bet::BeTree,\n+    lazy_regex::*,\n };\n \n /// wraps both\ndiff --git a/src/pattern/input_pattern.rs b/src/pattern/input_pattern.rs\n--- a/src/pattern/input_pattern.rs\n+++ b/src/pattern/input_pattern.rs\n@@ -73,9 +77,15 @@ impl InputPattern {\n             _ => None,\n         };\n         regex_parts\n-            .and_then(|rp| RegexPattern::from(&rp.0, &rp.1).ok())\n+            .map(|(core, modifiers)|\n+                // The regex part is missing the escaping which prevents it from\n+                // ending the pattern in the input. We need to restore it\n+                // See https://github.com/Canop/broot/issues/778\n+                (regex_replace_all!(\"[ :]\", &core, \"\\\\$0\").to_string(), modifiers)\n+            )\n+            .and_then(|(core, modifiers)| RegexPattern::from(&core, &modifiers).ok())\n             .map(|rp| InputPattern {\n-                raw: rp.to_string(),\n+                raw: rp.to_string(), // this adds the initial /\n                 pattern: Pattern::NameRegex(rp),\n             })\n             .unwrap_or_else(InputPattern::none)\ndiff --git a/src/pattern/pattern_parts.rs b/src/pattern/pattern_parts.rs\n--- a/src/pattern/pattern_parts.rs\n+++ b/src/pattern/pattern_parts.rs\n@@ -2,7 +2,8 @@ use {\n     std::fmt,\n };\n \n-/// An intermediate parsed representation of the raw string\n+/// An intermediate parsed representation of the raw string making\n+/// a pattern, with up to 3 parts (search mode, core pattern, modifiers)\n #[derive(Debug, Clone, PartialEq)]\n pub struct PatternParts {\n     /// can't be empty by construct\ndiff --git a/src/pattern/regex_pattern.rs b/src/pattern/regex_pattern.rs\n--- a/src/pattern/regex_pattern.rs\n+++ b/src/pattern/regex_pattern.rs\n@@ -16,7 +16,11 @@ pub struct RegexPattern {\n \n impl fmt::Display for RegexPattern {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"/{}/{}\", self.rex, self.flags)\n+        if self.flags.is_empty() {\n+            write!(f, \"/{}\", self.rex)\n+        } else {\n+            write!(f, \"/{}/{}\", self.rex, self.flags)\n+        }\n     }\n }\n \n",
        "test_patch": "diff --git a/src/command/parts.rs b/src/command/parts.rs\n--- a/src/command/parts.rs\n+++ b/src/command/parts.rs\n@@ -170,6 +170,10 @@ mod test_command_parts {\n         a.try_into().unwrap()\n     }\n \n+    /// Check that the input is parsed as expected:\n+    /// - a raw pattern\n+    /// - the token (operators and pattern_parts) of the pattern\n+    /// - the verb invocation\n     fn check(\n         input: &str,\n         raw_pattern: &str,\n",
        "problem_statement": "Missing escaping when opening preview on a content search with spaces or colon\nWhen you search on content, then hit ctrl-right to preview a result, the content pattern is changed into a regex so that the previewed file is filtered.\r\n\r\nFor example, if you search files with `/\\toml$/&c/ab`, you get all .toml files containing `ab`, and the preview of one of them is filtered with the `/ab` pattern. \r\n\r\nWhen searching with a space or a colon, you have to escape that char, so to search for example for \"a b\" you type `a\\ b`.\r\n\r\nThe problem is that the space (or colon) isn't escaped when automatically written into the input. So the input is incorrect and can't be easily edited to either add a verb or modify the search.\n",
        "hints_text": "",
        "created_at": "2023-10-29T08:34:52Z",
        "version": "0.8"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 283,
        "instance_id": "Canop__broot-283",
        "issue_numbers": [
            "277"
        ],
        "base_commit": "5edab5fd73ac38df12ff4ce7db21091f6bd8acbb",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -4,6 +4,7 @@\n - the `:copy_path` verb which copies the selected path to the clipboard (mapped to alt-c)\n - the `:input_paste` verb which inserts the clipboard content in the input (mapped to ctrl-v)\n (I need user/dev feedback on compilation and usage before making this feature default)\n+* it's now possible to define verbs executing sequences of commands - Fix #277\n \n <a name=\"v1.0.0\"></a>\n ### v1.0.0 - 2020-09-01\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -12,7 +12,11 @@ use {\n         task_sync::{Dam, Either},\n         verb::Internal,\n     },\n-    crossbeam::channel::unbounded,\n+    crossbeam::channel::{\n+        Receiver,\n+        Sender,\n+        unbounded,\n+    },\n     crossterm::event::KeyModifiers,\n     std::{\n         io::Write,\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -50,6 +54,12 @@ pub struct App {\n     /// the root of the active panel\n     #[cfg(feature=\"client-server\")]\n     root: Arc<Mutex<PathBuf>>,\n+\n+    /// sender to the sequence channel\n+    tx_seqs: Sender<Sequence>,\n+\n+    /// receiver to listen to the sequence channel\n+    rx_seqs: Receiver<Sequence>,\n }\n \n impl App {\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -73,6 +83,7 @@ impl App {\n             Areas::create(&mut Vec::new(), 0, screen, false)?,\n             con,\n         );\n+        let (tx_seqs, rx_seqs) = unbounded::<Sequence>();\n         Ok(App {\n             active_panel_idx: 0,\n             panels: panel.into(),\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -83,6 +94,8 @@ impl App {\n \n             #[cfg(feature=\"client-server\")]\n             root: Arc::new(Mutex::new(con.launch_args.root.clone())),\n+            tx_seqs,\n+            rx_seqs,\n         })\n     }\n \ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -207,7 +220,8 @@ impl App {\n                         panel_skin,\n                         preview,\n                         con,\n-                    )? { // we should probably handle other results\n+                    )? {\n+                        // we should probably handle other results\n                         // which implies the possibility of a recursion\n                         error = Some(txt);\n                     } else if is_input_invocation {\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -256,6 +270,9 @@ impl App {\n             DisplayError(txt) => {\n                 error = Some(txt);\n             }\n+            ExecuteSequence { sequence } => {\n+                self.tx_seqs.send(sequence).unwrap();\n+            }\n             HandleInApp(internal) => {\n                 let new_active_panel_idx = match internal {\n                     Internal::panel_left if self.active_panel_idx > 0 => {\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -444,19 +461,15 @@ impl App {\n \n         screen.clear_bottom_right_char(w, &skin.focused)?;\n \n-        // we create a channel for unparsed raw sequence which may come\n-        // from the --cmd argument or from the server module\n-        let (tx_seqs, rx_seqs) = unbounded::<Sequence>();\n-\n         if let Some(raw_sequence) = &con.launch_args.commands {\n-            tx_seqs.send(Sequence::new_local(raw_sequence.to_string())).unwrap();\n+            self.tx_seqs.send(Sequence::new_local(raw_sequence.to_string())).unwrap();\n         }\n \n         #[cfg(feature=\"client-server\")]\n         let _server = con.launch_args.listen.as_ref()\n             .map(|server_name| crate::net::Server::new(\n                 &server_name,\n-                tx_seqs.clone(),\n+                self.tx_seqs.clone(),\n                 Arc::clone(&self.root),\n             ))\n             .transpose()?;\ndiff --git a/src/app/app.rs b/src/app/app.rs\n--- a/src/app/app.rs\n+++ b/src/app/app.rs\n@@ -473,7 +486,7 @@ impl App {\n                 }\n             }\n \n-            match dam.next(&rx_seqs) {\n+            match dam.next(&self.rx_seqs) {\n                 Either::First(Some(event)) => {\n                     debug!(\"event: {:?}\", &event);\n                     match event {\ndiff --git a/src/app/cmd_result.rs b/src/app/cmd_result.rs\n--- a/src/app/cmd_result.rs\n+++ b/src/app/cmd_result.rs\n@@ -2,6 +2,7 @@ use {\n     super::*,\n     crate::{\n         browser::BrowserState,\n+        command::Sequence,\n         errors::TreeBuildError,\n         launchable::Launchable,\n         verb::Internal,\ndiff --git a/src/app/cmd_result.rs b/src/app/cmd_result.rs\n--- a/src/app/cmd_result.rs\n+++ b/src/app/cmd_result.rs\n@@ -26,6 +27,9 @@ pub enum AppStateCmdResult {\n         id: Option<PanelId>, // None if current panel\n     },\n     DisplayError(String),\n+    ExecuteSequence {\n+        sequence: Sequence,\n+    },\n     HandleInApp(Internal), // command must be handled at the app level\n     Keep,\n     Launch(Box<Launchable>),\ndiff --git a/src/app/cmd_result.rs b/src/app/cmd_result.rs\n--- a/src/app/cmd_result.rs\n+++ b/src/app/cmd_result.rs\n@@ -89,6 +93,7 @@ impl fmt::Debug for AppStateCmdResult {\n                     validate_purpose: true, ..\n                 } => \"OkPanel\",\n                 AppStateCmdResult::DisplayError(_) => \"DisplayError\",\n+                AppStateCmdResult::ExecuteSequence{ .. } => \"ExecuteSequence\",\n                 AppStateCmdResult::Keep => \"Keep\",\n                 AppStateCmdResult::Launch(_) => \"Launch\",\n                 AppStateCmdResult::NewState { .. } => \"NewState\",\ndiff --git a/src/app/selection.rs b/src/app/selection.rs\n--- a/src/app/selection.rs\n+++ b/src/app/selection.rs\n@@ -1,21 +1,24 @@\n \n use {\n-    std::path::Path,\n+    super::{\n+        AppContext,\n+        AppStateCmdResult,\n+    },\n+    crate::{\n+        errors::ProgramError,\n+        launchable::Launchable,\n+    },\n+    std::{\n+        fs::OpenOptions,\n+        io::Write,\n+        path::Path,\n+    },\n };\n \n /// the id of a line, starting at 1\n /// (0 if not specified)\n pub type LineNumber = usize;\n \n-/// light information about the currently selected\n-/// file and maybe line number\n-#[derive(Debug, Clone, Copy)]\n-pub struct Selection<'s> {\n-    pub path: &'s Path,\n-    pub line: LineNumber, // the line number in the file (0 if none selected)\n-    pub stype: SelectionType,\n-}\n-\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub enum SelectionType {\n     File,\ndiff --git a/src/app/selection.rs b/src/app/selection.rs\n--- a/src/app/selection.rs\n+++ b/src/app/selection.rs\n@@ -28,3 +31,43 @@ impl SelectionType {\n         constraint == Self::Any || self == constraint\n     }\n }\n+\n+/// light information about the currently selected\n+/// file and maybe line number\n+#[derive(Debug, Clone, Copy)]\n+pub struct Selection<'s> {\n+    pub path: &'s Path,\n+    pub line: LineNumber, // the line number in the file (0 if none selected)\n+    pub stype: SelectionType,\n+    pub is_exe: bool,\n+}\n+\n+impl Selection<'_> {\n+\n+    /// build a AppStateCmdResult with a launchable which will be used to\n+    ///  1/ quit broot\n+    ///  2/ open the relevant file the best possible way\n+    pub fn to_opener(\n+        self,\n+        con: &AppContext,\n+    ) -> Result<AppStateCmdResult, ProgramError> {\n+        Ok(if self.is_exe {\n+            let path = self.path.to_string_lossy().to_string();\n+            if let Some(export_path) = &con.launch_args.cmd_export_path {\n+                // broot was launched as br, we can launch the executable from the shell\n+                let f = OpenOptions::new().append(true).open(export_path)?;\n+                writeln!(&f, \"{}\", path)?;\n+                AppStateCmdResult::Quit\n+            } else {\n+                AppStateCmdResult::from(Launchable::program(\n+                    vec![path],\n+                    None, // we don't set the working directory\n+                )?)\n+            }\n+        } else {\n+            AppStateCmdResult::from(Launchable::opener(self.path.to_path_buf()))\n+        })\n+    }\n+\n+}\n+\ndiff --git a/src/app/state.rs b/src/app/state.rs\n--- a/src/app/state.rs\n+++ b/src/app/state.rs\n@@ -13,7 +13,9 @@ use {\n         task_sync::Dam,\n         verb::*,\n     },\n-    std::path::{Path, PathBuf},\n+    std::{\n+        path::{Path, PathBuf},\n+    },\n     termimad::Area,\n };\n \ndiff --git a/src/app/state.rs b/src/app/state.rs\n--- a/src/app/state.rs\n+++ b/src/app/state.rs\n@@ -63,7 +65,7 @@ pub trait AppState {\n         input_invocation: Option<&VerbInvocation>,\n         trigger_type: TriggerType,\n         cc: &CmdContext,\n-        screen: &mut Screen,\n+        screen: &mut Screen, // TODO remove (seeems to be used only for page_height)\n     ) -> Result<AppStateCmdResult, ProgramError>;\n \n     /// a generic implementation of on_internal which may be\ndiff --git a/src/app/state.rs b/src/app/state.rs\n--- a/src/app/state.rs\n+++ b/src/app/state.rs\n@@ -121,6 +123,7 @@ pub trait AppState {\n                     AppStateCmdResult::NewState(Box::new(HelpState::new(screen, con)))\n                 }\n             }\n+            Internal::open_leave => self.selection().to_opener(con)?,\n             Internal::open_preview => self.open_preview(None, false, cc),\n             Internal::preview_image => self.open_preview(Some(PreviewMode::Image), false, cc),\n             Internal::preview_text => self.open_preview(Some(PreviewMode::Text), false, cc),\ndiff --git a/src/app/state.rs b/src/app/state.rs\n--- a/src/app/state.rs\n+++ b/src/app/state.rs\n@@ -164,6 +167,55 @@ pub trait AppState {\n         })\n     }\n \n+    fn execute_verb(\n+        &mut self,\n+        w: &mut W, // needed because we may want to switch from alternate in some externals\n+        verb: &Verb,\n+        invocation: Option<&VerbInvocation>,\n+        trigger_type: TriggerType,\n+        cc: &CmdContext,\n+        screen: &mut Screen,\n+    ) -> Result<AppStateCmdResult, ProgramError> {\n+        let exec_builder = || {\n+            ExecutionStringBuilder::from_invocation(\n+                &verb.invocation_parser,\n+                self.selection(),\n+                &cc.other_path,\n+                if let Some(inv) = invocation {\n+                    &inv.args\n+                } else {\n+                    &None\n+                },\n+            )\n+        };\n+        match &verb.execution {\n+            VerbExecution::Internal(internal_exec) => self.on_internal(\n+                w,\n+                internal_exec,\n+                invocation,\n+                trigger_type,\n+                cc,\n+                screen,\n+            ),\n+            VerbExecution::External(external) => {\n+                external.to_cmd_result(\n+                    w,\n+                    exec_builder(),\n+                    &cc.con,\n+                )\n+            }\n+            VerbExecution::Sequence(seq_ex) => {\n+                let sequence = Sequence {\n+                    raw: exec_builder().shell_exec_string(&seq_ex.sequence.raw),\n+                    separator: seq_ex.sequence.separator.clone(),\n+                };\n+                Ok(AppStateCmdResult::ExecuteSequence {\n+                    sequence,\n+                })\n+            }\n+        }\n+    }\n+\n     /// change the state, does no rendering\n     fn on_command(\n         &mut self,\ndiff --git a/src/app/state.rs b/src/app/state.rs\n--- a/src/app/state.rs\n+++ b/src/app/state.rs\n@@ -185,30 +237,14 @@ pub trait AppState {\n             Command::VerbTrigger {\n                 index,\n                 input_invocation,\n-            } => {\n-                let verb = &con.verb_store.verbs[*index];\n-                match &verb.execution {\n-                    VerbExecution::Internal(internal_exec) => self.on_internal(\n-                        w,\n-                        internal_exec,\n-                        input_invocation.as_ref(),\n-                        TriggerType::Other,\n-                        cc,\n-                        screen,\n-                    ),\n-                    VerbExecution::External(external) => external.to_cmd_result(\n-                        w,\n-                        self.selection(),\n-                        &cc.other_path,\n-                        if let Some(inv) = &input_invocation {\n-                            &inv.args\n-                        } else {\n-                            &None\n-                        },\n-                        con,\n-                    ),\n-                }\n-            }\n+            } => self.execute_verb(\n+                w,\n+                &con.verb_store.verbs[*index],\n+                input_invocation.as_ref(),\n+                TriggerType::Other,\n+                cc,\n+                screen,\n+            ),\n             Command::Internal {\n                 internal,\n                 input_invocation,\ndiff --git a/src/app/state.rs b/src/app/state.rs\n--- a/src/app/state.rs\n+++ b/src/app/state.rs\n@@ -220,30 +256,22 @@ pub trait AppState {\n                 cc,\n                 screen,\n             ),\n-            Command::VerbInvocate(invocation) => match con.verb_store.search(&invocation.name) {\n+            Command::VerbInvocate(invocation) => match con.verb_store.search(\n+                &invocation.name,\n+                Some(self.selection().stype), // TODO avoid recomputing selection\n+            ) {\n                 PrefixSearchResult::Match(_, verb) => {\n                     if let Some(err) = verb.check_args(invocation, &cc.other_path) {\n                         Ok(AppStateCmdResult::DisplayError(err))\n                     } else {\n-                        match &verb.execution {\n-                            VerbExecution::Internal(internal_exec) => self.on_internal(\n-                                w,\n-                                internal_exec,\n-                                Some(invocation),\n-                                TriggerType::Input,\n-                                cc,\n-                                screen,\n-                            ),\n-                            VerbExecution::External(external) => {\n-                                external.to_cmd_result(\n-                                    w,\n-                                    self.selection(),\n-                                    &cc.other_path,\n-                                    &invocation.args,\n-                                    con,\n-                                )\n-                            }\n-                        }\n+                        self.execute_verb(\n+                            w,\n+                            verb,\n+                            Some(invocation),\n+                            TriggerType::Input,\n+                            cc,\n+                            screen,\n+                        )\n                     }\n                 }\n                 _ => Ok(AppStateCmdResult::verb_not_found(&invocation.name)),\ndiff --git a/src/app/state.rs b/src/app/state.rs\n--- a/src/app/state.rs\n+++ b/src/app/state.rs\n@@ -363,7 +391,10 @@ pub trait AppState {\n                         false,\n                     )\n                 } else {\n-                    match con.verb_store.search(&invocation.name) {\n+                    match con.verb_store.search(\n+                        &invocation.name,\n+                        Some(self.selection().stype),\n+                    ) {\n                         PrefixSearchResult::NoMatch => {\n                             Status::new(\"No matching verb (*?* for the list of verbs)\", true)\n                         }\ndiff --git a/src/browser/browser_state.rs b/src/browser/browser_state.rs\n--- a/src/browser/browser_state.rs\n+++ b/src/browser/browser_state.rs\n@@ -6,7 +6,6 @@ use {\n         errors::{ProgramError, TreeBuildError},\n         flag::Flag,\n         git,\n-        launchable::Launchable,\n         pattern::*,\n         path,\n         path_anchor::PathAnchor,\ndiff --git a/src/browser/browser_state.rs b/src/browser/browser_state.rs\n--- a/src/browser/browser_state.rs\n+++ b/src/browser/browser_state.rs\n@@ -19,8 +18,6 @@ use {\n     },\n     open,\n     std::{\n-        fs::OpenOptions,\n-        io::Write,\n         path::{Path, PathBuf},\n     },\n     termimad::Area,\ndiff --git a/src/browser/browser_state.rs b/src/browser/browser_state.rs\n--- a/src/browser/browser_state.rs\n+++ b/src/browser/browser_state.rs\n@@ -155,37 +152,6 @@ impl BrowserState {\n         }\n     }\n \n-    pub fn open_selection_quit_broot(\n-        &mut self,\n-        w: &mut W,\n-        con: &AppContext,\n-    ) -> Result<AppStateCmdResult, ProgramError> {\n-        let tree = self.displayed_tree();\n-        let line = tree.selected_line();\n-        match &line.line_type {\n-            TreeLineType::File => make_opener(line.path.clone(), line.is_exe(), con),\n-            TreeLineType::Dir | TreeLineType::SymLinkToDir(_) => {\n-                Ok(if con.launch_args.cmd_export_path.is_some() {\n-                    CD.to_cmd_result(w, line.as_selection(), &None, &None, con)?\n-                } else {\n-                    AppStateCmdResult::DisplayError(\n-                        \"This feature needs broot to be launched with the `br` script\".to_owned(),\n-                    )\n-                })\n-            }\n-            TreeLineType::SymLinkToFile(target) => {\n-                make_opener(\n-                    PathBuf::from(target),\n-                    line.is_exe(), // today this always return false\n-                    con,\n-                )\n-            }\n-            _ => {\n-                unreachable!();\n-            }\n-        }\n-    }\n-\n     pub fn go_to_parent(\n         &mut self,\n         screen: &mut Screen,\ndiff --git a/src/browser/browser_state.rs b/src/browser/browser_state.rs\n--- a/src/browser/browser_state.rs\n+++ b/src/browser/browser_state.rs\n@@ -209,32 +175,6 @@ impl BrowserState {\n \n }\n \n-/// build a AppStateCmdResult with a launchable which will be used to\n-///  1/ quit broot\n-///  2/ open the relevant file the best possible way\n-fn make_opener(\n-    path: PathBuf,\n-    is_exe: bool,\n-    con: &AppContext,\n-) -> Result<AppStateCmdResult, ProgramError> {\n-    Ok(if is_exe {\n-        let path = path.to_string_lossy().to_string();\n-        if let Some(export_path) = &con.launch_args.cmd_export_path {\n-            // broot was launched as br, we can launch the executable from the shell\n-            let f = OpenOptions::new().append(true).open(export_path)?;\n-            writeln!(&f, \"{}\", path)?;\n-            AppStateCmdResult::Quit\n-        } else {\n-            AppStateCmdResult::from(Launchable::program(\n-                vec![path],\n-                None, // we don't set the working directory\n-            )?)\n-        }\n-    } else {\n-        AppStateCmdResult::from(Launchable::opener(path))\n-    })\n-}\n-\n impl AppState for BrowserState {\n \n     fn get_pending_task(&self) -> Option<&'static str> {\ndiff --git a/src/browser/browser_state.rs b/src/browser/browser_state.rs\n--- a/src/browser/browser_state.rs\n+++ b/src/browser/browser_state.rs\n@@ -249,7 +189,6 @@ impl AppState for BrowserState {\n         }\n     }\n \n-\n     fn selected_path(&self) -> &Path {\n         &self.displayed_tree().selected_line().path\n     }\ndiff --git a/src/browser/browser_state.rs b/src/browser/browser_state.rs\n--- a/src/browser/browser_state.rs\n+++ b/src/browser/browser_state.rs\n@@ -352,7 +291,6 @@ impl AppState for BrowserState {\n             },\n             Internal::open_stay => self.open_selection_stay_in_broot(screen, con, bang, false)?,\n             Internal::open_stay_filter => self.open_selection_stay_in_broot(screen, con, bang, true)?,\n-            Internal::open_leave => self.open_selection_quit_broot(w, con)?,\n             Internal::line_down => {\n                 self.displayed_tree_mut().move_selection(1, page_height);\n                 AppStateCmdResult::Keep\ndiff --git a/src/cli.rs b/src/cli.rs\n--- a/src/cli.rs\n+++ b/src/cli.rs\n@@ -27,7 +27,6 @@ use {\n     },\n };\n \n-\n /// launch arguments related to installation\n /// (not used by the application after the first step)\n struct InstallLaunchArgs {\ndiff --git a/src/command/completion.rs b/src/command/completion.rs\n--- a/src/command/completion.rs\n+++ b/src/command/completion.rs\n@@ -81,8 +81,9 @@ impl Completions {\n     fn for_verb(\n         start: &str,\n         con: &AppContext,\n+        sel: Selection<'_>,\n     ) -> Self {\n-        match con.verb_store.search(start) {\n+        match con.verb_store.search(start, Some(sel.stype)) {\n             PrefixSearchResult::NoMatch => {\n                 Self::None\n             }\ndiff --git a/src/command/completion.rs b/src/command/completion.rs\n--- a/src/command/completion.rs\n+++ b/src/command/completion.rs\n@@ -146,7 +147,7 @@ impl Completions {\n         if arg.contains(' ') {\n             Self::None\n         } else {\n-            let anchor = match con.verb_store.search(verb_name) {\n+            let anchor = match con.verb_store.search(verb_name, Some(sel.stype)) {\n                 PrefixSearchResult::Match(_, verb) => verb.get_arg_anchor(),\n                 _ => PathAnchor::Unspecified,\n             };\ndiff --git a/src/command/completion.rs b/src/command/completion.rs\n--- a/src/command/completion.rs\n+++ b/src/command/completion.rs\n@@ -170,7 +171,7 @@ impl Completions {\n                 match &invocation.args {\n                     None => {\n                         // looking into verb completion\n-                        Self::for_verb(&invocation.name, con)\n+                        Self::for_verb(&invocation.name, con, sel)\n                     }\n                     Some(args) if !args.is_empty() => {\n                         // looking into arg completion\ndiff --git a/src/command/sequence.rs b/src/command/sequence.rs\n--- a/src/command/sequence.rs\n+++ b/src/command/sequence.rs\n@@ -12,10 +12,10 @@ use {\n \n /// an unparsed sequence with its separator (which may be\n /// different from the one provided by local_separator())\n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct Sequence {\n-    pub separator: String,\n     pub raw: String,\n+    pub separator: String,\n }\n \n impl Sequence {\ndiff --git a/src/command/sequence.rs b/src/command/sequence.rs\n--- a/src/command/sequence.rs\n+++ b/src/command/sequence.rs\n@@ -26,10 +26,10 @@ impl Sequence {\n             _ => String::from(\";\"),\n         }\n     }\n-    pub fn new(separator: String, raw: String) -> Self {\n+    pub fn new(raw: String, separator: Option<String>) -> Self {\n         Self {\n-            separator,\n             raw,\n+            separator: separator.unwrap_or_else(|| Sequence::local_separator()),\n         }\n     }\n     pub fn new_single(cmd: String) -> Self {\ndiff --git a/src/command/sequence.rs b/src/command/sequence.rs\n--- a/src/command/sequence.rs\n+++ b/src/command/sequence.rs\n@@ -75,16 +75,14 @@ fn add_commands(\n     let raw_parts = CommandParts::from(input.to_string());\n     let (pattern, verb_invocation) = raw_parts.split();\n     if let Some(pattern) = pattern {\n-        debug!(\"adding pattern: {:?}\", pattern);\n         commands.push((input.to_string(), Command::from_parts(pattern, false)));\n     }\n     if let Some(verb_invocation) = verb_invocation {\n-        debug!(\"adding verb_invocation: {:?}\", verb_invocation);\n         let command = Command::from_parts(verb_invocation, true);\n         if let Command::VerbInvocate(invocation) = &command {\n             // we check that the verb exists to avoid running a sequence\n             // of actions with some missing\n-            match con.verb_store.search(&invocation.name) {\n+            match con.verb_store.search(&invocation.name, None) {\n                 PrefixSearchResult::NoMatch => {\n                     return Err(ProgramError::UnknownVerb {\n                         name: invocation.name.to_string(),\ndiff --git a/src/conf/conf.rs b/src/conf/conf.rs\n--- a/src/conf/conf.rs\n+++ b/src/conf/conf.rs\n@@ -13,7 +13,7 @@ use {\n         pattern::{SearchModeMap, SearchModeMapEntry},\n         skin::{ExtColorMap, SkinEntry},\n         tree::*,\n-        verb::VerbConf,\n+        verb::{VerbConf, VerbExecutionType},\n     },\n     crossterm::style::Attribute,\n     std::{\ndiff --git a/src/conf/conf.rs b/src/conf/conf.rs\n--- a/src/conf/conf.rs\n+++ b/src/conf/conf.rs\n@@ -61,6 +61,82 @@ fn bool_field(value: &Value, field_name: &str) -> Option<bool> {\n     None\n }\n \n+\n+/// read a TOML parsed value into a VerbConf element,\n+/// checking a few basic things in the process\n+fn verb_conf(verb_value: &Value) -> Result<VerbConf, String> {\n+    let invocation = string_field(verb_value, \"invocation\");\n+    let key = string_field(verb_value, \"key\")\n+        .map(|s| keys::parse_key(&s))\n+        .transpose()\n+        .map_err(|e| e.to_string())?;\n+    if let Some(key) = key {\n+        if keys::is_reserved(key) {\n+            return Err(format!(\"The {} key is reserved\", keys::key_event_desc(key)));\n+        }\n+    }\n+    let execution = string_field(verb_value, \"execution\");\n+    let internal = string_field(verb_value, \"internal\");\n+    let external = string_field(verb_value, \"external\");\n+    let cmd = string_field(verb_value, \"cmd\");\n+    let (execution, execution_type) = match (execution, internal, external, cmd) {\n+        // old definition with \"execution\": we guess whether it's an internal or\n+        // an external\n+        (Some(s), None, None, None) => if s.starts_with(':') || s.starts_with(' ') {\n+            (s, VerbExecutionType::Internal)\n+        } else {\n+            (s, VerbExecutionType::External)\n+        }\n+        // \"internal\": the leading `:` or ` ` is optional, we add it if it's missing\n+        (None, Some(s), None, None) => (\n+            if s.starts_with(':') || s.starts_with(' ') {\n+                s\n+            } else {\n+                format!(\":{}\", s)\n+            },\n+            VerbExecutionType::Internal,\n+        ),\n+        // \"external\": it can be about any form\n+        (None, None, Some(s), None) => (s, VerbExecutionType::External),\n+        // \"cmd\": it's a sequence\n+        (None, None, None, Some(s)) => (s, VerbExecutionType::Sequence),\n+        _ => {\n+            return Err(\"You must define either internal, external or cmd\".to_string());\n+        }\n+    };\n+    let cmd_separator = string_field(verb_value, \"cmd_separator\");\n+    let from_shell = bool_field(verb_value, \"from_shell\");\n+    let leave_broot = bool_field(verb_value, \"leave_broot\");\n+    if leave_broot == Some(false) && from_shell == Some(true) {\n+        return Err(\n+            \"You can't simultaneously have leave_broot=false and from_shell=true\".to_string()\n+        );\n+    }\n+    let selection_condition = match string_field(verb_value, \"apply_to\").as_deref() {\n+        Some(\"file\") => SelectionType::File,\n+        Some(\"directory\") => SelectionType::Directory,\n+        Some(\"any\") => SelectionType::Any,\n+        None => SelectionType::Any,\n+        Some(s) => {\n+            return Err(format!(\"{:?} isn't a valid value of apply_to\", s));\n+        }\n+    };\n+    let set_working_dir = bool_field(verb_value, \"set_working_dir\");\n+    Ok(VerbConf {\n+        invocation,\n+        execution,\n+        key,\n+        shortcut: string_field(verb_value, \"shortcut\"),\n+        description: string_field(verb_value, \"description\"),\n+        from_shell,\n+        leave_broot,\n+        selection_condition,\n+        set_working_dir,\n+        execution_type,\n+        cmd_separator,\n+    })\n+}\n+\n impl Conf {\n \n     pub fn default_location() -> &'static Path {\ndiff --git a/src/conf/conf.rs b/src/conf/conf.rs\n--- a/src/conf/conf.rs\n+++ b/src/conf/conf.rs\n@@ -130,59 +206,14 @@ impl Conf {\n         // reading verbs\n         if let Some(Value::Array(verbs_value)) = &root.get(\"verbs\") {\n             for verb_value in verbs_value.iter() {\n-                let invocation = string_field(verb_value, \"invocation\");\n-                let key = string_field(verb_value, \"key\")\n-                    .map(|s| keys::parse_key(&s))\n-                    .transpose()?;\n-                if let Some(key) = key {\n-                    if keys::is_reserved(key) {\n-                        return Err(ConfError::ReservedKey {\n-                            key: keys::key_event_desc(key),\n-                        });\n+                match verb_conf(verb_value) {\n+                    Ok(verb_conf) => {\n+                        self.verbs.push(verb_conf);\n                     }\n-                }\n-                let execution = match string_field(verb_value, \"execution\") {\n-                    Some(s) => s,\n-                    None => {\n-                        eprintln!(\"Invalid [[verbs]] entry in configuration\");\n-                        eprintln!(\"Missing execution\");\n-                        continue;\n+                    Err(s) => {\n+                        eprintln!(\"Invalid [[verbs]] entry in configuration: {:?}\", s);\n                     }\n-                };\n-                let from_shell = bool_field(verb_value, \"from_shell\");\n-                let leave_broot = bool_field(verb_value, \"leave_broot\");\n-                if leave_broot == Some(false) && from_shell == Some(true) {\n-                    eprintln!(\"Invalid [[verbs]] entry in configuration\");\n-                    eprintln!(\n-                        \"You can't simultaneously have leave_broot=false and from_shell=true\"\n-                    );\n-                    continue;\n                 }\n-                let selection_condition = match string_field(verb_value, \"apply_to\").as_deref() {\n-                    Some(\"file\") => SelectionType::File,\n-                    Some(\"directory\") => SelectionType::Directory,\n-                    Some(\"any\") => SelectionType::Any,\n-                    None => SelectionType::Any,\n-                    Some(s) => {\n-                        eprintln!(\"Invalid [[verbs]] entry in configuration\");\n-                        eprintln!(\"{:?} isn't a valid value of apply_to\", s);\n-                        continue;\n-                    }\n-                };\n-                let set_working_dir = bool_field(verb_value, \"set_working_dir\");\n-                let verb_conf = VerbConf {\n-                    invocation,\n-                    execution,\n-                    key,\n-                    shortcut: string_field(verb_value, \"shortcut\"),\n-                    description: string_field(verb_value, \"description\"),\n-                    from_shell,\n-                    leave_broot,\n-                    selection_condition,\n-                    set_working_dir,\n-                };\n-\n-                self.verbs.push(verb_conf);\n             }\n         }\n         // reading the skin\ndiff --git a/src/conf/default_conf.rs b/src/conf/default_conf.rs\n--- a/src/conf/default_conf.rs\n+++ b/src/conf/default_conf.rs\n@@ -133,11 +133,18 @@ leave_broot = false\n # uncomment if you want to launch a terminal on ctrl-T\n # (on exit you'll be back in broot)\n # [[verbs]]\n+# invocation = \"terminal\"\n # key = \"ctrl-t\"\n # execution = \"$SHELL\"\n # set_working_dir = true\n # leave_broot = false\n \n+# Here's an example of a shorctut bringing you to your home directory\n+# [[verbs]]\n+# invocation = \"home\"\n+# key = \"ctrl-home\"\n+# execution = \":focus ~\"\n+\n # A popular set of shorctuts for going up and down:\n #\n # [[verbs]]\ndiff --git a/src/help/help_state.rs b/src/help/help_state.rs\n--- a/src/help/help_state.rs\n+++ b/src/help/help_state.rs\n@@ -42,6 +42,7 @@ impl AppState for HelpState {\n         Selection {\n             path: Conf::default_location(),\n             stype: SelectionType::File,\n+            is_exe: false,\n             line: 0,\n         }\n     }\ndiff --git a/src/image/image_view.rs b/src/image/image_view.rs\n--- a/src/image/image_view.rs\n+++ b/src/image/image_view.rs\n@@ -68,7 +68,6 @@ impl ImageView {\n         let bg = styles.preview.get_bg()\n             .or_else(|| styles.default.get_bg())\n             .unwrap_or(Color::AnsiValue(238));\n-        debug!(\"true colors: {:?}\", con.true_colors);\n         let mut double_line = DoubleLine::new(width as usize, con.true_colors);\n         let mut y = area.top;\n         let margin = area.width as usize - width as usize;\ndiff --git a/src/preview/preview_state.rs b/src/preview/preview_state.rs\n--- a/src/preview/preview_state.rs\n+++ b/src/preview/preview_state.rs\n@@ -155,6 +155,7 @@ impl AppState for PreviewState {\n         Selection {\n             path: &self.path,\n             stype: SelectionType::File,\n+            is_exe: false, // not always true. It means :open_leave won't execute it\n             line: self.preview.get_selected_line_number().unwrap_or(0),\n         }\n     }\ndiff --git a/src/tree/tree_line.rs b/src/tree/tree_line.rs\n--- a/src/tree/tree_line.rs\n+++ b/src/tree/tree_line.rs\n@@ -85,6 +85,7 @@ impl TreeLine {\n         Selection {\n             path: &self.path,\n             stype: self.selection_type(),\n+            is_exe: self.is_exe(),\n             line: 0,\n         }\n     }\ndiff --git a/src/verb/builtin.rs b/src/verb/builtin.rs\n--- a/src/verb/builtin.rs\n+++ b/src/verb/builtin.rs\n@@ -1,132 +1,185 @@\n use {\n-    super::Verb,\n-    crate::keys::*,\n+    super::*,\n+    crate::{\n+        app::SelectionType,\n+        keys::*,\n+    },\n     crossterm::event::{KeyCode, KeyEvent, KeyModifiers},\n };\n \n+fn build_internal(\n+    internal: Internal,\n+    bang: bool,\n+) -> Verb {\n+    let invocation = internal.invocation_pattern();\n+    let execution = VerbExecution::Internal(\n+        InternalExecution::from_internal_bang(internal, bang)\n+    );\n+    let description = VerbDescription::from_text(internal.description().to_string());\n+    Verb::new(Some(invocation), execution, description).unwrap()\n+}\n+\n+fn internal(\n+    internal: Internal,\n+) -> Verb {\n+    build_internal(internal, false)\n+}\n+\n+fn internal_bang(\n+    internal: Internal,\n+) -> Verb {\n+    build_internal(internal, true)\n+}\n+\n+fn external(\n+    invocation_str: &str,\n+    execution_str: &str,\n+    exec_mode: ExternalExecutionMode,\n+) -> Verb {\n+    let execution = VerbExecution::External(ExternalExecution::new(\n+        execution_str,\n+        exec_mode,\n+    ));\n+    Verb::new(\n+        Some(invocation_str),\n+        execution,\n+        VerbDescription::from_code(execution_str.to_string()),\n+    ).unwrap()\n+}\n+\n /// declare the built_in verbs, the ones which are available\n /// in standard (they still may be overriden by configuration)\n pub fn builtin_verbs() -> Vec<Verb> {\n     use super::{ExternalExecutionMode::*, Internal::*};\n     vec![\n-        Verb::internal(back),\n-        Verb::from(super::cd::CD.clone())\n-            .with_description(\"change directory and quit (mapped to *alt*-*enter*)\"),\n+        internal(back),\n+\n+        // those two operations are mapped on ALT-ENTER, one\n+        // for directories and the other one for the other files\n+        external(\n+            \"cd\",\n+            \"cd {directory}\",\n+            FromParentShell,\n+        )\n+            .with_stype(SelectionType::Directory)\n+            .with_key(ALT_ENTER)\n+            .with_description(\"change directory and quit\"),\n+        internal(open_leave) // calls the system open\n+            .with_key(ALT_ENTER)\n+            .with_shortcut(\"ol\"),\n+\n         #[cfg(unix)]\n-        Verb::external(\n+        external(\n             \"chmod {args}\",\n             \"chmod {args} {file}\",\n             StayInBroot,\n-        ).unwrap(),\n-        Verb::internal(open_preview),\n-        Verb::internal(close_preview),\n-        Verb::internal(toggle_preview),\n-        Verb::internal(preview_image),\n-        Verb::internal(preview_text),\n-        Verb::internal(preview_binary),\n-        Verb::internal(close_panel_ok),\n-        Verb::internal(close_panel_cancel)\n+        ),\n+        internal(open_preview),\n+        internal(close_preview),\n+        internal(toggle_preview),\n+        internal(preview_image),\n+        internal(preview_text),\n+        internal(preview_binary),\n+        internal(close_panel_ok),\n+        internal(close_panel_cancel)\n             .with_key(BACK_TAB)\n             .with_control_key('w'),\n-        Verb::external(\n+        external(\n             \"copy {newpath:path-from-parent}\",\n             \"/bin/cp -r {file} {newpath:path-from-parent}\",\n             StayInBroot,\n-        ).unwrap()\n+        )\n             .with_shortcut(\"cp\"),\n         #[cfg(feature=\"clipboard\")]\n-        Verb::internal(copy_path)\n+        internal(copy_path)\n             .with_alt_key('c'),\n-        Verb::external(\n+        external(\n             \"copy_to_panel\",\n             \"/bin/cp -r {file} {other-panel-directory}\",\n             StayInBroot,\n-        ).unwrap()\n+        )\n             .with_shortcut(\"cpp\"),\n         // :focus is also hardcoded on Enter on directories\n         // but ctrl-f is useful for focusing on a file's parent\n         // (and keep the filter)\n-        Verb::internal(focus)\n+        internal(focus)\n             .with_control_key('f'),\n-        Verb::internal(help).with_key(F1).with_shortcut(\"?\"),\n+        internal(help).with_key(F1).with_shortcut(\"?\"),\n         #[cfg(feature=\"clipboard\")]\n-        Verb::internal(input_paste)\n+        internal(input_paste)\n             .with_control_key('v'),\n-        Verb::internal(line_down).with_key(DOWN),\n-        Verb::internal(line_up).with_key(UP),\n-        Verb::external(\n+        internal(line_down).with_key(DOWN),\n+        internal(line_up).with_key(UP),\n+        external(\n             \"mkdir {subpath}\",\n             \"/bin/mkdir -p {subpath:path-from-directory}\",\n             StayInBroot,\n-        ).unwrap()\n+        )\n             .with_shortcut(\"md\"),\n-        Verb::external(\n+        external(\n             \"move {newpath:path-from-parent}\",\n             \"/bin/mv {file} {newpath:path-from-parent}\",\n             StayInBroot,\n-        ).unwrap()\n+        )\n             .with_shortcut(\"mv\"),\n-        Verb::external(\n+        external(\n             \"move_to_panel\",\n             \"/bin/mv {file} {other-panel-directory}\",\n             StayInBroot,\n-        ).unwrap()\n+        )\n             .with_shortcut(\"mvp\"),\n-        Verb::internal_bang(start_end_panel)\n+        internal_bang(start_end_panel)\n             .with_control_key('p'),\n-        Verb::internal(next_match)\n+        internal(next_match)\n             .with_key(TAB),\n-        Verb::internal(no_sort)\n+        internal(no_sort)\n             .with_shortcut(\"ns\"),\n-        Verb::internal(open_stay)\n+        internal(open_stay)\n             .with_key(ENTER)\n             .with_shortcut(\"os\"),\n-        Verb::internal(open_stay_filter)\n+        internal(open_stay_filter)\n             .with_shortcut(\"osf\"),\n-        Verb::internal(open_leave)\n-            .with_key(ALT_ENTER)\n-            .with_shortcut(\"ol\"),\n-        Verb::internal(parent).with_shortcut(\"p\"),\n-        Verb::internal(page_down).with_key(PAGE_DOWN),\n-        Verb::internal(page_up).with_key(PAGE_UP),\n-        Verb::internal(panel_left)\n+        internal(parent).with_shortcut(\"p\"),\n+        internal(page_down).with_key(PAGE_DOWN),\n+        internal(page_up).with_key(PAGE_UP),\n+        internal(panel_left)\n             .with_key(KeyEvent {\n                 code: KeyCode::Left,\n                 modifiers: KeyModifiers::CONTROL,\n             }),\n-        Verb::internal(panel_right)\n+        internal(panel_right)\n             .with_key(KeyEvent {\n                 code: KeyCode::Right,\n                 modifiers: KeyModifiers::CONTROL,\n             }),\n-        Verb::internal(print_path).with_shortcut(\"pp\"),\n-        Verb::internal(print_relative_path).with_shortcut(\"prp\"),\n-        Verb::internal(print_tree).with_shortcut(\"pt\"),\n-        Verb::internal(quit)\n+        internal(print_path).with_shortcut(\"pp\"),\n+        internal(print_relative_path).with_shortcut(\"prp\"),\n+        internal(print_tree).with_shortcut(\"pt\"),\n+        internal(quit)\n             .with_control_key('c')\n             .with_control_key('q')\n             .with_shortcut(\"q\"),\n-        Verb::internal(refresh).with_key(F5),\n-        Verb::internal(sort_by_count).with_shortcut(\"sc\"),\n-        Verb::internal(sort_by_date).with_shortcut(\"sd\"),\n-        Verb::internal(sort_by_size).with_shortcut(\"ss\"),\n-        Verb::external(\n+        internal(refresh).with_key(F5),\n+        internal(sort_by_count).with_shortcut(\"sc\"),\n+        internal(sort_by_date).with_shortcut(\"sd\"),\n+        internal(sort_by_size).with_shortcut(\"ss\"),\n+        external(\n             \"rm\",\n             \"/bin/rm -rf {file}\",\n             StayInBroot,\n-        ).unwrap(),\n-        Verb::internal(toggle_counts).with_shortcut(\"counts\"),\n-        Verb::internal(toggle_dates).with_shortcut(\"dates\"),\n-        Verb::internal(toggle_files).with_shortcut(\"files\"),\n-        Verb::internal(toggle_git_ignore).with_shortcut(\"gi\"),\n-        Verb::internal(toggle_git_file_info).with_shortcut(\"gf\"),\n-        Verb::internal(toggle_git_status).with_shortcut(\"gs\"),\n-        Verb::internal(toggle_hidden).with_shortcut(\"h\"),\n+        ),\n+        internal(toggle_counts).with_shortcut(\"counts\"),\n+        internal(toggle_dates).with_shortcut(\"dates\"),\n+        internal(toggle_files).with_shortcut(\"files\"),\n+        internal(toggle_git_ignore).with_shortcut(\"gi\"),\n+        internal(toggle_git_file_info).with_shortcut(\"gf\"),\n+        internal(toggle_git_status).with_shortcut(\"gs\"),\n+        internal(toggle_hidden).with_shortcut(\"h\"),\n         #[cfg(unix)]\n-        Verb::internal(toggle_perm).with_shortcut(\"perm\"),\n-        Verb::internal(toggle_sizes).with_shortcut(\"sizes\"),\n-        Verb::internal(toggle_trim_root),\n-        Verb::internal(total_search).with_control_key('s'),\n-        Verb::internal(up_tree).with_shortcut(\"up\"),\n+        internal(toggle_perm).with_shortcut(\"perm\"),\n+        internal(toggle_sizes).with_shortcut(\"sizes\"),\n+        internal(toggle_trim_root),\n+        internal(total_search).with_control_key('s'),\n+        internal(up_tree).with_shortcut(\"up\"),\n     ]\n }\ndiff --git a/src/verb/cd.rs /dev/null\n--- a/src/verb/cd.rs\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-use super::{ExternalExecution, ExternalExecutionMode};\n-\n-lazy_static! {\n-    pub static ref CD: ExternalExecution = ExternalExecution::new(\n-        \"cd\",\n-        \"cd {directory}\",\n-        ExternalExecutionMode::FromParentShell,\n-    )\n-    .unwrap();\n-}\ndiff --git /dev/null b/src/verb/execution_builder.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/verb/execution_builder.rs\n@@ -0,0 +1,158 @@\n+\n+use {\n+    super::{\n+        GROUP,\n+        InvocationParser,\n+    },\n+    crate::{\n+        app::{Selection},\n+        path,\n+    },\n+    regex::{Captures},\n+    std::{\n+        collections::HashMap,\n+        path::{Path, PathBuf},\n+    },\n+};\n+\n+/// a temporary structure gathering selection and invocation\n+/// parameters and able to generate an executable string from\n+/// a verb's execution pattern\n+pub struct ExecutionStringBuilder<'b> {\n+    /// the current file selection\n+    pub sel: Selection<'b>,\n+\n+    /// the selection in the other panel, when there exactly two\n+    other_file: Option<&'b PathBuf>,\n+\n+    /// parsed arguments\n+    invocation_values: Option<HashMap<String, String>>,\n+}\n+\n+impl<'b> ExecutionStringBuilder<'b> {\n+    pub fn from_selection(\n+        sel: Selection<'b>,\n+    ) -> Self {\n+        Self {\n+            sel,\n+            other_file: None,\n+            invocation_values: None,\n+        }\n+    }\n+    pub fn from_invocation(\n+        invocation_parser: &Option<InvocationParser>,\n+        sel: Selection<'b>,\n+        other_file: &'b Option<PathBuf>,\n+        invocation_args: & Option<String>,\n+    ) -> Self {\n+        let invocation_values = invocation_parser.as_ref().zip(invocation_args.as_ref())\n+            .and_then(|(parser, args)| parser.parse(args));\n+        Self {\n+            sel,\n+            other_file: other_file.as_ref(),\n+            invocation_values,\n+        }\n+    }\n+    fn get_file(&self) -> &Path {\n+        &self.sel.path\n+    }\n+    fn get_directory(&self) -> PathBuf {\n+        path::closest_dir(self.sel.path)\n+    }\n+    fn get_parent(&self) -> &Path {\n+        let file = &self.sel.path;\n+        file.parent().unwrap_or(file)\n+    }\n+    fn path_to_string(&self, path: &Path, escape: bool) -> String {\n+        if escape {\n+            path::escape_for_shell(path)\n+        } else {\n+            path.to_string_lossy().to_string()\n+        }\n+    }\n+    fn get_raw_capture_replacement(&self, ec: &Captures<'_>, escape: bool) -> Option<String> {\n+        let name = ec.get(1).unwrap().as_str();\n+        match name {\n+            \"line\" => Some(self.sel.line.to_string()),\n+            \"file\" => Some(self.path_to_string(self.get_file(), escape)),\n+            \"directory\" => Some(self.path_to_string(&self.get_directory(), escape)),\n+            \"parent\" => Some(self.path_to_string(self.get_parent(), escape)),\n+            \"other-panel-file\" => self.other_file.map(|p| self.path_to_string(p, escape)),\n+            \"other-panel-directory\" => {\n+                self.other_file\n+                    .map(|p| path::closest_dir(p))\n+                    .as_ref()\n+                    .map(|p| self.path_to_string(p, escape))\n+            }\n+            \"other-panel-parent\" => {\n+                self.other_file\n+                    .and_then(|p| p.parent())\n+                    .map(|p| self.path_to_string(p, escape))\n+            }\n+            _ => {\n+                // it's not one of the standard group names, so we'll look\n+                // into the ones provided by the invocation pattern\n+                self.invocation_values.as_ref()\n+                    .and_then(|map| map.get(name)\n+                        .map(|value| {\n+                            if let Some(fmt) = ec.get(2) {\n+                                match fmt.as_str() {\n+                                    \"path-from-directory\" => path::path_str_from(self.get_directory(), value),\n+                                    \"path-from-parent\" => path::path_str_from(self.get_parent(), value),\n+                                    _ => format!(\"invalid format: {:?}\", fmt.as_str()),\n+                                }\n+                            } else {\n+                                value.to_string()\n+                            }\n+                        })\n+                    )\n+            }\n+        }\n+    }\n+    fn get_capture_replacement(&self, ec: &Captures<'_>, escape: bool) -> String {\n+        self.get_raw_capture_replacement(ec, escape)\n+            .unwrap_or_else(|| ec[0].to_string())\n+    }\n+    /// build a shell compatible command, with escapings\n+    pub fn shell_exec_string(\n+        &self,\n+        exec_pattern: &str,\n+    ) -> String {\n+        GROUP\n+            .replace_all(\n+                exec_pattern,\n+                |ec: &Captures<'_>| self.get_capture_replacement(ec, true),\n+            )\n+            .to_string()\n+            .split_whitespace()\n+            .map(|token| {\n+                let path = Path::new(token);\n+                if path.exists() {\n+                    if let Some(path) = path.to_str() {\n+                        return path.to_string();\n+                    }\n+                }\n+                token.to_string()\n+            })\n+            .collect::<Vec<String>>()\n+            .join(\" \")\n+    }\n+    /// build a vec of tokens which can be passed to Command to\n+    /// launch an executable\n+    pub fn exec_token(\n+        &self,\n+        exec_pattern: &str,\n+    ) -> Vec<String> {\n+        exec_pattern\n+            .split_whitespace()\n+            .map(|token| {\n+                GROUP\n+                    .replace_all(\n+                        token,\n+                        |ec: &Captures<'_>| self.get_capture_replacement(ec, false),\n+                    )\n+                    .to_string()\n+            })\n+            .collect()\n+    }\n+}\ndiff --git a/src/verb/external_execution.rs b/src/verb/external_execution.rs\n--- a/src/verb/external_execution.rs\n+++ b/src/verb/external_execution.rs\n@@ -1,248 +1,87 @@\n-//! Special groups:\n-//! {file}\n-//! {directory}\n-//! {parent}\n-//! {other-panel-file}\n-//! {other-panel-directory}\n-//! {other-panel-parent}\n-\n use {\n-    super::{ExternalExecutionMode, VerbInvocation},\n+    super::*,\n     crate::{\n         app::*,\n         display::W,\n-        errors::{ConfError, ProgramError},\n+        errors::ProgramError,\n         launchable::Launchable,\n         path,\n-        path_anchor::PathAnchor,\n     },\n-    regex::{Captures, Regex},\n     std::{\n-        collections::HashMap,\n         fs::OpenOptions,\n         io::Write,\n-        path::{Path, PathBuf},\n     },\n };\n \n-fn path_to_string(path: &Path, for_shell: bool) -> String {\n-    if for_shell {\n-        path::escape_for_shell(path)\n-    } else {\n-        path.to_string_lossy().to_string()\n-    }\n-}\n-\n-lazy_static! {\n-    static ref GROUP: Regex = Regex::new(r\"\\{([^{}:]+)(?::([^{}:]+))?\\}\").unwrap();\n-}\n \n /// Definition of how the user input should be interpreted\n /// to be executed in an external command.\n #[derive(Debug, Clone)]\n pub struct ExternalExecution {\n-    /// pattern of how the command is supposed to be typed in the input\n-    invocation_pattern: VerbInvocation,\n-\n-    /// a regex to read the arguments in the user input\n-    args_parser: Option<Regex>,\n-\n     /// the pattern which will result in an exectuable string when\n-    /// completed with the args\n+    /// completed with the args.\n+    /// This pattern may include names coming from the invocation\n+    /// pattern (like {my-arg}) and special names automatically filled by\n+    /// broot from the selection and application state:\n+    /// * {file}\n+    /// * {directory}\n+    /// * {parent}\n+    /// * {other-panel-file}\n+    /// * {other-panel-directory}\n+    /// * {other-panel-parent}\n     pub exec_pattern: String,\n \n     /// how the external process must be launched\n     pub exec_mode: ExternalExecutionMode,\n \n-    /// contain the type of selection in case there's only one arg\n-    /// and it's a path (when it's not None, the user can type ctrl-P\n-    /// to select the argument in another panel)\n-    pub arg_selection_type: Option<SelectionType>,\n-\n-    pub arg_anchor: PathAnchor,\n-\n     /// whether the working dir of the external process must be set\n     /// to the current directory\n     pub set_working_dir: bool,\n \n-    /// whether we need to have a secondary panel for execution\n-    /// (which is the case when an invocation has {other-panel-file})\n-    pub need_another_panel: bool,\n }\n \n impl ExternalExecution {\n     pub fn new(\n-        invocation_str: &str,\n         execution_str: &str,\n         exec_mode: ExternalExecutionMode,\n-    ) -> Result<Self, ConfError> {\n-        let invocation_pattern = VerbInvocation::from(invocation_str);\n-        let mut args_parser = None;\n-        let mut arg_selection_type = None;\n-        let mut arg_anchor = PathAnchor::Unspecified;\n-        let mut need_another_panel = false;\n-        if let Some(args) = &invocation_pattern.args {\n-            let spec = GROUP.replace_all(args, r\"(?P<$1>.+)\");\n-            let spec = format!(\"^{}$\", spec);\n-            args_parser = match Regex::new(&spec) {\n-                Ok(regex) => Some(regex),\n-                Err(_) => {\n-                    return Err(ConfError::InvalidVerbInvocation { invocation: spec });\n-                }\n-            };\n-            if let Some(group) = GROUP.find(args) {\n-                if group.start() == 0 && group.end() == args.len() {\n-                    // there's one group, covering the whole args\n-                    arg_selection_type = Some(SelectionType::Any);\n-                    let group_str = group.as_str();\n-                    if group_str.ends_with(\"path-from-parent}\") {\n-                        arg_anchor = PathAnchor::Parent;\n-                    } else if group_str.ends_with(\"path-from-directory}\") {\n-                        arg_anchor = PathAnchor::Directory;\n-                    }\n-                }\n-            }\n-        }\n-        for group in GROUP.find_iter(execution_str) {\n-            if group.as_str().starts_with(\"{other-panel-\") {\n-                need_another_panel = true;\n-            }\n-        }\n-        Ok(Self {\n-            invocation_pattern,\n-            args_parser,\n+    ) -> Self {\n+        Self {\n             exec_pattern: execution_str.to_string(),\n             exec_mode,\n-            arg_selection_type,\n-            arg_anchor,\n-            need_another_panel,\n             set_working_dir: false,\n-        })\n-    }\n-\n-    pub fn name(&self) -> &str {\n-        &self.invocation_pattern.name\n-    }\n-\n-    /// Assuming the verb has been matched, check whether the arguments\n-    /// are OK according to the regex. Return none when there's no problem\n-    /// and return the error to display if arguments don't match\n-    pub fn check_args(\n-        &self,\n-        invocation: &VerbInvocation,\n-        other_path: &Option<PathBuf>,\n-    ) -> Option<String> {\n-        if self.need_another_panel && other_path.is_none() {\n-            return Some(\"This verb needs exactly two panels\".to_string());\n         }\n-        match (&invocation.args, &self.args_parser) {\n-            (None, None) => None,\n-            (None, Some(ref regex)) => {\n-                if regex.is_match(\"\") {\n-                    None\n-                } else {\n-                    Some(self.invocation_pattern.to_string_for_name(&invocation.name))\n-                }\n-            }\n-            (Some(ref s), Some(ref regex)) => {\n-                if regex.is_match(&s) {\n-                    None\n-                } else {\n-                    Some(self.invocation_pattern.to_string_for_name(&invocation.name))\n-                }\n-            }\n-            (Some(_), None) => Some(format!(\"{} doesn't take arguments\", invocation.name)),\n-        }\n-    }\n-\n-    /// build the map which will be used to replace braced parts (i.e. like {part}) in\n-    /// the execution pattern\n-    fn replacement_map(\n-        &self,\n-        sel: Selection<'_>,\n-        other_file: &Option<PathBuf>,\n-        args: &Option<String>,\n-        for_shell: bool,\n-    ) -> HashMap<String, String> {\n-        let mut map = HashMap::new();\n-        let file = sel.path;\n-        // first we add the replacements computed from the given path\n-        let parent = file.parent().unwrap_or(file); // when there's no parent... we take file\n-        let file_str = path_to_string(file, for_shell);\n-        let parent_str = path_to_string(parent, for_shell);\n-        map.insert(\"line\".to_string(), sel.line.to_string());\n-        map.insert(\"file\".to_string(), file_str.to_string());\n-        map.insert(\"parent\".to_string(), parent_str.to_string());\n-        let dir_str = if file.is_dir() { file_str } else { parent_str };\n-        map.insert(\"directory\".to_string(), dir_str);\n-        if self.need_another_panel {\n-            if let Some(other_file) = other_file {\n-                let other_parent = other_file.parent().unwrap_or(other_file);\n-                let other_file_str = path_to_string(other_file, for_shell);\n-                let other_parent_str = path_to_string(other_parent, for_shell);\n-                map.insert(\"other-panel-file\".to_string(), other_file_str.to_string());\n-                map.insert(\"other-panel-parent\".to_string(), other_parent_str.to_string());\n-                let other_dir_str = if other_file.is_dir() { other_file_str } else { other_parent_str };\n-                map.insert(\"other-panel-directory\".to_string(), other_dir_str);\n-            }\n-        }\n-        // then the ones computed from the user input\n-        let default_args;\n-        let args = match args {\n-            Some(s) => s,\n-            None => {\n-                // empty args are useful when the args_parser contains\n-                // an optional group\n-                default_args = String::new();\n-                &default_args\n-            }\n-        };\n-        if let Some(r) = &self.args_parser {\n-            if let Some(input_cap) = r.captures(&args) {\n-                for name in r.capture_names().flatten() {\n-                    if let Some(c) = input_cap.name(name) {\n-                        map.insert(name.to_string(), c.as_str().to_string());\n-                    }\n-                }\n-            }\n-        }\n-        map\n     }\n \n     pub fn to_cmd_result(\n         &self,\n         w: &mut W,\n-        sel: Selection<'_>,\n-        other_file: &Option<PathBuf>,\n-        args: &Option<String>,\n+        builder: ExecutionStringBuilder<'_>,\n         con: &AppContext,\n     ) -> Result<AppStateCmdResult, ProgramError> {\n         if self.exec_mode.is_from_shell() {\n-            self.exec_from_shell_cmd_result(sel, other_file, args, con)\n+            self.exec_from_shell_cmd_result(builder, con)\n         } else {\n-            self.exec_cmd_result(w, sel, other_file, args)\n+            self.exec_cmd_result(w, builder)\n         }\n     }\n \n     /// build the cmd result as an executable which will be called from shell\n     fn exec_from_shell_cmd_result(\n         &self,\n-        sel: Selection<'_>,\n-        other_file: &Option<PathBuf>,\n-        args: &Option<String>,\n+        builder: ExecutionStringBuilder<'_>,\n         con: &AppContext,\n     ) -> Result<AppStateCmdResult, ProgramError> {\n         if let Some(ref export_path) = con.launch_args.cmd_export_path {\n             // Broot was probably launched as br.\n             // the whole command is exported in the passed file\n             let f = OpenOptions::new().append(true).open(export_path)?;\n-            writeln!(&f, \"{}\", self.shell_exec_string(sel, other_file, args))?;\n+            writeln!(&f, \"{}\", builder.shell_exec_string(&self.exec_pattern))?;\n             Ok(AppStateCmdResult::Quit)\n         } else if let Some(ref export_path) = con.launch_args.file_export_path {\n             // old version of the br function: only the file is exported\n             // in the passed file\n             let f = OpenOptions::new().append(true).open(export_path)?;\n-            writeln!(&f, \"{}\", sel.path.to_string_lossy())?;\n+            writeln!(&f, \"{}\", builder.sel.path.to_string_lossy())?;\n             Ok(AppStateCmdResult::Quit)\n         } else {\n             Ok(AppStateCmdResult::DisplayError(\ndiff --git a/src/verb/external_execution.rs b/src/verb/external_execution.rs\n--- a/src/verb/external_execution.rs\n+++ b/src/verb/external_execution.rs\n@@ -257,14 +96,13 @@ impl ExternalExecution {\n     fn exec_cmd_result(\n         &self,\n         w: &mut W,\n-        sel: Selection<'_>,\n-        other_file: &Option<PathBuf>,\n-        args: &Option<String>,\n+        //sel: Selection<'_>,\n+        builder: ExecutionStringBuilder<'_>,\n     ) -> Result<AppStateCmdResult, ProgramError> {\n         let launchable = Launchable::program(\n-            self.exec_token(sel, other_file, args),\n+            builder.exec_token(&self.exec_pattern),\n             if self.set_working_dir {\n-                Some(path::closest_dir(sel.path))\n+                Some(path::closest_dir(builder.sel.path))\n             } else {\n                 None\n             },\ndiff --git a/src/verb/external_execution.rs b/src/verb/external_execution.rs\n--- a/src/verb/external_execution.rs\n+++ b/src/verb/external_execution.rs\n@@ -286,52 +124,4 @@ impl ExternalExecution {\n             }\n         }\n     }\n-\n-    /// build the token which can be used to launch en executable.\n-    /// This doesn't make sense for a built-in.\n-    fn exec_token(\n-        &self,\n-        sel: Selection<'_>,\n-        other_file: &Option<PathBuf>,\n-        args: &Option<String>,\n-    ) -> Vec<String> {\n-        let map = self.replacement_map(sel, other_file, args, false);\n-        self.exec_pattern\n-            .split_whitespace()\n-            .map(|token| {\n-                GROUP\n-                    .replace_all(token, |ec: &Captures<'_>| {\n-                        path::do_exec_replacement(ec, &map)\n-                    })\n-                    .to_string()\n-            })\n-            .collect()\n-    }\n-\n-    /// build a shell compatible command, with escapings\n-    pub fn shell_exec_string(\n-        &self,\n-        sel: Selection<'_>,\n-        other_file: &Option<PathBuf>,\n-        args: &Option<String>,\n-    ) -> String {\n-        let map = self.replacement_map(sel, other_file, args, true);\n-        GROUP\n-            .replace_all(&self.exec_pattern, |ec: &Captures<'_>| {\n-                path::do_exec_replacement(ec, &map)\n-            })\n-            .to_string()\n-            .split_whitespace()\n-            .map(|token| {\n-                let path = Path::new(token);\n-                if path.exists() {\n-                    if let Some(path) = path.to_str() {\n-                        return path.to_string();\n-                    }\n-                }\n-                token.to_string()\n-            })\n-            .collect::<Vec<String>>()\n-            .join(\" \")\n-    }\n }\ndiff --git a/src/verb/internal.rs b/src/verb/internal.rs\n--- a/src/verb/internal.rs\n+++ b/src/verb/internal.rs\n@@ -6,7 +6,6 @@\n \n use {\n     crate::errors::ConfError,\n-    std::path::Path,\n };\n \n macro_rules! Internals {\ndiff --git a/src/verb/internal.rs b/src/verb/internal.rs\n--- a/src/verb/internal.rs\n+++ b/src/verb/internal.rs\n@@ -40,13 +39,6 @@ macro_rules! Internals {\n                     $($name => $description,)*\n                 }\n             }\n-            pub fn applied_description(self, path: &Path) -> Option<String> {\n-                if self == Internal::focus {\n-                    Some(format!(\"focus `{}`\", path.to_string_lossy()))\n-                } else {\n-                    None\n-                }\n-            }\n         }\n     }\n }\ndiff --git a/src/verb/internal.rs b/src/verb/internal.rs\n--- a/src/verb/internal.rs\n+++ b/src/verb/internal.rs\n@@ -116,11 +108,16 @@ Internals! {\n }\n \n impl Internal {\n-    /// whether this internal accept a path as (optional) argument\n-    pub fn accept_path(self) -> bool {\n+    pub fn invocation_pattern(self) -> &'static str {\n+        match self {\n+            Internal::focus => r\"focus (?P<path>.*)?\",\n+            _ => self.name(),\n+        }\n+    }\n+    pub fn exec_pattern(self) -> &'static str {\n         match self {\n-            Internal::focus => true,\n-            _ => false,\n+            Internal::focus => r\"focus {path}\",\n+            _ => self.name(),\n         }\n     }\n }\ndiff --git a/src/verb/internal_execution.rs b/src/verb/internal_execution.rs\n--- a/src/verb/internal_execution.rs\n+++ b/src/verb/internal_execution.rs\n@@ -1,7 +1,6 @@\n use {\n     super::*,\n     crate::errors::ConfError,\n-    std::path::PathBuf,\n };\n \n /// A verb execution definition based on an internal\ndiff --git a/src/verb/internal_execution.rs b/src/verb/internal_execution.rs\n--- a/src/verb/internal_execution.rs\n+++ b/src/verb/internal_execution.rs\n@@ -35,25 +34,9 @@ impl InternalExecution {\n             arg: None,\n         }\n     }\n-    pub fn check_args(\n-        &self,\n-        invocation: &VerbInvocation,\n-        _other_path: &Option<PathBuf>,\n-    ) -> Option<String> {\n-        if invocation.args.is_some() && !self.internal.accept_path() {\n-            Some(format!(\"{} doesn't take arguments\", invocation.name))\n-        } else {\n-            None\n-        }\n-    }\n     pub fn try_from(invocation_str: &str) -> Result<Self, ConfError> {\n         let invocation = VerbInvocation::from(invocation_str);\n         let internal = Internal::try_from(&invocation.name)?;\n-        if invocation.args.is_some() && !internal.accept_path() {\n-            return Err(ConfError::UnexpectedInternalArg {\n-                invocation: invocation_str.to_string(),\n-            });\n-        }\n         Ok(Self {\n             internal,\n             bang: invocation.bang,\ndiff --git a/src/verb/internal_focus.rs b/src/verb/internal_focus.rs\n--- a/src/verb/internal_focus.rs\n+++ b/src/verb/internal_focus.rs\n@@ -110,8 +110,8 @@ pub fn on_internal(\n                     return on_path(path, screen, tree_options, bang, con);\n                 }\n                 _ => {\n-                    // the :focus internal was triggered by a key, which\n-                    // means the user wants to explore the arg with purpose\n+                    // the :focus internal was triggered by a key, and without internal arg,\n+                    // which means the user wants to explore the arg with purpose\n                     // of selecting a path\n                     let base_dir = selected_path.to_string_lossy();\n                     let path = path::path_from(&*base_dir, PathAnchor::Unspecified, input_arg);\ndiff --git /dev/null b/src/verb/invocation_parser.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/verb/invocation_parser.rs\n@@ -0,0 +1,126 @@\n+use {\n+    super::*,\n+    crate::{\n+        app::*,\n+        errors::ConfError,\n+        path_anchor::PathAnchor,\n+    },\n+    regex::Regex,\n+    std::{\n+        collections::HashMap,\n+        path::PathBuf,\n+    },\n+};\n+\n+\n+/// Definition of how the user input should be checked\n+/// and maybe parsed to provide the arguments used\n+/// for execution or description.\n+#[derive(Debug)]\n+pub struct InvocationParser {\n+\n+    /// pattern of how the command is supposed to be typed in the input\n+    pub invocation_pattern: VerbInvocation,\n+\n+    /// a regex to read the arguments in the user input\n+    args_parser: Option<Regex>,\n+\n+    /// whether the path, when non absolute, should be interpreted\n+    /// as relative to the closest directory (which may be the selection)\n+    /// or to the parent of the selection\n+    pub arg_anchor: PathAnchor,\n+\n+    /// contain the type of selection in case there's only one arg\n+    /// and it's a path (when it's not None, the user can type ctrl-P\n+    /// to select the argument in another panel)\n+    pub arg_selection_type: Option<SelectionType>,\n+\n+}\n+\n+impl InvocationParser {\n+\n+    pub fn new(\n+        invocation_str: &str,\n+    ) -> Result<Self, ConfError> {\n+        let invocation_pattern = VerbInvocation::from(invocation_str);\n+        let mut args_parser = None;\n+        let mut arg_selection_type = None;\n+        let mut arg_anchor = PathAnchor::Unspecified;\n+        if let Some(args) = &invocation_pattern.args {\n+            let spec = GROUP.replace_all(args, r\"(?P<$1>.+)\");\n+            let spec = format!(\"^{}$\", spec);\n+            args_parser = match Regex::new(&spec) {\n+                Ok(regex) => Some(regex),\n+                Err(_) => {\n+                    return Err(ConfError::InvalidVerbInvocation { invocation: spec });\n+                }\n+            };\n+            if let Some(group) = GROUP.find(args) {\n+                if group.start() == 0 && group.end() == args.len() {\n+                    // there's one group, covering the whole args\n+                    arg_selection_type = Some(SelectionType::Any);\n+                    let group_str = group.as_str();\n+                    if group_str.ends_with(\"path-from-parent}\") {\n+                        arg_anchor = PathAnchor::Parent;\n+                    } else if group_str.ends_with(\"path-from-directory}\") {\n+                        arg_anchor = PathAnchor::Directory;\n+                    }\n+                }\n+            }\n+        }\n+        Ok(Self {\n+            invocation_pattern,\n+            args_parser,\n+            arg_selection_type,\n+            arg_anchor,\n+        })\n+    }\n+\n+    pub fn name(&self) -> &str {\n+        &self.invocation_pattern.name\n+    }\n+\n+    /// Assuming the verb has been matched, check whether the arguments\n+    /// are OK according to the regex. Return none when there's no problem\n+    /// and return the error to display if arguments don't match\n+    pub fn check_args(\n+        &self,\n+        invocation: &VerbInvocation,\n+        _other_path: &Option<PathBuf>,\n+    ) -> Option<String> {\n+        match (&invocation.args, &self.args_parser) {\n+            (None, None) => None,\n+            (None, Some(ref regex)) => {\n+                if regex.is_match(\"\") {\n+                    None\n+                } else {\n+                    Some(self.invocation_pattern.to_string_for_name(&invocation.name))\n+                }\n+            }\n+            (Some(ref s), Some(ref regex)) => {\n+                if regex.is_match(&s) {\n+                    None\n+                } else {\n+                    Some(self.invocation_pattern.to_string_for_name(&invocation.name))\n+                }\n+            }\n+            (Some(_), None) => Some(format!(\"{} doesn't take arguments\", invocation.name)),\n+        }\n+    }\n+\n+    pub fn parse(&self, args: &str) -> Option<HashMap<String, String>> {\n+        self.args_parser.as_ref()\n+            .map(|r| {\n+                let mut map = HashMap::new();\n+                if let Some(input_cap) = r.captures(&args) {\n+                    for name in r.capture_names().flatten() {\n+                        if let Some(c) = input_cap.name(name) {\n+                            map.insert(name.to_string(), c.as_str().to_string());\n+                        }\n+                    }\n+                }\n+                map\n+            })\n+    }\n+\n+}\ndiff --git a/src/verb/mod.rs b/src/verb/mod.rs\n--- a/src/verb/mod.rs\n+++ b/src/verb/mod.rs\n@@ -1,10 +1,12 @@\n mod builtin;\n-mod cd;\n+mod execution_builder;\n mod external_execution;\n mod external_execution_mode;\n mod internal;\n mod internal_execution;\n pub mod internal_focus;\n+mod invocation_parser;\n+mod sequence_execution;\n mod verb;\n mod verb_conf;\n mod verb_description;\ndiff --git a/src/verb/mod.rs b/src/verb/mod.rs\n--- a/src/verb/mod.rs\n+++ b/src/verb/mod.rs\n@@ -13,19 +15,23 @@ mod verb_invocation;\n mod verb_store;\n \n pub use {\n-    cd::CD,\n+    execution_builder::ExecutionStringBuilder,\n     external_execution::ExternalExecution,\n     external_execution_mode::ExternalExecutionMode,\n-    //focus::{\n-    //    on_include,\n-    //    on_path,\n-    //},\n     internal::Internal,\n     internal_execution::InternalExecution,\n+    invocation_parser::InvocationParser,\n+    sequence_execution::SequenceExecution,\n     verb::Verb,\n-    verb_conf::VerbConf,\n+    verb_conf::{VerbConf, VerbExecutionType},\n     verb_description::VerbDescription,\n     verb_execution::VerbExecution,\n     verb_invocation::VerbInvocation,\n     verb_store::{PrefixSearchResult, VerbStore},\n };\n+\n+\n+// the group you find in invocation patterns and execution patterns\n+lazy_static! {\n+    pub static ref GROUP: regex::Regex = regex::Regex::new(r\"\\{([^{}:]+)(?::([^{}:]+))?\\}\").unwrap();\n+}\ndiff --git /dev/null b/src/verb/sequence_execution.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/verb/sequence_execution.rs\n@@ -0,0 +1,15 @@\n+\n+use {\n+    crate::{\n+        command::Sequence,\n+    },\n+};\n+\n+/// A verb execution definition based on a sequence\n+/// of commands\n+#[derive(Debug, Clone)]\n+pub struct SequenceExecution {\n+\n+    pub sequence: Sequence,\n+\n+}\ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -21,7 +21,7 @@ use {\n /// - internal behaviors (focusing a path, going back, showing the help, etc.)\n /// Some verbs are builtins, some other ones are created by configuration.\n /// Both builtins and configured vers can be internal or external based.\n-#[derive(Debug, Clone)]\n+#[derive(Debug)]\n pub struct Verb {\n     /// names (like \"cd\", \"focus\", \"focus_tab\", \"c\") by which\n     /// a verb can be called.\ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -36,7 +36,11 @@ pub struct Verb {\n     /// description of the optional keyboard key(s) triggering that verb\n     pub keys_desc: String,\n \n-    /// How the verb will be executed\n+    /// how the input must be checked and interpreted\n+    /// Can be empty if the verb is only called with a key shortcut.\n+    pub invocation_parser: Option<InvocationParser>,\n+\n+    /// how the verb will be executed\n     pub execution: VerbExecution,\n \n     /// a description\ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -44,63 +48,42 @@ pub struct Verb {\n \n     /// the type of selection this verb applies to\n     pub selection_condition: SelectionType,\n-}\n \n-impl From<ExternalExecution> for Verb {\n-    fn from(external_exec: ExternalExecution) -> Self {\n-        let name = Some(external_exec.name().to_string());\n-        let description = VerbDescription::from_code(external_exec.exec_pattern.to_string());\n-        let execution = VerbExecution::External(external_exec);\n-        Self::new(name, execution, description)\n-    }\n+    /// whether we need to have a secondary panel for execution\n+    /// (which is the case when the execution pattern has {other-panel-file})\n+    pub need_another_panel: bool,\n }\n \n impl Verb {\n \n     pub fn new(\n-        name: Option<String>,\n+        invocation_str: Option<&str>,\n         execution: VerbExecution,\n         description: VerbDescription,\n-    ) -> Self {\n+    ) -> Result<Self, ConfError> {\n+        let invocation_parser = invocation_str.map(InvocationParser::new).transpose()?;\n         let mut names = Vec::new();\n-        if let Some(name) = name {\n-            names.push(name);\n+        if let Some(ref invocation_parser) = invocation_parser {\n+            names.push(invocation_parser.name().to_string());\n         }\n-        Self {\n+        let mut need_another_panel = false;\n+        if let VerbExecution::External(ref external) = execution {\n+            for group in GROUP.find_iter(&external.exec_pattern) {\n+                if group.as_str().starts_with(\"{other-panel-\") {\n+                    need_another_panel = true;\n+                }\n+            }\n+        }\n+        Ok(Self {\n             names,\n             keys: Vec::new(),\n             keys_desc: \"\".to_string(),\n+            invocation_parser,\n             execution,\n             description,\n             selection_condition: SelectionType::Any,\n-        }\n-    }\n-\n-    pub fn internal(internal: Internal) -> Self {\n-        let name = Some(internal.name().to_string());\n-        let execution = VerbExecution::Internal(InternalExecution::from_internal(internal));\n-        let description = VerbDescription::from_text(internal.description().to_string());\n-        Self::new(name, execution, description)\n-    }\n-\n-    pub fn internal_bang(internal: Internal) -> Self {\n-        let name = None;\n-        let execution =\n-            VerbExecution::Internal(InternalExecution::from_internal_bang(internal, true));\n-        let description = VerbDescription::from_text(internal.description().to_string());\n-        Self::new(name, execution, description)\n-    }\n-\n-    pub fn external(\n-        invocation_str: &str,\n-        execution_str: &str,\n-        exec_mode: ExternalExecutionMode,\n-    ) -> Result<Self, ConfError> {\n-        Ok(Self::from(ExternalExecution::new(\n-            invocation_str,\n-            execution_str,\n-            exec_mode,\n-        )?))\n+            need_another_panel,\n+        })\n     }\n \n     pub fn with_key(mut self, key: KeyEvent) -> Self {\ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -133,6 +116,14 @@ impl Verb {\n         self.names.push(shortcut.to_string());\n         self\n     }\n+    pub fn with_stype(mut self, stype: SelectionType) -> Self {\n+        self.selection_condition = stype;\n+        self\n+    }\n+    pub fn needing_another_panel(mut self) -> Self {\n+        self.need_another_panel = true;\n+        self\n+    }\n \n     /// Assuming the verb has been matched, check whether the arguments\n     /// are OK according to the regex. Return none when there's no problem\ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -157,48 +199,27 @@ impl Verb {\n         if let Some(err) = self.check_args(invocation, other_path) {\n             Status::new(err, true)\n         } else {\n-            let name = self.names.get(0).unwrap_or(&invocation.name);\n-            let markdown = match &self.execution {\n-                VerbExecution::External(external_exec) => {\n-                    let exec_desc = external_exec.shell_exec_string(sel, other_path, &invocation.args);\n-                    format!(\"Hit *enter* to **{}**: `{}`\", name, &exec_desc)\n-                }\n-                VerbExecution::Internal(internal_exec) => {\n-                    let pb;\n-                    let arg = invocation.args.as_ref().or_else(|| internal_exec.arg.as_ref());\n-                    let arg_path = if let Some(arg) = arg {\n-                        pb = path::path_from(sel.path, PathAnchor::Unspecified, arg);\n-                        &pb\n-                    } else {\n-                        sel.path\n-                    };\n-                    if let Some(special_desc) = internal_exec.internal.applied_description(arg_path) {\n-                        format!(\"Hit *enter* to **{}**: {}\", name, special_desc)\n-                    } else if self.description.code {\n-                        format!(\"Hit *enter* to **{}**: `{}`\", name, &self.description.content)\n-                    } else {\n-                        format!(\"Hit *enter* to **{}**: {}\", name, &self.description.content)\n-                    }\n-                }\n-            };\n-            Status::new(markdown, false)\n+            Status::new(\n+                self.get_status_markdown(\n+                    sel,\n+                    other_path,\n+                    invocation,\n+                ),\n+                false,\n+            )\n         }\n     }\n \n     /// in case the verb take only one argument of type path, return\n     /// the selection type of this unique argument\n     pub fn get_arg_selection_type(&self) -> Option<SelectionType> {\n-        match &self.execution {\n-            VerbExecution::External(external) => external.arg_selection_type,\n-            _ => None,\n-        }\n+        self.invocation_parser.as_ref()\n+            .and_then(|parser| parser.arg_selection_type)\n     }\n \n     pub fn get_arg_anchor(&self) -> PathAnchor {\n-        match &self.execution {\n-            VerbExecution::External(external) => external.arg_anchor,\n-            _ => PathAnchor::Unspecified,\n-        }\n+        self.invocation_parser.as_ref()\n+            .map_or(PathAnchor::Unspecified, |parser| parser.arg_anchor)\n     }\n \n     pub fn get_internal(&self) -> Option<Internal> {\ndiff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -213,4 +234,5 @@ impl Verb {\n             external.set_working_dir = b;\n         }\n     }\n+\n }\ndiff --git a/src/verb/verb_conf.rs b/src/verb/verb_conf.rs\n--- a/src/verb/verb_conf.rs\n+++ b/src/verb/verb_conf.rs\n@@ -2,13 +2,26 @@ use {\n     super::*,\n     crate::{\n         app::SelectionType,\n+        command::Sequence,\n         errors::ConfError,\n     },\n     crossterm::event::KeyEvent,\n     std::convert::TryFrom,\n };\n \n+#[derive(Debug)]\n+pub enum VerbExecutionType {\n+    Internal,\n+    External,\n+    Sequence,\n+}\n+\n+\n /// what's needed to handle a verb\n+///\n+/// A verb must contain either a `cmd` (a sequence)\n+/// or an `execution` (call to an internal or external\n+/// definition)\n #[derive(Debug)]\n pub struct VerbConf {\n     pub shortcut: Option<String>,\ndiff --git a/src/verb/verb_conf.rs b/src/verb/verb_conf.rs\n--- a/src/verb/verb_conf.rs\n+++ b/src/verb/verb_conf.rs\n@@ -20,53 +33,55 @@ pub struct VerbConf {\n     pub leave_broot: Option<bool>,\n     pub set_working_dir: Option<bool>,\n     pub selection_condition: SelectionType,\n+\n+    pub execution_type: VerbExecutionType,\n+\n+    /// the separator to use when splitting the sequence\n+    /// (only makes sense when the execution is a sequence)\n+    pub cmd_separator: Option<String>,\n }\n \n impl TryFrom<&VerbConf> for Verb {\n     type Error = ConfError;\n     fn try_from(verb_conf: &VerbConf) -> Result<Self, Self::Error> {\n-        // if there's a ':' or ' ' at starts, it's an internal.\n-        // In other cases it's an external.\n-        // (we might support adding aliases to externals in the\n-        // future. In such cases we'll check among previously\n-        // added externals if no internal is found with the name)\n-        let mut s: &str = &verb_conf.execution;\n-        let mut verb = if s.starts_with(':') || s.starts_with(' ') {\n-            s = &s[1..];\n-            let internal_execution = InternalExecution::try_from(s)?;\n-            let name = verb_conf.invocation.as_ref().map(|inv| {\n-                let inv: &str = &inv;\n-                VerbInvocation::from(inv).name\n-            });\n-            Verb::new(\n-                name,\n-                VerbExecution::Internal(internal_execution),\n-                VerbDescription::from_code(verb_conf.execution.to_string()),\n-            )\n+        let execution = match verb_conf.execution_type {\n+            VerbExecutionType::Internal => VerbExecution::Internal(\n+                InternalExecution::try_from(&verb_conf.execution[1..])?\n+            ),\n+            VerbExecutionType::External => VerbExecution::External(\n+                ExternalExecution::new(\n+                    &verb_conf.execution,\n+                    ExternalExecutionMode::from_conf(\n+                        verb_conf.from_shell,\n+                        verb_conf.leave_broot,\n+                    ),\n+                )\n+            ),\n+            VerbExecutionType::Sequence => VerbExecution::Sequence(\n+                SequenceExecution {\n+                    sequence: Sequence::new(\n+                        verb_conf.execution.to_string(),\n+                        verb_conf.cmd_separator.clone(),\n+                    )\n+                }\n+            ),\n+        };\n+        let description = if let Some(description) = &verb_conf.description {\n+            VerbDescription::from_text(description.to_string())\n         } else {\n-            Verb::external(\n-                if let Some(inv) = &verb_conf.invocation {\n-                    inv\n-                } else {\n-                    // can we really accept externals without invocation ? Is this supported ?\n-                    \"\"\n-                },\n-                &verb_conf.execution,\n-                ExternalExecutionMode::from_conf(\n-                    verb_conf.from_shell,\n-                    verb_conf.leave_broot,\n-                ),\n-            )?\n+            VerbDescription::from_code(verb_conf.execution.to_string())\n         };\n+        let mut verb = Verb::new(\n+            verb_conf.invocation.as_deref(),\n+            execution,\n+            description,\n+        )?;\n         if let Some(key) = verb_conf.key {\n             verb = verb.with_key(key);\n         }\n         if let Some(shortcut) = &verb_conf.shortcut {\n             verb.names.push(shortcut.to_string());\n         }\n-        if let Some(description) = &verb_conf.description {\n-            verb.description = VerbDescription::from_text(description.to_string());\n-        }\n         if let Some(b) = verb_conf.set_working_dir {\n             verb.set_working_dir(b);\n         }\ndiff --git a/src/verb/verb_execution.rs b/src/verb/verb_execution.rs\n--- a/src/verb/verb_execution.rs\n+++ b/src/verb/verb_execution.rs\n@@ -1,4 +1,4 @@\n-use super::{ExternalExecution, InternalExecution};\n+use super::*;\n \n /// how a verb must be executed\n #[derive(Debug, Clone)]\ndiff --git a/src/verb/verb_execution.rs b/src/verb/verb_execution.rs\n--- a/src/verb/verb_execution.rs\n+++ b/src/verb/verb_execution.rs\n@@ -10,4 +10,8 @@ pub enum VerbExecution {\n     /// the verb execution refers to a command that will be executed by the system,\n     /// outside of broot.\n     External(ExternalExecution),\n+\n+    /// the execution is a sequence similar to what can be given\n+    /// to broot with --cmd\n+    Sequence(SequenceExecution),\n }\ndiff --git a/src/verb/verb_store.rs b/src/verb/verb_store.rs\n--- a/src/verb/verb_store.rs\n+++ b/src/verb/verb_store.rs\n@@ -50,11 +50,20 @@ impl VerbStore {\n         self.verbs.extend(builtin_verbs());\n     }\n \n-    pub fn search<'v>(&'v self, prefix: &str) -> PrefixSearchResult<'v, &Verb> {\n+    pub fn search<'v>(\n+        &'v self,\n+        prefix: &str,\n+        stype: Option<SelectionType>,\n+    ) -> PrefixSearchResult<'v, &Verb> {\n         let mut found_index = 0;\n         let mut nb_found = 0;\n         let mut completions: Vec<&str> = Vec::new();\n         for (index, verb) in self.verbs.iter().enumerate() {\n+            if let Some(stype) = stype {\n+                if !stype.respects(verb.selection_condition) {\n+                    continue;\n+                }\n+            }\n             for name in &verb.names {\n                 if name.starts_with(prefix) {\n                     if name == prefix {\ndiff --git a/website/docs/conf_verbs.md b/website/docs/conf_verbs.md\n--- a/website/docs/conf_verbs.md\n+++ b/website/docs/conf_verbs.md\n@@ -11,22 +11,26 @@ invocation = \"edit\"\n key = \"F2\"\n shortcut = \"e\"\n apply_to = \"file\"\n-execution = \"/usr/bin/nvim {file}\"\n+external = \"/usr/bin/nvim {file}\"\n leave_broot = false\n ```\n \n The possible attributes are:\n \n-name | mandatory | role\n--|-|-\n-invocation | no | how the verb is called by the user, with placeholders for arguments\n-execution | yes | how the verb is executed\n-key | no | a keyboard key triggering execution\n-shortcut | no | an alternate way to call the verb (without the arguments part)\n-leave_broot | no | whether to quit broot on execution (default: `true`)\n-from_shell | no | whether the verb must be executed from the parent shell (needs `br`, default: `false`). As this is executed after broot closed, this isn't compatible with `leave_broot = false`\n-apply_to | no | the type of selection this verb applies to, may be `\"file\"`, `\"directory\"` or `\"any\"`. You may declare two verbs with the same key if the first one applies to only files or only directories\n-set_working_dir | no | whether the working dir of the process must be set to the currenly selected directory (default to false)\n+name  | role\n+-|-\n+invocation | how the verb is called by the user, with placeholders for arguments\n+internal | execution, when your verb is based on a predefined broot verb\n+external | execution, when your verb is based on an external command\n+cmd | a semicolon sequence to execute, similar to an argument you pass to `--cmd`\n+key | a keyboard key triggering execution\n+shortcut | an alternate way to call the verb (without the arguments part)\n+leave_broot | whether to quit broot on execution (default: `true`)\n+from_shell | whether the verb must be executed from the parent shell (needs `br`, default: `false`). As this is executed after broot closed, this isn't compatible with `leave_broot = false`\n+apply_to | the type of selection this verb applies to, may be `\"file\"`, `\"directory\"` or `\"any\"`. You may declare two verbs with the same key if the first one applies to only files or only directories\n+set_working_dir | whether the working dir of the process must be set to the currenly selected directory (default to false)\n+\n+The execution is defined either by `internal`, `external` or `cmd` so a verb must have exactly one of those (for compatibility with older versions broot still accepts `execution` for `internal` or `external` and guesses which one it is).\n \n !!!\tNote\n \tThe `from_shell` attribute exists because some actions can't possibly be useful from a subshell. For example `cd` is a shell builtin which must be executed in the parent shell.\ndiff --git a/website/docs/conf_verbs.md b/website/docs/conf_verbs.md\n--- a/website/docs/conf_verbs.md\n+++ b/website/docs/conf_verbs.md\n@@ -45,7 +49,7 @@ Knowing this algorithm, you may understand the point in the following definition\n ```toml\n [[verbs]]\n invocation = \"p\"\n-execution = \":parent\"\n+internal = \":parent\"\n ```\n \n This verb is an alias to the internal builtin already available if you type `:parent`.\ndiff --git a/website/docs/conf_verbs.md b/website/docs/conf_verbs.md\n--- a/website/docs/conf_verbs.md\n+++ b/website/docs/conf_verbs.md\n@@ -69,37 +73,37 @@ For example you could add those mappings:\n [[verbs]]\n invocation = \"root\"\n key = \"F9\"\n-execution = \":focus_root\"\n+internal = \":focus /\"\n \n [[verbs]]\n invocation = \"home\"\n key = \"ctrl-H\"\n-execution = \":focus_user_home\"\n+internal = \":focus ~\"\n \n [[verbs]]\n key = \"alt-j\"\n-execution = \":line_down\"\n+internal = \":line_down\"\n \n [[verbs]]\n invocation = \"top\"\n key = \"F6\"\n-execution = \":select_first\"\n+internal = \":select_first\"\n \n [[verbs]]\n invocation = \"bottom\"\n key = \"F7\"\n-execution = \":select_last\"\n+internal = \":select_last\"\n \n [[verbs]]\n invocation = \"open\"\n key = \"crtl-O\"\n-execution = \":open_stay\"\n+internal = \":open_stay\"\n \n [[verbs]]\n invocation = \"edit\"\n key = \"F2\"\n shortcut = \"e\"\n-execution = \"$EDITOR +{line} {file}\"\n+external = \"$EDITOR +{line} {file}\"\n from_shell = true\n ```\n \ndiff --git a/website/docs/conf_verbs.md b/website/docs/conf_verbs.md\n--- a/website/docs/conf_verbs.md\n+++ b/website/docs/conf_verbs.md\n@@ -145,10 +149,10 @@ But you may also define some arguments in the invocation pattern. For example:\n ```toml\n [[verbs]]\n invocation = \"mkdir {subpath}\"\n-execution = \"/bin/mkdir -p {directory}/{subpath}\"\n+external = \"/bin/mkdir -p {directory}/{subpath}\"\n ```\n \n-(this one has now been made standard so you don't have to write it in the configuration file)\n+(the `mkdir` verb is standard so you don't have to write it in the configuration file)\n \n In this case the subpath is read from what you type:\n \ndiff --git a/website/docs/conf_verbs.md b/website/docs/conf_verbs.md\n--- a/website/docs/conf_verbs.md\n+++ b/website/docs/conf_verbs.md\n@@ -165,7 +169,7 @@ Here's another example, where the invocation pattern defines two arguments by de\n ```toml\n [[verbs]]\n invocation = \"blop {name}\\\\.{type}\"\n-execution = \"/bin/mkdir {parent}/{type} && /usr/bin/nvim {parent}/{type}/{name}.{type}\"\n+external = \"/bin/mkdir {parent}/{type} && /usr/bin/nvim {parent}/{type}/{name}.{type}\"\n from_shell = true\n ```\n \ndiff --git a/website/docs/conf_verbs.md b/website/docs/conf_verbs.md\n--- a/website/docs/conf_verbs.md\n+++ b/website/docs/conf_verbs.md\n@@ -183,15 +187,15 @@ Let's say we don't want the type to contain dots, then we do this:\n ```toml\n [[verbs]]\n invocation = \"blop {name}\\\\.(?P<type>[^.]+)\"\n-execution = \"/bin/mkdir {parent}/{type} && /usr/bin/nvim {parent}/{type}/{name}.{type}\"\n+external = \"/bin/mkdir {parent}/{type} && /usr/bin/nvim {parent}/{type}/{name}.{type}\"\n from_shell = true\n ```\n \n You can override the default behavior of broot by giving your verb the same shortcut or invocation than a default one.\n \n-## Built In Verbs\n+## Internals\n \n-Here's a list of actions you can add an alternate shortcut or keyboard key for:\n+Here's a list of internals: builtin actions you can add an alternate shortcut or keyboard key for:\n \n invocation | default key | default shortcut | behavior / details\n -|-|-|-\ndiff --git a/website/docs/conf_verbs.md b/website/docs/conf_verbs.md\n--- a/website/docs/conf_verbs.md\n+++ b/website/docs/conf_verbs.md\n@@ -265,22 +269,21 @@ You may add this kind of shortcuts:\n ```toml\n [[verbs]]\n key = \"alt-b\"\n-execution = \":input_go_word_left\"\n+internal = \":input_go_word_left\"\n \n [[verbs]]\n key = \"alt-f\"\n-execution = \":input_go_word_right\"\n+internal = \":input_go_word_right\"\n \n [[verbs]]\n key = \"alt-l\"\n-execution = \":input_del_word_left\"\n+internal = \":input_del_word_left\"\n \n [[verbs]]\n key = \"alt-r\"\n-execution = \":input_del_word_right\"\n+internal = \":input_del_word_right\"\n ```\n \n-\n ## Focus\n \n The `:focus` internal has many uses.\ndiff --git a/website/docs/conf_verbs.md b/website/docs/conf_verbs.md\n--- a/website/docs/conf_verbs.md\n+++ b/website/docs/conf_verbs.md\n@@ -296,10 +299,33 @@ And you can add your own ones:\n ```toml\n [[verbs]]\n key = \"ctrl-up\"\n-execution = \":focus ..\"\n+internal = \":focus ..\"\n \n [[verbs]]\n key = \"ctrl-d\"\n-execution = \":focus ~/dev\"\n+internal = \":focus ~/dev\"\n+```\n+\n+## cmd execution\n+\n+The `cmd` argument lets you define a sequence, just like the one you give to broot with [the `--cmd` argument](../launch/#the-cmd-launch-argument).\n+\n+Such a sequence can contain some searches, some calls to internals, some calls to already defined external based verbs.\n+\n+For example:\n+\n+```\n+[[verbs]]\n+name = \"backup\"\n+invocation = \"bu {name}\"\n+cmd = \":cp {file}-back_{name};:!focus {file}-back_{name}\"\n+apply_to = \"directory\"\n ```\n \n+This verb, which is only available when a directory is selected, copies this directory with a name partially composed from the command and focus the new directory in a new panel\n+\n+!!!\tNote\n+\tThe `cmd` execution type is still experimental in verbs and the precise behavior may change in future minor versions of broot\n+\n+\n+\ndiff --git a/website/docs/panels.md b/website/docs/panels.md\n--- a/website/docs/panels.md\n+++ b/website/docs/panels.md\n@@ -51,11 +51,11 @@ The default configuration file contains this that you may uncomment to add <kbd>\n ```toml\n # [[verbs]]\n # key = \"F5\"\n-# execution = \":copy_to_panel\"\n+# internal = \":copy_to_panel\"\n #\n # [[verbs]]\n # key = \"F6\"\n-# execution = \":move_to_panel\"\n+# internal = \":move_to_panel\"\n ```\n \n You may define other shortcuts, or your own bi-panels verbs.\ndiff --git a/website/docs/tricks.md b/website/docs/tricks.md\n--- a/website/docs/tricks.md\n+++ b/website/docs/tricks.md\n@@ -59,7 +59,7 @@ Here's an example of configuration changing the behaviour on open:\n [[verbs]]\n invocation = \"edit\"\n key = \"enter\"\n-execution = \"$EDITOR {file}\"\n+external = \"$EDITOR {file}\"\n leave_broot = false\n apply_to = \"file\"\n ```\ndiff --git a/website/docs/verbs.md b/website/docs/verbs.md\n--- a/website/docs/verbs.md\n+++ b/website/docs/verbs.md\n@@ -9,11 +9,11 @@ A verb can be related to the current selection. For example typing `:p` will exe\n \n The `rm` verb executes the standard `rm` command.\n \n-It's defined by this couple (invocation, execution):\n+It's defined by this couple (invocation, external):\n \n ```toml\n invocation = \"rm\"\n-execution = \"/bin/rm -rf {file}\"\n+external = \"/bin/rm -rf {file}\"\n ```\n \n Selection based arguments:\ndiff --git a/website/docs/verbs.md b/website/docs/verbs.md\n--- a/website/docs/verbs.md\n+++ b/website/docs/verbs.md\n@@ -31,7 +31,7 @@ Several selection based arguments can be used. For example the (built-in) `:copy\n \n ```toml\n invocation = \"copy_to_panel\"\n-execution = \"/bin/cp -r {file} {other-panel-directory}\"\n+external = \"/bin/cp -r {file} {other-panel-directory}\"\n ```\n \n When you type a verb, the execution pattern is completed using the selection(s), the exact command is displayed in the status line:\ndiff --git a/website/docs/verbs.md b/website/docs/verbs.md\n--- a/website/docs/verbs.md\n+++ b/website/docs/verbs.md\n@@ -49,7 +49,7 @@ For example mkdir is defined as\n \n ```toml\n invocation = \"mkdir {subpath}\"\n-execution = \"/bin/mkdir -p {directory}/{subpath}\"\n+external = \"/bin/mkdir -p {directory}/{subpath}\"\n ```\n \n (it's now a built-in, you won't see it in the config file)\ndiff --git a/website/docs/verbs.md b/website/docs/verbs.md\n--- a/website/docs/verbs.md\n+++ b/website/docs/verbs.md\n@@ -84,10 +84,11 @@ Note: there's another solution to gain time when typing a path, especially when\n \n ## Builtins & external commands, leaving or not\n \n-There are two types of verbs, differing by their *execution* pattern (which will be covered in more details in the [configuration page](../conf_file/#verb-definition-attributes)):\n+There are three types of verbs (they will be covered in more details in the [configuration page](../conf_file/#verb-definition-attributes)):\n \n-* builtin features, whose execution starts with `:`, apply internal functions, for example `:toggle_perm` to trigger computation and display of Unix file permissions\n+* builtin features apply internal functions, for example `:toggle_perm` to trigger computation and display of Unix file permissions\n * external commands, whose execution implies calling an external program, for example `rm -rf {file}`\n+* sequences of commands\n \n A command may leave broot (for example to start a program), or not (the tree will be refreshed).\n \n",
        "test_patch": "diff --git a/src/verb/verb.rs b/src/verb/verb.rs\n--- a/src/verb/verb.rs\n+++ b/src/verb/verb.rs\n@@ -142,9 +133,60 @@ impl Verb {\n         invocation: &VerbInvocation,\n         other_path: &Option<PathBuf>,\n     ) -> Option<String> {\n-        match &self.execution {\n-            VerbExecution::Internal(internal_exec) => internal_exec.check_args(invocation, other_path),\n-            VerbExecution::External(external_exec) => external_exec.check_args(invocation, other_path),\n+        if self.need_another_panel && other_path.is_none() {\n+            Some(\"This verb needs exactly two panels\".to_string())\n+        } else if let Some(ref parser) = self.invocation_parser {\n+            parser.check_args(invocation, other_path)\n+        } else if invocation.args.is_some() {\n+            Some(\"This verb doesn't take arguments\".to_string())\n+        } else {\n+            None\n+        }\n+    }\n+\n+    fn get_status_markdown(\n+        &self,\n+        sel: Selection<'_>,\n+        other_path: &Option<PathBuf>,\n+        invocation: &VerbInvocation,\n+    ) -> String {\n+        let name = self.names.get(0).unwrap_or(&invocation.name);\n+\n+        // there's one special case: the \u0300 :focus` internal. As long\n+        // as no other internal takes args, and no other verb can\n+        // have an optional argument, I don't try to build a\n+        // generic behavior for internal optionaly taking args and\n+        // thus I hardcode the test here.\n+        if let VerbExecution::Internal(internal_exec) = &self.execution {\n+            if internal_exec.internal == Internal::focus {\n+                let arg = invocation.args.as_ref().or_else(|| internal_exec.arg.as_ref());\n+                let pb;\n+                let arg_path = if let Some(arg) = arg {\n+                    pb = path::path_from(sel.path, PathAnchor::Unspecified, arg);\n+                    &pb\n+                } else {\n+                    sel.path\n+                };\n+                return format!(\"Hit *enter* to {} `{}`\", name, arg_path.to_string_lossy());\n+            }\n+        }\n+\n+        let builder = || ExecutionStringBuilder::from_invocation(\n+            &self.invocation_parser,\n+            sel,\n+            other_path,\n+            &invocation.args,\n+        );\n+        if let VerbExecution::Sequence(seq_ex) = &self.execution {\n+            let exec_desc = builder().shell_exec_string(&seq_ex.sequence.raw);\n+            format!(\"Hit *enter* to **{}**: `{}`\", name, &exec_desc)\n+        } else if let VerbExecution::External(external_exec) = &self.execution {\n+            let exec_desc = builder().shell_exec_string(&external_exec.exec_pattern);\n+            format!(\"Hit *enter* to **{}**: `{}`\", name, &exec_desc)\n+        } else if self.description.code {\n+            format!(\"Hit *enter* to **{}**: `{}`\", name, &self.description.content)\n+        } else {\n+            format!(\"Hit *enter* to **{}**: {}\", name, &self.description.content)\n         }\n     }\n \n",
        "problem_statement": "Allow sequences in verb definition\nThis was requested by [@hope in miaou](https://miaou.dystroy.org/3490?broot#13686126)\r\n\r\nThe goal is for example to have verbs like\r\n\r\n    :focus /some/dir; :focus! /some/other/dir\r\n\n",
        "hints_text": "",
        "created_at": "2020-09-24T20:30:31Z",
        "version": "0.1"
    },
    {
        "repo": "Canop/broot",
        "pull_number": 957,
        "instance_id": "Canop__broot-957",
        "issue_numbers": [
            "956"
        ],
        "base_commit": "db0fd941e13d96fbb3e9c3afbab8fd3b74d88d14",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -242,6 +242,21 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"bit-set\"\n+version = \"0.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0700ddab506f33b20a03b13996eccd309a48e5ff77d0d95926aa0210fb4e95f1\"\n+dependencies = [\n+ \"bit-vec\",\n+]\n+\n+[[package]]\n+name = \"bit-vec\"\n+version = \"0.6.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb\"\n+\n [[package]]\n name = \"bit_field\"\n version = \"0.10.2\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -857,6 +872,16 @@ version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"7360491ce676a36bf9bb3c56c1aa791658183a54d2744120f27285738d90465a\"\n \n+[[package]]\n+name = \"fancy-regex\"\n+version = \"0.7.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9d6b8560a05112eb52f04b00e5d3790c0dd75d9d980eb8a122fb23b92a623ccf\"\n+dependencies = [\n+ \"bit-set\",\n+ \"regex\",\n+]\n+\n [[package]]\n name = \"fastrand\"\n version = \"2.1.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1675,28 +1700,6 @@ version = \"1.19.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n \n-[[package]]\n-name = \"onig\"\n-version = \"6.4.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8c4b31c8722ad9171c6d77d3557db078cab2bd50afcc9d09c8b315c59df8ca4f\"\n-dependencies = [\n- \"bitflags 1.3.2\",\n- \"libc\",\n- \"once_cell\",\n- \"onig_sys\",\n-]\n-\n-[[package]]\n-name = \"onig_sys\"\n-version = \"69.8.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7b829e3d7e9cc74c7e315ee8edb185bf4190da5acde74afd7fc59c35b1f086e7\"\n-dependencies = [\n- \"cc\",\n- \"pkg-config\",\n-]\n-\n [[package]]\n name = \"open\"\n version = \"1.7.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2454,11 +2457,11 @@ checksum = \"bee6d840027be11d9fae1432a799c548eaf0332a9a8dbe8526281d55a9600e4f\"\n dependencies = [\n  \"bincode\",\n  \"bitflags 1.3.2\",\n+ \"fancy-regex\",\n  \"flate2\",\n  \"fnv\",\n  \"lazy_static\",\n  \"once_cell\",\n- \"onig\",\n  \"plist\",\n  \"regex-syntax 0.6.29\",\n  \"serde\",\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -57,7 +57,7 @@ serde = { version = \"1.0\", features = [\"derive\"] }\n smallvec = \"1.11\" # version 2 is still alpha\n splitty = \"1.0.2\"\n strict = \"0.1.4\"\n-syntect = { package = \"syntect-no-panic\", version = \"4.6.1\" } # see issue #485\n+syntect = { package = \"syntect-no-panic\", version = \"4.6.1\", default-features = false, features = [\"default-fancy\"] } # see issues #485 and #956\n tempfile = \"3.2\"\n termimad = \"0.31\"\n terminal-clipboard = { version = \"0.4.1\", optional = true }\ndiff --git a/src/display/matched_string.rs b/src/display/matched_string.rs\n--- a/src/display/matched_string.rs\n+++ b/src/display/matched_string.rs\n@@ -17,7 +17,7 @@ pub struct MatchedString<'a> {\n     pub align: Alignment,\n }\n \n-impl<'a, 'w> MatchedString<'a> {\n+impl<'a> MatchedString<'a> {\n \n     pub fn new(\n         name_match: Option<NameMatch>,\ndiff --git a/src/display/matched_string.rs b/src/display/matched_string.rs\n--- a/src/display/matched_string.rs\n+++ b/src/display/matched_string.rs\n@@ -94,7 +94,7 @@ impl<'a, 'w> MatchedString<'a> {\n         }\n         removed_char_count\n     }\n-    pub fn queue_on<W>(&self, cw: &mut CropWriter<'w, W>) -> Result<(), termimad::Error>\n+    pub fn queue_on<W>(&self, cw: &mut CropWriter<'_, W>) -> Result<(), termimad::Error>\n     where\n         W: std::io::Write,\n     {\ndiff --git a/src/kitty/image_renderer.rs b/src/kitty/image_renderer.rs\n--- a/src/kitty/image_renderer.rs\n+++ b/src/kitty/image_renderer.rs\n@@ -85,7 +85,7 @@ impl<'i> From<&'i DynamicImage> for ImageData<'i> {\n         }\n     }\n }\n-impl<'i> ImageData<'i> {\n+impl ImageData<'_> {\n     fn kitty_format(&self) -> &'static str {\n         match self {\n             Self::RgbaRef(_) => \"32\",\ndiff --git a/src/task_sync.rs b/src/task_sync.rs\n--- a/src/task_sync.rs\n+++ b/src/task_sync.rs\n@@ -60,7 +60,6 @@ impl Dam {\n     /// after the event listener started again. In any case\n     /// using try_compute should be preferred for immediate\n     /// return to the ui thread.\n-\n     pub fn observer(&self) -> DamObserver {\n         DamObserver::from(self)\n     }\n",
        "test_patch": "diff --git a/bacon.toml b/bacon.toml\n--- a/bacon.toml\n+++ b/bacon.toml\n@@ -2,34 +2,37 @@\n # More info at https://github.com/Canop/bacon\n \n default_job = \"check\"\n+env.CARGO_TERM_COLOR = \"always\"\n \n [jobs]\n \n [jobs.check-all]\n-command = [\"cargo\", \"check\", \"--all-targets\", \"--color\", \"always\"]\n+command = [\"cargo\", \"check\", \"--all-targets\"]\n need_stdout = false\n watch = [\"tests\", \"benches\", \"examples\"]\n \n [jobs.check]\n command = [\n \t\"cargo\", \"check\",\n-\t\"--color\", \"always\",\n \t\"--features\", \"clipboard kitty-csi-check trash\",\n ]\n need_stdout = false\n watch = [\"benches\"]\n \n+[jobs.miri]\n+command = [\"cargo\", \"+nightly\", \"miri\", \"run\"]\n+need_stdout = true\n+\n [jobs.win]\n command = [\"cross\", \"build\", \"--target\", \"x86_64-pc-windows-gnu\", \"--release\", \"--features\", \"clipboard\"]\n \n [jobs.light]\n-command = [\"cargo\", \"check\", \"--color\", \"always\"]\n+command = [\"cargo\", \"check\"]\n need_stdout = false\n \n [jobs.clippy]\n command = [\n \t\"cargo\", \"clippy\",\n-\t\"--color\", \"always\",\n \t\"--\",\n \t\"-A\", \"clippy::bool_to_int_with_if\",\n \t\"-A\", \"clippy::collapsible_else_if\",\ndiff --git a/bacon.toml b/bacon.toml\n--- a/bacon.toml\n+++ b/bacon.toml\n@@ -51,7 +54,7 @@ command = [\n need_stdout = false\n \n [jobs.test]\n-command = [\"cargo\", \"test\", \"--color\", \"always\"]\n+command = [\"cargo\", \"test\"]\n need_stdout = true\n \n [keybindings]\n",
        "problem_statement": "Fails to build with GCC 15 (dependency onig_sys)\nI'm not sure if broot can actually do anything about this, but other packagers will hit it eventually once GCC 15 is released, so here's a heads up:\r\n\r\nGentoo has started experimenting with using prereleases of GCC 15 as the system C compiler. When that is the case, `onig_sys`, which is a dependency of broot, fails to build. Downstream bug: https://bugs.gentoo.org/943785\r\n\r\n`onig_sys` contains a copy of the Oniguruma C source code, which is used by default. That copy is very old, and in particular does not include the fixes from kkos/oniguruma#312 for GCC 15 compatibility.\r\n\r\nI've filed a bug (rust-onig/rust-onig#191) and asked for an updated snapshot in `onig_sys`, but that project does not seem to be particularly actively maintained.\r\n\r\nWhat I did instead in Gentoo was to tell `onig_sys` to use the system copy of the Oniguruma library (in Gentoo this is release 6.9.9 + GCC 15 patches), by setting the environment variable `RUSTONIG_SYSTEM_LIBONIG=1`. This seems to work, but means we're using a newer Oniguruma than intended.\r\n\r\nWould you be interested in building other packages the same way, so we'll at least all be testing with vaguely the same version of Oniguruma? Or do you have some other suggestion of how to handle this problem?\n",
        "hints_text": "I think we can just build without onig (which is [used in syntect](https://github.com/trishume/syntect?tab=readme-ov-file#pure-rust-fancy-regex-mode-without-onig)). I'm testing whether it has some impact (might impact the performances of code preview).",
        "created_at": "2024-12-02T13:10:01Z",
        "version": "4.6"
    }
]