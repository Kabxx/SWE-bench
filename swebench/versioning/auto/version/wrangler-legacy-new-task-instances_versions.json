[
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 142,
        "instance_id": "cloudflare__wrangler-legacy-142",
        "issue_numbers": [
            "138"
        ],
        "base_commit": "0c7e728f55b1296396e61050ff8ba39aa25a131d",
        "patch": "diff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -6,18 +6,23 @@ use std::process::Command;\n \n use crate::emoji;\n \n-pub fn generate(name: &str, template: &str, cache: &Cache) -> Result<(), failure::Error> {\n+pub fn generate(\n+    name: &str,\n+    template: &str,\n+    pt: Option<ProjectType>,\n+    cache: &Cache,\n+) -> Result<(), failure::Error> {\n     let tool_name = \"cargo-generate\";\n     let binary_path = install::install(tool_name, \"ashleygwilliams\", cache)?.binary(tool_name)?;\n \n     let args = [\"generate\", \"--git\", template, \"--name\", name, \"--force\"];\n \n-    let project_type = project_type(template);\n-    let command = command(name, binary_path, &args, &project_type);\n+    let pt = pt.unwrap_or(project_type(template));\n+    let command = command(name, binary_path, &args, &pt);\n     let command_name = format!(\"{:?}\", command);\n \n     commands::run(command, &command_name)?;\n-    Project::generate(name.to_string(), project_type)?;\n+    Project::generate(name.to_string(), pt)?;\n     Ok(())\n }\n \ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -50,6 +50,13 @@ fn main() -> Result<(), failure::Error> {\n                     Arg::with_name(\"template\")\n                         .help(\"a link to a github template! defaults to cloudflare/worker-template\")\n                         .index(2),\n+                )\n+                .arg(\n+                    Arg::with_name(\"type\")\n+                        .short(\"t\")\n+                        .long(\"type\")\n+                        .takes_value(true)\n+                        .help(\"the type of project you want generated\"),\n                 ),\n         )\n         .subcommand(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -70,8 +77,7 @@ fn main() -> Result<(), failure::Error> {\n                 ),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"build\")\n-                .about(&*format!(\"{} Build your worker\", emoji::CRAB)),\n+            SubCommand::with_name(\"build\").about(&*format!(\"{} Build your worker\", emoji::CRAB)),\n         )\n         .subcommand(SubCommand::with_name(\"publish\").about(&*format!(\n             \"{} Push your worker to the orange cloud\",\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -117,6 +123,10 @@ fn main() -> Result<(), failure::Error> {\n \n         if let Some(matches) = matches.subcommand_matches(\"generate\") {\n             let name = matches.value_of(\"name\").unwrap_or(\"worker\");\n+            let project_type = match matches.value_of(\"type\") {\n+                Some(s) => Some(settings::project::ProjectType::from_str(&s.to_lowercase())?),\n+                None => None,\n+            };\n             let template = matches\n                 .value_of(\"template\")\n                 .unwrap_or(\"https://github.com/cloudflare/worker-template\");\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -124,7 +134,7 @@ fn main() -> Result<(), failure::Error> {\n                 \"Generate command called with template {}, and name {}\",\n                 template, name\n             );\n-            commands::generate(name, template, &cache)?;\n+            commands::generate(name, template, project_type, &cache)?;\n         }\n     } else if matches.subcommand_matches(\"build\").is_some()\n         || matches.subcommand_matches(\"preview\").is_some()\ndiff --git a/src/settings/project.rs b/src/settings/project.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project.rs\n@@ -2,6 +2,7 @@ use std::collections::HashMap;\n use std::fmt;\n use std::fs;\n use std::path::Path;\n+use std::str::FromStr;\n \n use log::info;\n \ndiff --git a/src/settings/project.rs b/src/settings/project.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project.rs\n@@ -19,6 +20,7 @@ pub struct Project {\n }\n \n #[derive(Clone, Debug, Deserialize, Serialize)]\n+#[serde(rename_all = \"lowercase\")]\n pub enum ProjectType {\n     JavaScript,\n     Rust,\ndiff --git a/src/settings/project.rs b/src/settings/project.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project.rs\n@@ -36,6 +38,19 @@ impl fmt::Display for ProjectType {\n     }\n }\n \n+impl FromStr for ProjectType {\n+    type Err = failure::Error;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"javascript\" => Ok(ProjectType::JavaScript),\n+            \"rust\" => Ok(ProjectType::Rust),\n+            \"webpack\" => Ok(ProjectType::Webpack),\n+            _ => failure::bail!(\"{} is not a valid wrangler project type!\", s),\n+        }\n+    }\n+}\n+\n impl Project {\n     pub fn generate(name: String, project_type: ProjectType) -> Result<Project, failure::Error> {\n         let project = Project {\n",
        "test_patch": "diff --git a/tests/generate.rs b/tests/generate.rs\n--- a/tests/generate.rs\n+++ b/tests/generate.rs\n@@ -7,7 +7,7 @@ use std::process::Command;\n #[test]\n fn it_generates_with_defaults() {\n     let name = \"worker\";\n-    generate(None, None);\n+    generate(None, None, None);\n \n     assert_eq!(Path::new(name).exists(), true);\n \ndiff --git a/tests/generate.rs b/tests/generate.rs\n--- a/tests/generate.rs\n+++ b/tests/generate.rs\n@@ -20,24 +20,29 @@ fn it_generates_with_defaults() {\n fn it_generates_with_arguments() {\n     let name = \"example\";\n     let template = \"https://github.com/cloudflare/rustwasm-worker-template\";\n-    generate(Some(name), Some(template));\n+    let project_type = \"webpack\";\n+    generate(Some(name), Some(template), Some(project_type));\n \n     assert_eq!(Path::new(name).exists(), true);\n \n     let wranglertoml_path = format!(\"{}/wrangler.toml\", name);\n     assert_eq!(Path::new(&wranglertoml_path).exists(), true);\n+    let wranglertoml_text = fs::read_to_string(wranglertoml_path).unwrap();\n+    assert!(wranglertoml_text.contains(project_type));\n     cleanup(name);\n }\n \n-fn generate(name: Option<&str>, template: Option<&str>) {\n+fn generate(name: Option<&str>, template: Option<&str>, project_type: Option<&str>) {\n     let mut wrangler = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n-    if name.is_none() && template.is_none() {\n+    if name.is_none() && template.is_none() && project_type.is_none() {\n         wrangler.arg(\"generate\").assert().success();\n-    } else if name.is_some() && template.is_some() {\n+    } else if name.is_some() && template.is_some() && project_type.is_some() {\n         wrangler\n             .arg(\"generate\")\n             .arg(name.unwrap())\n             .arg(template.unwrap())\n+            .arg(\"--type\")\n+            .arg(project_type.unwrap())\n             .assert()\n             .success();\n     }\n",
        "problem_statement": "Allow project type specification in template repos (or generate command)\nGenerating a project based on a template defaults to the `JavaScript` project type, but it would be useful for either the `generate` command to accept a project `type` flag, or for the command to be able to infer the template type from the repository itself. \r\n\r\nFor context: we have the [`worker-template-router`](https://github.com/cloudflare/worker-template-router) which is a JS template for wrangler projects with a built-in `Router` class, all defined in `index.js`. I think this should probably be refactored to be a `webpack` project, so we can pull the `Router` class out of `index.js` into `router.js`. \r\n\r\nBecause we don't have any way of indicating to wrangler _what_ the incoming template is, making this change would effectively make the template a non-functional `webpack` template (it wouldn't know that it needs to build, before even getting to any issues with `require` etc) without any mechanism to reflect that in the `wrangler.toml`.\r\n\r\nA side note: the quick way around this (for now) might be to key based on the template string to detect `webpack`, we have an exception in `generate` for templates with `rust` in the template URL right now, which sets the project `type` as `rust`.\n",
        "hints_text": "+1",
        "created_at": "2019-05-24T23:54:10Z",
        "version": "0.1"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 105,
        "instance_id": "cloudflare__wrangler-legacy-105",
        "issue_numbers": [
            "34"
        ],
        "base_commit": "505f854c909a1f8e572c5006ed4a584d16d44b33",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -182,6 +182,17 @@ dependencies = [\n  \"vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"clicolors-control\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cloudabi\"\n version = \"0.0.3\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -205,6 +216,23 @@ dependencies = [\n  \"yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"console\"\n+version = \"0.7.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clicolors-control 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"encode_unicode 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"constant_time_eq\"\n version = \"0.1.3\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -326,6 +354,11 @@ name = \"dtoa\"\n version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"encode_unicode\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"encoding_rs\"\n version = \"0.8.17\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1361,6 +1394,14 @@ dependencies = [\n  \"redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"termios\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"textwrap\"\n version = \"0.10.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1677,6 +1718,7 @@ dependencies = [\n  \"binary-install 0.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"config 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"console 0.7.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1750,8 +1792,10 @@ dependencies = [\n \"checksum cc 1.0.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d01c69d08ff207f231f07196e30f84c70f1c815b04f980f8b7b01ff01f05eb92\"\n \"checksum cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11d43355396e872eefb45ce6342e4374ed7bc2b3a502d1b28e36d6e23c05d1f4\"\n \"checksum clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b957d88f4b6a63b9d70d5f454ac8011819c6efa7727858f458ab71c756ce2d3e\"\n+\"checksum clicolors-control 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73abfd4c73d003a674ce5d2933fca6ce6c42480ea84a5ffe0a2dc39ed56300f9\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n \"checksum config 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e82d07fac0a5eeaa9d959b5194d01bb66e414665f547416958d2b430f8f4852\"\n+\"checksum console 0.7.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2bf3720d3f3fc30b721ef1ae54e13af3264af4af39dc476a8de56a6ee1e2184b\"\n \"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n \"checksum core-foundation 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"286e0b41c3a20da26536c6000a280585d519fd07b3956b43aed8a79e9edce980\"\n \"checksum core-foundation-sys 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"716c271e8613ace48344f723b60b900a93150271e5be206212d052bbc0883efa\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1765,6 +1809,7 @@ dependencies = [\n \"checksum curl-sys 0.4.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b8d8e51964f58c8053337fcef48e1c4608c7ee70c6f2e457674a97dda5a5828\"\n \"checksum dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\n \"checksum dtoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d301140eb411af13d3115f9a562c85cc6b541ade9dfa314132244aaee7489dd\"\n+\"checksum encode_unicode 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90b2c9496c001e8cb61827acdefad780795c42264c137744cae6f7d9e3450abd\"\n \"checksum encoding_rs 0.8.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4155785c79f2f6701f185eb2e6b4caf0555ec03477cb4c70db67b465311620ed\"\n \"checksum env_logger 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b61fa891024a945da30a9581546e8cfaf5602c7b3f4c137a2805cf388f92075a\"\n \"checksum failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"795bd83d3abeb9220f257e597aa0080a508b27533824adf336529648f6abf7e2\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1885,6 +1930,7 @@ dependencies = [\n \"checksum tempfile 3.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b86c784c88d98c801132806dadd3819ed29d8600836c4088e855cdf3e178ed8a\"\n \"checksum termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4096add70612622289f2fdcdbd5086dc81c1e2675e6ae58d6c4f62a16c6d7f2f\"\n \"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\n+\"checksum termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n \"checksum textwrap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"307686869c93e71f94da64286f9a9524c0f308a9e1c87a583de8e9c9039ad3f6\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n \"checksum time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -12,6 +12,7 @@ categories = [\"wasm\"]\n binary-install = \"0.0.2\"\n clap = \"2.32.0\"\n config = \"0.9.2\"\n+console = \"0.7.5\"\n dirs = \"1.0.5\"\n env_logger = \"0.6.1\"\n failure = \"0.1.5\"\ndiff --git a/src/commands/build.rs b/src/commands/build.rs\n--- a/src/commands/build.rs\n+++ b/src/commands/build.rs\n@@ -4,6 +4,8 @@ use binary_install::Cache;\n use std::path::PathBuf;\n use std::process::Command;\n \n+use crate::emoji;\n+\n pub fn build(cache: &Cache, project_type: &ProjectType) -> Result<(), failure::Error> {\n     match project_type {\n         ProjectType::JavaScript => {\ndiff --git a/src/commands/build.rs b/src/commands/build.rs\n--- a/src/commands/build.rs\n+++ b/src/commands/build.rs\n@@ -24,7 +26,7 @@ pub fn build(cache: &Cache, project_type: &ProjectType) -> Result<(), failure::E\n }\n \n fn command(args: &[&str], binary_path: PathBuf) -> Command {\n-    println!(\"\ud83c\udf00 Compiling your project to WebAssembly...\");\n+    println!(\"{} Compiling your project to WebAssembly...\", emoji::SWIRL);\n \n     let mut c = if cfg!(target_os = \"windows\") {\n         let mut c = Command::new(\"cmd\");\ndiff --git a/src/commands/config.rs b/src/commands/config.rs\n--- a/src/commands/config.rs\n+++ b/src/commands/config.rs\n@@ -1,6 +1,7 @@\n use std::fs;\n use std::path::Path;\n \n+use crate::emoji;\n use crate::user::settings::GlobalUserSettings;\n \n pub fn global_config(email: &str, api_key: &str) -> Result<(), failure::Error> {\ndiff --git a/src/commands/config.rs b/src/commands/config.rs\n--- a/src/commands/config.rs\n+++ b/src/commands/config.rs\n@@ -11,18 +12,21 @@ pub fn global_config(email: &str, api_key: &str) -> Result<(), failure::Error> {\n \n     let toml = toml::to_string(&s)?;\n \n-    let config_dir =\n-        Path::new(&dirs::home_dir().expect(\"\ud83d\udea7 Could not determine home directory. \ud83d\udea7\"))\n-            .join(\".wrangler\")\n-            .join(\"config\");\n+    let config_dir = Path::new(&dirs::home_dir().expect(&format!(\n+        \"{0} could not determine home directory. {0}\",\n+        emoji::CONSTRUCTION\n+    )))\n+    .join(\".wrangler\")\n+    .join(\"config\");\n     fs::create_dir_all(&config_dir)?;\n \n     let config_file = config_dir.join(\"default.toml\");\n     fs::write(&config_file, &toml)?;\n \n     println!(\n-        \"\u2728 Successfully configured. You can find your configuration file at: {}. \u2728\",\n-        &config_file.to_string_lossy()\n+        \"{1} Successfully configured. You can find your configuration file at: {0}. {1}\",\n+        &config_file.to_string_lossy(),\n+        emoji::SPARKLES,\n     );\n     Ok(())\n }\ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -4,6 +4,8 @@ use binary_install::Cache;\n use std::path::PathBuf;\n use std::process::Command;\n \n+use crate::emoji;\n+\n pub fn generate(name: &str, template: &str, cache: &Cache) -> Result<(), failure::Error> {\n     let tool_name = \"cargo-generate\";\n     let binary_path = install::install(tool_name, \"ashleygwilliams\", cache)?.binary(tool_name)?;\ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -21,8 +23,10 @@ pub fn generate(name: &str, template: &str, cache: &Cache) -> Result<(), failure\n \n fn command(name: &str, binary_path: PathBuf, args: &[&str], project_type: &ProjectType) -> Command {\n     println!(\n-        \"\ud83d\udc11 Generating a new {} worker project with name '{}'...\",\n-        project_type, name\n+        \"{} Generating a new {} worker project with name '{}'...\",\n+        emoji::SHEEP,\n+        project_type,\n+        name\n     );\n \n     let mut c = if cfg!(target_os = \"windows\") {\ndiff --git a/src/commands/whoami.rs b/src/commands/whoami.rs\n--- a/src/commands/whoami.rs\n+++ b/src/commands/whoami.rs\n@@ -1,7 +1,12 @@\n+use crate::emoji;\n use crate::user::User;\n \n pub fn whoami(user: &User) {\n     let user = &user.data;\n \n-    println!(\"\ud83d\udc4b You are logged with the email '{}'.\", user.email);\n+    println!(\n+        \"{} You are logged with the email '{}'.\",\n+        emoji::WAVING,\n+        user.email\n+    );\n }\ndiff --git /dev/null b/src/emoji.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/emoji.rs\n@@ -0,0 +1,26 @@\n+//! Emoji contants used by `wrangler`.\n+//!\n+//! For the unfamiliar:\n+//!\n+//! > Emoji are ideograms and smileys used in electronic messages and web\n+//! > pages. Emoji exist in various genres, including facial expressions, common\n+//! > objects, places and types of weather, and animals. They are much like\n+//! > emoticons, but emoji are actual pictures instead of typographics.\n+//!\n+//! -- https://en.wikipedia.org/wiki/Emoji\n+\n+#![allow(missing_docs)]\n+\n+use console::Emoji;\n+\n+pub static WORKER: Emoji = Emoji(\"\ud83d\udc77  \", \"\");\n+pub static SPARKLES: Emoji = Emoji(\"\u2728  \", \"\");\n+pub static DANCERS: Emoji = Emoji(\"\ud83d\udc6f  \", \"\");\n+pub static MICROSCOPE: Emoji = Emoji(\"\ud83d\udd2c \", \"\");\n+pub static CRAB: Emoji = Emoji(\"\ud83e\udd80 \", \"\");\n+pub static SLEUTH: Emoji = Emoji(\"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f\", \"\");\n+pub static SWIRL: Emoji = Emoji(\"\ud83c\udf00 \", \"\");\n+pub static CONSTRUCTION: Emoji = Emoji(\"\ud83d\udea7 \", \"\");\n+pub static UP: Emoji = Emoji(\"\ud83c\udd99 \", \"\");\n+pub static SHEEP: Emoji = Emoji(\"\ud83d\udc11 \", \"\");\n+pub static WAVING: Emoji = Emoji(\"\ud83d\udc4b \", \"\");\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -8,6 +8,7 @@ use log::info;\n \n mod cache;\n mod commands;\n+mod emoji;\n mod install;\n mod user;\n \ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -17,12 +18,15 @@ fn main() -> Result<(), failure::Error> {\n     env_logger::init();\n     let cache = get_wrangler_cache()?;\n \n-    let matches = App::new(\"\ud83d\udc77\u200d\u2640\ufe0f\ud83e\udde1\u2601\ufe0f \u2728 wrangler\")\n+    let matches = App::new(format!(\"{}{} wrangler\", emoji::WORKER, emoji::SPARKLES))\n         .version(env!(\"CARGO_PKG_VERSION\"))\n         .author(\"ashley g williams <ashley666ashley@gmail.com>\")\n         .subcommand(\n             SubCommand::with_name(\"generate\")\n-                .about(\"\ud83d\udc6f Generate a new wasm worker project\")\n+                .about(&*format!(\n+                    \"{} Generate a new wasm worker project\",\n+                    emoji::DANCERS\n+                ))\n                 .arg(\n                     Arg::with_name(\"name\")\n                         .help(\"the name of your worker! defaults to 'wasm-worker'\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -36,7 +40,10 @@ fn main() -> Result<(), failure::Error> {\n         )\n         .subcommand(\n             SubCommand::with_name(\"preview\")\n-                .about(\"\ud83d\udd2cPublish your code temporarily on cloudflareworkers.com\")\n+                .about(&*format!(\n+                    \"{} Publish your code temporarily on cloudflareworkers.com\",\n+                    emoji::MICROSCOPE\n+                ))\n                 .arg(\n                     Arg::with_name(\"method\")\n                         .help(\"Type of request to preview your worker with (get, post)\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -49,15 +56,19 @@ fn main() -> Result<(), failure::Error> {\n                 ),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"build\").about(\"\ud83e\udd80\u2699\ufe0f Build your wasm with wasm-pack\"),\n-        )\n-        .subcommand(\n-            SubCommand::with_name(\"publish\")\n-                .about(\"\u2601\ufe0f \ud83c\udd99 Push your worker to the orange cloud\"),\n+            SubCommand::with_name(\"build\")\n+                .about(&*format!(\"{} Build your wasm with wasm-pack\", emoji::CRAB)),\n         )\n+        .subcommand(SubCommand::with_name(\"publish\").about(&*format!(\n+            \"{} Push your worker to the orange cloud\",\n+            emoji::UP\n+        )))\n         .subcommand(\n             SubCommand::with_name(\"config\")\n-                .about(\"\ud83d\udd75\ufe0f\u200d\u2640\ufe0f Setup wrangler with your Cloudflare account\")\n+                .about(&*format!(\n+                    \"{} Setup wrangler with your Cloudflare account\",\n+                    emoji::SLEUTH\n+                ))\n                 .arg(\n                     Arg::with_name(\"email\")\n                         .help(\"the email address associated with your Cloudflare account\")\n",
        "test_patch": "diff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -71,10 +82,10 @@ fn main() -> Result<(), failure::Error> {\n                         .required(true),\n                 ),\n         )\n-        .subcommand(\n-            SubCommand::with_name(\"whoami\")\n-                .about(\"\ud83d\udd75\ufe0f\u200d\u2640\ufe0f Retrieve your user info and test your auth config\"),\n-        )\n+        .subcommand(SubCommand::with_name(\"whoami\").about(&*format!(\n+            \"{} Retrieve your user info and test your auth config\",\n+            emoji::SLEUTH\n+        )))\n         .get_matches();\n \n     if matches.subcommand_matches(\"config\").is_some()\n",
        "problem_statement": "emoji fallback\nnot all terminal support emoji. there is a library to wrap this:\r\nhttps://github.com/rustwasm/wasm-pack/blob/master/src/emoji.rs\r\ncreate a file like this for wrangler and then replace instances of emoji with constants from that file\r\n\r\nuse wasm-pack as an example. the implementation should basically be Exactly the Same\n",
        "hints_text": "",
        "created_at": "2019-05-21T19:03:08Z",
        "version": "0.1"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 28,
        "instance_id": "cloudflare__wrangler-legacy-28",
        "issue_numbers": [
            "26"
        ],
        "base_commit": "c9e9e12e30e0a94a51081ccc4ef0e6707a43527c",
        "patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -1,6 +1,6 @@\n # \ud83e\udd20 wrangler\n \n-[![Build Status](https://travis-ci.com/ashleygwilliams/wrangler.svg?token=hHeDp9pQmz9kvsgRNVHy&branch=master)](https://travis-ci.com/ashleygwilliams/wrangler)\n+[![crates.io](https://meritbadge.herokuapp.com/wrangler)](https://crates.io/crates/wrangler)\n \n `wrangler` is a CLI tool designed for folks who are interested in using Rust-generated WebAssembly on\n Cloudflare Workers. This tool gives you the follow commands:\n",
        "test_patch": "diff --git a/azure-pipelines.yml b/azure-pipelines.yml\n--- a/azure-pipelines.yml\n+++ b/azure-pipelines.yml\n@@ -1,14 +1,8 @@\n-trigger:\n-  branches:\n-    include:\n-      - refs/heads/master\n-      - refs/tags/*\n-\n jobs:\n   - job: test\n-  - displayName: \"Run tests, cargo fmt, and cargo clippy\"\n-  - steps:\n-    - template: ci/azure-install-rust.yml\n-    - script: cargo test --locked\n-    - script: cargo fmt --all -- --check\n-    - script: cargo clippy\n+    displayName: \"Run tests, cargo fmt, and cargo clippy\"\n+    steps:\n+      - template: ci/azure-install-rust.yml\n+      - script: cargo test --locked\n+      - script: cargo fmt --all -- --check\n+      - script: cargo clippy\n",
        "problem_statement": "add crates.io badge\n\n",
        "hints_text": "",
        "created_at": "2019-03-28T15:11:58Z",
        "version": "0.1"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 27,
        "instance_id": "cloudflare__wrangler-legacy-27",
        "issue_numbers": [
            "25"
        ],
        "base_commit": "e455a3fb4fd0dd38a29f65cf51378a2e8c88bf22",
        "patch": "diff --git /dev/null b/ci/azure-install-rust.yml\nnew file mode 100644\n--- /dev/null\n+++ b/ci/azure-install-rust.yml\n@@ -0,0 +1,25 @@\n+parameters:\n+  toolchain: 'stable'\n+\n+steps:\n+  - bash: |\n+      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $TOOLCHAIN\n+      echo \"##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin\"\n+    displayName: Install rust - Unix\n+    condition: ne( variables['Agent.OS'], 'Windows_NT' )\n+    env:\n+      TOOLCHAIN: ${{ parameters.toolchain }}\n+  - script: |\n+      curl -sSf -o rustup-init.exe https://win.rustup.rs\n+      rustup-init.exe -y --default-toolchain %TOOLCHAIN%\n+      echo \"##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\\.cargo\\bin\"\n+    displayName: Install rust - Windows\n+    condition: eq( variables['Agent.OS'], 'Windows_NT' )\n+    env:\n+      TOOLCHAIN: ${{ parameters.toolchain }}\n+  - script: |\n+        rustup component add rustfmt\n+        rustup component add clippy-preview\n+        rustc -Vv\n+        cargo -V\n+    displayName: Query rust and cargo versions\n",
        "test_patch": "diff --git a/.travis.yml /dev/null\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,64 +0,0 @@\n-language: rust\n-sudo: false\n-\n-# Cache `cargo install`ed tools, but don't cache the project's `target`\n-# directory (which ends up over-caching and filling all disk space!)\n-cache:\n-  directories:\n-    - /home/travis/.cargo\n-\n-DEPLOY_TO_GITHUB: &DEPLOY_TO_GITHUB\n-  before_deploy:\n-    - git config --local user.name \"Ashley Williams\"\n-    - git config --local user.email \"ashley666ashley@gmail.com\"\n-    - name=\"wrangler-$TRAVIS_TAG-$TARGET\"\n-    - mkdir $name\n-    - cp target/$TARGET/release/wrangler $name/\n-    - cp README.md LICENSE-MIT LICENSE-APACHE $name/\n-    - tar czvf $name.tar.gz $name\n-  deploy:\n-    provider: releases\n-    api_key: GH_TOKEN\n-    file: wrangler-$TRAVIS_TAG-$TARGET.tar.gz\n-    skip_cleanup: true\n-    on:\n-      branch: master\n-      tags: true\n-\n-matrix:\n-  include:\n-\n-  - name: Tests\n-    env: RUST_BACKTRACE=1\n-    rust: stable\n-    script:\n-    - cargo test --all --locked\n-    - rustup component add rustfmt-preview\n-    - cargo fmt --version\n-    - cargo fmt --all -- --check\n-    - rustup component add clippy-preview\n-    - cargo clippy --version\n-    - cargo clippy\n-\n-  - name: Linux Binary\n-    env: TARGET=x86_64-unknown-linux-musl\n-    rust: stable\n-    before_script: rustup target add $TARGET\n-    script: cargo build --release --target $TARGET --locked --features vendored-openssl\n-    addons:\n-      apt:\n-        packages:\n-          - musl-tools\n-    <<: *DEPLOY_TO_GITHUB\n-\n-  - name: macOS Binary\n-    env: MACOSX_DEPLOYMENT_TARGET=10.7 TARGET=x86_64-apple-darwin\n-    os: osx\n-    rust: stable\n-    script: cargo build --release --target $TARGET --locked\n-    install: true\n-    <<: *DEPLOY_TO_GITHUB\n-\n-notifications:\n-  email:\n-    on_success: never\ndiff --git /dev/null b/azure-pipelines.yml\nnew file mode 100644\n--- /dev/null\n+++ b/azure-pipelines.yml\n@@ -0,0 +1,14 @@\n+trigger:\n+  branches:\n+    include:\n+      - refs/heads/master\n+      - refs/tags/*\n+\n+jobs:\n+  - job: test\n+  - displayName: \"Run tests, cargo fmt, and cargo clippy\"\n+  - steps:\n+    - template: ci/azure-install-rust.yml\n+    - script: cargo test --locked\n+    - script: cargo fmt --all -- --check\n+    - script: cargo clippy\n",
        "problem_statement": "CI\n\n",
        "hints_text": "",
        "created_at": "2019-03-28T14:58:31Z",
        "version": "0.1"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 20,
        "instance_id": "cloudflare__wrangler-legacy-20",
        "issue_numbers": [
            "10"
        ],
        "base_commit": "172161ebc059cf1f78902f501e41ba30a5dc10f5",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -91,6 +91,22 @@ dependencies = [\n  \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"binary-install\"\n+version = \"0.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"curl 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"is_executable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tar 0.4.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"zip 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"bitflags\"\n version = \"1.0.4\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -105,6 +121,11 @@ dependencies = [\n  \"constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"build_const\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"byteorder\"\n version = \"1.3.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -119,6 +140,24 @@ dependencies = [\n  \"iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"bzip2\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"bzip2-sys\"\n+version = \"0.1.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cc 1.0.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cc\"\n version = \"1.0.30\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -188,6 +227,14 @@ dependencies = [\n  \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"crc\"\n+version = \"1.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"build_const 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"crc32fast\"\n version = \"1.2.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -235,6 +282,35 @@ dependencies = [\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"curl\"\n+version = \"0.4.20\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"curl-sys 0.4.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"schannel 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"socket2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"curl-sys\"\n+version = \"0.4.17\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cc 1.0.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"vcpkg 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"dirs\"\n version = \"1.0.5\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -290,6 +366,27 @@ dependencies = [\n  \"synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"filetime\"\n+version = \"0.2.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"flate2\"\n+version = \"1.0.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"miniz-sys 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"miniz_oxide_c_api 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"fnv\"\n version = \"1.0.6\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -358,6 +455,11 @@ dependencies = [\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"hex\"\n+version = \"0.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"http\"\n version = \"0.1.16\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -444,6 +546,14 @@ dependencies = [\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"is_executable\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"itoa\"\n version = \"0.4.3\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -488,6 +598,17 @@ dependencies = [\n  \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"libz-sys\"\n+version = \"1.0.25\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cc 1.0.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"vcpkg 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"linked-hash-map\"\n version = \"0.3.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -553,6 +674,34 @@ dependencies = [\n  \"unicase 1.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"miniz-sys\"\n+version = \"0.1.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cc 1.0.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"miniz_oxide\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"adler32 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"miniz_oxide_c_api\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cc 1.0.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crc 1.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"miniz_oxide 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"mio\"\n version = \"0.6.16\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -757,6 +906,11 @@ name = \"pkg-config\"\n version = \"0.3.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"podio\"\n+version = \"0.1.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"proc-macro2\"\n version = \"0.4.27\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1118,6 +1272,17 @@ name = \"smallvec\"\n version = \"0.6.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"socket2\"\n+version = \"0.3.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"stable_deref_trait\"\n version = \"1.1.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1154,6 +1319,17 @@ dependencies = [\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"tar\"\n+version = \"0.4.22\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"filetime 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"xattr 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"tempfile\"\n version = \"3.0.7\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1439,6 +1615,15 @@ dependencies = [\n  \"try-lock 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"which\"\n+version = \"2.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"winapi\"\n version = \"0.2.8\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1489,6 +1674,7 @@ dependencies = [\n name = \"wrangler\"\n version = \"0.1.0\"\n dependencies = [\n+ \"binary-install 0.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"config 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1501,6 +1687,7 @@ dependencies = [\n  \"serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"uuid 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"which 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1512,6 +1699,14 @@ dependencies = [\n  \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"xattr\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"yaml-rust\"\n version = \"0.4.3\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1520,6 +1715,18 @@ dependencies = [\n  \"linked-hash-map 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"zip\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bzip2 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libflate 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"podio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [metadata]\n \"checksum MacTypes-sys 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eaf9f0d0b1cc33a4d2aee14fb4b2eac03462ef4db29c8ac4057327d8a71ad86f\"\n \"checksum adler32 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e522997b529f05601e05166c07ed17789691f562762c7f3b987263d2dedee5c\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1532,10 +1739,14 @@ dependencies = [\n \"checksum backtrace 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd5a90e2b463010cd0e0ce9a11d4a9d5d58d9f41d4a6ba3dcaf9e68b466e88b4\"\n \"checksum backtrace-sys 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"797c830ac25ccc92a7f8a7b9862bde440715531514594a6154e3d4a54dd769b6\"\n \"checksum base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e\"\n+\"checksum binary-install 0.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b5bc5f8c50dd6a80d0b303ddab79f42ddcb52fd43d68107ecf622c551fd4cd4\"\n \"checksum bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"228047a76f468627ca71776ecdebd732a3423081fcf5125585bcd7c49886ce12\"\n \"checksum blake2-rfc 0.2.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d6d530bdd2d52966a6d03b7a964add7ae1a288d25214066fd4b600f0f796400\"\n+\"checksum build_const 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39092a32794787acd8525ee150305ff051b0aa6cc2abaf193924f5ab05425f39\"\n \"checksum byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a019b10a2a7cdeb292db131fc8113e57ea2a908f6e7894b0c3c671893b65dbeb\"\n \"checksum bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"206fdffcfa2df7cbe15601ef46c813fce0965eb3286db6b56c583b814b51c81c\"\n+\"checksum bzip2 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42b7c3cbf0fa9c1b82308d57191728ca0256cb821220f4e2fd410a72ade26e3b\"\n+\"checksum bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6584aa36f5ad4c9247f5323b0a42f37802b37a836f0ad87084d7a33961abe25f\"\n \"checksum cc 1.0.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d01c69d08ff207f231f07196e30f84c70f1c815b04f980f8b7b01ff01f05eb92\"\n \"checksum cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11d43355396e872eefb45ce6342e4374ed7bc2b3a502d1b28e36d6e23c05d1f4\"\n \"checksum clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b957d88f4b6a63b9d70d5f454ac8011819c6efa7727858f458ab71c756ce2d3e\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1544,17 +1755,22 @@ dependencies = [\n \"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n \"checksum core-foundation 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"286e0b41c3a20da26536c6000a280585d519fd07b3956b43aed8a79e9edce980\"\n \"checksum core-foundation-sys 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"716c271e8613ace48344f723b60b900a93150271e5be206212d052bbc0883efa\"\n+\"checksum crc 1.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d663548de7f5cca343f1e0a48d14dcfb0e9eb4e079ec58883b7251539fa10aeb\"\n \"checksum crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n \"checksum crossbeam-deque 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b18cd2e169ad86297e6bc0ad9aa679aee9daa4f19e8163860faf7c164e4f5a71\"\n \"checksum crossbeam-epoch 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"04c9e3102cc2d69cd681412141b390abd55a362afc1540965dad0ad4d34280b4\"\n \"checksum crossbeam-queue 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c979cd6cfe72335896575c6b5688da489e420d36a27a0b9eb0c73db574b4a4b\"\n \"checksum crossbeam-utils 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8306fcef4a7b563b76b7dd949ca48f52bc1141aa067d2ea09565f3e2652aa5c\"\n+\"checksum curl 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bed4741d1d4e1fc1ba6786c1313057c609259785cde2c45e34602acc45fd6ccc\"\n+\"checksum curl-sys 0.4.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b8d8e51964f58c8053337fcef48e1c4608c7ee70c6f2e457674a97dda5a5828\"\n \"checksum dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\n \"checksum dtoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d301140eb411af13d3115f9a562c85cc6b541ade9dfa314132244aaee7489dd\"\n \"checksum encoding_rs 0.8.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4155785c79f2f6701f185eb2e6b4caf0555ec03477cb4c70db67b465311620ed\"\n \"checksum env_logger 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b61fa891024a945da30a9581546e8cfaf5602c7b3f4c137a2805cf388f92075a\"\n \"checksum failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"795bd83d3abeb9220f257e597aa0080a508b27533824adf336529648f6abf7e2\"\n \"checksum failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea1063915fd7ef4309e222a5a07cf9c319fb9c7836b1f89b85458672dbb127e1\"\n+\"checksum filetime 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a2df5c1a8c4be27e7707789dc42ae65976e60b394afd293d1419ab915833e646\"\n+\"checksum flate2 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f87e68aa82b2de08a6e037f1385455759df6e445a8df5e005b4297191dbf18aa\"\n \"checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \"checksum foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\n \"checksum foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1564,6 +1780,7 @@ dependencies = [\n \"checksum futures 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49e7653e374fe0d0c12de4250f0bdb60680b8c80eed558c5c7538eec9c89e21b\"\n \"checksum futures-cpupool 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab90cde24b3319636588d0c35fe03b1333857621051837ed769faefb4c2162e4\"\n \"checksum h2 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddb2b25a33e231484694267af28fec74ac63b5ccf51ee2065a5e313b834d836e\"\n+\"checksum hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n \"checksum http 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fe67e3678f2827030e89cc4b9e7ecd16d52f132c0b940ab5005f88e821500f6a\"\n \"checksum httparse 1.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8734b0cfd3bc3e101ec59100e101c2eecd19282202e87808b3037b442777a83\"\n \"checksum humantime 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ca7e5f2e110db35f93b837c81797f3714500b81d517bf20c431b16d3ca4f114\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1572,6 +1789,7 @@ dependencies = [\n \"checksum idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e\"\n \"checksum indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e81a7c05f79578dbc15793d8b619db9ba32b4577003ef3af1a91c416798c58d\"\n \"checksum iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbe6e417e7d0975db6512b90796e8ce223145ac4e33c377e4a42882a0e88bb08\"\n+\"checksum is_executable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"302d553b8abc8187beb7d663e34c065ac4570b273bc9511a50e940e99409c577\"\n \"checksum itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1306f3464951f30e30d12373d31c79fbd52d236e5e896fd92f96ec7babbbe60b\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1579,6 +1797,7 @@ dependencies = [\n \"checksum lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b294d6fa9ee409a054354afc4352b0b9ef7ca222c69b8812cbea9e7d2bf3783f\"\n \"checksum libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aab692d7759f5cd8c859e169db98ae5b52c924add2af5fbbca11d12fefb567c1\"\n \"checksum libflate 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7346a83e8a2c3958d44d24225d905385dc31fc16e89dffb356c457b278914d20\"\n+\"checksum libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2eb5e43362e38e2bca2fd5f5134c4d4564a23a5c28e9b95411652021a8675ebe\"\n \"checksum linked-hash-map 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d262045c5b87c0861b3f004610afd0e2c851e2908d08b6c870cbb9d5f494ecd\"\n \"checksum linked-hash-map 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"70fb39025bc7cdd76305867c4eccf2f2dcf6e9a57f5b21a93e1c2d86cd03ec9e\"\n \"checksum lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"62ebf1391f6acad60e5c8b43706dde4582df75c06698ab44511d15016bc2442c\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1610,6 +1832,7 @@ dependencies = [\n \"checksum phf_generator 0.7.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09364cc93c159b8b06b1f4dd8a4398984503483891b0c26b867cf431fb132662\"\n \"checksum phf_shared 0.7.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"234f71a15de2288bcb7e3b6515828d22af7ec8598ee6d24c3b526fa0a80b67a0\"\n \"checksum pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"676e8eb2b1b4c9043511a9b7bea0915320d7e502b0a079fb03f9635a5252b18c\"\n+\"checksum podio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"780fb4b6698bbf9cf2444ea5d22411cef2953f0824b98f33cf454ec5615645bd\"\n \"checksum proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4d317f9caece796be1980837fd5cb3dfec5613ebdb04ad0956deea83ce168915\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdd8e04bd9c52e0342b406469d494fcb033be4bdbe5c606016defbb1681411e1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1652,11 +1875,13 @@ dependencies = [\n \"checksum siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b8de496cf83d4ed58b6be86c3a275b8602f6ffe98d3024a869e124147a9a3ac\"\n \"checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n \"checksum smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4488ae950c49d403731982257768f48fada354a5203fe81f9bb6f43ca9002be\"\n+\"checksum socket2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4d11a52082057d87cb5caa31ad812f4504b97ab44732cd8359df2e9ff9f48e7\"\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n \"checksum string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b639411d0b9c738748b5397d5ceba08e648f4f1992231aa859af1a017f31f60b\"\n \"checksum strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb4f380125926a99e52bc279241539c018323fab05ad6368b56f93d9369ff550\"\n \"checksum syn 0.15.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1825685f977249735d510a242a6727b46efe914bb67e38d30c071b1b72b1d5c2\"\n \"checksum synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73687139bf99285483c96ac0add482c3776528beac1d97d444f6e91f203a2015\"\n+\"checksum tar 0.4.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c2167ff53da2a661702b3299f71a91b61b1dffef36b4b2884b1f9c67254c0133\"\n \"checksum tempfile 3.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b86c784c88d98c801132806dadd3819ed29d8600836c4088e855cdf3e178ed8a\"\n \"checksum termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4096add70612622289f2fdcdbd5086dc81c1e2675e6ae58d6c4f62a16c6d7f2f\"\n \"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1689,6 +1914,7 @@ dependencies = [\n \"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n \"checksum version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"914b1a6776c4c929a602fafd8bc742e06365d4bcbe48c30f9cca5824f70dc9dd\"\n \"checksum want 0.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"797464475f30ddb8830cc529aaaae648d581f99e2036a928877dfde027ddf6b3\"\n+\"checksum which 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b57acb10231b9493c8472b20cb57317d0679a49e0bdbee44b3b803a6473af164\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \"checksum winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92c1eb33641e276cfa214a0522acad57be5c56b10cb348b3c5117db75f3ac4b0\"\n \"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1697,4 +1923,6 @@ dependencies = [\n \"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n \"checksum wincolor 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"561ed901ae465d6185fa7864d63fbd5720d0ef718366c9a4dc83cf6170d7e9ba\"\n \"checksum ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\"\n+\"checksum xattr 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"244c3741f4240ef46274860397c7c74e50eb23624996930e484c16679633a54c\"\n \"checksum yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"65923dd1784f44da1d2c3dbbc5e822045628c590ba72123e1c73d3c230c4434d\"\n+\"checksum zip 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1cbbddef6339155bc4fa8e2609040078ff18f3011117b55caa9f0516d544a357\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -9,6 +9,7 @@ readme = \"README.md\"\n categories = [\"wasm\"]\n \n [dependencies]\n+binary-install = \"0.0.2\"\n clap = \"2.32.0\"\n config = \"0.9.2\"\n dirs = \"1.0.5\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -21,6 +22,7 @@ serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0.39\"\n toml = \"0.5.0\"\n uuid = \"0.7\"\n+which = \"2.0.1\"\n \n [features]\n vendored-openssl = ['openssl/vendored']\ndiff --git /dev/null b/src/cache.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/cache.rs\n@@ -0,0 +1,11 @@\n+use binary_install::Cache;\n+use std::env;\n+use std::path::Path;\n+\n+pub fn get_wrangler_cache() -> Result<Cache, failure::Error> {\n+    if let Ok(path) = env::var(\"WRANGLER_CACHE\") {\n+        Ok(Cache::at(Path::new(&path)))\n+    } else {\n+        Cache::new(\"wrangler\")\n+    }\n+}\ndiff --git a/src/commands/build.rs b/src/commands/build.rs\n--- a/src/commands/build.rs\n+++ b/src/commands/build.rs\n@@ -1,9 +1,15 @@\n-use crate::commands;\n+use crate::{commands, install};\n+use binary_install::Cache;\n use std::process::Command;\n \n-pub fn build() -> Result<(), failure::Error> {\n-    let build_wasm = \"wasm-pack build --target no-modules\";\n-    commands::run(command(build_wasm), build_wasm)?;\n+pub fn build(cache: &Cache) -> Result<(), failure::Error> {\n+    let tool_name = \"wasm-pack\";\n+    let binary_path = install::install(tool_name, \"rustwasm\", cache)?.binary(tool_name)?;\n+    let build_wasm = format!(\n+        \"{} build --target no-modules\",\n+        binary_path.to_string_lossy()\n+    );\n+    commands::run(command(&build_wasm), &build_wasm)?;\n     Ok(())\n }\n \ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -1,15 +1,35 @@\n+use crate::{commands, install};\n+use binary_install::Cache;\n use std::process::Command;\n \n-pub fn generate(name: &str) -> Result<(), failure::Error> {\n+pub fn generate(name: &str, cache: &Cache) -> Result<(), failure::Error> {\n+    let tool_name = \"cargo-generate\";\n+    let binary_path = install::install(tool_name, \"ashleygwilliams\", cache)?.binary(tool_name)?;\n+\n     let worker_init = format!(\n-        \"cargo generate --git https://github.com/cloudflare/rustwasm-worker-template --name {}\",\n+        \"{} generate --git https://github.com/cloudflare/rustwasm-worker-template --name {}\",\n+        binary_path.to_string_lossy(),\n         name\n     );\n+    commands::run(command(&worker_init, name), &worker_init)?;\n+    Ok(())\n+}\n \n-    let _output = if cfg!(target_os = \"windows\") {\n-        Command::new(\"cmd\").args(&[\"/C\", &worker_init]).output()?\n+pub fn command(cmd: &str, name: &str) -> Command {\n+    println!(\n+        \"\ud83d\udc11 Generating a new rustwasm worker project with name '{}'...\",\n+        name\n+    );\n+\n+    if cfg!(target_os = \"windows\") {\n+        let mut c = Command::new(\"cmd\");\n+        c.arg(cmd);\n+        c.args(&[\"/C\", cmd]);\n+        c\n     } else {\n-        Command::new(\"sh\").arg(\"-c\").arg(&worker_init).output()?\n-    };\n-    Ok(())\n+        let mut c = Command::new(\"sh\");\n+        c.arg(\"-c\");\n+        c.arg(cmd);\n+        c\n+    }\n }\ndiff --git /dev/null b/src/install/krate.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/install/krate.rs\n@@ -0,0 +1,23 @@\n+use serde::{self, Deserialize};\n+\n+#[derive(Debug, Deserialize)]\n+pub struct Krate {\n+    pub max_version: String,\n+}\n+\n+#[derive(Debug, Deserialize)]\n+pub struct KrateResponse {\n+    #[serde(rename = \"crate\")]\n+    pub krate: Krate,\n+}\n+\n+impl Krate {\n+    pub fn new(name: &str) -> Result<Krate, failure::Error> {\n+        let krate_address = format!(\"https://crates.io/api/v1/crates/{}\", name);\n+        let client = reqwest::Client::new();\n+        let mut res = client.get(&krate_address).send()?;\n+\n+        let kr: KrateResponse = serde_json::from_str(&res.text()?)?;\n+        Ok(kr.krate)\n+    }\n+}\ndiff --git /dev/null b/src/install/target.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/install/target.rs\n@@ -0,0 +1,6 @@\n+pub const LINUX: bool = cfg!(target_os = \"linux\");\n+pub const MACOS: bool = cfg!(target_os = \"macos\");\n+pub const WINDOWS: bool = cfg!(target_os = \"windows\");\n+\n+#[allow(non_upper_case_globals)]\n+pub const x86_64: bool = cfg!(target_arch = \"x86_64\");\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -1,14 +1,17 @@\n use std::str::FromStr;\n \n+use binary_install::Cache;\n use clap::{App, Arg, SubCommand};\n use commands::HTTPMethod;\n use settings::Settings;\n \n mod commands;\n+mod install;\n mod settings;\n \n fn main() -> Result<(), failure::Error> {\n     env_logger::init();\n+    let cache = Cache::new(\"wrangler\")?;\n \n     let matches = App::new(\"\ud83d\udc77\u200d\u2640\ufe0f\ud83e\udde1\u2601\ufe0f \u2728 wrangler\")\n         .version(\"0.1.0\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -88,7 +91,7 @@ fn main() -> Result<(), failure::Error> {\n                 .value_of(\"zone_id\")\n                 .expect(\"A zone ID must be provided.\");\n \n-            commands::build()?;\n+            commands::build(&cache)?;\n             commands::publish(zone_id, settings.clone())?;\n         }\n \ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -100,17 +103,17 @@ fn main() -> Result<(), failure::Error> {\n                 None => None,\n             };\n \n-            commands::build()?;\n+            commands::build(&cache)?;\n             commands::preview(method, body)?;\n         }\n \n         if let Some(matches) = matches.subcommand_matches(\"generate\") {\n             let name = matches.value_of(\"name\").unwrap_or(\"wasm-worker\");\n-            commands::generate(name)?;\n+            commands::generate(name, &cache)?;\n         }\n \n         if matches.subcommand_matches(\"build\").is_some() {\n-            commands::build()?;\n+            commands::build(&cache)?;\n         }\n \n         if matches.subcommand_matches(\"whoami\").is_some() {\n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1588,6 +1807,9 @@ dependencies = [\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n \"checksum mime 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e27ca21f40a310bd06d9031785f4801710d566c184a6e15bad4f1d9b65f9425\"\n \"checksum mime_guess 2.0.0-alpha.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"30de2e4613efcba1ec63d8133f344076952090c122992a903359be5a4f99c3ed\"\n+\"checksum miniz-sys 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0300eafb20369952951699b68243ab4334f4b10a88f411c221d444b36c40e649\"\n+\"checksum miniz_oxide 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c468f2369f07d651a5d0bb2c9079f8488a66d5466efe42d0c5c6466edcb7f71e\"\n+\"checksum miniz_oxide_c_api 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b7fe927a42e3807ef71defb191dc87d4e24479b221e67015fe38ae2b7b447bab\"\n \"checksum mio 0.6.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71646331f2619b1026cc302f87a2b8b648d5c6dd6937846a16cc8ce0f347f432\"\n \"checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\n \"checksum native-tls 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff8e08de0070bbf4c31f452ea2a70db092f36f6f2e4d897adf5674477d488fb2\"\ndiff --git /dev/null b/src/install/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/install/mod.rs\n@@ -0,0 +1,67 @@\n+mod krate;\n+mod target;\n+\n+use krate::Krate;\n+\n+use binary_install::{Cache, Download};\n+use which::which;\n+\n+pub fn install(tool_name: &str, owner: &str, cache: &Cache) -> Result<Download, failure::Error> {\n+    if let Ok(path) = which(tool_name) {\n+        log::debug!(\"found global {} binary at: {}\", tool_name, path.display());\n+        return Ok(Download::at(path.parent().unwrap()));\n+    }\n+\n+    let latest_version = get_latest_version(tool_name)?;\n+    let download = download_prebuilt(cache, tool_name, owner, &latest_version);\n+    match download {\n+        Ok(download) => Ok(download),\n+        Err(_) => {\n+            failure::bail!(\"could not download pre-built `{}`.\", tool_name);\n+        }\n+    }\n+}\n+\n+fn download_prebuilt(\n+    cache: &Cache,\n+    tool_name: &str,\n+    owner: &str,\n+    version: &str,\n+) -> Result<Download, failure::Error> {\n+    println!(\"\u2b07\ufe0f Installing {}...\", tool_name);\n+    let url = match prebuilt_url(tool_name, owner, version) {\n+        Some(url) => url,\n+        None => failure::bail!(format!(\n+            \"no prebuilt {} binaries are available for this platform\",\n+            tool_name\n+        )),\n+    };\n+\n+    let binaries = &[tool_name];\n+    match cache.download(true, tool_name, binaries, &url)? {\n+        Some(download) => Ok(download),\n+        None => failure::bail!(\"{} is not installed!\", tool_name),\n+    }\n+}\n+\n+fn prebuilt_url(tool_name: &str, owner: &str, version: &str) -> Option<String> {\n+    let target = if target::LINUX && target::x86_64 {\n+        \"x86_64-unknown-linux-musl\"\n+    } else if target::MACOS && target::x86_64 {\n+        \"x86_64-apple-darwin\"\n+    } else if target::WINDOWS && target::x86_64 {\n+        \"x86_64-pc-windows-msvc\"\n+    } else {\n+        return None;\n+    };\n+\n+    let url = format!(\n+        \"https://github.com/{0}/{1}/releases/download/v{2}/{1}-v{2}-{3}.tar.gz\",\n+        owner, tool_name, version, target\n+    );\n+    Some(url)\n+}\n+\n+fn get_latest_version(tool_name: &str) -> Result<String, failure::Error> {\n+    Ok(Krate::new(tool_name)?.max_version)\n+}\n",
        "problem_statement": "install binaries\n\n",
        "hints_text": "",
        "created_at": "2019-03-21T20:05:53Z",
        "version": "0.1"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1288,
        "instance_id": "cloudflare__wrangler-legacy-1288",
        "issue_numbers": [
            "270"
        ],
        "base_commit": "5b3a641b93d2b8801b88357470b68897fc61a5da",
        "patch": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -5,9 +5,11 @@ and the opportunity to contribute to their developer tools. Wrangler is also a p\n delivered by Cloudflare, so it's important to clarify how we think about issue triage and\n contributions.\n \n+If you want to learn about how to get started with Wrangler, [click here](#Developing-Wrangler)\n+\n ## People\n \n-Wrangler is maintained by @ashleygwilliams, and her team, Workers Developer Experience.\n+Wrangler is owned by the [Cloudflare Workers](https://workers.cloudflare.com) Team and maintained by community members like you! The core maintainers are @EverlastingBugstopper and @ashleymichal, and everything that gets merged must be approved by at least one team member.\n \n ## Primary Issue Triage\n \ndiff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -15,14 +17,15 @@ Within 3 days, any incoming issue should be triaged. Triage involves:\n \n - reading the issue and requesting any further information\n - always thank the user for submitting\n+- assigning appropriate labels\n \n ### Labelling\n \n-- label all issues coming from non-team members with `user report`\n-- labelling the category of the issue: `feature`, `external bug`, `bug`, `maintenance`, `docs`, `refactor`, `release`\n-- labelling the status of the issue: `needs design`, `needs docs`, `needs more info`, `needs repro`, `needs template`, `PR attached`, `PR welcome`, `waiting on response`\n-- optionally labelling a subject: `cargo install`, `kv`, `routes`, `site`, `webpack`, `workers runtime`\n-- optionally labelling other calls to action: `help wanted`, `question`, `good first issue`\n+- each issue should have a `status` label and a `category` label, and they should be kept up to date\n+  - once design has been settled for an issue, please label with `status - PR welcome`\n+- each issue from non-team members should be labelled `user report` (issue templates assign this automatically)\n+- subject labels and other call to actions are nice to have\n+- if an issue seems easy to tackle, please label with `good first issue` so new contributors can use it to ramp up\n \n ### Assignment\n \ndiff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -31,20 +34,15 @@ Within 3 days, any incoming issue should be triaged. Triage involves:\n \n ## Product Issue Triage\n \n-Once a week, the team meets to do Product Triage. This is where we assign work and update\n+Once a week, the team holds the Wrangler Contributors meeting. This is where we assign work and update\n our plans for the milestones and releases.\n \n-### Labelling\n-\n-- labelling the priority of the issue: `critical`, `nice to have`, `low priority`\n-- labelling the status of the issue: Needs Design, PR Welcome\n-\n ### Assignment and Milestones\n \n - assign all issues for the next two releases a milestone\n - assign all issues for the current milestone a person to take point\n \n-### Pull Request Triage\n+## Pull Request Triage\n \n Within 3 days, all incoming Community PRs should be triaged. If a team member opens a PR it\n should be triaged immediately upon open by the PR author.\ndiff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -54,9 +52,10 @@ should be triaged immediately upon open by the PR author.\n - All work-in-progress PRs should be labelled `work in progress` and the title should be\n     annotated [WIP] for easy scanning. No WIP PRs will be reviewed until the annotations\n     are removed.\n-- All PRs that need to be reviewed should be labelled `needs review` until they have \n+- All PRs that need to be reviewed should be labelled `needs review` until they have\n     received all required reviews.\n-- All PRs should be labelled with a changelog label: `BREAKING`, `feature`, `fix`, `maintenance`, `docs`\n+- All PRs should be labelled with a changelog label: `BREAKING`, `feature`, `fix`, `maintenance`, `docs`, `N/A`\n+- All PRs that are ready for review should be tagged with the appropriate release milestone\n \n ### Merging\n \n",
        "test_patch": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -65,3 +64,48 @@ should be triaged immediately upon open by the PR author.\n     community members. Be reasonable.\n - All PRs should be labelled with the current milestone before merging. If a PR for an issue\n     labelled with a different milestone is to be merged, update the issue milestone as well.\n+\n+## Developing Wrangler\n+\n+### Get started\n+\n+To get started with developing Wrangler, we recommend that you first get [up to speed with Wrangler](https://developers.cloudflare.com/workers/quickstart). Then, get up to speed with the [basics of Rust](https://www.rust-lang.org/learn/get-started). (You'll need to install `rustup` where we're going).\n+\n+### Build Wrangler from source\n+\n+To build Wrangler from source, fork the repo, clone it, and `cd wrangler`.\n+\n+There are many ways to build and execute a development version of Wrangler:\n+\n+`cargo build` will produce a local binary at `./target/debug/wrangler` that you can execute.\n+`cargo install --debug --path .` will replace any globally installed wrangler with the one you've just built from source.\n+\n+You can read more about cargo [here](https://doc.rust-lang.org/cargo/), just find something that works for you.\n+\n+### Module System\n+\n+Each of the commands supported by Wrangler have entrypoints in [./src/commands](./src/commands). It's useful to understand the [module system](https://doc.rust-lang.org/rust-by-example/mod.html) if you will be adding new commands or need to refactor/organize imports.\n+\n+### Notable external libraries\n+\n+#### Command-line argument parsing (clap)\n+\n+The primary framework we use for developing Wrangler is called [clap](https://clap.rs), which provides fast and structured argument parsing. This is how different features are exposed to users, and most of that logic lives in [main.rs](./src/main.rs).\n+\n+#### API calls (cloudflare-rs)\n+\n+When developing a new feature for Wrangler, it's quite common to need to make API calls. The way we do this is by submitting a PR to [cloudflare-rs](https://github.com/cloudflare/cloudflare-rs) and releasing a new version of that library to depend on. There are some legacy endpoints that we use our own client for, but the goal is to eventually move everything to cloudflare-rs. All endpoint calls should be made with the clients in [./src/http](./src/http).\n+\n+### Figure out where to start\n+\n+If you're working on a specific issue, make sure there is buy-in from the Wrangler team before starting, and feel free to ask where you should start. We're more than happy to help!\n+\n+### Requirements for merging a PR\n+\n+### Passing tests\n+\n+When adding features or fixing bugs, we'd love if you would add a test! There are two types of tests in Wrangler, integration and unit tests. To execute tests, you can run `cargo test`. You can read more about testing [here](). All tests must pass when submitting a new PR, this is enforced by our GitHub Actions runners, which run each test on Windows, MacOS, and Linux.\n+\n+### Proper formatting\n+\n+You must run `cargo fmt` on your code before CI will allow you to merge your PR.\n\\ No newline at end of file\n",
        "problem_statement": "Document \"How to work on wrangler\" for CONTRIBUTING.md\nWe should provide a quick intro to some dev practices for wrangler. Things like building wrangler locally and installing/running your local build may not be intuitive for those not familiar with rust already.\r\n\r\nWe should provide a high-level map of the code that shows where basic high-level functionality is implemented. main.rs may serve this function adequately, but we can review if a separate map is helpful.\r\n\r\n- [ ] Include info on --debug flag for building #264.\n",
        "hints_text": "",
        "created_at": "2020-05-15T18:46:01Z",
        "version": "1.9"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1244,
        "instance_id": "cloudflare__wrangler-legacy-1244",
        "issue_numbers": [
            "1243"
        ],
        "base_commit": "bae61d8b25161c37acfd14223f9e01dd65c69fbb",
        "patch": "diff --git a/.github/workflows/release.yml b/.github/workflows/release.yml\n--- a/.github/workflows/release.yml\n+++ b/.github/workflows/release.yml\n@@ -44,27 +44,27 @@ jobs:\n         if: matrix.rust\n         with:\n           path: ~/.cargo/registry\n-          key: ${{ matrix.build }}-stable-cargo-registry-${{ hashFiles('**/Cargo.lock') }}\n+          key: ${{ matrix.build }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}\n           restore-keys: |\n-            ${{ matrix.build }}-stable-cargo-registry-\n+            ${{ matrix.build }}-cargo-registry-\n \n       - name: Cache Cargo index\n         uses: actions/cache@v1\n         if: matrix.rust\n         with:\n           path: ~/.cargo/git\n-          key: ${{ matrix.build }}-stable-cargo-index-${{ hashFiles('**/Cargo.lock') }}\n+          key: ${{ matrix.build }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}\n           restore-keys: |\n-            ${{ matrix.build }}-stable-cargo-index-\n+            ${{ matrix.build }}-cargo-index-\n \n       - name: Cache Cargo build\n         uses: actions/cache@v1\n         if: matrix.rust\n         with:\n-          path: target/release\n-          key: ${{ matrix.build }}-stable-release-target-${{ hashFiles('**/Cargo.lock') }}\n+          path: target\n+          key: ${{ matrix.build }}-target-${{ hashFiles('**/Cargo.lock') }}\n           restore-keys: |\n-            ${{ matrix.build }}-stable-release-target-\n+            ${{ matrix.build }}-target-\n \n       - name: Query version number\n         id: get_version\n",
        "test_patch": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -45,25 +45,25 @@ jobs:\n         uses: actions/cache@v1\n         with:\n           path: ~/.cargo/registry\n-          key: ${{ matrix.build }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}\n+          key: ${{ matrix.build }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}\n           restore-keys: |\n-            ${{ matrix.build }}-${{ matrix.rust }}-cargo-registry-\n+            ${{ matrix.build }}-cargo-registry-\n \n       - name: Cache Cargo index\n         uses: actions/cache@v1\n         with:\n           path: ~/.cargo/git\n-          key: ${{ matrix.build }}-${{ matrix.rust }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}\n+          key: ${{ matrix.build }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}\n           restore-keys: |\n-            ${{ matrix.build }}-${{ matrix.rust }}-cargo-index-\n+            ${{ matrix.build }}-cargo-index-\n \n       - name: Cache Cargo build\n         uses: actions/cache@v1\n         with:\n-          path: target/debug\n-          key: ${{ matrix.build }}-${{ matrix.rust }}-debug-target-${{ hashFiles('**/Cargo.lock') }}\n+          path: target\n+          key: ${{ matrix.build }}-target-${{ hashFiles('**/Cargo.lock') }}\n           restore-keys: |\n-            ${{ matrix.build }}-${{ matrix.rust }}-debug-target-\n+            ${{ matrix.build }}-target-\n \n       - name: Install Rust\n         run: |\ndiff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -73,5 +73,4 @@ jobs:\n       - name: Run Tests\n         run: cargo test\n         env:\n-          RUST_LOG: warn,wrangler=info\n           RUST_BACKTRACE: 1\ndiff --git a/src/settings/toml/tests/mod.rs b/src/settings/toml/tests/mod.rs\n--- a/src/settings/toml/tests/mod.rs\n+++ b/src/settings/toml/tests/mod.rs\n@@ -91,7 +91,6 @@ fn parses_same_from_config_path_as_string() {\n     env::remove_var(\"CF_ACCOUNT_ID\");\n     env::remove_var(\"CF_ZONE_ID\");\n     let config_path = toml_fixture_path(\"environments.toml\");\n-    eprintln!(\"{:#?}\", &config_path);\n     let string_toml = fs::read_to_string(&config_path).unwrap();\n \n     let manifest_from_string = Manifest::from_str(&string_toml).unwrap();\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -1,6 +1,3 @@\n-#[macro_use]\n-extern crate lazy_static;\n-\n pub mod fixture;\n \n use std::fs;\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -369,7 +366,6 @@ fn it_builds_with_webpack_name_output_warn() {\n }\n \n fn build_creates_assets(fixture: &Fixture, script_names: Vec<&str>) -> (String, String) {\n-    let _lock = fixture.lock();\n     let mut build = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n     build.current_dir(fixture.get_path());\n     build.arg(\"build\");\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -388,7 +384,6 @@ fn build_creates_assets(fixture: &Fixture, script_names: Vec<&str>) -> (String,\n }\n \n fn build_fails_with(fixture: &Fixture, expected_message: &str) {\n-    let _lock = fixture.lock();\n     let mut build = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n     build.current_dir(fixture.get_path());\n     build.arg(\"build\");\ndiff --git a/tests/fixture/mod.rs b/tests/fixture/mod.rs\n--- a/tests/fixture/mod.rs\n+++ b/tests/fixture/mod.rs\n@@ -6,7 +6,6 @@ use std::fs::File;\n use std::io::prelude::*;\n use std::mem::ManuallyDrop;\n use std::path::PathBuf;\n-use std::sync::MutexGuard;\n use std::thread;\n \n use tempfile::TempDir;\ndiff --git a/tests/fixture/mod.rs b/tests/fixture/mod.rs\n--- a/tests/fixture/mod.rs\n+++ b/tests/fixture/mod.rs\n@@ -107,16 +106,6 @@ impl Fixture {\n         );\n         self.create_file(\"workers-site/index.js\", \"\");\n     }\n-\n-    pub fn lock(&self) -> MutexGuard<'static, ()> {\n-        use std::sync::Mutex;\n-\n-        lazy_static! {\n-            static ref ONE_TEST_AT_A_TIME: Mutex<()> = Mutex::new(());\n-        }\n-\n-        ONE_TEST_AT_A_TIME.lock().unwrap_or_else(|e| e.into_inner())\n-    }\n }\n \n impl Drop for Fixture {\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -1,6 +1,3 @@\n-#[macro_use]\n-extern crate lazy_static;\n-\n pub mod fixture;\n \n use fixture::WranglerToml;\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -232,7 +229,6 @@ fn it_previews_with_config_text() {\n }\n \n fn preview_succeeds_with(fixture: &Fixture, env: Option<&str>, expected: &str) {\n-    let _lock = fixture.lock();\n     env::remove_var(\"CF_ACCOUNT_ID\");\n     env::remove_var(\"CF_ZONE_ID\");\n     let mut preview = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -248,8 +244,8 @@ fn preview_succeeds_with(fixture: &Fixture, env: Option<&str>, expected: &str) {\n }\n \n fn preview_succeeds(fixture: &Fixture) {\n-    let _lock = fixture.lock();\n     env::remove_var(\"CF_ACCOUNT_ID\");\n+    env::remove_var(\"CF_ZONE_ID\");\n     let mut preview = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n     preview.current_dir(fixture.get_path());\n     preview.arg(\"preview\").arg(\"--headless\");\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -257,8 +253,8 @@ fn preview_succeeds(fixture: &Fixture) {\n }\n \n fn preview_matches_url(fixture: &Fixture, url: &str, expected: &str) {\n-    let _lock = fixture.lock();\n     env::remove_var(\"CF_ACCOUNT_ID\");\n+    env::remove_var(\"CF_ZONE_ID\");\n     let mut preview = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n     preview.current_dir(fixture.get_path());\n     preview.arg(\"preview\").arg(\"--headless\");\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -267,8 +263,8 @@ fn preview_matches_url(fixture: &Fixture, url: &str, expected: &str) {\n }\n \n fn preview_not_matches_url(fixture: &Fixture, url: &str, expected: &str) {\n-    let _lock = fixture.lock();\n     env::remove_var(\"CF_ACCOUNT_ID\");\n+    env::remove_var(\"CF_ZONE_ID\");\n     let mut preview = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n     preview.current_dir(fixture.get_path());\n     preview.arg(\"preview\").arg(\"--headless\");\n",
        "problem_statement": "investigate failing ci\nmacos nightly and stable sometimes time out and it has not been reproduced locally and it's a massive time sink.\r\n\r\ngoing to see if i can reproduce locally with [local github actions runner](https://github.com/nektos/act)\n",
        "hints_text": "first bump in the road encountered! the macos images are not supported by `act` quite yet \ud83d\ude04 going to see if i can reproduce with a custom macos docker image and if that doesnt work, ill come up with some other brilliant plan of attack",
        "created_at": "2020-05-04T18:36:39Z",
        "version": "1.8"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1239,
        "instance_id": "cloudflare__wrangler-legacy-1239",
        "issue_numbers": [
            "827"
        ],
        "base_commit": "063cf5de9837f61dbbb60faa8f87e4176f452cd4",
        "patch": "diff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -45,6 +45,10 @@ pub struct Manifest {\n \n impl Manifest {\n     pub fn new(config_path: &Path) -> Result<Self, failure::Error> {\n+        failure::ensure!(\n+            config_path.exists(),\n+            \"wrangler.toml not found; run `wrangler init` to create one.\"\n+        );\n         let config = read_config(config_path)?;\n \n         let manifest: Manifest = match config.try_into() {\n",
        "test_patch": "diff --git a/src/settings/toml/tests/mod.rs b/src/settings/toml/tests/mod.rs\n--- a/src/settings/toml/tests/mod.rs\n+++ b/src/settings/toml/tests/mod.rs\n@@ -146,5 +146,5 @@ fn base_fixture_path() -> PathBuf {\n }\n \n fn toml_fixture_path(fixture: &str) -> PathBuf {\n-    base_fixture_path().join(fixture)\n+    base_fixture_path().join(fixture).with_extension(\"toml\")\n }\n",
        "problem_statement": "if no wrangler.toml found on build/preview/publish, give an error message to run wrangler init\n\n",
        "hints_text": "",
        "created_at": "2020-05-01T19:30:45Z",
        "version": "1.8"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1190,
        "instance_id": "cloudflare__wrangler-legacy-1190",
        "issue_numbers": [
            "397"
        ],
        "base_commit": "0a00d4e0b39c0cf7bdab75d871001f0eec86aff1",
        "patch": "diff --git a/src/commands/config.rs b/src/commands/config.rs\n--- a/src/commands/config.rs\n+++ b/src/commands/config.rs\n@@ -9,7 +9,7 @@ use cloudflare::endpoints::user::{GetUserDetails, GetUserTokenStatus};\n use cloudflare::framework::apiclient::ApiClient;\n \n use crate::http;\n-use crate::settings::global_user::{get_global_config_path, GlobalUser};\n+use crate::settings::{get_global_config_path, global_user::GlobalUser};\n use crate::terminal::{message, styles};\n \n // set the permissions on the dir, we want to avoid that other user reads to file\ndiff --git a/src/lib.rs b/src/lib.rs\n--- a/src/lib.rs\n+++ b/src/lib.rs\n@@ -16,6 +16,7 @@ pub mod settings;\n pub mod tail;\n pub mod terminal;\n pub mod upload;\n+pub mod version;\n pub mod watch;\n pub mod wranglerjs;\n \ndiff --git /dev/null b/src/settings/global_config.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/global_config.rs\n@@ -0,0 +1,24 @@\n+use std::env;\n+use std::path::{Path, PathBuf};\n+\n+pub const DEFAULT_CONFIG_FILE_NAME: &str = \"default.toml\";\n+\n+pub fn get_wrangler_home_dir() -> Result<PathBuf, failure::Error> {\n+    let config_dir = if let Ok(value) = env::var(\"WRANGLER_HOME\") {\n+        log::info!(\"Using $WRANGLER_HOME: {}\", value);\n+        Path::new(&value).to_path_buf()\n+    } else {\n+        log::info!(\"No $WRANGLER_HOME detected, using $HOME\");\n+        dirs::home_dir()\n+            .expect(\"Could not find home directory\")\n+            .join(\".wrangler\")\n+    };\n+    Ok(config_dir)\n+}\n+\n+pub fn get_global_config_path() -> Result<PathBuf, failure::Error> {\n+    let home_dir = get_wrangler_home_dir()?;\n+    let global_config_file = home_dir.join(\"config\").join(DEFAULT_CONFIG_FILE_NAME);\n+    log::info!(\"Using global config file: {}\", global_config_file.display());\n+    Ok(global_config_file)\n+}\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -1,15 +1,12 @@\n-use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n use cloudflare::framework::auth::Credentials;\n use serde::{Deserialize, Serialize};\n \n-use crate::settings::{Environment, QueryEnvironment};\n+use crate::settings::{get_global_config_path, Environment, QueryEnvironment};\n use crate::terminal::{emoji, styles};\n \n-const DEFAULT_CONFIG_FILE_NAME: &str = \"default.toml\";\n-\n const CF_API_TOKEN: &str = \"CF_API_TOKEN\";\n const CF_API_KEY: &str = \"CF_API_KEY\";\n const CF_EMAIL: &str = \"CF_EMAIL\";\ndiff --git a/src/settings/mod.rs b/src/settings/mod.rs\n--- a/src/settings/mod.rs\n+++ b/src/settings/mod.rs\n@@ -1,7 +1,9 @@\n pub mod binding;\n mod environment;\n+mod global_config;\n pub mod global_user;\n pub mod metadata;\n pub mod toml;\n \n pub use environment::{Environment, QueryEnvironment};\n+pub use global_config::{get_global_config_path, get_wrangler_home_dir, DEFAULT_CONFIG_FILE_NAME};\ndiff --git a/src/terminal/styles.rs b/src/terminal/styles.rs\n--- a/src/terminal/styles.rs\n+++ b/src/terminal/styles.rs\n@@ -1,13 +1,13 @@\n use console::{style, StyledObject};\n \n-pub fn url(msg: &str) -> StyledObject<&str> {\n+pub fn url<D>(msg: D) -> StyledObject<D> {\n     style(msg).blue().bold()\n }\n \n-pub fn warning(msg: &str) -> StyledObject<&str> {\n+pub fn warning<D>(msg: D) -> StyledObject<D> {\n     style(msg).red().bold()\n }\n \n-pub fn highlight(msg: &str) -> StyledObject<&str> {\n+pub fn highlight<D>(msg: D) -> StyledObject<D> {\n     style(msg).yellow().bold()\n }\n",
        "test_patch": "diff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -19,9 +19,11 @@ use wrangler::settings;\n use wrangler::settings::global_user::GlobalUser;\n use wrangler::settings::toml::TargetType;\n use wrangler::terminal::{emoji, interactive, message, styles};\n+use wrangler::version::background_check_for_updates;\n \n fn main() -> Result<(), ExitFailure> {\n     env_logger::init();\n+    let latest_version_receiver = background_check_for_updates();\n     if let Ok(me) = env::current_exe() {\n         // If we're actually running as the installer then execute our\n         // self-installation, otherwise just continue as usual.\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -34,7 +36,23 @@ fn main() -> Result<(), ExitFailure> {\n             installer::install();\n         }\n     }\n-    Ok(run()?)\n+    run()?;\n+    if let Ok(latest_version) = latest_version_receiver.try_recv() {\n+        let latest_version = styles::highlight(latest_version.to_string());\n+        let new_version_available = format!(\n+            \"A new version of Wrangler ({}) is available!\",\n+            latest_version\n+        );\n+        let update_message = \"You can learn more about updating here:\".to_string();\n+        let update_docs_url =\n+            styles::url(\"https://developers.cloudflare.com/workers/quickstart#updating-the-cli\");\n+\n+        message::billboard(&format!(\n+            \"{}\\n{}\\n{}\",\n+            new_version_available, update_message, update_docs_url\n+        ));\n+    }\n+    Ok(())\n }\n \n #[allow(clippy::cognitive_complexity)]\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -133,28 +130,13 @@ impl From<GlobalUser> for Credentials {\n     }\n }\n \n-pub fn get_global_config_path() -> Result<PathBuf, failure::Error> {\n-    let home_dir = if let Ok(value) = env::var(\"WRANGLER_HOME\") {\n-        log::info!(\"Using $WRANGLER_HOME: {}\", value);\n-        Path::new(&value).to_path_buf()\n-    } else {\n-        log::info!(\"No $WRANGLER_HOME detected, using $HOME\");\n-        dirs::home_dir()\n-            .expect(\"Could not find home directory\")\n-            .join(\".wrangler\")\n-    };\n-    let global_config_file = home_dir.join(\"config\").join(DEFAULT_CONFIG_FILE_NAME);\n-    log::info!(\"Using global config file: {}\", global_config_file.display());\n-    Ok(global_config_file)\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;\n     use std::fs::File;\n     use tempfile::tempdir;\n \n-    use crate::settings::environment::MockEnvironment;\n+    use crate::settings::{environment::MockEnvironment, DEFAULT_CONFIG_FILE_NAME};\n \n     #[test]\n     fn it_can_prioritize_token_input() {\ndiff --git /dev/null b/src/version/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/version/mod.rs\n@@ -0,0 +1,157 @@\n+use std::fs;\n+use std::path::PathBuf;\n+use std::str::FromStr;\n+use std::sync::mpsc;\n+use std::thread;\n+use std::time::SystemTime;\n+\n+use crate::settings::get_wrangler_home_dir;\n+\n+use reqwest::header::USER_AGENT;\n+use semver::Version;\n+use serde::{Deserialize, Serialize};\n+\n+const ONE_DAY: u64 = 60 * 60 * 24;\n+\n+pub fn background_check_for_updates() -> mpsc::Receiver<Version> {\n+    let (sender, receiver) = mpsc::channel();\n+\n+    let _detached_thread = thread::spawn(move || match check_wrangler_versions() {\n+        Ok(wrangler_versions) => {\n+            // If the wrangler version has not been checked within the last day and the versions\n+            // are different, print out an update message\n+            if wrangler_versions.is_outdated() {\n+                let _ = sender.send(wrangler_versions.latest);\n+            }\n+        }\n+        Err(e) => log::debug!(\"could not determine if update is needed:\\n{}\", e),\n+    });\n+\n+    receiver\n+}\n+\n+#[derive(Debug, Clone)]\n+struct WranglerVersion {\n+    /// currently installed version of wrangler\n+    pub current: Version,\n+\n+    /// latest version of wrangler on crates.io\n+    pub latest: Version,\n+\n+    /// set to true if wrangler version has been checked within a day\n+    pub checked: bool,\n+}\n+\n+impl WranglerVersion {\n+    pub fn is_outdated(&self) -> bool {\n+        !self.checked && (self.current != self.latest)\n+    }\n+}\n+\n+#[derive(Clone, Debug, Deserialize, Serialize)]\n+struct LastCheckedVersion {\n+    /// latest version as of last time we checked\n+    latest_version: String,\n+\n+    /// the last time we asked crates.io for the latest version\n+    last_checked: SystemTime,\n+}\n+\n+impl FromStr for LastCheckedVersion {\n+    type Err = toml::de::Error;\n+\n+    fn from_str(serialized_toml: &str) -> Result<Self, Self::Err> {\n+        toml::from_str(serialized_toml)\n+    }\n+}\n+\n+fn get_installed_version() -> Result<Version, failure::Error> {\n+    let version = option_env!(\"CARGO_PKG_VERSION\").unwrap_or_else(|| \"unknown\");\n+    let parsed_version = Version::parse(version)?;\n+    Ok(parsed_version)\n+}\n+\n+fn check_wrangler_versions() -> Result<WranglerVersion, failure::Error> {\n+    let config_dir = get_wrangler_home_dir()?;\n+    let version_file = config_dir.join(\"version.toml\");\n+    let current_time = SystemTime::now();\n+\n+    let mut checked = false;\n+    let current = get_installed_version()?;\n+\n+    let latest = match get_version_disk(&version_file) {\n+        Some(last_checked_version) => {\n+            let time_since_last_checked =\n+                current_time.duration_since(last_checked_version.last_checked)?;\n+\n+            if time_since_last_checked.as_secs() < ONE_DAY {\n+                checked = true;\n+                Version::parse(&last_checked_version.latest_version)?\n+            } else {\n+                get_latest_version(&current.to_string(), &version_file, current_time)?\n+            }\n+        }\n+        // If version.toml doesn't exist, fetch latest version\n+        None => get_latest_version(&current.to_string(), &version_file, current_time)?,\n+    };\n+\n+    Ok(WranglerVersion {\n+        current,\n+        latest,\n+        checked,\n+    })\n+}\n+\n+/// Reads version out of version file, is `None` if file does not exist or is corrupted\n+fn get_version_disk(version_file: &PathBuf) -> Option<LastCheckedVersion> {\n+    match fs::read_to_string(&version_file) {\n+        Ok(contents) => match LastCheckedVersion::from_str(&contents) {\n+            Ok(last_checked_version) => Some(last_checked_version),\n+            Err(_) => None,\n+        },\n+        Err(_) => None,\n+    }\n+}\n+\n+fn get_latest_version(\n+    installed_version: &str,\n+    version_file: &PathBuf,\n+    current_time: SystemTime,\n+) -> Result<Version, failure::Error> {\n+    let latest_version = get_latest_version_from_api(installed_version)?;\n+    let updated_file_contents = toml::to_string(&LastCheckedVersion {\n+        latest_version: latest_version.to_string(),\n+        last_checked: current_time,\n+    })?;\n+    fs::write(&version_file, updated_file_contents)?;\n+    Ok(latest_version)\n+}\n+\n+fn get_latest_version_from_api(installed_version: &str) -> Result<Version, failure::Error> {\n+    let url = \"https://crates.io/api/v1/crates/wrangler\";\n+    let user_agent = format!(\n+        \"wrangler/{} ({})\",\n+        installed_version,\n+        env!(\"CARGO_PKG_REPOSITORY\")\n+    );\n+    let response = reqwest::blocking::Client::new()\n+        .get(url)\n+        .header(USER_AGENT, user_agent)\n+        .send()?\n+        .error_for_status()?;\n+    let text = response.text()?;\n+    let crt: ApiResponse = serde_json::from_str(&text)?;\n+    let version = Version::parse(&crt.info.max_version)?;\n+    Ok(version)\n+}\n+\n+#[derive(Deserialize, Debug)]\n+struct ApiResponse {\n+    #[serde(rename = \"crate\")]\n+    info: CrateInformation,\n+}\n+\n+#[derive(Deserialize, Debug)]\n+struct CrateInformation {\n+    max_version: String,\n+}\n",
        "problem_statement": "Print update message on wrangler usage when new version of wrangler is available.\nTo encourage wrangler users to use the latest version of the CLI, we should print out a message along the lines of \r\n```\r\nA new version of wrangler (1.x.0) is available! Make sure to update by following the update instructions: https://github.com/cloudflare/wrangler#updating-wrangler\r\n```\r\nwhenever a new version of wrangler is available. This could be printed out before every wrangler invocation if a user's wrangler version is outdated.\r\n\r\nThis version information could be pulled from github, crates.io, or npm; figuring out how to manage this without accidentally DOSing one of these endpoints is useful. (I know github rate limits calls to the API used to access repository tags, so we should keep this in mind).\n",
        "hints_text": "Good starting point https://github.com/rustwasm/wasm-pack/blob/a267075be87d0744b2436c820c60b24524cda6a5/src/main.rs#L81-L84",
        "created_at": "2020-04-03T19:00:48Z",
        "version": "1.9"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1169,
        "instance_id": "cloudflare__wrangler-legacy-1169",
        "issue_numbers": [
            "1158"
        ],
        "base_commit": "9b2c231d126c03a1dd922dacf1e1f225b8f300ba",
        "patch": "diff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -38,7 +38,7 @@ pub struct Manifest {\n     // TODO: maybe one day, serde toml support will allow us to serialize sites\n     // as a TOML inline table (this would prevent confusion with environments too!)\n     pub site: Option<Site>,\n-    #[serde(rename = \"kv-namespaces\")]\n+    #[serde(alias = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<KvNamespace>>,\n     pub env: Option<HashMap<String, Environment>>,\n     pub vars: Option<HashMap<String, String>>,\n",
        "test_patch": "diff --git /dev/null b/tests/parse.rs\nnew file mode 100644\n--- /dev/null\n+++ b/tests/parse.rs\n@@ -0,0 +1,30 @@\n+use wrangler::settings::toml::Manifest;\n+\n+use std::str::FromStr;\n+\n+#[test]\n+fn it_aliases_kv_namespaces() {\n+    let underscore_namespace_manifest = Manifest::from_str(\n+        r#\"\n+    name = \"worker\"\n+    type = \"javascript\"\n+    workers_dev = true\n+    kv_namespaces = [\n+      { binding = \"MY_KV\", id = \"1234\" }\n+    ]\n+  \"#,\n+    );\n+\n+    let dash_namespace_manifest = Manifest::from_str(\n+        r#\"\n+    name = \"worker\"\n+    type = \"javascript\"\n+    workers_dev = true\n+    kv-namespaces = [\n+      { binding = \"MY_KV\", id = \"1234\" }\n+    ]\n+  \"#,\n+    );\n+\n+    assert_eq!(underscore_namespace_manifest, dash_namespace_manifest);\n+}\n",
        "problem_statement": "make _ and - equivalent in wrangler.toml\nIt's confusing to have a mix of `_` and `-` in `wrangler.toml`. We should allow either or since we've already introduced inconsistencies (see `kv-namespaces` vs `workers_dev`)\n",
        "hints_text": "",
        "created_at": "2020-03-27T18:48:40Z",
        "version": "1.8"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1115,
        "instance_id": "cloudflare__wrangler-legacy-1115",
        "issue_numbers": [
            "783"
        ],
        "base_commit": "51fe79701a525b07009e53ebd10279f402a42306",
        "patch": "diff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -4,20 +4,21 @@ mod manifest;\n mod sync;\n mod upload;\n \n-use data_encoding::HEXLOWER;\n-use sha2::{Digest, Sha256};\n-\n pub use manifest::AssetManifest;\n pub use sync::sync;\n+pub use upload::upload_files;\n \n use std::ffi::OsString;\n use std::fs;\n use std::path::Path;\n \n-use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n-\n+use data_encoding::HEXLOWER;\n+use failure::format_err;\n use ignore::overrides::{Override, OverrideBuilder};\n use ignore::{Walk, WalkBuilder};\n+use sha2::{Digest, Sha256};\n+\n+use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n \n use crate::settings::toml::Target;\n use crate::terminal::message;\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -32,43 +33,53 @@ pub fn directory_keys_values(\n     directory: &Path,\n     verbose: bool,\n ) -> Result<(Vec<KeyValuePair>, AssetManifest), failure::Error> {\n-    let mut upload_vec: Vec<KeyValuePair> = Vec::new();\n-    let mut asset_manifest: AssetManifest = AssetManifest::new();\n+    match &fs::metadata(directory) {\n+        Ok(file_type) if file_type.is_dir() => {\n+            let mut upload_vec: Vec<KeyValuePair> = Vec::new();\n+            let mut asset_manifest: AssetManifest = AssetManifest::new();\n \n-    let dir_walker = get_dir_iterator(target, directory)?;\n+            let dir_walker = get_dir_iterator(target, directory)?;\n \n-    for entry in dir_walker {\n-        let entry = entry.unwrap();\n-        let path = entry.path();\n-        if path.is_file() {\n-            if verbose {\n-                message::working(&format!(\"Preparing {}\", path.display()));\n-            }\n+            for entry in dir_walker {\n+                let entry = entry.unwrap();\n+                let path = entry.path();\n+                if path.is_file() {\n+                    if verbose {\n+                        message::working(&format!(\"Preparing {}\", path.display()));\n+                    }\n \n-            validate_file_size(&path)?;\n+                    validate_file_size(&path)?;\n \n-            let value = std::fs::read(path)?;\n+                    let value = std::fs::read(path)?;\n \n-            // Need to base64 encode value\n-            let b64_value = base64::encode(&value);\n+                    // Need to base64 encode value\n+                    let b64_value = base64::encode(&value);\n \n-            let (url_safe_path, key) =\n-                generate_path_and_key(path, directory, Some(b64_value.clone()))?;\n+                    let (url_safe_path, key) =\n+                        generate_path_and_key(path, directory, Some(b64_value.clone()))?;\n \n-            validate_key_size(&key)?;\n+                    validate_key_size(&key)?;\n \n-            upload_vec.push(KeyValuePair {\n-                key: key.clone(),\n-                value: b64_value,\n-                expiration: None,\n-                expiration_ttl: None,\n-                base64: Some(true),\n-            });\n+                    upload_vec.push(KeyValuePair {\n+                        key: key.clone(),\n+                        value: b64_value,\n+                        expiration: None,\n+                        expiration_ttl: None,\n+                        base64: Some(true),\n+                    });\n \n-            asset_manifest.insert(url_safe_path, key);\n+                    asset_manifest.insert(url_safe_path, key);\n+                }\n+            }\n+            Ok((upload_vec, asset_manifest))\n+        }\n+        Ok(_file_type) => {\n+            // any other file types (files, symlinks)\n+            // TODO: return an error type here, like NotADirectoryError\n+            Err(format_err!(\"Check your wrangler.toml; the `bucket` attribute for [site] should point to a directory.\"))\n         }\n+        Err(e) => Err(format_err!(\"{}\", e)),\n     }\n-    Ok((upload_vec, asset_manifest))\n }\n \n // Returns only the hashed keys for a directory's files.\ndiff --git a/src/commands/kv/bucket/sync.rs b/src/commands/kv/bucket/sync.rs\n--- a/src/commands/kv/bucket/sync.rs\n+++ b/src/commands/kv/bucket/sync.rs\n@@ -3,27 +3,28 @@ use std::fs::metadata;\n use std::iter::FromIterator;\n use std::path::Path;\n \n-use super::manifest::AssetManifest;\n+use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n \n use crate::commands::kv;\n use crate::commands::kv::bucket::directory_keys_only;\n-use crate::commands::kv::bucket::upload::upload_files;\n-use crate::commands::kv::bulk::delete::delete_bulk;\n+use crate::commands::kv::bucket::directory_keys_values;\n use crate::commands::kv::key::KeyList;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n use crate::terminal::message;\n \n+use super::manifest::AssetManifest;\n+\n pub fn sync(\n     target: &Target,\n     user: &GlobalUser,\n     namespace_id: &str,\n     path: &Path,\n     verbose: bool,\n-) -> Result<AssetManifest, failure::Error> {\n+) -> Result<(Vec<KeyValuePair>, Vec<String>, AssetManifest), failure::Error> {\n     kv::validate_target(target)?;\n-    // First, upload all changed files in given local directory (aka replace files\n-    // in Workers KV that are now stale).\n+    // First, find all changed files in given local directory (aka files that are now stale\n+    // in Workers KV).\n \n     // Get remote keys, which contain the hash of the file (value) as the suffix.\n     // Turn it into a HashSet. This will be used by upload() to figure out which\ndiff --git a/src/commands/kv/bucket/sync.rs b/src/commands/kv/bucket/sync.rs\n--- a/src/commands/kv/bucket/sync.rs\n+++ b/src/commands/kv/bucket/sync.rs\n@@ -39,18 +40,11 @@ pub fn sync(\n             Err(e) => failure::bail!(kv::format_error(e)),\n         }\n     }\n-    // First, upload all existing files in given directory\n-    if verbose {\n-        message::info(\"Preparing to upload updated files...\");\n-    }\n-    let asset_manifest = upload_files(\n-        target,\n-        &user,\n-        namespace_id,\n-        path,\n-        Some(&remote_keys),\n-        verbose,\n-    )?;\n+\n+    let (pairs, asset_manifest): (Vec<KeyValuePair>, AssetManifest) =\n+        directory_keys_values(target, path, verbose)?;\n+\n+    let to_upload = filter_files(pairs, &remote_keys);\n \n     // Now delete files from Workers KV that exist in remote but no longer exist locally.\n     // Get local keys\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -1,18 +1,12 @@\n-use super::manifest::AssetManifest;\n+use indicatif::ProgressBar;\n \n-use std::collections::HashSet;\n-use std::fs::metadata;\n-use std::path::Path;\n+use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n+use cloudflare::framework::apiclient::ApiClient;\n \n use crate::commands::kv;\n-use crate::commands::kv::bucket::directory_keys_values;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n use crate::terminal::message;\n-use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n-use cloudflare::framework::apiclient::ApiClient;\n-use failure::format_err;\n-use indicatif::ProgressBar;\n \n // The consts below are halved from the API's true capacity to help avoid\n // hammering it with large requests.\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -23,30 +17,8 @@ pub fn upload_files(\n     target: &Target,\n     user: &GlobalUser,\n     namespace_id: &str,\n-    path: &Path,\n-    exclude_keys: Option<&HashSet<String>>,\n-    verbose: bool,\n-) -> Result<AssetManifest, failure::Error> {\n-    let (mut pairs, asset_manifest): (Vec<KeyValuePair>, AssetManifest) = match &metadata(path) {\n-        Ok(file_type) if file_type.is_dir() => {\n-            let (pairs, asset_manifest) = directory_keys_values(target, path, verbose)?;\n-            Ok((pairs, asset_manifest))\n-        }\n-\n-        Ok(_file_type) => {\n-            // any other file types (files, symlinks)\n-            Err(format_err!(\"wrangler kv:bucket upload takes a directory\"))\n-        }\n-        Err(e) => Err(format_err!(\"{}\", e)),\n-    }?;\n-\n-    let mut ignore = &HashSet::new();\n-    if let Some(exclude) = exclude_keys {\n-        ignore = exclude;\n-    }\n-\n-    pairs = filter_files(pairs, ignore);\n-\n+    mut pairs: Vec<KeyValuePair>,\n+) -> Result<(), failure::Error> {\n     if !pairs.is_empty() {\n         let client = kv::api_client(user)?;\n         // Iterate over all key-value pairs and create batches of uploads, each of which are\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -94,7 +66,7 @@ pub fn upload_files(\n         }\n     }\n \n-    Ok(asset_manifest)\n+    Ok(())\n }\n \n fn upload_batch(\ndiff --git a/src/commands/preview/upload.rs b/src/commands/preview/upload.rs\n--- a/src/commands/preview/upload.rs\n+++ b/src/commands/preview/upload.rs\n@@ -1,12 +1,16 @@\n-use crate::commands::kv::bucket::AssetManifest;\n+use std::path::Path;\n+\n+use reqwest::blocking::Client;\n+use serde::Deserialize;\n+\n+use crate::commands::kv::bucket::{sync, upload_files, AssetManifest};\n+use crate::commands::kv::bulk::delete::delete_bulk;\n use crate::commands::publish;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n use crate::terminal::message;\n use crate::upload;\n-use reqwest::blocking::Client;\n-use serde::Deserialize;\n \n use console::style;\n \ndiff --git a/src/commands/preview/upload.rs b/src/commands/preview/upload.rs\n--- a/src/commands/preview/upload.rs\n+++ b/src/commands/preview/upload.rs\n@@ -57,11 +61,32 @@ pub fn upload(\n                 let client = http::auth_client(None, &user);\n \n                 if let Some(site_config) = target.site.clone() {\n-                    publish::bind_static_site_contents(user, target, &site_config, true)?;\n-                }\n+                    let site_namespace = publish::add_site_namespace(user, target, true)?;\n \n-                let asset_manifest = publish::upload_buckets(target, user, verbose)?;\n-                authenticated_upload(&client, &target, asset_manifest)?\n+                    let path = Path::new(&site_config.bucket);\n+                    let (to_upload, to_delete, asset_manifest) =\n+                        sync(target, user, &site_namespace.id, path, verbose)?;\n+\n+                    // First, upload all existing files in given directory\n+                    if verbose {\n+                        message::info(\"Uploading updated files...\");\n+                    }\n+\n+                    upload_files(target, user, &site_namespace.id, to_upload)?;\n+\n+                    let preview = authenticated_upload(&client, &target, Some(asset_manifest))?;\n+                    if !to_delete.is_empty() {\n+                        if verbose {\n+                            message::info(\"Deleting stale files...\");\n+                        }\n+\n+                        delete_bulk(target, user, &site_namespace.id, to_delete)?;\n+                    }\n+\n+                    preview\n+                } else {\n+                    authenticated_upload(&client, &target, None)?\n+                }\n             } else {\n                 message::warn(&format!(\n                     \"Your wrangler.toml is missing the following fields: {:?}\",\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -1,12 +1,16 @@\n use std::env;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n+\n+use console::style;\n \n use crate::commands;\n use crate::commands::kv;\n-use crate::commands::kv::bucket::AssetManifest;\n+use crate::commands::kv::bucket::{sync, upload_files};\n+use crate::commands::kv::bulk::delete::delete_bulk;\n use crate::deploy;\n+use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::toml::{DeployConfig, KvNamespace, Site, Target};\n+use crate::settings::toml::{DeployConfig, KvNamespace, Target};\n use crate::terminal::{emoji, message};\n use crate::upload;\n \ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -18,20 +22,61 @@ pub fn publish(\n ) -> Result<(), failure::Error> {\n     validate_target_required_fields_present(target)?;\n \n-    // TODO: write a separate function for publishing a site\n-    if let Some(site_config) = &target.site.clone() {\n+    // Build the script before uploading.\n+    commands::build(&target)?;\n+\n+    if let Some(site_config) = &target.site {\n+        let path = &site_config.bucket.clone();\n+        validate_bucket_location(path)?;\n         warn_site_incompatible_route(&deploy_config);\n-        bind_static_site_contents(user, target, &site_config, false)?;\n-    }\n \n-    let asset_manifest = upload_buckets(target, user, verbose)?;\n+        let site_namespace = add_site_namespace(user, target, false)?;\n \n-    // Build the script before uploading.\n-    commands::build(&target)?;\n+        let (to_upload, to_delete, asset_manifest) =\n+            sync(target, user, &site_namespace.id, &path, verbose)?;\n+\n+        // First, upload all existing files in bucket directory\n+        if verbose {\n+            message::info(\"Preparing to upload updated files...\");\n+        }\n+        upload_files(target, user, &site_namespace.id, to_upload)?;\n \n-    upload::script(&user, &target, asset_manifest)?;\n+        let upload_client = http::auth_client(Some(\"site\"), user);\n \n-    deploy::worker(&user, &deploy_config)?;\n+        // Next, upload and deploy the worker with the updated asset_manifest\n+        upload::script(&upload_client, &target, Some(asset_manifest))?;\n+\n+        deploy::worker(&user, &deploy_config)?;\n+\n+        // Finally, remove any stale files\n+        if !to_delete.is_empty() {\n+            if verbose {\n+                message::info(\"Deleting stale files...\");\n+            }\n+\n+            delete_bulk(target, user, &site_namespace.id, to_delete)?;\n+        }\n+    } else {\n+        let uses_kv_bucket = sync_non_site_buckets(target, user, verbose)?;\n+\n+        let feature = if uses_kv_bucket {\n+            let wrangler_toml = style(\"`wrangler.toml`\").yellow().bold();\n+            let issue_link = style(\"https://github.com/cloudflare/wrangler/issues/1136\")\n+                .blue()\n+                .bold();\n+            let msg = format!(\"As of 1.9.0, you will no longer be able to specify a bucket for a kv namespace in your {}.\\nIf your application depends on this feature, please file an issue with your use case here:\\n{}\", wrangler_toml, issue_link);\n+            message::deprecation_warning(&msg);\n+\n+            Some(\"bucket\")\n+        } else {\n+            None\n+        };\n+\n+        let upload_client = http::auth_client(feature, user);\n+        upload::script(&upload_client, &target, None)?;\n+\n+        deploy::worker(&user, &deploy_config)?;\n+    }\n \n     Ok(())\n }\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -57,73 +102,103 @@ fn warn_site_incompatible_route(deploy_config: &DeployConfig) {\n }\n \n // Updates given Target with kv_namespace binding for a static site assets KV namespace.\n-pub fn bind_static_site_contents(\n+pub fn add_site_namespace(\n     user: &GlobalUser,\n     target: &mut Target,\n-    site_config: &Site,\n     preview: bool,\n-) -> Result<(), failure::Error> {\n+) -> Result<KvNamespace, failure::Error> {\n     let site_namespace = kv::namespace::site(target, &user, preview)?;\n \n     // Check if namespace already is in namespace list\n     for namespace in target.kv_namespaces() {\n         if namespace.id == site_namespace.id {\n-            return Ok(()); // Sites binding already exists; ignore\n+            return Ok(namespace); // Sites binding already exists; ignore\n+        } else {\n+            if namespace.bucket.is_some() {\n+                failure::bail!(\"your wrangler.toml includes a `bucket` as part of a kv_namespace but also has a `[site]` specifed; did you mean to put this under `[site]`?\");\n+            }\n         }\n     }\n \n-    target.add_kv_namespace(KvNamespace {\n+    let site_namespace = KvNamespace {\n         binding: \"__STATIC_CONTENT\".to_string(),\n         id: site_namespace.id,\n-        bucket: Some(site_config.bucket.to_owned()),\n-    });\n+        bucket: Some(target.site.clone().unwrap().bucket),\n+    };\n+\n+    target.add_kv_namespace(site_namespace.clone());\n+\n+    Ok(site_namespace)\n+}\n+\n+// We don't want folks setting their bucket to the top level directory,\n+// which is where wrangler commands are always called from.\n+pub fn validate_bucket_location(bucket: &PathBuf) -> Result<(), failure::Error> {\n+    // TODO: this should really use a convenience function for \"Wrangler Project Root\"\n+    let current_dir = env::current_dir()?;\n+    if bucket.as_os_str() == current_dir {\n+        failure::bail!(\n+            \"{} Your bucket cannot be set to the parent directory of your wrangler.toml\",\n+            emoji::WARN\n+        )\n+    }\n+    let path = Path::new(&bucket);\n+    if !path.exists() {\n+        failure::bail!(\n+            \"{} bucket directory \\\"{}\\\" does not exist\",\n+            emoji::WARN,\n+            path.display()\n+        )\n+    } else if !path.is_dir() {\n+        failure::bail!(\n+            \"{} bucket \\\"{}\\\" is not a directory\",\n+            emoji::WARN,\n+            path.display()\n+        )\n+    }\n+\n     Ok(())\n }\n \n-pub fn upload_buckets(\n+// This is broken into a separate step because the intended design does not\n+// necessarily intend for bucket support outside of the [site] usage, especially\n+// since assets are still hashed. In a subsequent release, we will either\n+// deprecate this step, or we will integrate it more closely and adapt to user\n+// feedback.\n+//\n+// In order to track usage of this \"feature\", this function returns a bool that\n+// indicates whether any non-site kv namespaces were specified / uploaded.\n+pub fn sync_non_site_buckets(\n     target: &Target,\n     user: &GlobalUser,\n     verbose: bool,\n-) -> Result<Option<AssetManifest>, failure::Error> {\n-    let mut asset_manifest = None;\n-    for namespace in &target.kv_namespaces() {\n-        if let Some(bucket) = &namespace.bucket {\n-            // We don't want folks setting their bucket to the top level directory,\n-            // which is where wrangler commands are always called from.\n-            let current_dir = env::current_dir()?;\n-            if bucket.as_os_str() == current_dir {\n-                failure::bail!(\n-                    \"{} You need to specify a bucket directory in your wrangler.toml\",\n-                    emoji::WARN\n-                )\n-            }\n-            let path = Path::new(&bucket);\n-            if !path.exists() {\n-                failure::bail!(\n-                    \"{} bucket directory \\\"{}\\\" does not exist\",\n-                    emoji::WARN,\n-                    path.display()\n-                )\n-            } else if !path.is_dir() {\n-                failure::bail!(\n-                    \"{} bucket \\\"{}\\\" is not a directory\",\n-                    emoji::WARN,\n-                    path.display()\n-                )\n+) -> Result<bool, failure::Error> {\n+    let mut is_using_non_site_bucket = false;\n+\n+    for namespace in target.kv_namespaces() {\n+        if let Some(path) = &namespace.bucket {\n+            is_using_non_site_bucket = true;\n+            validate_bucket_location(path)?;\n+            let (to_upload, to_delete, _) =\n+                kv::bucket::sync(target, user, &namespace.id, path, verbose)?;\n+            // First, upload all existing files in bucket directory\n+            if verbose {\n+                message::info(\"Preparing to upload updated files...\");\n             }\n-            let manifest_result = kv::bucket::sync(target, user, &namespace.id, path, verbose)?;\n-            if target.site.is_some() {\n-                if asset_manifest.is_none() {\n-                    asset_manifest = Some(manifest_result)\n-                } else {\n-                    // only site manifest should be returned\n-                    unreachable!()\n+            upload_files(target, user, &namespace.id, to_upload)?;\n+\n+            // Finally, remove any stale files\n+            if !to_delete.is_empty() {\n+                if verbose {\n+                    message::info(\"Deleting stale files...\");\n                 }\n+\n+                delete_bulk(target, user, &namespace.id, to_delete)?;\n             }\n         }\n     }\n \n-    Ok(asset_manifest)\n+    Ok(is_using_non_site_bucket)\n }\n \n fn validate_target_required_fields_present(target: &Target) -> Result<(), failure::Error> {\ndiff --git a/src/commands/secret/mod.rs b/src/commands/secret/mod.rs\n--- a/src/commands/secret/mod.rs\n+++ b/src/commands/secret/mod.rs\n@@ -59,7 +59,8 @@ pub fn upload_draft_worker(\n             for error in &api_errors.errors {\n                 if error.code == 10007 {\n                     message::working(&format!(\"Worker {} doesn't exist in the API yet. Creating a draft Worker so we can create new secret.\", target.name));\n-                    return Some(upload::script(user, target, None));\n+                    let upload_client = http::auth_client(None, user);\n+                    return Some(upload::script(&upload_client, target, None));\n                 } else {\n                     return None;\n                 }\ndiff --git a/src/http.rs b/src/http.rs\n--- a/src/http.rs\n+++ b/src/http.rs\n@@ -1,7 +1,8 @@\n+use std::time::Duration;\n+\n use reqwest::blocking::{Client, ClientBuilder};\n use reqwest::header::{HeaderMap, HeaderValue, USER_AGENT};\n use reqwest::redirect::Policy;\n-use std::time::Duration;\n \n use crate::install;\n use crate::settings::global_user::GlobalUser;\ndiff --git a/src/terminal/message.rs b/src/terminal/message.rs\n--- a/src/terminal/message.rs\n+++ b/src/terminal/message.rs\n@@ -49,3 +49,12 @@ pub fn help(msg: &str) {\n     let msg = format!(\"{} {}\", emoji::SLEUTH, msg);\n     message(&msg);\n }\n+\n+pub fn deprecation_warning(msg: &str) {\n+    let bb = Billboard::builder()\n+        .border_style(BorderStyle::Round)\n+        .border_color(BorderColor::Red)\n+        .margin(1)\n+        .build();\n+    bb.display(msg);\n+}\ndiff --git a/src/upload/mod.rs b/src/upload/mod.rs\n--- a/src/upload/mod.rs\n+++ b/src/upload/mod.rs\n@@ -4,13 +4,13 @@ pub mod package;\n \n pub use package::Package;\n \n+use reqwest::blocking::Client;\n+\n use crate::commands::kv::bucket::AssetManifest;\n-use crate::http;\n-use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n \n pub fn script(\n-    user: &GlobalUser,\n+    client: &Client,\n     target: &Target,\n     asset_manifest: Option<AssetManifest>,\n ) -> Result<(), failure::Error> {\ndiff --git a/src/upload/mod.rs b/src/upload/mod.rs\n--- a/src/upload/mod.rs\n+++ b/src/upload/mod.rs\n@@ -19,12 +19,6 @@ pub fn script(\n         target.account_id, target.name,\n     );\n \n-    let client = if target.site.is_some() {\n-        http::auth_client(Some(\"site\"), user)\n-    } else {\n-        http::auth_client(None, user)\n-    };\n-\n     let script_upload_form = form::build(target, asset_manifest)?;\n \n     let res = client\n",
        "test_patch": "diff --git a/src/commands/kv/bucket/sync.rs b/src/commands/kv/bucket/sync.rs\n--- a/src/commands/kv/bucket/sync.rs\n+++ b/src/commands/kv/bucket/sync.rs\n@@ -63,18 +57,90 @@ pub fn sync(\n \n     // Find keys that are present in remote but not present in local, and\n     // stage them for deletion.\n-    let keys_to_delete: Vec<_> = remote_keys\n+    let to_delete: Vec<_> = remote_keys\n         .difference(&local_keys)\n         .map(|key| key.to_owned())\n         .collect();\n \n-    if !keys_to_delete.is_empty() {\n-        if verbose {\n-            message::info(\"Deleting stale files...\");\n+    message::success(\"Success\");\n+    Ok((to_upload, to_delete, asset_manifest))\n+}\n+\n+fn filter_files(pairs: Vec<KeyValuePair>, already_uploaded: &HashSet<String>) -> Vec<KeyValuePair> {\n+    let mut filtered_pairs: Vec<KeyValuePair> = Vec::new();\n+    for pair in pairs {\n+        if !already_uploaded.contains(&pair.key) {\n+            filtered_pairs.push(pair);\n         }\n-        delete_bulk(target, user, namespace_id, keys_to_delete)?;\n+    }\n+    filtered_pairs\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use std::collections::HashSet;\n+    use std::path::Path;\n+\n+    use crate::commands::kv::bucket::generate_path_and_key;\n+    use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n+\n+    #[test]\n+    fn it_can_filter_preexisting_files() {\n+        let (_, key_a_old) =\n+            generate_path_and_key(Path::new(\"/a\"), Path::new(\"/\"), Some(\"old\".to_string()))\n+                .unwrap();\n+        let (_, key_b_old) =\n+            generate_path_and_key(Path::new(\"/b\"), Path::new(\"/\"), Some(\"old\".to_string()))\n+                .unwrap();\n+        // Generate new key (using hash of new value) for b when to simulate its value being updated.\n+        let (_, key_b_new) =\n+            generate_path_and_key(Path::new(\"/b\"), Path::new(\"/\"), Some(\"new\".to_string()))\n+                .unwrap();\n+\n+        // Old values found on remote\n+        let mut exclude_keys = HashSet::new();\n+        exclude_keys.insert(key_a_old.clone());\n+        exclude_keys.insert(key_b_old);\n+\n+        // local files (with b updated) to upload\n+        let pairs_to_upload = vec![\n+            KeyValuePair {\n+                key: key_a_old,\n+                value: \"old\".to_string(), // This value remains unchanged\n+                expiration_ttl: None,\n+                expiration: None,\n+                base64: None,\n+            },\n+            KeyValuePair {\n+                key: key_b_new.clone(),\n+                value: \"new\".to_string(), // Note this pair has a new value\n+                expiration_ttl: None,\n+                expiration: None,\n+                base64: None,\n+            },\n+        ];\n+\n+        let expected = vec![KeyValuePair {\n+            key: key_b_new,\n+            value: \"new\".to_string(),\n+            expiration_ttl: None,\n+            expiration: None,\n+            base64: None,\n+        }];\n+        let actual = filter_files(pairs_to_upload, &exclude_keys);\n+        check_kv_pairs_equality(expected, actual);\n     }\n \n-    message::success(\"Success\");\n-    Ok(asset_manifest)\n+    fn check_kv_pairs_equality(expected: Vec<KeyValuePair>, actual: Vec<KeyValuePair>) {\n+        assert!(expected.len() == actual.len());\n+        for (idx, pair) in expected.into_iter().enumerate() {\n+            // Ensure the expected key and value was returned in the filtered pair list\n+            // Awkward field-by-field comparison below courtesy of not yet implementing\n+            // PartialEq for KeyValuePair in cloudflare-rs :)\n+            // TODO: (gabbi) Implement PartialEq for KeyValuePair in cloudflare-rs.\n+            assert!(pair.key == actual[idx].key);\n+            assert!(pair.value == actual[idx].value);\n+        }\n+    }\n }\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -113,82 +85,3 @@ fn upload_batch(\n         Err(e) => failure::bail!(\"Failed to upload file batch. {}\", kv::format_error(e)),\n     }\n }\n-\n-fn filter_files(pairs: Vec<KeyValuePair>, already_uploaded: &HashSet<String>) -> Vec<KeyValuePair> {\n-    let mut filtered_pairs: Vec<KeyValuePair> = Vec::new();\n-    for pair in pairs {\n-        if !already_uploaded.contains(&pair.key) {\n-            filtered_pairs.push(pair);\n-        }\n-    }\n-    filtered_pairs\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-    use std::collections::HashSet;\n-    use std::path::Path;\n-\n-    use crate::commands::kv::bucket::generate_path_and_key;\n-    use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n-\n-    #[test]\n-    fn it_can_filter_preexisting_files() {\n-        let (_, key_a_old) =\n-            generate_path_and_key(Path::new(\"/a\"), Path::new(\"/\"), Some(\"old\".to_string()))\n-                .unwrap();\n-        let (_, key_b_old) =\n-            generate_path_and_key(Path::new(\"/b\"), Path::new(\"/\"), Some(\"old\".to_string()))\n-                .unwrap();\n-        // Generate new key (using hash of new value) for b when to simulate its value being updated.\n-        let (_, key_b_new) =\n-            generate_path_and_key(Path::new(\"/b\"), Path::new(\"/\"), Some(\"new\".to_string()))\n-                .unwrap();\n-\n-        // Old values found on remote\n-        let mut exclude_keys = HashSet::new();\n-        exclude_keys.insert(key_a_old.clone());\n-        exclude_keys.insert(key_b_old);\n-\n-        // local files (with b updated) to upload\n-        let pairs_to_upload = vec![\n-            KeyValuePair {\n-                key: key_a_old,\n-                value: \"old\".to_string(), // This value remains unchanged\n-                expiration_ttl: None,\n-                expiration: None,\n-                base64: None,\n-            },\n-            KeyValuePair {\n-                key: key_b_new.clone(),\n-                value: \"new\".to_string(), // Note this pair has a new value\n-                expiration_ttl: None,\n-                expiration: None,\n-                base64: None,\n-            },\n-        ];\n-\n-        let expected = vec![KeyValuePair {\n-            key: key_b_new,\n-            value: \"new\".to_string(),\n-            expiration_ttl: None,\n-            expiration: None,\n-            base64: None,\n-        }];\n-        let actual = filter_files(pairs_to_upload, &exclude_keys);\n-        check_kv_pairs_equality(expected, actual);\n-    }\n-\n-    fn check_kv_pairs_equality(expected: Vec<KeyValuePair>, actual: Vec<KeyValuePair>) {\n-        assert!(expected.len() == actual.len());\n-        for (idx, pair) in expected.into_iter().enumerate() {\n-            // Ensure the expected key and value was returned in the filtered pair list\n-            // Awkward field-by-field comparison below courtesy of not yet implementing\n-            // PartialEq for KeyValuePair in cloudflare-rs :)\n-            // TODO: (gabbi) Implement PartialEq for KeyValuePair in cloudflare-rs.\n-            assert!(pair.key == actual[idx].key);\n-            assert!(pair.value == actual[idx].value);\n-        }\n-    }\n-}\n",
        "problem_statement": "Bug: Downtime on Site update\nWhen we publish a `site` worker, often the worker and its accompanying asset manifest make it to the edge ahead of the new KV keys, and/or the \"old\" KV keys are removed before the worker is updated. This causes a window of downtime when a page is updated. We need to somehow delay removing \"old\" assets from KV until everything is live. There are a few ways to implement this, will update this issue with possible strategies soon.\n",
        "hints_text": "community report: https://community.cloudflare.com/t/brief-period-of-unavailability-when-publishing-workers-sites/121929\nAny updates on this? :) @ashleygwilliams @ashleymichal \nhey @lolcoolkat I'll likely be investigating this on Friday, and will comment here with my conclusions.\nThank you! @ashleymichal \nso here's what happens.\r\n\r\nSay i have an asset `/sweet-blog-post.html`. The first time Wrangler uploads it, it hashes the content and inserts it between the file stem and the extension, e.g. `/sweet-blog-post.abcdef1234567890.html`, and adds the following entry to the asset manifest:\r\n\r\n```json\r\n\"/sweet-blog-post.html\": \"/sweet-blog-post.abcdef.html\"\r\n```\r\n\r\nIf I update my sweet blog post, the next time Wrangler goes to upload, the content hash changes (e.g. `/sweet-blog-post.fedcba.html`. Wrangler then compares the local content with the remote content, and deletes the old version, updating the asset manifest to reflect the changes.\r\n\r\nUnfortunately, the old version is deleted before the new asset manifest is uploaded with the worker, and so there is a window during which the old worker is trying to reference the deleted asset. This is sub-optimal.\r\n\r\nWe can reduce this window significantly by delaying deletes until after the worker has been published.\ni'm going to defer work on this until the work on Multi-Route support has been approved and merged, there's a lot of changes to the publish command there, and there will be here as well.\r\n\r\nMy proposed solution implementation:\r\n\r\n* wee refactor to separate logic for publishing a site vs publishing a vanilla workers project. this just helps with cognitive load.\r\n* rename `kv::bucket::sync` to `kv::bucket::diff`, modify to return tuple `(exclude_keys, delete_keys)`, and have function `publish_site` call `upload` before worker publish, and `delete` after.\r\n* (bonus) refactor to keep bucket logic specific to sites; at the moment only sites have buckets, and i'm not sure we plan to change that; at the moment it's sort of confusing that we have a bucket config on site but also on all kv namespaces.\nstatus  update: i've got a good amount of work done locally, but the number of in flight PRs, releases, and feature work being done coupled with a CI bug has me a little nervous about going much further with this, given the number of potential merge conflicts. will resume work once 1.7.0 is out.\n@ashleymichal are there any updates for this? This issue is a massive blocker for us, so, if the fix is going to take time then maybe we need to get a smaller interim fix in (e.g. an option to never delete resources from the KV store?).\r\n\r\nIf I can contribute to getting this solved let me know.",
        "created_at": "2020-03-02T21:37:51Z",
        "version": "1.8"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 847,
        "instance_id": "cloudflare__wrangler-legacy-847",
        "issue_numbers": [
            "296"
        ],
        "base_commit": "7b9708465f57eabc21f56639a1c4eecb65117f1d",
        "patch": "diff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -55,10 +55,6 @@ impl Bundle {\n         self.wasm_path().exists()\n     }\n \n-    pub fn has_webpack_config(&self, webpack_config_path: &PathBuf) -> bool {\n-        webpack_config_path.exists()\n-    }\n-\n     pub fn get_wasm_binding(&self) -> String {\n         \"wasm\".to_string()\n     }\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -176,29 +176,28 @@ fn setup_build(target: &Target) -> Result<(Command, PathBuf, Bundle), failure::E\n \n     command.arg(format!(\"--wasm-binding={}\", bundle.get_wasm_binding()));\n \n-    let webpack_config_path = if let Some(webpack_config) = &target.webpack_config {\n-        // require webpack_config in wrangler.toml to use it in sites\n-        Some(PathBuf::from(&webpack_config))\n-    } else if target.site.is_none() {\n-        let config_path = PathBuf::from(\"webpack.config.js\".to_string());\n-        // backwards compatibility, deprecated in 1.6.0\n-        // if webpack.config.js exists and is not specified in wrangler.toml, use it and warn\n-        if bundle.has_webpack_config(&config_path) {\n-            message::warn(\"In Wrangler v1.6.0, you will need to include a webpack_config field in your wrangler.toml to build with a custom webpack configuration.\");\n-            Some(config_path)\n-        } else {\n-            // if webpack.config.js does not exist, don't warn, use our default\n+    let custom_webpack_config_path = match &target.webpack_config {\n+        Some(webpack_config) => match &target.site {\n+            None => Some(PathBuf::from(&webpack_config)),\n+            Some(_) => {\n+                message::warn(\"Workers Sites does not support custom webpack configuration files\");\n+                None\n+            }\n+        },\n+        None => {\n+            if target.site.is_none() {\n+                let config_path = PathBuf::from(\"webpack.config.js\".to_string());\n+                if config_path.exists() {\n+                    message::warn(\"If you would like to use your own custom webpack configuration, you will need to add this to your wrangler.toml:\\nwebpack_config = \\\"webpack.config.js\\\"\");\n+                }\n+            }\n             None\n         }\n-    } else {\n-        // don't use `webpack.config.js` if this project is a site\n-        None\n     };\n \n-    // if {webpack.config.js} is not present, we infer the entry based on the\n-    // {package.json} file and pass it to {wranglerjs}.\n-    // https://github.com/cloudflare/wrangler/issues/98\n-    if let Some(webpack_config_path) = webpack_config_path {\n+    // if webpack_config is not configured in the manifest\n+    // we infer the entry based on {package.json} and pass it to {wranglerjs}\n+    if let Some(webpack_config_path) = custom_webpack_config_path {\n         build_with_custom_webpack(&mut command, &webpack_config_path);\n     } else {\n         build_with_default_webpack(&mut command, &build_dir)?;\n",
        "test_patch": "diff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -38,7 +38,7 @@ fn it_builds_with_webpack_single_js() {\n     let fixture = \"webpack_simple_js\";\n     utils::create_temporary_copy(fixture);\n     single_env_settings! {fixture, r#\"\n-        type = \"Webpack\"\n+        type = \"webpack\"\n     \"#};\n \n     build(fixture);\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -52,7 +52,8 @@ fn it_builds_with_webpack_function_config_js() {\n     utils::create_temporary_copy(fixture);\n \n     single_env_settings! {fixture, r#\"\n-        type = \"Webpack\"\n+        type = \"webpack\"\n+        webpack_config = \"webpack.config.js\"\n     \"#};\n \n     build(fixture);\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -65,8 +66,17 @@ fn it_builds_with_webpack_promise_config_js() {\n     let fixture = \"webpack_promise_config_js\";\n     utils::create_temporary_copy(fixture);\n \n+    utils::create_fixture_file(\n+        fixture,\n+        \"webpack.config.js\",\n+        r#\"\n+        module.exports = Promise.resolve({ entry: \"./index.js\" });\n+    \"#,\n+    );\n+\n     single_env_settings! {fixture, r#\"\n-        type = \"Webpack\"\n+        type = \"webpack\"\n+        webpack_config = \"webpack.config.js\"\n     \"#};\n \n     build(fixture);\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -79,8 +89,17 @@ fn it_builds_with_webpack_function_promise_config_js() {\n     let fixture = \"webpack_function_promise_config_js\";\n     utils::create_temporary_copy(fixture);\n \n+    utils::create_fixture_file(\n+        fixture,\n+        \"webpack.config.js\",\n+        r#\"\n+        module.exports = Promise.resolve({ entry: \"./index.js\" });\n+    \"#,\n+    );\n+\n     single_env_settings! {fixture, r#\"\n-        type = \"Webpack\"\n+        type = \"webpack\"\n+        webpack_config = \"webpack.config.js\"\n     \"#};\n \n     build(fixture);\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -94,7 +113,7 @@ fn it_builds_with_webpack_single_js_use_package_main() {\n     utils::create_temporary_copy(fixture);\n \n     single_env_settings! {fixture, r#\"\n-        type = \"Webpack\"\n+        type = \"webpack\"\n     \"#};\n \n     build(fixture);\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -107,8 +126,16 @@ fn it_builds_with_webpack_specify_configs() {\n     let fixture = \"webpack_specify_config\";\n     utils::create_temporary_copy(fixture);\n \n+    utils::create_fixture_file(\n+        fixture,\n+        \"webpack.worker.js\",\n+        r#\"\n+        module.exports = { entry: \"./index.js\" };\n+    \"#,\n+    );\n+\n     single_env_settings! {fixture, r#\"\n-        type = \"Webpack\"\n+        type = \"webpack\"\n         webpack_config = \"webpack.worker.js\"\n     \"#};\n \ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -123,7 +150,7 @@ fn it_builds_with_webpack_single_js_missing_package_main() {\n     utils::create_temporary_copy(fixture);\n \n     single_env_settings! {fixture, r#\"\n-        type = \"Webpack\"\n+        type = \"webpack\"\n     \"#};\n \n     build_fails_with(\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -138,22 +165,20 @@ fn it_fails_with_multiple_webpack_configs() {\n     let fixture = \"webpack_multiple_config\";\n     utils::create_temporary_copy(fixture);\n \n-    single_env_settings! {fixture, r#\"\n-        type = \"Webpack\"\n-    \"#};\n-\n-    build_fails_with(fixture, \"Multiple webpack configurations are not supported. You can specify a different path for your webpack configuration file in wrangler.toml with the `webpack_config` field\");\n-    utils::cleanup(fixture);\n-}\n-\n-#[test]\n-fn it_fails_with_multiple_specify_webpack_configs() {\n-    let fixture = \"webpack_multiple_specify_config\";\n-    utils::create_temporary_copy(fixture);\n+    utils::create_fixture_file(\n+        fixture,\n+        \"webpack.config.js\",\n+        r#\"\n+        module.exports = [\n+            { entry: \"./a.js\" },\n+            { entry: \"./b.js\" }\n+        ]\n+    \"#,\n+    );\n \n     single_env_settings! {fixture, r#\"\n-        type = \"Webpack\"\n-        webpack_config = \"webpack.worker.js\"\n+        type = \"webpack\"\n+        webpack_config = \"webpack.config.js\"\n     \"#};\n \n     build_fails_with(fixture, \"Multiple webpack configurations are not supported. You can specify a different path for your webpack configuration file in wrangler.toml with the `webpack_config` field\");\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -166,7 +191,8 @@ fn it_builds_with_webpack_wast() {\n     utils::create_temporary_copy(fixture);\n \n     single_env_settings! {fixture, r#\"\n-        type = \"Webpack\"\n+        type = \"webpack\"\n+        webpack_config = \"webpack.config.js\"\n     \"#};\n \n     build(fixture);\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -183,15 +209,20 @@ fn it_fails_with_webpack_target_node() {\n     let fixture = \"webpack_target_node\";\n     utils::create_temporary_copy(fixture);\n \n-    utils::webpack_config(\n+    utils::create_fixture_file(\n         fixture,\n-        r#\"{\n-          entry: \"./index.js\",\n-          target: \"node\",\n-        }\"#,\n+        \"webpack.config.js\",\n+        r#\"\n+        module.exports = {\n+            \"entry\": \"./index.js\",\n+            \"target\": \"node\"\n+        }\n+    \"#,\n     );\n+\n     single_env_settings! {fixture, r#\"\n         type = \"webpack\"\n+        webpack_config = \"webpack.config.js\"\n     \"#};\n \n     build_fails_with(\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -206,15 +237,20 @@ fn it_fails_with_webpack_target_web() {\n     let fixture = \"webpack_target_web\";\n     utils::create_temporary_copy(fixture);\n \n-    utils::webpack_config(\n+    utils::create_fixture_file(\n         fixture,\n-        r#\"{\n-          entry: \"./index.js\",\n-          target: \"web\",\n-        }\"#,\n+        \"webpack.config.js\",\n+        r#\"\n+        module.exports = {\n+            \"entry\": \"./index.js\",\n+            \"target\": \"web\"\n+        }\n+    \"#,\n     );\n+\n     single_env_settings! {fixture, r#\"\n         type = \"webpack\"\n+        webpack_config = \"webpack.config.js\"\n     \"#};\n \n     build_fails_with(\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -229,15 +265,20 @@ fn it_builds_with_webpack_target_webworker() {\n     let fixture = \"webpack_target_webworker\";\n     utils::create_temporary_copy(fixture);\n \n-    utils::webpack_config(\n+    utils::create_fixture_file(\n         fixture,\n-        r#\"{\n-          entry: \"./index.js\",\n-          target: \"webworker\",\n-        }\"#,\n+        \"webpack.config.js\",\n+        r#\"\n+        module.exports = {\n+            \"entry\": \"./index.js\",\n+            \"target\": \"webworker\"\n+        }\n+    \"#,\n     );\n+\n     single_env_settings! {fixture, r#\"\n         type = \"webpack\"\n+        webpack_config = \"webpack.config.js\"\n     \"#};\n \n     build(fixture);\ndiff --git a/tests/fixtures/webpack_function_promise_config_js/package.json b/tests/fixtures/webpack_function_promise_config_js/package.json\n--- a/tests/fixtures/webpack_function_promise_config_js/package.json\n+++ b/tests/fixtures/webpack_function_promise_config_js/package.json\n@@ -1,1 +1,3 @@\n-{}\n+{\n+    \"main\": \"index.js\"\n+}\ndiff --git a/tests/fixtures/webpack_function_promise_config_js/webpack.config.js /dev/null\n--- a/tests/fixtures/webpack_function_promise_config_js/webpack.config.js\n+++ /dev/null\n@@ -1,1 +0,0 @@\n-module.exports = () => Promise.resolve({ entry: \"./index.js\" });\ndiff --git a/tests/fixtures/webpack_multiple_config/package.json b/tests/fixtures/webpack_multiple_config/package.json\n--- a/tests/fixtures/webpack_multiple_config/package.json\n+++ b/tests/fixtures/webpack_multiple_config/package.json\n@@ -1,1 +1,3 @@\n-{}\n+{\n+    \"main\": \"index.js\"\n+}\ndiff --git a/tests/fixtures/webpack_multiple_config/webpack.config.js /dev/null\n--- a/tests/fixtures/webpack_multiple_config/webpack.config.js\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-module.exports = [\n-  { entry: \"./a.js\" },\n-  { entry: \"./b.js\" }\n-]\ndiff --git a/tests/fixtures/webpack_multiple_specify_config/package.json /dev/null\n--- a/tests/fixtures/webpack_multiple_specify_config/package.json\n+++ /dev/null\n@@ -1,1 +0,0 @@\n-{}\n\\ No newline at end of file\ndiff --git a/tests/fixtures/webpack_multiple_specify_config/webpack.worker.js /dev/null\n--- a/tests/fixtures/webpack_multiple_specify_config/webpack.worker.js\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-module.exports = [\n-    { entry: \"./a.js\" },\n-    { entry: \"./b.js\" }\n-  ]\n\\ No newline at end of file\ndiff --git a/tests/fixtures/webpack_simple_js/package.json b/tests/fixtures/webpack_simple_js/package.json\n--- a/tests/fixtures/webpack_simple_js/package.json\n+++ b/tests/fixtures/webpack_simple_js/package.json\n@@ -1,1 +1,3 @@\n-{}\n+{\n+    \"main\": \"index.js\"\n+}\ndiff --git a/tests/fixtures/webpack_simple_js/webpack.config.js /dev/null\n--- a/tests/fixtures/webpack_simple_js/webpack.config.js\n+++ /dev/null\n@@ -1,1 +0,0 @@\n-module.exports = { entry: \"./index.js\" };\ndiff --git a/tests/fixtures/webpack_specify_config/package.json b/tests/fixtures/webpack_specify_config/package.json\n--- a/tests/fixtures/webpack_specify_config/package.json\n+++ b/tests/fixtures/webpack_specify_config/package.json\n@@ -1,1 +1,3 @@\n-{}\n+{\n+    \"main\": \"index.js\"\n+}\ndiff --git a/tests/fixtures/webpack_specify_config/webpack.worker.js /dev/null\n--- a/tests/fixtures/webpack_specify_config/webpack.worker.js\n+++ /dev/null\n@@ -1,1 +0,0 @@\n-module.exports = { entry: \"./index.js\" };\ndiff --git /dev/null b/tests/fixtures/webpack_target_node/package.json\nnew file mode 100644\n--- /dev/null\n+++ b/tests/fixtures/webpack_target_node/package.json\n@@ -0,0 +1,3 @@\n+{\n+    \"main\": \"index.js\"\n+}\ndiff --git /dev/null b/tests/fixtures/webpack_target_web/package.json\nnew file mode 100644\n--- /dev/null\n+++ b/tests/fixtures/webpack_target_web/package.json\n@@ -0,0 +1,3 @@\n+{\n+    \"main\": \"index.js\"\n+}\ndiff --git /dev/null b/tests/fixtures/webpack_target_webworker/package.json\nnew file mode 100644\n--- /dev/null\n+++ b/tests/fixtures/webpack_target_webworker/package.json\n@@ -0,0 +1,3 @@\n+{\n+    \"main\": \"index.js\"\n+}\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -5,6 +5,7 @@ pub mod utils;\n \n use assert_cmd::prelude::*;\n \n+use std::env;\n use std::fs::File;\n use std::io::Write;\n use std::process::Command;\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -69,7 +70,7 @@ fn it_can_preview_rust_project() {\n fn preview(fixture: &str) {\n     // Lock to avoid having concurrent builds\n     let _g = BUILD_LOCK.lock().unwrap();\n-\n+    env::remove_var(\"CF_ACCOUNT_ID\");\n     let mut preview = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n     preview.current_dir(utils::fixture_path(fixture));\n     preview.arg(\"preview\").arg(\"--headless\").assert().success();\ndiff --git a/tests/utils/mod.rs b/tests/utils/mod.rs\n--- a/tests/utils/mod.rs\n+++ b/tests/utils/mod.rs\n@@ -54,15 +54,10 @@ pub fn create_temporary_copy(fixture: &str) {\n     copy(src, dest, &options).unwrap();\n }\n \n-// TODO: remove once https://github.com/cloudflare/wrangler/pull/489 is merged\n-pub fn webpack_config(fixture: &str, config: &str) {\n-    let file_path = fixture_path(fixture).join(\"webpack.config.js\");\n+pub fn create_fixture_file(fixture: &str, name: &str, content: &str) {\n+    let file_path = fixture_path(fixture).join(name);\n+    println!(\"{:?}\", file_path);\n     let mut file = File::create(file_path).unwrap();\n-    let content = format!(\n-        r#\"\n-                 module.exports = {};\n-             \"#,\n-        config\n-    );\n+    let content = String::from(content);\n     file.write_all(content.as_bytes()).unwrap();\n }\n",
        "problem_statement": "Require webpack_config field in wrangler.toml to use custom webpack configuration\nIt is not abundantly clear that wrangler will use your custom `webpack.config.js` to package everything. Some users may want to start using wrangler with a project that already has a `webpack.config.js`, but they may not understand that wrangler will use that configuration over its own default. We should require users who want to use their own configuration to specify it in their `wrangler.toml` `webpack_config` field so that there is no confusion that their webpack configuration is impacting their build output.\r\n\r\nWe need to decide if this is something we want to do, or if we want to leave things like they are and automatically override wrangler\u2019s default webpack behavior when a user has their own `webpack.config.js`\r\n\r\n**Edit**\r\n\r\nImplementing this would be a breaking change for users that currently use `webpack.config.js` to build their workers, they would need to add a `webpack_config` field to their `wrangler.toml` in order for it to continue working. We would want to add an error message if they have a file `webpack.config.js` to say that if they want it to be used, they should add it to their configuration to override the default.\r\n\r\nWe're looking at implementing this for the upcoming release because some users will use `webpack.config.js` to build other types of apps alongside their worker. In these cases, the user will want to keep `webpack.config.js` around, but not to build their worker\n",
        "hints_text": "If we remove the automatically using the present webpack.config.js behavior, we should prompt the user if we detect one that they must put it inside wrangler.toml for it to be used in the build (maybe with a link to our readme with any pitfalls you can run into with a custom webpack.config.js)\nlet's start with a PR that includes logic to look at the wrangler.toml for a webpack config, and if the file system has a webpack file at the root and errors. we'll go from there!",
        "created_at": "2019-11-05T20:36:41Z",
        "version": "1.5"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 842,
        "instance_id": "cloudflare__wrangler-legacy-842",
        "issue_numbers": [
            "439"
        ],
        "base_commit": "6a7d66b7253975ac779cfd7f73cf4ed14ad733a7",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -257,7 +257,7 @@ dependencies = [\n \n [[package]]\n name = \"cloudflare\"\n-version = \"0.4.0\"\n+version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2377,7 +2377,7 @@ dependencies = [\n  \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cloudflare 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cloudflare 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"console 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2496,7 +2496,7 @@ dependencies = [\n \"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n \"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n-\"checksum cloudflare 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5da6a058eb23a3c0957c1fa0ec8ffd451d48701fed8f143b2a59653b43d79a7f\"\n+\"checksum cloudflare 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59ad92e7809c9c30862f371bdb613d7aaac8a5372332e323ab3e1b978693665c\"\n \"checksum config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9107d78ed62b3fa5a86e7d18e647abed48cfd8f8fab6c72f4cdb982d196f7e6\"\n \"checksum console 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ca57c2c14b8a2bf3105bc9d15574aad80babf6a9c44b1058034cdf8bd169628\"\n \"checksum constant_time_eq 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"995a44c877f9212528ccc74b21a232f66ad69001e40ede5bcee2ac9ef2657120\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -17,7 +17,7 @@ clap = \"2.32.0\"\n config = \"0.9.2\"\n console = \"0.7.5\"\n dirs = \"1.0.5\"\n-cloudflare = \"0.4.0\"\n+cloudflare = \"0.4.1\"\n env_logger = \"0.6.1\"\n failure = \"0.1.5\"\n log = \"0.4.6\"\ndiff --git a/src/commands/config/mod.rs b/src/commands/config/mod.rs\n--- a/src/commands/config/mod.rs\n+++ b/src/commands/config/mod.rs\n@@ -5,9 +5,14 @@ use std::fs::File;\n use std::os::unix::fs::PermissionsExt;\n use std::path::PathBuf;\n \n+use crate::http;\n use crate::settings::global_user::{get_global_config_dir, GlobalUser};\n \n-// set the permissions on the dir, we want to avoid other user reads of the file\n+use cloudflare::endpoints::user::{GetUserDetails, GetUserTokenStatus};\n+use cloudflare::framework::apiclient::ApiClient;\n+use cloudflare::framework::HttpApiClientConfig;\n+\n+// set the permissions on the dir, we want to avoid that other user reads to file\n #[cfg(not(target_os = \"windows\"))]\n pub fn set_file_mode(file: &PathBuf) {\n     File::open(&file)\ndiff --git a/src/commands/config/mod.rs b/src/commands/config/mod.rs\n--- a/src/commands/config/mod.rs\n+++ b/src/commands/config/mod.rs\n@@ -16,7 +21,12 @@ pub fn set_file_mode(file: &PathBuf) {\n         .expect(\"could not set permissions on file\");\n }\n \n-pub fn global_config(user: &GlobalUser) -> Result<(), failure::Error> {\n+pub fn global_config(user: &GlobalUser, verify: bool) -> Result<(), failure::Error> {\n+    if verify {\n+        message::info(\"Validating credentials...\");\n+        validate_credentials(user)?;\n+    }\n+\n     let toml = toml::to_string(&user)?;\n \n     let config_dir = get_global_config_dir().expect(\"could not find global config directory\");\ndiff --git a/src/commands/config/mod.rs b/src/commands/config/mod.rs\n--- a/src/commands/config/mod.rs\n+++ b/src/commands/config/mod.rs\n@@ -36,3 +46,30 @@ pub fn global_config(user: &GlobalUser) -> Result<(), failure::Error> {\n \n     Ok(())\n }\n+\n+// validate_credentials() checks the /user/tokens/verify endpoint (for API token)\n+// or /user endpoint (for global API key) to ensure provided credentials actually work.\n+pub fn validate_credentials(user: &GlobalUser) -> Result<(), failure::Error> {\n+    let client = http::api_client(user, HttpApiClientConfig::default())?;\n+\n+    match user {\n+        GlobalUser::TokenAuth { .. } => {\n+            match client.request(&GetUserTokenStatus {}) {\n+                Ok(success) => {\n+                    if success.result.status == \"active\" {\n+                        Ok(())\n+                    } else {\n+                        failure::bail!(\"Authentication check failed. Your token has status \\\"{}\\\", not \\\"active\\\".\\nTry rolling your token on the Cloudflare dashboard.\")\n+                    }\n+                },\n+                Err(e) => failure::bail!(\"Authentication check failed. Please make sure your API token is correct.\\n{}\", http::format_error(e, None))\n+            }\n+        }\n+        GlobalUser::GlobalKeyAuth { .. } => {\n+            match client.request(&GetUserDetails {}) {\n+                Ok(_) => Ok(()),\n+                Err(e) => failure::bail!(\"Authentication check failed. Please make sure your email and global API key pair are correct. (https://developers.cloudflare.com/workers/quickstart/#global-api-key)\\n{}\", http::format_error(e, None)),\n+            }\n+        }\n+    }\n+}\ndiff --git a/src/http.rs b/src/http.rs\n--- a/src/http.rs\n+++ b/src/http.rs\n@@ -94,22 +94,17 @@ pub fn format_error(e: ApiFailure, err_helper: Option<&dyn Fn(u16) -> &'static s\n             print_status_code_context(status);\n             let mut complete_err = \"\".to_string();\n             for error in api_errors.errors {\n-                let error_msg =\n-                    format!(\"{} Error {}: {}\\n\", emoji::WARN, error.code, error.message);\n+                let error_msg = format!(\"{} Code {}: {}\\n\", emoji::WARN, error.code, error.message);\n \n-                let suggestion = if let Some(annotate_help) = err_helper {\n-                    Some(annotate_help(error.code))\n-                } else {\n-                    None\n-                };\n-                if let Some(suggestion_text) = suggestion {\n+                if let Some(annotate_help) = err_helper {\n+                    let suggestion_text = annotate_help(error.code);\n                     let help_msg = format!(\"{} {}\\n\", emoji::SLEUTH, suggestion_text);\n                     complete_err.push_str(&format!(\"{}{}\", error_msg, help_msg));\n                 } else {\n                     complete_err.push_str(&error_msg)\n                 }\n             }\n-            complete_err\n+            complete_err.trim_end().to_string() // Trimming strings in place for String is apparently not a thing...\n         }\n         ApiFailure::Invalid(reqwest_err) => format!(\"{} Error: {}\", emoji::WARN, reqwest_err),\n     }\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -379,9 +379,15 @@ fn run() -> Result<(), failure::Error> {\n                 ))\n                 .arg(\n                     Arg::with_name(\"api-key\")\n-                        .help(\"use an email and global API key for authentication. This is not recommended; use API tokens (the default) if possible.\")\n+                        .help(\"use an email and global API key for authentication. This is not recommended; use API tokens (the default) if possible\")\n                         .long(\"api-key\")\n                         .takes_value(false),\n+                )\n+                .arg(\n+                    Arg::with_name(\"no-verify\")\n+                        .help(\"do not verify provided credentials before writing out Wrangler config file\")\n+                        .long(\"no-verify\")\n+                        .takes_value(false),\n                 ),\n         )\n         .subcommand(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -429,7 +435,9 @@ fn run() -> Result<(), failure::Error> {\n             GlobalUser::GlobalKeyAuth { email, api_key }\n         };\n \n-        commands::global_config(&user)?;\n+        let verify = !matches.is_present(\"no-verify\");\n+\n+        commands::global_config(&user, verify)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"generate\") {\n         let name = matches.value_of(\"name\").unwrap_or(\"worker\");\n         let site = matches.is_present(\"site\");\n",
        "test_patch": "diff --git a/tests/config.rs b/tests/config.rs\n--- a/tests/config.rs\n+++ b/tests/config.rs\n@@ -13,7 +13,7 @@ fn it_generates_the_config_unix_eol() {\n #[test]\n fn it_generates_the_config_windows_eol() {\n     generate_config_with(\"\\r\\n\", false); // Test `wrangler config`\n-    generate_config_with(\"\\r\\n\", true); // Test `wrangler config`\n+    generate_config_with(\"\\r\\n\", true); // Test `wrangler config --api-key`\n }\n \n fn generate_config_with(eol: &str, use_api_key: bool) {\ndiff --git a/tests/config.rs b/tests/config.rs\n--- a/tests/config.rs\n+++ b/tests/config.rs\n@@ -73,10 +73,13 @@ api_key = \"apikeythisissecretandlong\"\n \n fn config_with_wrangler_home(home_dir: &str, use_api_key: bool) -> Child {\n     let mut wrangler = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n+    // Don't verify provided information in the `wrangler config` invocation below;\n+    // this is distinct from the parsing functionality this I/O test focuses on\n     if use_api_key {\n         wrangler\n             .arg(\"config\")\n             .arg(\"--api-key\")\n+            .arg(\"--no-verify\")\n             .stdin(Stdio::piped())\n             .stdout(Stdio::piped())\n             .env(\"WRANGLER_HOME\", home_dir)\ndiff --git a/tests/config.rs b/tests/config.rs\n--- a/tests/config.rs\n+++ b/tests/config.rs\n@@ -85,6 +88,7 @@ fn config_with_wrangler_home(home_dir: &str, use_api_key: bool) -> Child {\n     } else {\n         wrangler\n             .arg(\"config\")\n+            .arg(\"--no-verify\")\n             .stdin(Stdio::piped())\n             .stdout(Stdio::piped())\n             .env(\"WRANGLER_HOME\", home_dir)\n",
        "problem_statement": "wrangler config should test for valid credentials\n### \ud83d\udc1b Bug Report\r\n\r\n#### Environment\r\n\r\n* operating system:\r\n* output of `rustc -V`: `rustc 1.35.0 (3c235d560 2019-05-20)`\r\n* output of `node -v`: `v12.4.0`\r\n* output of `wrangler -V`: `\ud83d\udc77 \u2728   wrangler 1.1.1`\r\n\r\n#### Steps to reproduce\r\n\r\nLeave email + api key fields blank when running `wrangler config`\r\n\r\n```bash\r\n\u276f wrangler whoami\r\n\ud83d\udc81\u200d  \ud83d\udc4b  You are logged with the email 'me@cloudflare.com'.\r\n\u276f wrangler config\r\nEnter email: \r\n\r\nEnter api key: \r\n\r\n\u2728   Successfully configured. You can find your configuration file at: /Users/me/.wrangler/config/default.toml\r\n\u276f wrangler whoami\r\n\ud83d\udc81\u200d  \ud83d\udc4b  You are logged with the email ''.\r\n\u276f rm /Users/me/.wrangler/config/default.toml \r\n\u276f wrangler whoami\r\nError: \u26a0\ufe0f  Your global config has an error, run `wrangler config`: missing field `email`\r\n```\r\n\r\n#### What did you expect to see?\r\n\r\nI either expect to see `wrangler config` return an error when I pass it invalid credentials, and for `wrangler whoami` to error when there are invalid credentials in their `.wrangler/config/default.toml`\r\n\r\n#### What did you see instead?\r\n\r\nNo errors and `wrangler whoami` saying that I am successfully logged in as `email ''`.\r\n\r\n#### Other cases\r\n\r\nIt's not just empty credentials that can be successfully configured, completely fake ones work just fine as well.\r\n\r\n```bash\r\n\u276f wrangler config\r\nEnter email: \r\na@cloudflare.com\r\nEnter api key: \r\n1234\r\n\u2728   Successfully configured. You can find your configuration file at: /Users/me/.wrangler/config/default.toml\r\n\u276f wrangler whoami\r\n\ud83d\udc81\u200d  \ud83d\udc4b  You are logged with the email 'a@cloudflare.com'.\r\n```\r\n\n",
        "hints_text": "one of the bigger issues here is that some of the error messages that wrangler gives for bad credentials are garbage. we should at least improve those. forcing valid credentials may be out of scope for this release (1.3.0).\nIf /user is not ready for use with API tokens, we can use the /user/tokens/verify endpoint as mentioned in https://blog.cloudflare.com/api-tokens-general-availability",
        "created_at": "2019-11-05T00:54:15Z",
        "version": "1.5"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 816,
        "instance_id": "cloudflare__wrangler-legacy-816",
        "issue_numbers": [
            "256"
        ],
        "base_commit": "0c937ffeeb9a81b0d4e624c02b2e5bec1833cda9",
        "patch": "diff --git a/src/commands/preview/mod.rs b/src/commands/preview/mod.rs\n--- a/src/commands/preview/mod.rs\n+++ b/src/commands/preview/mod.rs\n@@ -34,6 +34,7 @@ pub fn preview(\n     body: Option<String>,\n     livereload: bool,\n     verbose: bool,\n+    headless: bool,\n ) -> Result<(), failure::Error> {\n     commands::build(&target)?;\n \ndiff --git a/src/commands/preview/mod.rs b/src/commands/preview/mod.rs\n--- a/src/commands/preview/mod.rs\n+++ b/src/commands/preview/mod.rs\n@@ -53,10 +54,12 @@ pub fn preview(\n \n         info!(\"Opened websocket server on port {}\", ws_port);\n \n-        open_browser(&format!(\n+        if !headless {\n+            open_browser(&format!(\n             \"https://cloudflareworkers.com/?wrangler_session_id={0}&wrangler_ws_port={1}&hide_editor#{2}:{3}{4}\",\n             &session.to_string(), ws_port, script_id, https_str, preview_host,\n         ))?;\n+        }\n \n         //don't do initial GET + POST with livereload as the expected behavior is unclear.\n \ndiff --git a/src/commands/preview/mod.rs b/src/commands/preview/mod.rs\n--- a/src/commands/preview/mod.rs\n+++ b/src/commands/preview/mod.rs\n@@ -70,10 +73,12 @@ pub fn preview(\n             verbose,\n         )?;\n     } else {\n-        open_browser(&format!(\n-            \"https://cloudflareworkers.com/?hide_editor#{0}:{1}{2}\",\n-            script_id, https_str, preview_host\n-        ))?;\n+        if !headless {\n+            open_browser(&format!(\n+                \"https://cloudflareworkers.com/?hide_editor#{0}:{1}{2}\",\n+                script_id, https_str, preview_host\n+            ))?;\n+        }\n \n         let cookie = format!(\n             \"__ew_fiddle_preview={}{}{}{}\",\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -309,6 +309,12 @@ fn run() -> Result<(), failure::Error> {\n                     \"{} Preview your code temporarily on cloudflareworkers.com\",\n                     emoji::MICROSCOPE\n                 ))\n+                .arg(\n+                    Arg::with_name(\"headless\")\n+                        .help(\"Don't open the browser on preview\")\n+                        .long(\"headless\")\n+                        .takes_value(false)\n+                )\n                 .arg(\n                     Arg::with_name(\"method\")\n                         .help(\"Type of request to preview your worker with (get, post)\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -495,8 +501,9 @@ fn run() -> Result<(), failure::Error> {\n \n         let watch = matches.is_present(\"watch\");\n         let verbose = matches.is_present(\"verbose\");\n+        let headless = matches.is_present(\"headless\");\n \n-        commands::preview(target, user, method, body, watch, verbose)?;\n+        commands::preview(target, user, method, body, watch, verbose, headless)?;\n     } else if matches.subcommand_matches(\"whoami\").is_some() {\n         log::info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\n",
        "test_patch": "diff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -72,5 +72,5 @@ fn preview(fixture: &str) {\n \n     let mut preview = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n     preview.current_dir(utils::fixture_path(fixture));\n-    preview.arg(\"preview\").assert().success();\n+    preview.arg(\"preview\").arg(\"--headless\").assert().success();\n }\n",
        "problem_statement": "give option to not open browser when previewing\nHi, great talk last Tuesday at cloudflare connect in London on workers and rust.\r\n\r\nWrangler looks awesome, building and testing workers looks like it's got a lot nicer in the last 6 months.\r\n\r\nWould be great if I could preview workers without having to open a browser (or have one opened for me) for every preview.\r\n\r\nA few things that would make this possible:\r\n* option to not open a browser on `wrangler preview` (obviously)\r\n* connect to the websocket for receiving console output and log it to the terminal - quite how this is displayed is an open question since one can't click to expand output in the terminal as one can in a browser console\r\n* get more details about the request to the worker and response, eg. headers and body - something like the output from httpie.\r\n\r\nThere's a gist [here](https://gist.github.com/samuelcolvin/bc4783a69ac78e5a09ad7f82ff4b3a92) (old and ugly code, sorry) that demonstrates much of what I'm asking for.\r\n\r\nFailing all this, one step would be to reuse the same browser tab for each preview so I don't end up with 50 old cloudflare worker tabs, although maybe that's a limitation of chrome?\n",
        "hints_text": "#252 is in progress and adds `wrangler preview --livereload` which will build your worker and update the preview tab (without making a new one) on file changes automatically.\nThanks, this fixes the work around mentioned at the end, but does not help with the original request.\r\n\r\nTerminal only previews/development would be wonderful.\n@samuelcolvin i think adding a flag `--browser`/`--browserless` (i'm not sure what the default should be yet) that controls whether the browser responds is a great idea, and was something i simply ran out of time to build. \r\n\r\nwould you be interested in submitting a PR? if not i think this is achievable for an upcoming release :)\nHow many of the features above should `--browserless` implement? \r\n\r\nI'm guessing that just not opening the browser would be a good start?\r\n\r\nShowing request and response headers wouldn't be that hard (though you could go a lot further and highlight the body etc.), the real bulk of the work would be on printing the console log.\ni would imagine that this would be for preview and would encompass the http request commands we currently support, get (default), and post.\r\n\r\ni think we should definitely add headers to the console output as well!  this could be a separate PR tho, if we wanted to keep them small (though i'd be happy with either).\nOkay, I'll try and work on it when I get a chance, but feel free for anyone to take over if I don't get around to it.\n> @samuelcolvin i think adding a flag `--browser`/`--browserless` (i'm not sure what the default should be yet) that controls whether the browser responds is a great idea, and was something i simply ran out of time to build.\r\n> \r\n> would you be interested in submitting a PR? if not i think this is achievable for an upcoming release :)\r\n\r\nI like this approach, and I would argue that NOT opening the browser should be the default, but maybe that's just me.  I'd rather have `--browser` than `--browserless` :-)\r\n\r\nAny movement on this?\nbeen too busy to work on this, that's not going to change too soon.\r\n\r\nI suspect that while many of us would prefer not to open a browser it will be hard to persuade cf to change the default.\nIn a similar (and potentially off-topic, sorry) experience, I'm running `wrangler preview --watch` on a machine that is terminal-only and therefore _can't_ launch a browser window. I must open a browser window on another machine.\r\n\r\nI'm interested to know if the URL for the current instance of `wrangler preview --watch` is discoverable in any way so that I can launch my own browser window.\nhey! we actually are prioritizing this work this quarter, and hope to implement a terminal only preview, a la \"wrangler cURL\", and parameterize the option of opening the browser cc @samuelcolvin \r\n\nThanks for the cc, afraid I haven't been working on cf workers recently so unlikely I'll be able to help implement this.\nit's all good! @EverlastingBugstopper is going to be focusing on it :) if you have any suggestions or thoughts, feel free to share!\nMy main point would be that a websocket connection and worker console log in the terminal as demonstrated by my gist above would make a massive different for those of us fond of using the terminal.\r\n\r\n`--browerless`, or perhaps better respecting the [`BROWSER` env. variable](https://create-react-app.dev/docs/advanced-configuration/) like create react app, would obviously be the simplest win.\nthank you for sharing @samuelcolvin !\n@ashleygwilliams Do you know if the URL for the current instance of `wrangler preview --watch` is discoverable in any way? I'm running the command on a terminal-only machine and I want to launch the preview URL in a browser window on a separate machine.",
        "created_at": "2019-10-28T20:37:20Z",
        "version": "1.5"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 806,
        "instance_id": "cloudflare__wrangler-legacy-806",
        "issue_numbers": [
            "775"
        ],
        "base_commit": "7943aef755771ffcd3e1552a44ce3478afbc27d3",
        "patch": "diff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -11,6 +11,7 @@ pub use manifest::AssetManifest;\n pub use sync::sync;\n \n use std::ffi::OsString;\n+use std::fs;\n use std::path::Path;\n \n use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -21,6 +22,10 @@ use ignore::{Walk, WalkBuilder};\n use crate::settings::target::Target;\n use crate::terminal::message;\n \n+pub const KEY_MAX_SIZE: usize = 512;\n+// Oddly enough, metadata.len() returns a u64, not usize.\n+pub const VALUE_MAX_SIZE: u64 = 10 * 1024 * 1024;\n+\n // Returns the hashed key and value pair for all files in a directory.\n pub fn directory_keys_values(\n     target: &Target,\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -40,6 +45,8 @@ pub fn directory_keys_values(\n                 message::working(&format!(\"Preparing {}\", path.display()));\n             }\n \n+            validate_file_size(&path)?;\n+\n             let value = std::fs::read(path)?;\n \n             // Need to base64 encode value\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -48,6 +55,8 @@ pub fn directory_keys_values(\n             let (url_safe_path, key) =\n                 generate_path_and_key(path, directory, Some(b64_value.clone()))?;\n \n+            validate_key_size(&key)?;\n+\n             upload_vec.push(KeyValuePair {\n                 key: key.clone(),\n                 value: b64_value,\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -64,7 +73,7 @@ pub fn directory_keys_values(\n \n // Returns only the hashed keys for a directory's files.\n fn directory_keys_only(target: &Target, directory: &Path) -> Result<Vec<String>, failure::Error> {\n-    let mut upload_vec: Vec<String> = Vec::new();\n+    let mut key_vec: Vec<String> = Vec::new();\n \n     let dir_walker = get_dir_iterator(target, directory)?;\n \ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -79,10 +88,44 @@ fn directory_keys_only(target: &Target, directory: &Path) -> Result<Vec<String>,\n \n             let (_, key) = generate_path_and_key(path, directory, Some(b64_value))?;\n \n-            upload_vec.push(key);\n+            validate_key_size(&key)?;\n+\n+            key_vec.push(key);\n         }\n     }\n-    Ok(upload_vec)\n+    Ok(key_vec)\n+}\n+\n+// Ensure that all files in upload directory do not exceed the MAX_VALUE_SIZE (this ensures that\n+// no partial uploads happen). I don't like this functionality (and the similar key length checking\n+// logic in validate_key_size()) because it duplicates the size checking the API already does--but\n+// doing a preemptive check like this (before calling the API) will prevent partial bucket uploads\n+// from happening.\n+fn validate_file_size(path: &Path) -> Result<(), failure::Error> {\n+    let metadata = fs::metadata(path)?;\n+    let file_len = metadata.len();\n+\n+    if file_len > VALUE_MAX_SIZE {\n+        failure::bail!(\n+            \"File `{}` of {} bytes exceeds the maximum value size limit of {} bytes\",\n+            path.display(),\n+            file_len,\n+            VALUE_MAX_SIZE\n+        );\n+    }\n+    Ok(())\n+}\n+\n+fn validate_key_size(key: &str) -> Result<(), failure::Error> {\n+    if key.len() > KEY_MAX_SIZE {\n+        failure::bail!(\n+            \"Path `{}` of {} bytes exceeds the maximum key size limit of {} bytes\",\n+            key,\n+            key.len(),\n+            KEY_MAX_SIZE\n+        );\n+    }\n+    Ok(())\n }\n \n const REQUIRED_IGNORE_FILES: &[&str] = &[\"node_modules\"];\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -13,9 +13,6 @@ use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n use cloudflare::framework::apiclient::ApiClient;\n use failure::format_err;\n \n-const KEY_MAX_SIZE: usize = 512;\n-const VALUE_MAX_SIZE: usize = 2 * 1024 * 1024;\n-\n // The consts below are halved from the API's true capacity to help avoid\n // hammering it with large requests.\n const PAIRS_MAX_COUNT: usize = 5000;\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -49,8 +46,6 @@ pub fn upload_files(\n \n     pairs = filter_files(pairs, ignore);\n \n-    validate_file_uploads(pairs.clone())?;\n-\n     let client = kv::api_client(user)?;\n     // Iterate over all key-value pairs and create batches of uploads, each of which are\n     // maximum 10K key-value pairs in size OR maximum ~50MB in size. Upload each batch\n",
        "test_patch": "diff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -114,32 +109,6 @@ fn filter_files(pairs: Vec<KeyValuePair>, already_uploaded: &HashSet<String>) ->\n     filtered_pairs\n }\n \n-// Ensure that all key-value pairs being uploaded have valid sizes (this ensures that\n-// no partial uploads happen). I don't like this function because it duplicates the\n-// size checking the API already does--but doing a preemptive check like this (before\n-// calling the API) will prevent partial bucket uploads from happening.\n-pub fn validate_file_uploads(pairs: Vec<KeyValuePair>) -> Result<(), failure::Error> {\n-    for pair in pairs {\n-        if pair.key.len() > KEY_MAX_SIZE {\n-            failure::bail!(\n-                \"Path `{}` of {} bytes exceeds the maximum key size limit of {} bytes\",\n-                pair.key,\n-                pair.key.len(),\n-                KEY_MAX_SIZE\n-            );\n-        }\n-        if pair.value.len() > VALUE_MAX_SIZE {\n-            failure::bail!(\n-                \"File `{}` of {} bytes exceeds the maximum value size limit of {} bytes\",\n-                pair.key,\n-                pair.value.len(),\n-                VALUE_MAX_SIZE\n-            );\n-        }\n-    }\n-    Ok(())\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;\n",
        "problem_statement": "Can't publish large image file (< 2MB)\n### \ud83d\udc1b Bug Report\r\n\r\nWhen using `wrangler publish` I get the following error trying to upload a 1.7MB gif file to the KV:\r\n\r\n```\r\nError: File `guides/devilhunter-mod/images/remove-end-plate.07cca7649024261146dbf943c6f4f238e463c1f48d5d89a30083c8dca560d8ab.gif` of 2265836 bytes exceeds the maximum value size limit of 2097152 bytes\r\n```\r\n\r\nBut if I attempt to upload the image via the KV control panel in the Cloudflare dashboard, I don't get the error and it uploads without any issue.\r\n\r\n#### Environment\r\n\r\n* operating system: `macOS 10.13.6`\r\n* output of `rustc -V`: `rustc 1.38.0 (625451e37 2019-09-23)`\r\n* output of `node -v`: `v12.11.1`\r\n* output of `wrangler -V`:  `\u2728  wrangler 1.4.0`\r\n\r\n#### Steps to reproduce\r\n\r\nCreate a 1.7MB file:\r\n`head -c 1699377 /dev/urandom > test.gif`\r\n\r\nAnd then run `wrangler publish`\r\n\r\n#### What did you expect to see?\r\n\r\nNo errors\r\n\r\n#### What did you see instead?\r\n```\r\nError: File `guides/devilhunter-mod/images/test.650921fd9fdbfd3866aedad4d4f191ac109b68a1f0053a0e3157950b929a6126.gif` of 2265836 bytes exceeds the maximum value size limit of 2097152 bytes\r\n```\n",
        "hints_text": "Hi there! Workers KV, as of last week, should now support 10MB files--please try again and let me know if it works. :) Sorry for the inconvenience!\nAs for the inconsistency between the UI and Wrangler, we believe we know the source of this problem--it looks like wrangler performs size checks on items after they have been base64 encoded (which explains why a smaller file looks larger to wrangler; base64 encoding is longer than raw bytes). We'll get a fix in for 1.5.0.\n@gabbifish thanks for the fix! I haven't had a moment to test it, but will let you know if it works once I do.\nto be clear, we need to make the appropriate adjustments to Wrangler, which still asserts the 2MB limit. the fix will be added to the 1.5.0 milestone.\n@ashleymichal gotcha. I shall not test it then!",
        "created_at": "2019-10-24T23:07:53Z"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 804,
        "instance_id": "cloudflare__wrangler-legacy-804",
        "issue_numbers": [
            "772"
        ],
        "base_commit": "f0f685cb4d5b586223eb79dcc49d6d1d52af50fc",
        "patch": "diff --git a/src/settings/target/manifest.rs b/src/settings/target/manifest.rs\n--- a/src/settings/target/manifest.rs\n+++ b/src/settings/target/manifest.rs\n@@ -22,7 +22,6 @@ pub struct Manifest {\n     #[serde(rename = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<KvNamespace>>,\n     pub name: String,\n-    pub private: Option<bool>,\n     #[serde(rename = \"type\")]\n     pub target_type: TargetType,\n     pub route: Option<String>,\ndiff --git a/src/settings/target/manifest.rs b/src/settings/target/manifest.rs\n--- a/src/settings/target/manifest.rs\n+++ b/src/settings/target/manifest.rs\n@@ -61,7 +60,6 @@ impl Manifest {\n             env: None,\n             kv_namespaces: None,\n             name: name.clone(),\n-            private: None,\n             target_type: target_type.clone(),\n             route: Some(String::new()),\n             routes: None,\ndiff --git a/src/settings/target/manifest.rs b/src/settings/target/manifest.rs\n--- a/src/settings/target/manifest.rs\n+++ b/src/settings/target/manifest.rs\n@@ -102,8 +100,6 @@ impl Manifest {\n \n         let environment = self.get_environment(environment_name)?;\n \n-        self.check_private(environment);\n-\n         target.route = self.negotiate_zoneless(environment)?;\n         if let Some(environment) = environment {\n             target.name = if let Some(name) = &environment.name {\ndiff --git a/src/settings/target/manifest.rs b/src/settings/target/manifest.rs\n--- a/src/settings/target/manifest.rs\n+++ b/src/settings/target/manifest.rs\n@@ -260,23 +256,6 @@ impl Manifest {\n             (false, None) => failure::bail!(pick_target_failure),\n         }\n     }\n-\n-    fn check_private(&self, environment: Option<&Environment>) {\n-        let deprecate_private_warning = \"The `private` field is deprecated; please use \\\n-        `workers_dev` to toggle between publishing to your workers.dev subdomain and your own domain.\";\n-\n-        // Check for the presence of the 'private' field in top-level config; if present, warn.\n-        if self.private.is_some() {\n-            message::warn(deprecate_private_warning);\n-        }\n-\n-        // Also check for presence of 'private' field in a provided environment; if present, warn\n-        if let Some(e) = environment {\n-            if e.private.is_some() {\n-                message::warn(deprecate_private_warning);\n-            }\n-        }\n-    }\n }\n \n fn read_config(config_path: &Path) -> Result<Config, failure::Error> {\n",
        "test_patch": "diff --git a/src/settings/target/tests/tomls/invalid_environments.toml b/src/settings/target/tests/tomls/invalid_environments.toml\n--- a/src/settings/target/tests/tomls/invalid_environments.toml\n+++ b/src/settings/target/tests/tomls/invalid_environments.toml\n@@ -10,13 +10,6 @@ zone_id = \"\"\n account_id = \"\"\n route = \"\"\n \n-[env.has_private]\n-name = \"worker\"\n-zone_id = \"\"\n-private = false\n-account_id = \"\"\n-route = \"\"\n-\n [env.has_type]\n type = \"webpack\"\n name = \"worker\"\ndiff --git a/src/settings/target/tests/tomls/invalid_environments.toml b/src/settings/target/tests/tomls/invalid_environments.toml\n--- a/src/settings/target/tests/tomls/invalid_environments.toml\n+++ b/src/settings/target/tests/tomls/invalid_environments.toml\n@@ -24,9 +17,9 @@ zone_id = \"\"\n account_id = \"\"\n route = \"\"\n \n-[env.route_and_dot_dev]\n+[env.route_and_workers_dev]\n name = \"worker\"\n zone_id = \"\"\n account_id = \"\"\n route = \"example.com/*\"\n-workersdotdev = true\n\\ No newline at end of file\n+workers_dev = true\ndiff --git a/src/settings/target/tests/tomls/kv_namespaces.toml b/src/settings/target/tests/tomls/kv_namespaces.toml\n--- a/src/settings/target/tests/tomls/kv_namespaces.toml\n+++ b/src/settings/target/tests/tomls/kv_namespaces.toml\n@@ -30,4 +30,4 @@ binding = \"stagingKV-1\"\n \n [[env.staging.kv-namespaces]]\n id = \"anotherwaytoolongidstring\"\n-binding = \"stagingKV-2\"\n\\ No newline at end of file\n+binding = \"stagingKV-2\"\ndiff --git a/src/settings/target/tests/tomls/no_default.toml b/src/settings/target/tests/tomls/no_default.toml\n--- a/src/settings/target/tests/tomls/no_default.toml\n+++ b/src/settings/target/tests/tomls/no_default.toml\n@@ -10,4 +10,4 @@ type = \"webpack\"\n name = \"staging-worker\"\n zone_id = \"\"\n account_id = \"\"\n-route = \"\"\n\\ No newline at end of file\n+route = \"\"\n",
        "problem_statement": "Remove private from manifest\nWe warn about private being deprecated but we can remove that in 1.5.0\n",
        "hints_text": "Hey I've just added a PR for this issue, could you let me know if this is what you were looking for?",
        "created_at": "2019-10-24T21:39:51Z"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 795,
        "instance_id": "cloudflare__wrangler-legacy-795",
        "issue_numbers": [
            "320"
        ],
        "base_commit": "d174799ddb029a0690a907b8b97f4edb0d9856f3",
        "patch": "diff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -95,12 +95,11 @@ fn build_and_publish_script(\n         .multipart(script_upload_form)\n         .send()?;\n \n-    if !res.status().is_success() {\n-        failure::bail!(\n-            \"Something went wrong! Status: {}, Details {}\",\n-            res.status(),\n-            res.text()?\n-        )\n+    let res_status = res.status();\n+    let res_text = res.text()?;\n+\n+    if !res_status.is_success() {\n+        failure::bail!(error_msg(res_status, res_text))\n     }\n \n     let pattern = if target.route.is_some() {\n",
        "test_patch": "diff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -122,6 +121,33 @@ fn build_and_publish_script(\n     Ok(())\n }\n \n+fn error_msg(status: reqwest::StatusCode, text: String) -> String {\n+    if text.contains(\"\\\"code\\\": 10034,\") {\n+        \"You need to verify your account's email address before you can publish. You can do this by checking your email or logging in to https://dash.cloudflare.com.\".to_string()\n+    } else {\n+        format!(\"Something went wrong! Status: {}, Details {}\", status, text)\n+    }\n+}\n+\n+#[test]\n+fn fails_with_good_error_msg_on_verify_email_err() {\n+    let status = reqwest::StatusCode::FORBIDDEN;\n+    let text = r#\"{\n+  \"result\": null,\n+  \"success\": false,\n+  \"errors\": [\n+    {\n+      \"code\": 10034,\n+      \"message\": \"workers.api.error.email_verification_required\"\n+    }\n+  ],\n+  \"messages\": []\n+}\"#\n+    .to_string();\n+    let result = error_msg(status, text);\n+    assert!(result.contains(\"https://dash.cloudflare.com\"));\n+}\n+\n pub fn upload_buckets(\n     target: &Target,\n     user: &GlobalUser,\n",
        "problem_statement": "Provide a readable error message for API code 10034 - Please verify your email\n```\r\n$ wrangler subdomain jazz\r\n\ud83d\udc0c  Registering your subdomain, jazz.workers.dev, this could take up to a minute.\r\nError: ErrorMessage { msg: \"\u26d4 There was an error creating your requested subdomain.\\n Status Code: 400 Bad Request\\n Msg: {\\\"success\\\":false,\\\"errors\\\":[{\\\"code\\\":7003,\\\"message\\\":\\\"Could not route to \\\\/accounts\\\\/workers\\\\/subdomain, perhaps your object identifier is invalid?\\\"},{\\\"code\\\":7000,\\\"message\\\":\\\"No route for that URI\\\"}],\\\"messages\\\":[],\\\"result\\\":null}\" }\r\n```\r\n\r\nThis should be updated to inform the user that they need to validate their email before they can register the subdomain (maybe give them a link to re-send the email?)\n",
        "hints_text": "error 7003 is not specific enough for us to give a good error message. @rita3ko let's chat about this!\ni believe this _particular_ error had to do with a missing account id in the wrangler.toml. we check for that now on publish, so it should mitigate this particular error.\r\n\r\nwrt the reported error with subdomain registration, this is actually about to become a thing, so we'll need to handle a 10034 error (email not yet verified).\nUpdate - before when I ran this command I did not include my `account_id`. It seems like the API allows you to register a subdomain without confirming your email\r\n\r\n![image](https://user-images.githubusercontent.com/9408157/64808375-c1677080-d55c-11e9-9756-2fa263ca521b.png)\r\n\r\n\r\n```console\r\n$ wrangler whoami\r\n\ud83d\udc81  \ud83d\udc4b  You are logged with the email 'notvalidatedemail@gmail.com'.\r\n```\r\n\r\n```console\r\n$ wrangler subdomain jazz\r\n\ud83c\udf00  Registering your subdomain, jazz.workers.dev, this could take up to a minute.\r\n\u2728  Success! You've registered jazz.\r\n```\nSeems like this is expected - we should print out a nice error message for `wrangler publish` for an unauth'd email\r\n\r\n```console\r\n$ wrangler publish\r\n\u2728  Built successfully, built project size is 517 bytes.\r\n\u2728  Successfully published your script.\r\nError: Something went wrong! Status: 403 Forbidden, Details {\r\n  \"result\": null,\r\n  \"success\": false,\r\n  \"errors\": [\r\n    {\r\n      \"code\": 10034,\r\n      \"message\": \"workers.api.error.email_verification_required\"\r\n    }\r\n  ],\r\n  \"messages\": []\r\n}\r\n```\r\n",
        "created_at": "2019-10-22T19:43:43Z"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 271,
        "instance_id": "cloudflare__wrangler-legacy-271",
        "issue_numbers": [
            "197",
            "211"
        ],
        "base_commit": "78c4cd7423af97d46976fe0273bda7dbea146cff",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1928,6 +1928,7 @@ dependencies = [\n  \"flate2 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl 0.10.23 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -31,6 +31,7 @@ fs2 = \"0.4.3\"\n number_prefix = \"0.3.0\"\n flate2 = \"1.0.7\"\n base64 = \"0.10.1\"\n+lazy_static = \"1.3.0\"\n \n [dev-dependencies]\n assert_cmd = \"0.11.1\"\ndiff --git a/src/cache.rs /dev/null\n--- a/src/cache.rs\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-use binary_install::Cache;\n-use std::env;\n-use std::path::Path;\n-\n-pub fn get_wrangler_cache() -> Result<Cache, failure::Error> {\n-    if let Ok(path) = env::var(\"WRANGLER_CACHE\") {\n-        Ok(Cache::at(Path::new(&path)))\n-    } else {\n-        Cache::new(\"wrangler\")\n-    }\n-}\ndiff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -2,14 +2,13 @@ pub mod wranglerjs;\n \n use crate::settings::project::{Project, ProjectType};\n use crate::{commands, install};\n-use binary_install::Cache;\n use std::env;\n use std::path::PathBuf;\n use std::process::Command;\n \n use crate::terminal::message;\n \n-pub fn build(cache: &Cache, project: &Project) -> Result<(), failure::Error> {\n+pub fn build(project: &Project) -> Result<(), failure::Error> {\n     let project_type = &project.project_type;\n     match project_type {\n         ProjectType::JavaScript => {\ndiff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -17,7 +16,7 @@ pub fn build(cache: &Cache, project: &Project) -> Result<(), failure::Error> {\n         }\n         ProjectType::Rust => {\n             let tool_name = \"wasm-pack\";\n-            let binary_path = install::install(tool_name, \"rustwasm\", cache)?.binary(tool_name)?;\n+            let binary_path = install::install(tool_name, \"rustwasm\")?.binary(tool_name)?;\n             let args = [\"build\", \"--target\", \"no-modules\"];\n \n             let command = command(&args, binary_path);\ndiff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -26,7 +25,7 @@ pub fn build(cache: &Cache, project: &Project) -> Result<(), failure::Error> {\n             commands::run(command, &command_name)?;\n         }\n         ProjectType::Webpack => {\n-            wranglerjs::run_build(cache, project)?;\n+            wranglerjs::run_build(project)?;\n         }\n     }\n \ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -3,7 +3,6 @@ pub mod output;\n \n use crate::commands::publish::package::Package;\n use crate::install;\n-use binary_install::Cache;\n pub use bundle::Bundle;\n use fs2::FileExt;\n use log::info;\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -27,8 +26,8 @@ use crate::terminal::message;\n // executable and wait for completion. The file will receive the a serialized\n // {WranglerjsOutput} struct.\n // Note that the ability to pass a fd is platform-specific\n-pub fn run_build(cache: &Cache, project: &Project) -> Result<(), failure::Error> {\n-    let (mut command, temp_file, bundle) = setup_build(cache, project)?;\n+pub fn run_build(project: &Project) -> Result<(), failure::Error> {\n+    let (mut command, temp_file, bundle) = setup_build(project)?;\n \n     info!(\"Running {:?}\", command);\n \ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -66,10 +65,7 @@ pub fn run_build(cache: &Cache, project: &Project) -> Result<(), failure::Error>\n }\n \n //setup a build to run wranglerjs, return the command, the ipc temp file, and the bundle\n-fn setup_build(\n-    cache: &Cache,\n-    project: &Project,\n-) -> Result<(Command, PathBuf, Bundle), failure::Error> {\n+fn setup_build(project: &Project) -> Result<(Command, PathBuf, Bundle), failure::Error> {\n     for tool in &[\"node\", \"npm\"] {\n         env_dep_installed(tool)?;\n     }\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -79,11 +75,11 @@ fn setup_build(\n \n     let node = which::which(\"node\").unwrap();\n     let mut command = Command::new(node);\n-    let wranglerjs_path = install(cache).expect(\"could not install wranglerjs\");\n+    let wranglerjs_path = install().expect(\"could not install wranglerjs\");\n     command.arg(wranglerjs_path);\n \n     //put path to our wasm_pack as env variable so wasm-pack-plugin can utilize it\n-    let wasm_pack_path = install::install(\"wasm-pack\", \"rustwasm\", cache)?.binary(\"wasm-pack\")?;\n+    let wasm_pack_path = install::install(\"wasm-pack\", \"rustwasm\")?.binary(\"wasm-pack\")?;\n     command.env(\"WASM_PACK_PATH\", wasm_pack_path);\n \n     // create a temp file for IPC with the wranglerjs process\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -197,7 +193,7 @@ fn get_source_dir() -> PathBuf {\n }\n \n // Install {wranglerjs} from our GitHub releases\n-fn install(cache: &Cache) -> Result<PathBuf, failure::Error> {\n+fn install() -> Result<PathBuf, failure::Error> {\n     let wranglerjs_path = if install::target::DEBUG {\n         let source_path = get_source_dir();\n         let wranglerjs_path = source_path.join(\"wranglerjs\");\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -206,7 +202,7 @@ fn install(cache: &Cache) -> Result<PathBuf, failure::Error> {\n     } else {\n         let tool_name = \"wranglerjs\";\n         let version = env!(\"CARGO_PKG_VERSION\");\n-        let wranglerjs_path = install::install_artifact(tool_name, \"cloudflare\", cache, version)?;\n+        let wranglerjs_path = install::install_artifact(tool_name, \"cloudflare\", version)?;\n         info!(\"wranglerjs downloaded at: {:?}\", wranglerjs_path.path());\n         wranglerjs_path.path()\n     };\ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -1,19 +1,13 @@\n use crate::settings::project::{Project, ProjectType};\n use crate::{commands, install};\n-use binary_install::Cache;\n use std::path::PathBuf;\n use std::process::Command;\n \n use crate::terminal::{emoji, message};\n \n-pub fn generate(\n-    name: &str,\n-    template: &str,\n-    pt: Option<ProjectType>,\n-    cache: &Cache,\n-) -> Result<(), failure::Error> {\n+pub fn generate(name: &str, template: &str, pt: Option<ProjectType>) -> Result<(), failure::Error> {\n     let tool_name = \"cargo-generate\";\n-    let binary_path = install::install(tool_name, \"ashleygwilliams\", cache)?.binary(tool_name)?;\n+    let binary_path = install::install(tool_name, \"ashleygwilliams\")?.binary(tool_name)?;\n \n     let args = [\"generate\", \"--git\", template, \"--name\", name, \"--force\"];\n \ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -13,6 +13,7 @@ use std::collections::HashMap;\n use std::fs;\n use std::path::Path;\n \n+use crate::commands;\n use crate::commands::build::wranglerjs::Bundle;\n use crate::commands::subdomain::Subdomain;\n use crate::http;\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -22,7 +23,10 @@ use crate::terminal::message;\n \n pub fn publish(user: &GlobalUser, project: &Project, release: bool) -> Result<(), failure::Error> {\n     info!(\"release = {}\", release);\n-    create_kv_namespaces(user, project)?;\n+\n+    validate_project(project, release)?;\n+    commands::build(&project)?;\n+    create_kv_namespaces(user, &project)?;\n     publish_script(&user, &project, release)?;\n     if release {\n         info!(\"release mode detected, making a route...\");\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -81,9 +85,6 @@ fn publish_script(\n     project: &Project,\n     release: bool,\n ) -> Result<(), failure::Error> {\n-    if project.account_id.is_empty() {\n-        failure::bail!(\"You must provide an account_id in your wrangler.toml before you publish!\")\n-    }\n     let worker_addr = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}\",\n         project.account_id, project.name,\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -246,3 +247,52 @@ fn build_webpack_form() -> Result<Form, failure::Error> {\n         Ok(form)\n     }\n }\n+\n+fn validate_project(project: &Project, release: bool) -> Result<(), failure::Error> {\n+    let mut missing_fields = Vec::new();\n+\n+    if project.account_id.is_empty() {\n+        missing_fields.push(\"account_id\")\n+    };\n+    if project.name.is_empty() {\n+        missing_fields.push(\"name\")\n+    };\n+\n+    let destination = if release {\n+        //check required fields for release\n+        if project\n+            .zone_id\n+            .as_ref()\n+            .unwrap_or(&\"\".to_string())\n+            .is_empty()\n+        {\n+            missing_fields.push(\"zone_id\")\n+        };\n+        if project.route.as_ref().unwrap_or(&\"\".to_string()).is_empty() {\n+            missing_fields.push(\"route\")\n+        };\n+        //zoned deploy destination\n+        \"a route\"\n+    } else {\n+        //zoneless deploy destination\n+        \"your subdomain\"\n+    };\n+\n+    let (field_pluralization, is_are) = match missing_fields.len() {\n+        n if n >= 2 => (\"fields\", \"are\"),\n+        1 => (\"field\", \"is\"),\n+        _ => (\"\", \"\"),\n+    };\n+\n+    if !missing_fields.is_empty() {\n+        failure::bail!(\n+            \"Your wrangler.toml is missing the {} {:?} which {} required to publish to {}!\",\n+            field_pluralization,\n+            missing_fields,\n+            is_are,\n+            destination\n+        );\n+    };\n+\n+    Ok(())\n+}\ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -8,8 +8,9 @@ use crate::commands::publish;\n use serde::Deserialize;\n use uuid::Uuid;\n \n+use crate::commands;\n use crate::http;\n-use crate::settings::project::{get_project_config, ProjectType};\n+use crate::settings::project::{Project, ProjectType};\n use crate::terminal::message;\n \n #[derive(Debug, Deserialize)]\ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -18,6 +19,7 @@ struct Preview {\n }\n \n pub fn preview(\n+    project: &Project,\n     method: Result<HTTPMethod, failure::Error>,\n     body: Option<String>,\n ) -> Result<(), failure::Error> {\ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -25,7 +27,9 @@ pub fn preview(\n \n     let client = http::client();\n \n-    let project_type = get_project_config()?.project_type;\n+    let project_type = &project.project_type;\n+\n+    commands::build(&project)?;\n \n     let res = match project_type {\n         ProjectType::Rust => client\ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -25,14 +34,13 @@ pub fn install(tool_name: &str, owner: &str, cache: &Cache) -> Result<Download,\n pub fn install_artifact(\n     tool_name: &str,\n     owner: &str,\n-    cache: &Cache,\n     version: &str,\n ) -> Result<Download, failure::Error> {\n     if let Some(download) = tool_exists(tool_name) {\n         return Ok(download);\n     }\n \n-    let download = download_prebuilt(cache, tool_name, owner, version, &[]);\n+    let download = download_prebuilt(tool_name, owner, version, &[]);\n     match download {\n         Ok(download) => Ok(download),\n         Err(e) => {\ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -53,7 +61,6 @@ fn tool_exists(tool_name: &str) -> Option<Download> {\n }\n \n fn download_prebuilt(\n-    cache: &Cache,\n     tool_name: &str,\n     owner: &str,\n     version: &str,\ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -71,9 +78,9 @@ fn download_prebuilt(\n \n     // no binaries are expected; downloading it as an artifact\n     let res = if !binaries.is_empty() {\n-        cache.download(true, tool_name, binaries, &url)?\n+        CACHE.download(true, tool_name, binaries, &url)?\n     } else {\n-        cache.download_artifact(tool_name, &url)?\n+        CACHE.download_artifact(tool_name, &url)?\n     };\n \n     match res {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -3,13 +3,11 @@\n use std::env;\n use std::str::FromStr;\n \n-use cache::get_wrangler_cache;\n use clap::{App, AppSettings, Arg, SubCommand};\n use commands::HTTPMethod;\n \n use log::info;\n \n-mod cache;\n mod commands;\n mod http;\n mod install;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -21,8 +19,6 @@ use terminal::emoji;\n \n fn main() -> Result<(), failure::Error> {\n     env_logger::init();\n-    let cache = get_wrangler_cache()?;\n-\n     if let Ok(me) = env::current_exe() {\n         // If we're actually running as the installer then execute our\n         // self-installation, otherwise just continue as usual.\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -181,7 +177,7 @@ fn main() -> Result<(), failure::Error> {\n             \"Generate command called with template {}, and name {}\",\n             template, name\n         );\n-        commands::generate(name, template, project_type, &cache)?;\n+        commands::generate(name, template, project_type)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"init\") {\n         let name = matches.value_of(\"name\");\n         let project_type = match matches.value_of(\"type\") {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -192,7 +188,7 @@ fn main() -> Result<(), failure::Error> {\n     } else if matches.subcommand_matches(\"build\").is_some() {\n         info!(\"Getting project settings\");\n         let project = settings::project::Project::new()?;\n-        commands::build(&cache, &project)?;\n+        commands::build(&project)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"preview\") {\n         info!(\"Getting project settings\");\n         let project = settings::project::Project::new()?;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -204,8 +200,7 @@ fn main() -> Result<(), failure::Error> {\n             None => None,\n         };\n \n-        commands::build(&cache, &project)?;\n-        commands::preview(method, body)?;\n+        commands::preview(&project, method, body)?;\n     } else if matches.subcommand_matches(\"whoami\").is_some() {\n         info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -224,7 +219,6 @@ fn main() -> Result<(), failure::Error> {\n             _ => false,\n         };\n \n-        commands::build(&cache, &project)?;\n         commands::publish(&user, &project, release)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"subdomain\") {\n         info!(\"Getting project settings\");\n",
        "test_patch": "diff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -6,14 +6,23 @@ use krate::Krate;\n use log::info;\n use which::which;\n \n-pub fn install(tool_name: &str, owner: &str, cache: &Cache) -> Result<Download, failure::Error> {\n+use std::env;\n+use std::path::Path;\n+\n+use lazy_static::lazy_static;\n+\n+lazy_static! {\n+    static ref CACHE: Cache = get_wrangler_cache().expect(\"creating binary dependency cache\");\n+}\n+\n+pub fn install(tool_name: &str, owner: &str) -> Result<Download, failure::Error> {\n     if let Some(download) = tool_exists(tool_name) {\n         return Ok(download);\n     }\n \n     let binaries = &[tool_name];\n     let latest_version = get_latest_version(tool_name)?;\n-    let download = download_prebuilt(cache, tool_name, owner, &latest_version, binaries);\n+    let download = download_prebuilt(tool_name, owner, &latest_version, binaries);\n     match download {\n         Ok(download) => Ok(download),\n         Err(e) => {\ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -113,3 +120,11 @@ fn prebuilt_url(tool_name: &str, owner: &str, version: &str) -> Option<String> {\n fn get_latest_version(tool_name: &str) -> Result<String, failure::Error> {\n     Ok(Krate::new(tool_name)?.max_version)\n }\n+\n+fn get_wrangler_cache() -> Result<Cache, failure::Error> {\n+    if let Ok(path) = env::var(\"WRANGLER_CACHE\") {\n+        Ok(Cache::at(Path::new(&path)))\n+    } else {\n+        Cache::new(\"wrangler\")\n+    }\n+}\n",
        "problem_statement": "Validate wrangler.toml before Fetching Deps\nOn a fresh project , invoking `wrangler publish` will fetch dependencies (first) and then error out if `account_id` (or other vals) in `wrangler.toml` are not set.\r\n\r\nThis could be frustrating on slower networks, or even if you just waited to see it fail.\r\n\r\nSuggestion: validate the required fields in `wrangler.toml` first.\nwrangler.toml firing wrong error messages on publish\n**wrangler.toml** has `zone_id` and `account_id` missing `routes`\r\n\r\n`Error: ErrorMessage { msg: \"You must provide a zone_id in your wrangler.toml before publishing!\" }`\r\n\r\n**wrangler.toml** has  `account_id` `routes` missing `zone_id`\r\n\r\n`Error: ErrorMessage { msg: \"\u26d4 There was an error featching your project\\'s routes.\\n Status Code: 400 Bad Request\\n Msg: {\\\"success\\\":false,\\\"errors\\\":[{\\\"code\\\":7003,\\\"message\\\":\\\"Could not route to \\\\/zones\\\\/workers\\\\/routes, perhaps your object identifier is invalid?\\\"},{\\\"code\\\":7000,\\\"message\\\":\\\"No route for that URI\\\"}],\\\"messages\\\":[],\\\"result\\\":null}\" }`\n",
        "hints_text": "this is an excellent feature request. are you interested in making this PR yourself? i'm happy to offer mentoring! if you don't have the time no worries!  let me know :)\nthanks for filing and sorry you are running into this! i am pretty sure i know where the offending code is and will work to fix it- but if you were interested in submitting a patch i'd be happy to help mentor you! let me know!\n@ashleygwilliams I will adventure with your PR challenge. I accept you mentoring \ud83c\udf55\ni have solution for this error, you need fill in the **wrangler.toml** settings\r\nzone_id\r\naccount_id and **route** \r\n\r\ncc @ashleygwilliams \r\n\r\n\r\n\nI am experiencing the same too. Default template comes with empty zone_id and route but no clear instructions on the document.",
        "created_at": "2019-06-24T20:53:44Z",
        "version": "1.0"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 263,
        "instance_id": "cloudflare__wrangler-legacy-263",
        "issue_numbers": [
            "219"
        ],
        "base_commit": "ba729f86ac21c5384021cbe02d41609d250944e6",
        "patch": "diff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -7,7 +7,7 @@ use std::env;\n use std::path::PathBuf;\n use std::process::Command;\n \n-use crate::emoji;\n+use crate::terminal::message;\n \n pub fn build(cache: &Cache, project: &Project) -> Result<(), failure::Error> {\n     let project_type = &project.project_type;\ndiff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -19,7 +19,7 @@ pub fn build(cache: &Cache, project: &Project) -> Result<(), failure::Error> {\n     );\n     match project_type {\n         ProjectType::JavaScript => {\n-            println!(\"\u26a0\ufe0f JavaScript project found. Skipping unnecessary build!\")\n+            message::info(\"JavaScript project found. Skipping unnecessary build!\")\n         }\n         ProjectType::Rust => {\n             let tool_name = \"wasm-pack\";\ndiff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -53,7 +53,7 @@ pub fn build(cache: &Cache, project: &Project) -> Result<(), failure::Error> {\n             .expect(\"could not run wranglerjs\");\n \n             if wranglerjs_output.has_errors() {\n-                println!(\"{}\", wranglerjs_output.get_errors());\n+                message::user_error(&format!(\"{}\", wranglerjs_output.get_errors()));\n                 failure::bail!(\"Webpack returned an error\");\n             }\n \ndiff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -61,15 +61,14 @@ pub fn build(cache: &Cache, project: &Project) -> Result<(), failure::Error> {\n                 .write(&wranglerjs_output)\n                 .expect(\"could not write bundle to disk\");\n \n-            print!(\n-                \"{} Built successfully, script size is {}\",\n-                emoji::SPARKLES,\n+            let mut msg = format!(\n+                \"Built successfully, script size is {}\",\n                 wranglerjs_output.script_size()\n             );\n             if bundle.has_wasm() {\n-                print!(\" and Wasm size is {}\", wranglerjs_output.wasm_size());\n+                msg = format!(\"{} and Wasm size is {}\", msg, wranglerjs_output.wasm_size());\n             }\n-            println!(\".\");\n+            message::success(&msg);\n         }\n     }\n \ndiff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -77,7 +76,7 @@ pub fn build(cache: &Cache, project: &Project) -> Result<(), failure::Error> {\n }\n \n fn command(args: &[&str], binary_path: PathBuf) -> Command {\n-    println!(\"{} Compiling your project to WebAssembly...\", emoji::SWIRL);\n+    message::working(\"Compiling your project to WebAssembly...\");\n \n     let mut c = if cfg!(target_os = \"windows\") {\n         let mut c = Command::new(\"cmd\");\ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -9,6 +9,7 @@ use std::path::{Path, PathBuf};\n use log::info;\n \n use crate::commands::build::wranglerjs::output::WranglerjsOutput;\n+use crate::terminal::message;\n \n // Directory where we should write the {Bundle}. It represents the built\n // artifact.\ndiff --git a/src/commands/config.rs b/src/commands/config.rs\n--- a/src/commands/config.rs\n+++ b/src/commands/config.rs\n@@ -1,3 +1,4 @@\n+use crate::terminal::message;\n use std::fs;\n use std::path::Path;\n \ndiff --git a/src/commands/config.rs b/src/commands/config.rs\n--- a/src/commands/config.rs\n+++ b/src/commands/config.rs\n@@ -25,10 +26,10 @@ pub fn global_config(email: &str, api_key: &str) -> Result<(), failure::Error> {\n     let config_file = config_dir.join(\"default.toml\");\n     fs::write(&config_file, &toml)?;\n \n-    println!(\n-        \"{1} Successfully configured. You can find your configuration file at: {0}. {1}\",\n-        &config_file.to_string_lossy(),\n-        emoji::SPARKLES,\n-    );\n+    message::success(&format!(\n+        \"Successfully configured. You can find your configuration file at: {}\",\n+        &config_file.to_string_lossy()\n+    ));\n+\n     Ok(())\n }\ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -4,7 +4,7 @@ use binary_install::Cache;\n use std::path::PathBuf;\n use std::process::Command;\n \n-use crate::emoji;\n+use crate::terminal::{emoji, message};\n \n pub fn generate(\n     name: &str,\ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -27,13 +27,15 @@ pub fn generate(\n }\n \n fn command(name: &str, binary_path: PathBuf, args: &[&str], project_type: &ProjectType) -> Command {\n-    println!(\n+    let msg = format!(\n         \"{} Generating a new {} worker project with name '{}'...\",\n         emoji::SHEEP,\n         project_type,\n         name\n     );\n \n+    message::working(&msg);\n+\n     let mut c = if cfg!(target_os = \"windows\") {\n         let mut c = Command::new(\"cmd\");\n         c.arg(\"/C\");\ndiff --git a/src/commands/init.rs b/src/commands/init.rs\n--- a/src/commands/init.rs\n+++ b/src/commands/init.rs\n@@ -1,5 +1,5 @@\n-use crate::emoji;\n use crate::settings::project::{Project, ProjectType};\n+use crate::terminal::message;\n use std::path::Path;\n \n pub fn init(name: Option<&str>, project_type: Option<ProjectType>) -> Result<(), failure::Error> {\ndiff --git a/src/commands/init.rs b/src/commands/init.rs\n--- a/src/commands/init.rs\n+++ b/src/commands/init.rs\n@@ -10,7 +10,7 @@ pub fn init(name: Option<&str>, project_type: Option<ProjectType>) -> Result<(),\n     let name = name.unwrap_or_else(|| &dirname);\n     let project_type = project_type.unwrap_or_default();\n     Project::generate(name.to_string(), project_type, true)?;\n-    println!(\"{} Succesfully created a `wrangler.toml`\", emoji::SPARKLES);\n+    message::success(\"Succesfully created a `wrangler.toml`\");\n     Ok(())\n }\n \ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -20,6 +20,7 @@ use crate::commands::subdomain::Subdomain;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::project::{Project, ProjectType};\n+use crate::terminal::message;\n \n pub fn publish(user: &GlobalUser, project: &Project, release: bool) -> Result<(), failure::Error> {\n     info!(\"release = {}\", release);\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -29,12 +30,13 @@ pub fn publish(user: &GlobalUser, project: &Project, release: bool) -> Result<()\n         info!(\"release mode detected, making a route...\");\n         let route = Route::new(&project)?;\n         Route::publish(&user, &project, &route)?;\n-        println!(\n-            \"\u2728 Success! Your worker was successfully published. You can view it at {}. \u2728\",\n+        let msg = format!(\n+            \"Success! Your worker was successfully published. You can view it at {}.\",\n             &route.pattern\n         );\n+        message::success(&msg);\n     } else {\n-        println!(\"\u2728 Success! Your worker was successfully published. \u2728\");\n+        message::success(\"Success! Your worker was successfully published.\");\n     }\n     Ok(())\n }\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -138,10 +140,10 @@ fn publish_script(\n     };\n \n     if res.status().is_success() {\n-        println!(\"\ud83e\udd73 Successfully published your script.\");\n+        message::success(\"Successfully published your script.\");\n     } else {\n         failure::bail!(\n-            \"\u26d4 Something went wrong! Status: {}, Details {}\",\n+            \"Something went wrong! Status: {}, Details {}\",\n             res.status(),\n             res.text()?\n         )\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -183,13 +185,14 @@ fn make_public_on_subdomain(project: &Project, user: &GlobalUser) -> Result<(),\n         .send()?;\n \n     if res.status().is_success() {\n-        println!(\n-            \"\ud83e\udd73 Successfully made your script available at https://{}.{}.workers.dev\",\n+        let msg = format!(\n+            \"Successfully made your script available at https://{}.{}.workers.dev\",\n             project.name, subdomain\n         );\n+        message::success(&msg)\n     } else {\n         failure::bail!(\n-            \"\u26d4 Something went wrong! Status: {}, Details {}\",\n+            \"Something went wrong! Status: {}, Details {}\",\n             res.status(),\n             res.text()?\n         )\ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -10,6 +10,7 @@ use uuid::Uuid;\n \n use crate::http;\n use crate::settings::project::{get_project_config, ProjectType};\n+use crate::terminal::message;\n \n #[derive(Debug, Deserialize)]\n struct Preview {\ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -61,7 +62,8 @@ pub fn preview(\n         HTTPMethod::Get => get(preview_address, cookie, client)?,\n         HTTPMethod::Post => post(preview_address, cookie, client, body)?,\n     };\n-    println!(\"\ud83d\udc77\u200d\u2640\ufe0f Your worker responded with: {}\", worker_res);\n+    let msg = format!(\"Your worker responded with: {}\", worker_res);\n+    message::preview(&msg);\n \n     open(preview_host, https, script_id)?;\n \ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -101,7 +103,8 @@ fn get(\n     client: reqwest::Client,\n ) -> Result<String, failure::Error> {\n     let res = client.get(preview_address).header(\"Cookie\", cookie).send();\n-    println!(\"\ud83d\udc77\u200d\u2640\ufe0f GET {}\", preview_address);\n+    let msg = format!(\"GET {}\", preview_address);\n+    message::preview(&msg);\n     Ok(res?.text()?)\n }\n \ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -119,6 +122,7 @@ fn post(\n             .send(),\n         None => client.post(preview_address).header(\"Cookie\", cookie).send(),\n     };\n-    println!(\"\ud83d\udc77\u200d\u2640\ufe0f POST {}\", preview_address,);\n+    let msg = format!(\"POST {}\", preview_address);\n+    message::preview(&msg);\n     Ok(res?.text()?)\n }\ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -1,7 +1,7 @@\n-use crate::emoji;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::project::Project;\n+use crate::terminal::{emoji, message};\n \n use serde::{Deserialize, Serialize};\n \ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -24,7 +24,8 @@ impl Subdomain {\n \n         if !res.status().is_success() {\n             failure::bail!(\n-                \"\u26d4 There was an error fetching your subdomain.\\n Status Code: {}\\n Msg: {}\",\n+                \"{} There was an error fetching your subdomain.\\n Status Code: {}\\n Msg: {}\",\n+                emoji::WARN,\n                 res.status(),\n                 res.text()?,\n             )\ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -62,11 +63,11 @@ fn subdomain_addr(account_id: &str) -> String {\n }\n \n pub fn subdomain(name: &str, user: &GlobalUser, project: &Project) -> Result<(), failure::Error> {\n-    println!(\n-        \"{} Registering your subdomain, {}.workers.dev, this could take up to a minute.\",\n-        emoji::SNAIL,\n+    let msg = format!(\n+        \"Registering your subdomain, {}.workers.dev, this could take up to a minute.\",\n         name\n     );\n+    message::working(&msg);\n     let account_id = &project.account_id;\n     let addr = subdomain_addr(account_id);\n     let sd = Subdomain {\ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -90,27 +91,31 @@ pub fn subdomain(name: &str, user: &GlobalUser, project: &Project) -> Result<(),\n         if already_has_subdomain(res_json.errors) {\n             let sd = Subdomain::get(account_id, user)?;\n             msg = format!(\n-                \"\u26d4 This account already has a registered subdomain. You can only register one subdomain per account. Your subdomain is {}.workers.dev \\n Status Code: {}\\n Msg: {}\",\n+                \"{} This account already has a registered subdomain. You can only register one subdomain per account. Your subdomain is {}.workers.dev \\n Status Code: {}\\n Msg: {}\",\n+                emoji::WARN,\n                 sd,\n                 res.status(),\n                 res_text,\n             );\n         } else if res.status() == 409 {\n             msg = format!(\n-                \"\u26d4 Your requested subdomain is not available. Please pick another one.\\n Status Code: {}\\n Msg: {}\",\n+                \"{} Your requested subdomain is not available. Please pick another one.\\n Status Code: {}\\n Msg: {}\",\n+                emoji::WARN,\n                 res.status(),\n                 res_text\n             );\n         } else {\n             msg = format!(\n-                \"\u26d4 There was an error creating your requested subdomain.\\n Status Code: {}\\n Msg: {}\",\n+                \"{} There was an error creating your requested subdomain.\\n Status Code: {}\\n Msg: {}\",\n+                emoji::WARN,\n                 res.status(),\n                 res_text\n             );\n         }\n         failure::bail!(msg)\n     }\n-    println!(\"{} Success! You've registered {}.\", emoji::SPARKLES, name);\n+    let msg = format!(\"Success! You've registered {}.\", name);\n+    message::success(&msg);\n     Ok(())\n }\n \ndiff --git a/src/commands/whoami.rs b/src/commands/whoami.rs\n--- a/src/commands/whoami.rs\n+++ b/src/commands/whoami.rs\n@@ -1,10 +1,12 @@\n-use crate::emoji;\n use crate::settings::global_user::GlobalUser;\n+use crate::terminal::{emoji, message};\n \n pub fn whoami(user: &GlobalUser) {\n-    println!(\n+    let msg = format!(\n         \"{} You are logged with the email '{}'.\",\n         emoji::WAVING,\n         user.email\n     );\n+\n+    message::info(&msg);\n }\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -11,11 +11,13 @@ use log::info;\n \n mod cache;\n mod commands;\n-mod emoji;\n mod http;\n mod install;\n mod installer;\n mod settings;\n+mod terminal;\n+\n+use terminal::emoji;\n \n fn main() -> Result<(), failure::Error> {\n     env_logger::init();\ndiff --git a/src/emoji.rs b/src/terminal/emoji.rs\n--- a/src/emoji.rs\n+++ b/src/terminal/emoji.rs\n@@ -13,16 +13,19 @@\n \n use console::Emoji;\n \n-pub static WORKER: Emoji = Emoji(\"\ud83d\udc77 \", \"\");\n-pub static SPARKLES: Emoji = Emoji(\"\u2728  \", \"\");\n+pub static CONSTRUCTION: Emoji = Emoji(\"\ud83d\udea7 \", \"\");\n+pub static CRAB: Emoji = Emoji(\"\ud83e\udd80 \", \"\");\n pub static DANCERS: Emoji = Emoji(\"\ud83d\udc6f \", \"\");\n+pub static EYES: Emoji = Emoji(\"\ud83d\udc40 \", \"\");\n+pub static FACEPALM: Emoji = Emoji(\"\ud83e\udd26\u200d\u2640\ufe0f \", \"\");\n+pub static INBOX: Emoji = Emoji(\"\ud83d\udce5 \", \"\");\n+pub static INFO: Emoji = Emoji(\"\ud83d\udc81\u200d \", \"\");\n pub static MICROSCOPE: Emoji = Emoji(\"\ud83d\udd2c \", \"\");\n-pub static CRAB: Emoji = Emoji(\"\ud83e\udd80 \", \"\");\n+pub static SHEEP: Emoji = Emoji(\"\ud83d\udc11 \", \"\");\n pub static SLEUTH: Emoji = Emoji(\"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f\", \"\");\n+pub static SPARKLES: Emoji = Emoji(\"\u2728  \", \"\");\n pub static SWIRL: Emoji = Emoji(\"\ud83c\udf00 \", \"\");\n-pub static CONSTRUCTION: Emoji = Emoji(\"\ud83d\udea7 \", \"\");\n pub static UP: Emoji = Emoji(\"\ud83c\udd99 \", \"\");\n-pub static SHEEP: Emoji = Emoji(\"\ud83d\udc11 \", \"\");\n+pub static WARN: Emoji = Emoji(\"\u26d4 \", \"\");\n pub static WAVING: Emoji = Emoji(\"\ud83d\udc4b \", \"\");\n-pub static SNAIL: Emoji = Emoji(\"\ud83d\udc0c \", \"\");\n-pub static INBOX: Emoji = Emoji(\"\ud83d\udce5 \", \"\");\n+pub static WORKER: Emoji = Emoji(\"\ud83d\udc77 \", \"\");\ndiff --git /dev/null b/src/terminal/message.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/terminal/message.rs\n@@ -0,0 +1,34 @@\n+use super::emoji;\n+use console::Emoji;\n+\n+fn message(label: Emoji, msg: &str) {\n+    println!(\"{0} {1} {0}\", label, msg);\n+}\n+\n+pub fn info(msg: &str) {\n+    message(emoji::INFO, msg);\n+}\n+\n+pub fn success(msg: &str) {\n+    message(emoji::SPARKLES, msg);\n+}\n+\n+pub fn warn(msg: &str) {\n+    message(emoji::WARN, msg);\n+}\n+\n+pub fn user_error(msg: &str) {\n+    message(emoji::EYES, msg);\n+}\n+\n+pub fn service_error(msg: &str) {\n+    message(emoji::FACEPALM, msg);\n+}\n+\n+pub fn working(msg: &str) {\n+    message(emoji::SWIRL, msg);\n+}\n+\n+pub fn preview(msg: &str) {\n+    message(emoji::WORKER, msg);\n+}\ndiff --git /dev/null b/src/terminal/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/terminal/mod.rs\n@@ -0,0 +1,2 @@\n+pub mod emoji;\n+pub mod message;\n",
        "test_patch": "diff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -254,7 +255,7 @@ mod tests {\n     fn cleanup(name: String) {\n         let current_dir = env::current_dir().unwrap();\n         let path = Path::new(&current_dir).join(name);\n-        println!(\"p: {:?}\", path);\n+        message::info(&format!(\"p: {:?}\", path));\n         fs::remove_dir_all(path).unwrap();\n     }\n }\n",
        "problem_statement": "Standardize terminal messaging output function\nRather than calling `println!`, it would be nice to call something like `message.success` with some parameters that standardize the formatting of the output for e.g. `success`, `info`, `error`, etc.\n",
        "hints_text": "reading through the code base, we have a wide variety of ways we print to the terminal; the macros in use include:\r\n    * print!\r\n    * println!\r\n    * failure::bail!\r\n    * panic!\r\n    * info!\r\n",
        "created_at": "2019-06-21T11:23:48Z",
        "version": "1.0"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 258,
        "instance_id": "cloudflare__wrangler-legacy-258",
        "issue_numbers": [
            "254"
        ],
        "base_commit": "c1a98080e4d091a4d16f68913d1bc8430316a82b",
        "patch": "diff --git /dev/null b/.rusty-hook.toml\nnew file mode 100644\n--- /dev/null\n+++ b/.rusty-hook.toml\n@@ -0,0 +1,5 @@\n+[hooks]\n+pre-push = \"cargo fmt && cargo fmt -- --check && cargo clippy -- -D warnings\"\n+\n+[logging]\n+verbose = true\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -54,8 +54,8 @@ name = \"atty\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termion 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termion 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -66,14 +66,14 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.22\"\n+version = \"0.3.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"backtrace-sys 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-demangle 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -82,7 +82,7 @@ version = \"0.1.28\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -90,7 +90,7 @@ name = \"base64\"\n version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -112,7 +112,7 @@ dependencies = [\n \n [[package]]\n name = \"bitflags\"\n-version = \"1.0.4\"\n+version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -131,7 +131,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"byteorder\"\n-version = \"1.3.1\"\n+version = \"1.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -139,7 +139,7 @@ name = \"bytes\"\n version = \"0.4.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"either 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -150,7 +150,7 @@ version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -159,7 +159,7 @@ version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -172,6 +172,14 @@ name = \"cfg-if\"\n version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"ci_info\"\n+version = \"0.7.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"envmnt 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"clap\"\n version = \"2.33.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -179,7 +187,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -193,7 +201,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -202,7 +210,7 @@ name = \"cloudabi\"\n version = \"0.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -213,7 +221,7 @@ dependencies = [\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rust-ini 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -222,16 +230,16 @@ dependencies = [\n \n [[package]]\n name = \"console\"\n-version = \"0.7.5\"\n+version = \"0.7.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clicolors-control 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"encode_unicode 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -261,7 +269,7 @@ dependencies = [\n  \"idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"publicsuffix 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"try_from 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -274,7 +282,7 @@ version = \"0.6.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -344,7 +352,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"curl-sys 0.4.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"schannel 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -358,7 +366,7 @@ version = \"0.4.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -376,7 +384,7 @@ name = \"dirs\"\n version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_users 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -412,8 +420,16 @@ dependencies = [\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"humantime 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"envmnt\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -421,7 +437,7 @@ name = \"error-chain\"\n version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -432,7 +448,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -441,7 +457,7 @@ name = \"failure\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -452,7 +468,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -462,7 +478,7 @@ version = \"0.2.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -473,7 +489,7 @@ version = \"1.0.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miniz-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miniz_oxide_c_api 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -501,7 +517,7 @@ name = \"fs2\"\n version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -520,7 +536,7 @@ name = \"fuchsia-zircon\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -540,15 +556,23 @@ version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"futures 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"getopts\"\n+version = \"0.2.19\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"h2\"\n-version = \"0.1.20\"\n+version = \"0.1.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"futures 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -556,7 +580,7 @@ dependencies = [\n  \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"string 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -601,13 +625,13 @@ dependencies = [\n \n [[package]]\n name = \"hyper\"\n-version = \"0.12.29\"\n+version = \"0.12.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"futures 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"futures-cpupool 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"h2 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"h2 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"http 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"http-body 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"httparse 1.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -617,7 +641,7 @@ dependencies = [\n  \"net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-buf 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-executor 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -635,7 +659,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"futures 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper 0.12.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hyper 0.12.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -660,7 +684,7 @@ name = \"iovec\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -698,16 +722,16 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.55\"\n+version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libflate\"\n-version = \"0.1.22\"\n+version = \"0.1.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"adler32 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -717,7 +741,7 @@ version = \"1.0.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -801,7 +825,7 @@ version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -819,20 +843,20 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crc 1.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miniz_oxide 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"mio\"\n-version = \"0.6.17\"\n+version = \"0.6.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -857,7 +881,7 @@ version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl 0.10.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -874,7 +898,7 @@ version = \"0.2.33\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -910,10 +934,10 @@ dependencies = [\n \n [[package]]\n name = \"num_cpus\"\n-version = \"1.10.0\"\n+version = \"1.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -931,11 +955,11 @@ name = \"openssl\"\n version = \"0.10.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -946,7 +970,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"openssl-src\"\n-version = \"111.2.1+1.1.1b\"\n+version = \"111.3.0+1.1.1c\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -959,8 +983,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-src 111.2.1+1.1.1b (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-src 111.3.0+1.1.1c (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -997,10 +1021,10 @@ name = \"parking_lot_core\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1011,11 +1035,11 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1108,7 +1132,7 @@ dependencies = [\n  \"error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1131,7 +1155,7 @@ version = \"0.6.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1186,7 +1210,7 @@ name = \"rand_jitter\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1198,7 +1222,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1255,19 +1279,19 @@ dependencies = [\n \n [[package]]\n name = \"regex\"\n-version = \"1.1.6\"\n+version = \"1.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"aho-corasick 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex-syntax 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"utf8-ranges 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.6.6\"\n+version = \"0.6.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ucd-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1275,7 +1299,7 @@ dependencies = [\n \n [[package]]\n name = \"remove_dir_all\"\n-version = \"0.5.1\"\n+version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1294,17 +1318,17 @@ dependencies = [\n  \"flate2 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"futures 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"http 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper 0.12.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hyper 0.12.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hyper-tls 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mime 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mime_guess 2.0.0-alpha.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_urlencoded 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-executor 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-threadpool 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1320,7 +1344,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-demangle\"\n-version = \"0.1.14\"\n+version = \"0.1.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1331,6 +1355,16 @@ dependencies = [\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rusty-hook\"\n+version = \"0.8.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"ci_info 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"ryu\"\n version = \"0.2.8\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1367,7 +1401,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"core-foundation 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"security-framework-sys 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1399,10 +1433,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.91\"\n+version = \"1.0.92\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde_derive 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1413,18 +1447,18 @@ dependencies = [\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"linked-hash-map 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.91\"\n+version = \"1.0.92\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1434,7 +1468,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ryu 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1452,7 +1486,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1468,7 +1502,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"smallvec\"\n-version = \"0.6.9\"\n+version = \"0.6.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1477,7 +1511,7 @@ version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1489,8 +1523,11 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"string\"\n-version = \"0.1.3\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"strsim\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1499,7 +1536,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"syn\"\n-version = \"0.15.34\"\n+version = \"0.15.36\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1514,7 +1551,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1524,7 +1561,7 @@ version = \"0.4.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"filetime 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"xattr 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1535,16 +1572,16 @@ version = \"3.0.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"termcolor\"\n-version = \"1.0.4\"\n+version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"wincolor 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1552,10 +1589,10 @@ dependencies = [\n \n [[package]]\n name = \"termion\"\n-version = \"1.5.2\"\n+version = \"1.5.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"numtoa 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1566,7 +1603,7 @@ name = \"termios\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1590,20 +1627,20 @@ name = \"time\"\n version = \"0.1.42\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"tokio\"\n-version = \"0.1.20\"\n+version = \"0.1.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"futures 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio 0.6.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-current-thread 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-executor 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1611,7 +1648,7 @@ dependencies = [\n  \"tokio-tcp 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-threadpool 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-timer 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-trace-core 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio-trace-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1661,18 +1698,18 @@ dependencies = [\n  \"futures 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio 0.6.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-executor 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-sync 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio-sync 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"tokio-sync\"\n-version = \"0.1.5\"\n+version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1687,7 +1724,7 @@ dependencies = [\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"futures 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio 0.6.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-reactor 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1702,7 +1739,7 @@ dependencies = [\n  \"crossbeam-utils 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"futures 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-executor 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1721,7 +1758,7 @@ dependencies = [\n \n [[package]]\n name = \"tokio-trace-core\"\n-version = \"0.1.0\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1732,7 +1769,7 @@ name = \"toml\"\n version = \"0.4.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1740,7 +1777,7 @@ name = \"toml\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1795,7 +1832,7 @@ name = \"unicode-normalization\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1820,7 +1857,7 @@ dependencies = [\n \n [[package]]\n name = \"utf8-ranges\"\n-version = \"1.0.2\"\n+version = \"1.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1862,7 +1899,7 @@ version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1921,7 +1958,7 @@ dependencies = [\n  \"binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"console 0.7.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"console 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1934,7 +1971,8 @@ dependencies = [\n  \"openssl 0.10.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"reqwest 0.9.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rusty-hook 0.8.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1955,7 +1993,7 @@ name = \"xattr\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1973,7 +2011,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bzip2 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libflate 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libflate 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"podio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1987,24 +2025,25 @@ dependencies = [\n \"checksum assert_cmd 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2dc477793bd82ec39799b6f6b3df64938532fdf2ab0d49ef817eac65856a5a1e\"\n \"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n \"checksum autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e49efa51329a5fd37e7c79db4621af617cd4e3e5bc224939808d076077077bf\"\n-\"checksum backtrace 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"85018615620f196a840caffced2b558e56abea3d48b9dbc0b9827accf86b3926\"\n+\"checksum backtrace 0.3.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ada4c783bb7e7443c14e0480f429ae2cc99da95065aeab7ee1b81ada0419404f\"\n \"checksum backtrace-sys 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"797c830ac25ccc92a7f8a7b9862bde440715531514594a6154e3d4a54dd769b6\"\n \"checksum base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e\"\n \"checksum binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\" = \"a81dda17f2dbba8271cf61f2ea3e48e3da8aef31665731bce48818cc07863f06\"\n-\"checksum bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"228047a76f468627ca71776ecdebd732a3423081fcf5125585bcd7c49886ce12\"\n+\"checksum bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d155346769a6855b86399e9bc3814ab343cd3d62c7e985113d46a0ec3c281fd\"\n \"checksum blake2-rfc 0.2.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d6d530bdd2d52966a6d03b7a964add7ae1a288d25214066fd4b600f0f796400\"\n \"checksum build_const 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39092a32794787acd8525ee150305ff051b0aa6cc2abaf193924f5ab05425f39\"\n-\"checksum byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a019b10a2a7cdeb292db131fc8113e57ea2a908f6e7894b0c3c671893b65dbeb\"\n+\"checksum byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7c3dd8985a7111efc5c80b44e23ecdd8c007de8ade3b96595387e812b957cf5\"\n \"checksum bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"206fdffcfa2df7cbe15601ef46c813fce0965eb3286db6b56c583b814b51c81c\"\n \"checksum bzip2 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42b7c3cbf0fa9c1b82308d57191728ca0256cb821220f4e2fd410a72ade26e3b\"\n \"checksum bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6584aa36f5ad4c9247f5323b0a42f37802b37a836f0ad87084d7a33961abe25f\"\n \"checksum cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39f75544d7bbaf57560d2168f28fd649ff9c76153874db88bdbdfd839b1a7e7d\"\n \"checksum cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b486ce3ccf7ffd79fdeb678eac06a9e6c09fc88d33836340becb8fffe87c5e33\"\n+\"checksum ci_info 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"67392f639e5ab492db3c222a46375e5b73117cd888baf0baa9c59ccb6b7fc306\"\n \"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n \"checksum clicolors-control 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73abfd4c73d003a674ce5d2933fca6ce6c42480ea84a5ffe0a2dc39ed56300f9\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n \"checksum config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9107d78ed62b3fa5a86e7d18e647abed48cfd8f8fab6c72f4cdb982d196f7e6\"\n-\"checksum console 0.7.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2bf3720d3f3fc30b721ef1ae54e13af3264af4af39dc476a8de56a6ee1e2184b\"\n+\"checksum console 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b11432ec626c0a221d0ff3914ea6887de61a12d89a814a4f1c49882fc3151a11\"\n \"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n \"checksum cookie 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"888604f00b3db336d2af898ec3c1d5d0ddf5e6d462220f2ededc33a87ac4bbd5\"\n \"checksum cookie_store 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46750b3f362965f197996c4448e4a0935e791bf7d6631bfce9ee0af3d24c919c\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2025,6 +2064,7 @@ dependencies = [\n \"checksum encode_unicode 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90b2c9496c001e8cb61827acdefad780795c42264c137744cae6f7d9e3450abd\"\n \"checksum encoding_rs 0.8.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4155785c79f2f6701f185eb2e6b4caf0555ec03477cb4c70db67b465311620ed\"\n \"checksum env_logger 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b61fa891024a945da30a9581546e8cfaf5602c7b3f4c137a2805cf388f92075a\"\n+\"checksum envmnt 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4bb00f062cd05ad863c6d46b6c672b1c29113c7f15a59bbbf7ea594eec0f38b\"\n \"checksum error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ab49e9dcb602294bc42f9a7dfc9bc6e936fca4418ea300dbfb84fe16de0b7d9\"\n \"checksum escargot 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ceb9adbf9874d5d028b5e4c5739d22b71988252b25c9c98fe7cf9738bee84597\"\n \"checksum failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"795bd83d3abeb9220f257e597aa0080a508b27533824adf336529648f6abf7e2\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2041,13 +2081,14 @@ dependencies = [\n \"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n \"checksum futures 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a2037ec1c6c1c4f79557762eab1f7eae1f64f6cb418ace90fae88f0942b60139\"\n \"checksum futures-cpupool 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab90cde24b3319636588d0c35fe03b1333857621051837ed769faefb4c2162e4\"\n-\"checksum h2 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2b53def7bb0253af7718036fe9338c15defd209136819464384f3a553e07481b\"\n+\"checksum getopts 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72327b15c228bfe31f1390f93dd5e9279587f0463836393c9df719ce62a3e450\"\n+\"checksum h2 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e42e3daed5a7e17b12a0c23b5b2fbff23a925a570938ebee4baca1a9a1a2240\"\n \"checksum hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n \"checksum http 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eed324f0f0daf6ec10c474f150505af2c143f251722bf9dbd1261bd1f2ee2c1a\"\n \"checksum http-body 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6741c859c1b2463a423a1dbce98d418e6c3c3fc720fb0d45528657320920292d\"\n \"checksum httparse 1.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8734b0cfd3bc3e101ec59100e101c2eecd19282202e87808b3037b442777a83\"\n \"checksum humantime 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ca7e5f2e110db35f93b837c81797f3714500b81d517bf20c431b16d3ca4f114\"\n-\"checksum hyper 0.12.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2cd6adf83b3347d36e271f030621a8cf95fd1fd0760546b9fc5a24a0f1447c7\"\n+\"checksum hyper 0.12.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40e7692b2009a70b1e9b362284add4d8b75880fefddb4acaa5e67194e843f219\"\n \"checksum hyper-tls 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a800d6aa50af4b5850b2b0f659625ce9504df908e9733b635720483be26174f\"\n \"checksum idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e\"\n \"checksum indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e81a7c05f79578dbc15793d8b619db9ba32b4577003ef3af1a91c416798c58d\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2057,8 +2098,8 @@ dependencies = [\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n \"checksum lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc5729f27f159ddd61f4df6228e827e86643d4d3e7c32183cb30a1c08f604a14\"\n-\"checksum libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42914d39aad277d9e176efbdad68acb1d5443ab65afe0e0e4f0d49352a950880\"\n-\"checksum libflate 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c52384aeb22d0ce82a10d8ddf35f7fb4717d1b23eac5b94cd38d2050fb53766a\"\n+\"checksum libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6281b86796ba5e4366000be6e9e18bf35580adf9e63fbe2294aadb587613a319\"\n+\"checksum libflate 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76912aa0196b6f0e06d9c43ee877be45369157c06172ade12fe20ac3ee5ffa15\"\n \"checksum libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2eb5e43362e38e2bca2fd5f5134c4d4564a23a5c28e9b95411652021a8675ebe\"\n \"checksum linked-hash-map 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d262045c5b87c0861b3f004610afd0e2c851e2908d08b6c870cbb9d5f494ecd\"\n \"checksum linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2073,7 +2114,7 @@ dependencies = [\n \"checksum miniz-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e9e3ae51cea1576ceba0dde3d484d30e6e5b86dee0b2d412fe3a16a15c98202\"\n \"checksum miniz_oxide 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c468f2369f07d651a5d0bb2c9079f8488a66d5466efe42d0c5c6466edcb7f71e\"\n \"checksum miniz_oxide_c_api 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b7fe927a42e3807ef71defb191dc87d4e24479b221e67015fe38ae2b7b447bab\"\n-\"checksum mio 0.6.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"049ba5ca2b63e837adeee724aa9e36b408ed593529dcc802aa96ca14bd329bdf\"\n+\"checksum mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"83f51996a3ed004ef184e16818edc51fadffe8e7ca68be67f9dee67d84d0ff23\"\n \"checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\n \"checksum native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b2df1a4c22fd44a62147fd8f13dd0f95c9d8ca7b2610299b2a2f9cf8964274e\"\n \"checksum net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42550d9fb7b6684a6d404d9fa7250c2eb2646df731d1c06afc06dcee9e1bcf88\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2081,12 +2122,12 @@ dependencies = [\n \"checksum nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2ad2a91a8e869eeb30b9cb3119ae87773a8f4ae617f41b1eb9c154b2905f7bd6\"\n \"checksum num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92e5113e9fd4cc14ded8e499429f396a20f98c772a47cc8622a736e1ec843c31\"\n \"checksum num-traits 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ba9a427cfca2be13aa6f6403b0b7e7368fe982bfa16fccc450ce74c46cd9b32\"\n-\"checksum num_cpus 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1a23f0ed30a54abaa0c7e83b1d2d87ada7c3c23078d1d87815af3e3b6385fbba\"\n+\"checksum num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcef43580c035376c0705c42792c294b66974abbfd2789b511784023f71f3273\"\n \"checksum number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17b02fc0ff9a9e4b35b3342880f48e896ebf69f2967921fe8646bf5b7125956a\"\n \"checksum numtoa 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8f8bdf33df195859076e54ab11ee78a1b208382d3a26ec40d142ffc1ecc49ef\"\n \"checksum openssl 0.10.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97c140cbb82f3b3468193dd14c1b88def39f341f68257f8a7fe8ed9ed3f628a5\"\n \"checksum openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\n-\"checksum openssl-src 111.2.1+1.1.1b (registry+https://github.com/rust-lang/crates.io-index)\" = \"a42e4a28c5a3da4b0df51795aee275b812164c43a690caa871bfa71bf0d52439\"\n+\"checksum openssl-src 111.3.0+1.1.1c (registry+https://github.com/rust-lang/crates.io-index)\" = \"53ed5f31d294bdf5f7a4ba0a206c2754b0f60e9a63b7e3076babc5317873c797\"\n \"checksum openssl-sys 0.9.47 (registry+https://github.com/rust-lang/crates.io-index)\" = \"75bdd6dbbb4958d38e47a1d2348847ad1eb4dc205dc5d37473ae504391865acc\"\n \"checksum owning_ref 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49a4b8ea2179e6a2e27411d3bca09ca6dd630821cf6894c6c7c8467a8ee7ef13\"\n \"checksum parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab41b4aed082705d1056416ae4468b6ea99d52599ecf3169b00088d43113e337\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2185,7 +2227,7 @@ dependencies = [\n \"checksum unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"882386231c45df4700b275c7ff55b6f3698780a650026380e72dabe76fa46526\"\n \"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n \"checksum url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd4e7c0d531266369519a4aa4f399d748bd37043b00bde1e4ff1f60a120b355a\"\n-\"checksum utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796f7e48bef87609f7ade7e06495a87d5cd06c7866e6a5cbfceffc558a243737\"\n+\"checksum utf8-ranges 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d50aa7650df78abf942826607c62468ce18d9019673d4a2ebe1865dbb96ffde\"\n \"checksum uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90dbc611eb48397705a6b0f6e917da23ae517e4d127123d2cf7674206627d32a\"\n \"checksum vcpkg 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"def296d3eb3b12371b2c7d0e83bfe1403e4db2d7a0bba324a12b21c4ee13143d\"\n \"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -36,6 +36,7 @@ lazy_static = \"1.3.0\"\n [dev-dependencies]\n assert_cmd = \"0.11.1\"\n fs_extra = \"1.1.0\"\n+rusty-hook = \"0.8.4\"\n \n [features]\n vendored-openssl = ['openssl/vendored']\n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2121,13 +2162,14 @@ dependencies = [\n \"checksum redox_syscall 0.1.54 (registry+https://github.com/rust-lang/crates.io-index)\" = \"12229c14a0f65c4f1cb046a3b52047cdd9da1f4b30f8a39c5063c8bae515e252\"\n \"checksum redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e891cfe48e9100a70a3b6eb652fef28920c117d366339687bd5576160db0f76\"\n \"checksum redox_users 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fe5204c3a17e97dde73f285d49be585df59ed84b50a872baf416e73b62c3828\"\n-\"checksum regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8f0a0bcab2fd7d1d7c54fa9eae6f43eddeb9ce2e7352f8518a814a4f65d60c58\"\n-\"checksum regex-syntax 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcfd8681eebe297b81d98498869d4aae052137651ad7b96822f09ceb690d0a96\"\n-\"checksum remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3488ba1b9a2084d38645c4c08276a1752dcbf2c7130d74f1569681ad5d2799c5\"\n+\"checksum regex 1.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b2f0808e7d7e4fb1cb07feb6ff2f4bc827938f24f8c2e6a3beb7370af544bdd\"\n+\"checksum regex-syntax 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d76410686f9e3a17f06128962e0ecc5755870bb890c34820c7af7f1db2e1d48\"\n+\"checksum remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e\"\n \"checksum reqwest 0.9.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00eb63f212df0e358b427f0f40aa13aaea010b470be642ad422bcbca2feff2e4\"\n \"checksum rust-ini 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e52c148ef37f8c375d49d5a73aa70713125b7f19095948a923f80afdeb22ec2\"\n-\"checksum rustc-demangle 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ccc78bfd5acd7bf3e89cffcf899e5cb1a52d6fafa8dec2739ad70c9577a57288\"\n+\"checksum rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7f4dccf6f4891ebcc0c39f9b6eb1a83b9bf5d747cb439ec6fba4f3b977038af\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n+\"checksum rusty-hook 0.8.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8713a6fd85cfaf48475b7f09f036489ffa4cb7359ff8371d7b3de45b78b05faa\"\n \"checksum ryu 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b96a9549dc8d48f2c283938303c4b5a77aa29bfbc5b54b084fb1630408899a8f\"\n \"checksum schannel 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f6abf258d99c3c1c5c2131d99d064e94b7b3dd5f416483057f308fea253339\"\n \"checksum scoped_threadpool 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d51f5df5af43ab3f1360b429fa5e0152ac5ce8c0bd6485cae490332e96846a8\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2138,40 +2180,40 @@ dependencies = [\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \"checksum serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9dad3f759919b92c3068c696c15c3d17238234498bbdcc80f2c469606f948ac8\"\n-\"checksum serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a72e9b96fa45ce22a4bc23da3858dfccfd60acd28a25bcd328a98fdd6bea43fd\"\n+\"checksum serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\" = \"32746bf0f26eab52f06af0d0aa1984f641341d06d8d673c693871da2d188c9be\"\n \"checksum serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b833c5ad67d52ced5f5938b2980f32a9c1c5ef047f0b4fb3127e7a423c76153\"\n-\"checksum serde_derive 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\" = \"101b495b109a3e3ca8c4cbe44cf62391527cdfb6ba15821c5ce80bcd5ea23f9f\"\n+\"checksum serde_derive 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46a3223d0c9ba936b61c0d2e3e559e3217dbfb8d65d06d26e8b3c25de38bae3e\"\n \"checksum serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5a23aa71d4a4d43fdbfaac00eff68ba8a06a51759a89ac3304323e800c4dd40d\"\n \"checksum serde_test 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"110b3dbdf8607ec493c22d5d947753282f3bae73c0f56d322af1e8c78e4c23d5\"\n \"checksum serde_urlencoded 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"642dd69105886af2efd227f75a520ec9b44a820d65bc133a9131f7d229fd165a\"\n \"checksum siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b8de496cf83d4ed58b6be86c3a275b8602f6ffe98d3024a869e124147a9a3ac\"\n \"checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n-\"checksum smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4488ae950c49d403731982257768f48fada354a5203fe81f9bb6f43ca9002be\"\n+\"checksum smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab606a9c5e214920bb66c458cd7be8ef094f813f20fe77a54cc7dbfff220d4b7\"\n \"checksum socket2 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e626972d3593207547f14bf5fc9efa4d0e7283deb73fef1dff313dae9ab8878\"\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n-\"checksum string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b639411d0b9c738748b5397d5ceba08e648f4f1992231aa859af1a017f31f60b\"\n+\"checksum string 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d0bbfb8937e38e34c3444ff00afb28b0811d9554f15c5ad64d12b0308d1d1995\"\n \"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n-\"checksum syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1393e4a97a19c01e900df2aec855a29f71cf02c402e2f443b8d2747c25c5dbe\"\n+\"checksum syn 0.15.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8b4f551a91e2e3848aeef8751d0d4eec9489b6474c720fd4c55958d8d31a430c\"\n \"checksum synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02353edf96d6e4dc81aea2d8490a7e9db177bf8acb0e951c24940bf866cb313f\"\n \"checksum tar 0.4.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3196bfbffbba3e57481b6ea32249fbaf590396a52505a2615adbb79d9d826d3\"\n \"checksum tempfile 3.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7dc4738f2e68ed2855de5ac9cdbe05c9216773ecde4739b2f095002ab03a13ef\"\n-\"checksum termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4096add70612622289f2fdcdbd5086dc81c1e2675e6ae58d6c4f62a16c6d7f2f\"\n-\"checksum termion 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dde0593aeb8d47accea5392b39350015b5eccb12c0d98044d856983d89548dea\"\n+\"checksum termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"96d6098003bde162e4277c70665bd87c326f5a0c3f3fbfb285787fa482d54e6e\"\n+\"checksum termion 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a8fb22f7cde82c8220e5aeacb3258ed7ce996142c77cba193f203515e26c330\"\n \"checksum termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n \"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n \"checksum time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f\"\n-\"checksum tokio 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94a1f9396aec29d31bb16c24d155cfa144d1af91c40740125db3131bdaf76da8\"\n+\"checksum tokio 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ec2ffcf4bcfc641413fa0f1427bf8f91dfc78f56a6559cbf50e04837ae442a87\"\n \"checksum tokio-buf 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8fb220f46c53859a4b7ec083e41dec9778ff0b1851c0942b211edb89e0ccdc46\"\n \"checksum tokio-current-thread 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d16217cad7f1b840c5a97dfb3c43b0c871fef423a6e8d2118c604e843662a443\"\n \"checksum tokio-executor 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"83ea44c6c0773cc034771693711c35c677b4b5a4b21b9e7071704c54de7d555e\"\n \"checksum tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5090db468dad16e1a7a54c8c67280c5e4b544f3d3e018f0b913b400261f85926\"\n \"checksum tokio-reactor 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6af16bfac7e112bea8b0442542161bfc41cbfa4466b580bdda7d18cb88b911ce\"\n-\"checksum tokio-sync 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5b2f843ffdf8d6e1f90bddd48da43f99ab071660cd92b7ec560ef3cdfd7a409a\"\n+\"checksum tokio-sync 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2162248ff317e2bc713b261f242b69dbb838b85248ed20bb21df56d60ea4cae7\"\n \"checksum tokio-tcp 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d14b10654be682ac43efee27401d792507e30fd8d26389e1da3b185de2e4119\"\n \"checksum tokio-threadpool 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72558af20be886ea124595ea0f806dd5703b8958e4705429dd58b3d8231f72f2\"\n \"checksum tokio-timer 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2106812d500ed25a4f38235b9cae8f78a09edf43203e16e59c3b769a342a60e\"\n-\"checksum tokio-trace-core 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"350c9edade9830dc185ae48ba45667a445ab59f6167ef6d0254ec9d2430d9dd3\"\n+\"checksum tokio-trace-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9c8a256d6956f7cb5e2bdfe8b1e8022f1a09206c6c2b1ba00f3b746b260c613\"\n \"checksum toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"758664fc71a3a69038656bee8b6be6477d2a6c315a6b81f7081f591bffa4111f\"\n \"checksum toml 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8c96d7873fa7ef8bdeb3a9cda3ac48389b4154f32b9803b4bc26220b677b039\"\n \"checksum treeline 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7f741b240f1a48843f9b8e0444fb55fb2a4ff67293b50a9179dfd5ea67f8d41\"\n",
        "problem_statement": "Add `cargo fmt` and `cargo clippy` to ./git/hooks/pre-push\nShould prevent a lot of CI issues\n",
        "hints_text": "",
        "created_at": "2019-06-17T15:08:39Z",
        "version": "1.0"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 253,
        "instance_id": "cloudflare__wrangler-legacy-253",
        "issue_numbers": [
            "246"
        ],
        "base_commit": "126a80bd37660bdfda56d41beefc6ed887e4c463",
        "patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -142,6 +142,8 @@ There are two types of configuration that `wrangler` uses: global user and per p\n         - `*example.com/*`\n         - `http://example.com/hello`\n         This key is optional if you are using a workers.dev subdomain and is only required for `publish --release`.\n+    - `webpack_config`: This is the path to the webpack configuration file for your worker. This is optional and\n+        defaults to `webpack.config.js`\n \n ## \u2693 Installation\n \ndiff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -1,6 +1,6 @@\n pub mod wranglerjs;\n \n-use crate::settings::project::ProjectType;\n+use crate::settings::project::{Project, ProjectType};\n use crate::{commands, install};\n use binary_install::Cache;\n use std::env;\ndiff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -9,7 +9,14 @@ use std::process::Command;\n \n use crate::emoji;\n \n-pub fn build(cache: &Cache, project_type: &ProjectType) -> Result<(), failure::Error> {\n+pub fn build(cache: &Cache, project: &Project) -> Result<(), failure::Error> {\n+    let project_type = &project.project_type;\n+    let webpack_config_path = PathBuf::from(\n+        &project\n+            .webpack_config\n+            .clone()\n+            .unwrap_or_else(|| \"webpack.config.js\".to_string()),\n+    );\n     match project_type {\n         ProjectType::JavaScript => {\n             println!(\"\u26a0\ufe0f JavaScript project found. Skipping unnecessary build!\")\ndiff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -37,8 +44,13 @@ pub fn build(cache: &Cache, project_type: &ProjectType) -> Result<(), failure::E\n             wranglerjs::run_npm_install(current_dir).expect(\"could not run `npm install`\");\n \n             let bundle = wranglerjs::Bundle::new();\n-            let wranglerjs_output = wranglerjs::run_build(wranglerjs_path, wasm_pack_path, &bundle)\n-                .expect(\"could not run wranglerjs\");\n+            let wranglerjs_output = wranglerjs::run_build(\n+                wranglerjs_path,\n+                wasm_pack_path,\n+                webpack_config_path,\n+                &bundle,\n+            )\n+            .expect(\"could not run wranglerjs\");\n \n             if wranglerjs_output.has_errors() {\n                 println!(\"{}\", wranglerjs_output.get_errors());\ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -4,7 +4,7 @@ use std::env;\n use std::fs;\n use std::fs::File;\n use std::io::prelude::*;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n \n use log::info;\n \ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -78,8 +78,8 @@ impl Bundle {\n         Path::new(&self.wasm_path()).exists()\n     }\n \n-    pub fn has_webpack_config(&self) -> bool {\n-        Path::new(\"webpack.config.js\").exists()\n+    pub fn has_webpack_config(&self, webpack_config_path: &PathBuf) -> bool {\n+        webpack_config_path.exists()\n     }\n \n     pub fn get_wasm_binding(&self) -> String {\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -34,6 +34,7 @@ fn random_chars(n: usize) -> String {\n pub fn run_build(\n     wranglerjs_path: PathBuf,\n     wasm_pack_path: PathBuf,\n+    webpack_config_path: PathBuf,\n     bundle: &Bundle,\n ) -> Result<WranglerjsOutput, failure::Error> {\n     let node = which::which(\"node\").unwrap();\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -55,7 +56,7 @@ pub fn run_build(\n     // if {webpack.config.js} is not present, we infer the entry based on the\n     // {package.json} file and pass it to {wranglerjs}.\n     // https://github.com/cloudflare/wrangler/issues/98\n-    if !bundle.has_webpack_config() {\n+    if !bundle.has_webpack_config(&webpack_config_path) {\n         let package = Package::new(\"./\")?;\n         let current_dir = env::current_dir()?;\n         let package_main = current_dir\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -65,6 +66,11 @@ pub fn run_build(\n             .to_string();\n         command.arg(\"--no-webpack-config=1\");\n         command.arg(format!(\"--use-entry={}\", package_main));\n+    } else {\n+        command.arg(format!(\n+            \"--webpack-config={}\",\n+            &webpack_config_path.to_str().unwrap().to_string()\n+        ));\n     }\n \n     info!(\"Running {:?}\", command);\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -202,7 +202,7 @@ fn main() -> Result<(), failure::Error> {\n         let project = settings::project::Project::new()?;\n \n         if matches.subcommand_matches(\"build\").is_some() {\n-            commands::build(&cache, &project.project_type)?;\n+            commands::build(&cache, &project)?;\n         }\n \n         if let Some(matches) = matches.subcommand_matches(\"preview\") {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -213,7 +213,7 @@ fn main() -> Result<(), failure::Error> {\n                 None => None,\n             };\n \n-            commands::build(&cache, &project.project_type)?;\n+            commands::build(&cache, &project)?;\n             commands::preview(method, body)?;\n         }\n     } else if matches.subcommand_matches(\"whoami\").is_some() {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -238,7 +238,7 @@ fn main() -> Result<(), failure::Error> {\n                 1 => true,\n                 _ => false,\n             };\n-            commands::build(&cache, &project.project_type)?;\n+            commands::build(&cache, &project)?;\n             commands::publish(&user, &project, release)?;\n         }\n \ndiff --git a/src/settings/project.rs b/src/settings/project.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project.rs\n@@ -16,6 +16,7 @@ pub struct Project {\n     pub project_type: ProjectType,\n     pub zone_id: Option<String>,\n     pub private: Option<bool>,\n+    pub webpack_config: Option<String>,\n     pub account_id: String,\n     pub route: Option<String>,\n     pub routes: Option<HashMap<String, String>>,\ndiff --git a/src/settings/project.rs b/src/settings/project.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project.rs\n@@ -76,6 +77,7 @@ impl Project {\n             route: Some(String::new()),\n             routes: None,\n             kv_namespaces: None,\n+            webpack_config: None,\n         };\n \n         let toml = toml::to_string(&project)?;\ndiff --git a/wranglerjs/index.js b/wranglerjs/index.js\n--- a/wranglerjs/index.js\n+++ b/wranglerjs/index.js\n@@ -25,13 +25,13 @@ let config;\n if (args[\"no-webpack-config\"] === \"1\") {\n   config = { entry: args[\"use-entry\"] };\n } else {\n-  config = require(join(process.cwd(), \"./webpack.config.js\"));\n+  config = require(join(process.cwd(), args[\"webpack-config\"]));\n }\n \n if (Array.isArray(config)) {\n   throw error(\n-    \"multiple webpack configurations is not supported.\\n\"\n-    + \"Please make sure that your webpack configuration exports an Object.\"\n+    \"Multiple webpack configurations are not supported. You can specify a different path for your webpack configuration file in wrangler.toml with the `webpack_config` field\\n\" +\n+      \"Please make sure that your webpack configuration exports an Object.\"\n   );\n }\n \n",
        "test_patch": "diff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -55,6 +55,21 @@ fn it_builds_with_webpack_single_js_use_package_main() {\n     cleanup(fixture);\n }\n \n+#[test]\n+fn it_builds_with_webpack_specify_configs() {\n+    let fixture = \"webpack_specify_config\";\n+    create_temporary_copy(fixture);\n+\n+    settings! {fixture, r#\"\n+        type = \"Webpack\"\n+        webpack_config = \"webpack.worker.js\"\n+    \"#};\n+\n+    build(fixture);\n+    assert!(fixture_out_path(fixture).join(\"script.js\").exists());\n+    cleanup(fixture);\n+}\n+\n #[test]\n fn it_builds_with_webpack_single_js_missing_package_main() {\n     let fixture = \"webpack_single_js_missing_package_main\";\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -80,7 +95,21 @@ fn it_fails_with_multiple_webpack_configs() {\n         type = \"Webpack\"\n     \"#};\n \n-    build_fails_with(fixture, \"multiple webpack configurations is not supported.\");\n+    build_fails_with(fixture, \"Multiple webpack configurations are not supported. You can specify a different path for your webpack configuration file in wrangler.toml with the `webpack_config` field\");\n+    cleanup(fixture);\n+}\n+\n+#[test]\n+fn it_fails_with_multiple_specify_webpack_configs() {\n+    let fixture = \"webpack_multiple_specify_config\";\n+    create_temporary_copy(fixture);\n+\n+    settings! {fixture, r#\"\n+        type = \"Webpack\"\n+        webpack_config = \"webpack.worker.js\"\n+    \"#};\n+\n+    build_fails_with(fixture, \"Multiple webpack configurations are not supported. You can specify a different path for your webpack configuration file in wrangler.toml with the `webpack_config` field\");\n     cleanup(fixture);\n }\n \ndiff --git /dev/null b/tests/webpack_multiple_specify_config/package.json\nnew file mode 100644\n--- /dev/null\n+++ b/tests/webpack_multiple_specify_config/package.json\n@@ -0,0 +1,1 @@\n+{}\n\\ No newline at end of file\ndiff --git /dev/null b/tests/webpack_multiple_specify_config/webpack.worker.js\nnew file mode 100644\n--- /dev/null\n+++ b/tests/webpack_multiple_specify_config/webpack.worker.js\n@@ -0,0 +1,4 @@\n+module.exports = [\n+    { entry: \"./a.js\" },\n+    { entry: \"./b.js\" }\n+  ]\n\\ No newline at end of file\ndiff --git /dev/null b/tests/webpack_specify_config/package.json\nnew file mode 100644\n--- /dev/null\n+++ b/tests/webpack_specify_config/package.json\n@@ -0,0 +1,1 @@\n+{}\ndiff --git /dev/null b/tests/webpack_specify_config/webpack.worker.js\nnew file mode 100644\n--- /dev/null\n+++ b/tests/webpack_specify_config/webpack.worker.js\n@@ -0,0 +1,1 @@\n+module.exports = { entry: \"./index.js\" };\n",
        "problem_statement": "Allow the user to specify an alternative webpack.config.js file\nCame up in the context of #245, a user might want to use a webpack configuration in an alternate location (instead of `webpack.config.js` in cwd).\r\n\r\nThis implies to add a configuration; I'm not sure if we want to use a flag or an entry in the wrangler.toml.\r\n\r\nImplementation detail; our wranglerjs component also supports arguments, it will be a new argument (see `--use-entry` for example).\n",
        "hints_text": "",
        "created_at": "2019-06-14T17:12:14Z",
        "version": "1.0"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 231,
        "instance_id": "cloudflare__wrangler-legacy-231",
        "issue_numbers": [
            "223"
        ],
        "base_commit": "be8286009e5a9569e88e3b6bab3a95f5b92b97ea",
        "patch": "diff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -49,13 +49,11 @@ pub fn run_build(project: &Project) -> Result<(), failure::Error> {\n             .write(&wranglerjs_output)\n             .expect(\"could not write bundle to disk\");\n \n-        let mut msg = format!(\n-            \"Built successfully, script size is {}\",\n-            wranglerjs_output.script_size()\n+        let msg = format!(\n+            \"Built successfully, built project size is {}\",\n+            wranglerjs_output.project_size()\n         );\n-        if bundle.has_wasm() {\n-            msg = format!(\"{} and Wasm size is {}\", msg, wranglerjs_output.wasm_size());\n-        }\n+\n         message::success(&msg);\n         Ok(())\n     } else {\ndiff --git a/src/commands/build/wranglerjs/output.rs b/src/commands/build/wranglerjs/output.rs\n--- a/src/commands/build/wranglerjs/output.rs\n+++ b/src/commands/build/wranglerjs/output.rs\n@@ -1,3 +1,4 @@\n+use crate::terminal::emoji;\n use flate2::write::ZlibEncoder;\n use flate2::Compression;\n use number_prefix::{NumberPrefix, Prefixed, Standalone};\n",
        "test_patch": "diff --git a/src/commands/build/wranglerjs/output.rs b/src/commands/build/wranglerjs/output.rs\n--- a/src/commands/build/wranglerjs/output.rs\n+++ b/src/commands/build/wranglerjs/output.rs\n@@ -24,25 +25,52 @@ impl WranglerjsOutput {\n         self.errors.join(\"\\n\")\n     }\n \n-    pub fn script_size(&self) -> String {\n+    fn project_size_bytes(&self) -> u64 {\n         let mut e = ZlibEncoder::new(Vec::new(), Compression::default());\n+\n+        //approximation of how projects are gzipped\n         e.write_all(&self.script.as_bytes())\n-            .expect(\"could not write buffer\");\n-        let compressed_bytes = e.finish();\n+            .expect(\"could not write script buffer\");\n \n-        match NumberPrefix::decimal(compressed_bytes.unwrap().len() as f64) {\n-            Standalone(bytes) => format!(\"{} bytes\", bytes),\n-            Prefixed(prefix, n) => format!(\"{:.0} {}B\", n, prefix),\n+        if let Some(wasm) = &self.wasm {\n+            e.write_all(wasm.to_owned().as_bytes())\n+                .expect(\"could not write wasm buffer\");\n         }\n+\n+        e.finish().expect(\"failed to compress project\").len() as u64\n     }\n \n-    pub fn wasm_size(&self) -> String {\n-        let size = self.wasm.to_owned().unwrap().len();\n-        match NumberPrefix::decimal(size as f64) {\n+    fn project_size_message(compressed_size: u64) -> String {\n+        const MAX_PROJECT_SIZE: u64 = 1 << 20; // 1 MiB\n+        const WARN_THRESHOLD: u64 = MAX_PROJECT_SIZE - 81_920; //Warn when less than 80 KiB left to grow, ~92% usage\n+\n+        let bytes_left = MAX_PROJECT_SIZE.checked_sub(compressed_size);\n+\n+        let human_size = match NumberPrefix::binary(compressed_size as f64) {\n             Standalone(bytes) => format!(\"{} bytes\", bytes),\n             Prefixed(prefix, n) => format!(\"{:.0} {}B\", n, prefix),\n+        };\n+\n+        let human_leftover = if let Some(bytes_left) = bytes_left {\n+            let msg = match NumberPrefix::binary(bytes_left as f64) {\n+                Standalone(bytes) => format!(\"{} bytes\", bytes),\n+                Prefixed(prefix, n) => format!(\"{:.0} {}B\", n, prefix),\n+            };\n+            Some(msg)\n+        } else {\n+            None\n+        };\n+\n+        match compressed_size {\n+            WARN_THRESHOLD...MAX_PROJECT_SIZE => format!(\"{}. {2} Your built project is {} away from reaching the 1MiB size limit. {2}\", human_size, human_leftover.expect(\"failed to get leftover bytes\"), emoji::WARN),\n+            0...WARN_THRESHOLD => format!(\"{}.\", human_size),\n+            _ => format!(\"{}. {1} Your built project has grown past the 1MiB size limit and may fail to deploy. {1}\", human_size, emoji::WARN)\n         }\n     }\n+\n+    pub fn project_size(&self) -> String {\n+        Self::project_size_message(self.project_size_bytes())\n+    }\n }\n \n #[cfg(test)]\ndiff --git a/src/commands/build/wranglerjs/output.rs b/src/commands/build/wranglerjs/output.rs\n--- a/src/commands/build/wranglerjs/output.rs\n+++ b/src/commands/build/wranglerjs/output.rs\n@@ -50,24 +78,34 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn it_returns_gzip_script_size() {\n+    fn it_warns_over_max_size() {\n+        assert!(WranglerjsOutput::project_size_message(1 << 21).contains(\"grown past\"));\n+    }\n+\n+    #[test]\n+    fn it_warns_near_max_size() {\n+        assert!(WranglerjsOutput::project_size_message((1 << 20) - 4096).contains(\"reaching\"));\n+    }\n+\n+    #[test]\n+    fn it_returns_project_size_with_wasm() {\n         let wranglerjs_output = WranglerjsOutput {\n             errors: vec![],\n-            script: \"aaaa\".to_string(),\n-            wasm: None,\n+            script: \"abcdefg\".to_string(),\n+            wasm: Some(\"123456\".to_string()),\n         };\n \n-        assert_eq!(wranglerjs_output.script_size(), \"12 bytes\");\n+        assert_eq!(wranglerjs_output.project_size_bytes(), 21);\n     }\n \n     #[test]\n-    fn it_returns_wasm_size() {\n+    fn it_returns_project_size_without_wasm() {\n         let wranglerjs_output = WranglerjsOutput {\n             errors: vec![],\n-            script: \"\".to_string(),\n-            wasm: Some(\"abc\".to_string()),\n+            script: \"abcdefg\".to_string(),\n+            wasm: None,\n         };\n \n-        assert_eq!(wranglerjs_output.wasm_size(), \"3 bytes\");\n+        assert_eq!(wranglerjs_output.project_size_bytes(), 15);\n     }\n }\n",
        "problem_statement": "compare size to size limit\nsince https://github.com/cloudflare/wrangler/pull/205 we now print the size of the Webpack build path worker bundles. we should use this number to compare to size limits and send a warning to let the user know their script size is too big and likely to fail. i don't think we should gate folks that have obviously too big of a worker from publishing.. e.g. potentially wrangler publish --force ...\n",
        "hints_text": "",
        "created_at": "2019-06-07T18:35:34Z",
        "version": "1.0"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 542,
        "instance_id": "cloudflare__wrangler-legacy-542",
        "issue_numbers": [
            "524"
        ],
        "base_commit": "f55263d9c7d104f43c275578f148a3d2c6ee042f",
        "patch": "diff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -7,6 +7,46 @@ The `kv` subcommand allows you to store application data in the Cloudflare netwo\n * have a Wrangler project set up with your `account_id` configured in the `wrangler.toml`\n * call commands from within a Wrangler project directory.\n \n+Most `kv` commands require you to specify a namespace. A namespace can be specified in two ways:\n+1. With a `--binding`: \n+    ```sh\n+    $ wrangler kv:key get --binding=KV \"my key\"\n+    ```\n+1. With a `--namespace_id`:\n+    ```sh\n+    $ wrangler kv:key get --namespace-id=06779da6940b431db6e566b4846d64db \"my key\"\n+    ```\n+\n+Most `kv` subcommands allow you to specify an optional `--env`, or environment, variable. This allows you to gate\n+distinct namespaces within their own environments. For example, you could use seperate staging and production\n+namespaces for KV data in your wrangler.toml:\n+```toml\n+type = \"webpack\"\n+name = \"my-worker\"\n+account_id = \"<account id here>\"\n+route = \"staging.example.com/*\"\n+workers_dot_dev = false\n+\n+kv-namespaces = [\n+\t{ binding = \"KV\", id = \"06779da6940b431db6e566b4846d64db\" }\n+]\n+\n+[env.production]\n+route = \"example.com/*\"\n+kv-namespaces = [\n+\t{ binding = \"KV\", id = \"07bc1f3d1f2a4fd8a45a7e026e2681c6\" }\n+]\n+```\n+\n+With the wrangler.toml above, you can specify `--env production` when you want to perform a KV action on\n+the namespace `KV` under `env.production`. For example, with the wrangler.toml above, you can get a value\n+out of a production KV instance with:\n+```sh\n+$ wrangler kv:key get --namespace-id=06779da6940b431db6e566b4846d64db --env=production \"my key\"\n+```\n+\n+To learn more about environments, check out the [environments documentation](./environments.md).\n+\n ## `kv:namespace`\n \n ### `create`\ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -27,10 +67,14 @@ $ wrangler kv:namespace create \"new kv namespace\"\n ### `delete`\n Deletes a given namespace.\n \n+Requires `--binding` or `--namespace-id` argument.\n+\n+Takes an optional `--env` [environment](./environments.md) argument.\n+\n #### Usage\n \n ```sh\n-$ wrangler kv:namespace delete f7b02e7fc70443149ac906dd81ec1791\n+$ wrangler kv:namespace delete --binding=MY_NAMESPACE\n Are you sure you want to delete namespace f7b02e7fc70443149ac906dd81ec1791? [y/n]\n yes\n \ud83c\udf00  Deleting namespace f7b02e7fc70443149ac906dd81ec1791\ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -40,11 +84,15 @@ yes\n ### `rename`\n Renames a given namespace.\n \n+Requires `--binding` or `--namespace-id` argument.\n+\n+Takes an optional `--env` [environment](./environments.md) argument.\n+\n #### Usage\n \n ```sh\n-$ wrangler kv:namespace rename f7b02e7fc70443149ac906dd81ec1791 \"updated kv namespace\"\n-\ud83c\udf00  Renaming namespace f7b02e7fc70443149ac906dd81ec1791 with title \"updated kv namespace\"\n+$ wrangler kv:namespace rename --binding=OLD_NAMESPACE \"New Namespace\"\n+\ud83c\udf00  Renaming namespace f7b02e7fc70443149ac906dd81ec1791 with title \"New Namespace\"\n \u2728  Success\n ```\n \ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -58,18 +106,23 @@ Outputs a list of all KV namespaces associated with your account id.\n $ wrangler kv:namespace list\n \ud83c\udf00  Retrieving namespaces\n \u2728  Success:\n-+------------------+----------------------------------+\n-| TITLE            | ID                               |\n-+------------------+----------------------------------+\n-| new kv namespace | f7b02e7fc70443149ac906dd81ec1791 |\n-+------------------+----------------------------------+\n++---------------+----------------------------------+\n+| TITLE         | ID                               |\n++---------------+----------------------------------+\n+| New Namespace | f7b02e7fc70443149ac906dd81ec1791 |\n++---------------+----------------------------------+\n ```\n \n ## `kv:key`\n \n ### `put`\n \n-Writes a single key/value pair to the given namespace. Optional params include \n+Writes a single key/value pair to the given namespace. \n+\n+Requires `--binding` or `--namespace-id` argument.\n+\n+Optional params include \n+1. `--env`: The [environment](./environments.md) argument.\n 1. `--ttl`: Number of seconds for which the entries should be visible before they expire. At least 60. Takes precedence over 'expiration' option.\n 1. `--expiration`: Number of seconds since the UNIX epoch, indicating when the key-value pair should expire.\n 1. `--path`: Read value from the file at a given path. *This is good for security-sensitive operations, like uploading keys to KV; uploading from a file prevents a key value from being saved in areas like your terminal history.*\ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -78,11 +131,11 @@ Writes a single key/value pair to the given namespace. Optional params include\n #### Usage\n \n ```sh\n-$ wrangler kv:key put f7b02e7fc70443149ac906dd81ec1791 \"key\" \"value\" --ttl=10000\n+$ wrangler kv:key put --binding=MY_NAMESPACE \"key\" \"value\" --ttl=10000\n \u2728  Success\n ```\n ```sh\n-$ wrangler kv:key put f7b02e7fc70443149ac906dd81ec1791 \"key\" value.txt --path\n+$ wrangler kv:key put --binding=MY_NAMESPACE \"key\" value.txt --path\n \u2728  Success\n ```\n \ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -90,10 +143,14 @@ $ wrangler kv:key put f7b02e7fc70443149ac906dd81ec1791 \"key\" value.txt --path\n \n Reads a single value by key from the given namespace.\n \n+Requires `--binding` or `--namespace-id` argument.\n+\n+Takes an optional `--env` [environment](./environments.md) argument.\n+\n #### Usage\n \n ```sh\n-$ wrangler kv:key get f7b02e7fc70443149ac906dd81ec1791 \"key\"\n+$ wrangler kv:key get --binding=MY_NAMESPACE \"key\"\n => value\n ```\n \ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -101,10 +158,14 @@ $ wrangler kv:key get f7b02e7fc70443149ac906dd81ec1791 \"key\"\n \n Removes a single key value pair from the given namespace.\n \n+Requires `--binding` or `--namespace-id` argument.\n+\n+Takes an optional `--env` [environment](./environments.md) argument.\n+\n #### Usage\n \n ```sh\n-$ wrangler kv:key delete f7b02e7fc70443149ac906dd81ec1791 \"key\"\n+$ wrangler kv:key delete --binding=MY_NAMESPACE \"key\"\n Are you sure you want to delete key \"key\"? [y/n]\n yes\n \ud83c\udf00  Deleting key \"key\"\ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -113,21 +174,26 @@ yes\n \n ### `list`\n \n-Outputs a list of all keys in a given namespace. Optional params include\n-1. `--prefix`: A prefix to filter listed keys\n+Outputs a list of all keys in a given namespace. \n+\n+Requires `--binding` or `--namespace-id` argument.\n+\n+Optional params include\n+1. `--env`: The [environment](./environments.md) argument.\n+1. `--prefix`: A prefix to filter listed keys.\n \n #### Usage\n The example below uses Python's JSON pretty-printing command line tool to pretty-print output.\n \n ```sh\n-$ wrangler kv:key list f7b02e7fc70443149ac906dd81ec1791 --prefix=\"public\" | python -m json.tool\n+$ wrangler kv:key list --binding=MY_NAMESPACE --prefix=\"public\" | python -m json.tool\n [\n     {\n         \"name\": \"public_key\"\n     }, \n     {\n         \"name\": \"public_key_with_expiration\",\n-        \"expiration\": 1568014518\n+        \"expiration\": \"2019-09-10T23:18:58Z\"\n     } \n ]\n ```\ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -136,6 +202,8 @@ $ wrangler kv:key list f7b02e7fc70443149ac906dd81ec1791 --prefix=\"public\" | pyth\n \n ### `put`\n \n+Requires `--binding` or `--namespace-id` argument.\n+\n Writes a file full of key/value pairs to the given namespace. Takes as an argument a JSON file with a list of key-value pairs to upload (see JSON spec above). An example of JSON input:\n ```json\n [\ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -159,15 +227,19 @@ The schema below is the full schema for key-value entries uploaded via the bulk\n \n If both `expiration` and `expiration_ttl` are specified for a given key, the API will prefer `expiration_ttl`.\n \n+The `put` command also takes an optional `--env` [environment](./environments.md) argument.\n+\n #### Usage\n \n ```sh\n-$ wrangler kv:bulk put f7b02e7fc70443149ac906dd81ec1791 allthethingsupload.json\n+$ wrangler kv:bulk put --binding=MY_NAMESPACE allthethingsupload.json\n \u2728  Success\n ```\n \n ### `delete`\n \n+Requires `--binding` or `--namespace-id` argument.\n+\n Deletes all specified keys within a given namespace.\n Takes as an argument a JSON file with a list of keys to delete; for example:\n ```json\ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -177,10 +249,12 @@ Takes as an argument a JSON file with a list of keys to delete; for example:\n ]\n ```\n \n+The `delete` command also takes an optional `--env` [environment](./environments.md) argument.\n+\n #### Usage\n \n ```sh\n-$ wrangler kv:bulk delete f7b02e7fc70443149ac906dd81ec1791 allthethingsdelete.json\n+$ wrangler kv:bulk delete --binding=MY_NAMESPACE allthethingsdelete.json\n Are you sure you want to delete all keys in allthethingsdelete.json? [y/n]\n yes\n \u2728  Success\ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -14,7 +14,7 @@ use crate::settings::target::Target;\n use crate::terminal::message;\n \n pub fn delete(\n-    project: &Target,\n+    target: &Target,\n     user: GlobalUser,\n     namespace_id: &str,\n     filename: &Path,\ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -61,7 +66,7 @@ fn delete_bulk(\n     }\n \n     let response = client.request(&DeleteBulk {\n-        account_identifier: &project.account_id,\n+        account_identifier: &target.account_id,\n         namespace_identifier: namespace_id,\n         bulk_keys: keys,\n     });\ndiff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -15,7 +15,7 @@ use crate::settings::target::Target;\n use crate::terminal::message;\n \n pub fn put(\n-    project: &Target,\n+    target: &Target,\n     user: GlobalUser,\n     namespace_id: &str,\n     filename: &Path,\ndiff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -50,7 +55,7 @@ fn put_bulk(\n     }\n \n     let response = client.request(&WriteBulk {\n-        account_identifier: &project.account_id,\n+        account_identifier: &target.account_id,\n         namespace_identifier: namespace_id,\n         bulk_key_value_pairs: pairs,\n     });\ndiff --git a/src/commands/kv/key/delete.rs b/src/commands/kv/key/delete.rs\n--- a/src/commands/kv/key/delete.rs\n+++ b/src/commands/kv/key/delete.rs\n@@ -7,7 +7,7 @@ use crate::settings::target::Target;\n use crate::terminal::message;\n \n pub fn delete(\n-    project: &Target,\n+    target: &Target,\n     user: GlobalUser,\n     id: &str,\n     key: &str,\ndiff --git a/src/commands/kv/key/delete.rs b/src/commands/kv/key/delete.rs\n--- a/src/commands/kv/key/delete.rs\n+++ b/src/commands/kv/key/delete.rs\n@@ -27,7 +27,7 @@ pub fn delete(\n     message::working(&msg);\n \n     let response = client.request(&DeleteKey {\n-        account_identifier: &project.account_id,\n+        account_identifier: &target.account_id,\n         namespace_identifier: id,\n         key, // this is url encoded within cloudflare-rs\n     });\ndiff --git a/src/commands/kv/key/get.rs b/src/commands/kv/key/get.rs\n--- a/src/commands/kv/key/get.rs\n+++ b/src/commands/kv/key/get.rs\n@@ -10,10 +10,10 @@ use crate::http;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::target::Target;\n \n-pub fn get(project: &Target, user: GlobalUser, id: &str, key: &str) -> Result<(), failure::Error> {\n+pub fn get(target: &Target, user: GlobalUser, id: &str, key: &str) -> Result<(), failure::Error> {\n     let api_endpoint = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/storage/kv/namespaces/{}/values/{}\",\n-        project.account_id,\n+        target.account_id,\n         id,\n         kv::url_encode_key(key)\n     );\ndiff --git a/src/commands/kv/key/key_list.rs b/src/commands/kv/key/key_list.rs\n--- a/src/commands/kv/key/key_list.rs\n+++ b/src/commands/kv/key/key_list.rs\n@@ -21,7 +21,7 @@ pub struct KeyList {\n \n impl KeyList {\n     pub fn new(\n-        project: &Target,\n+        target: &Target,\n         client: HttpApiClient,\n         namespace_id: &str,\n         prefix: Option<&str>,\ndiff --git a/src/commands/kv/key/key_list.rs b/src/commands/kv/key/key_list.rs\n--- a/src/commands/kv/key/key_list.rs\n+++ b/src/commands/kv/key/key_list.rs\n@@ -30,7 +30,7 @@ impl KeyList {\n             keys_result: None,\n             prefix: prefix.map(str::to_string),\n             client,\n-            account_id: project.account_id.to_owned(),\n+            account_id: target.account_id.to_owned(),\n             namespace_id: namespace_id.to_string(),\n             cursor: None,\n             init_fetch: false,\ndiff --git a/src/commands/kv/key/list.rs b/src/commands/kv/key/list.rs\n--- a/src/commands/kv/key/list.rs\n+++ b/src/commands/kv/key/list.rs\n@@ -9,14 +9,14 @@ use crate::settings::target::Target;\n // the number of entries in each json blob is variable (so csv and tsv\n // representation won't make sense)\n pub fn list(\n-    project: &Target,\n+    target: &Target,\n     user: GlobalUser,\n     namespace_id: &str,\n     prefix: Option<&str>,\n ) -> Result<(), failure::Error> {\n     let client = kv::api_client(user)?;\n \n-    let key_list = KeyList::new(project, client, namespace_id, prefix);\n+    let key_list = KeyList::new(target, client, namespace_id, prefix);\n \n     print!(\"[\"); // Open json list bracket\n \ndiff --git a/src/commands/kv/key/put.rs b/src/commands/kv/key/put.rs\n--- a/src/commands/kv/key/put.rs\n+++ b/src/commands/kv/key/put.rs\n@@ -3,6 +3,7 @@\n // because the SET key request body is not json--it is the raw value).\n \n use std::fs;\n+use std::fs::metadata;\n \n use cloudflare::framework::response::ApiFailure;\n use url::Url;\ndiff --git a/src/commands/kv/key/put.rs b/src/commands/kv/key/put.rs\n--- a/src/commands/kv/key/put.rs\n+++ b/src/commands/kv/key/put.rs\n@@ -14,7 +15,7 @@ use crate::settings::target::Target;\n use crate::terminal::message;\n \n pub fn put(\n-    project: &Target,\n+    target: &Target,\n     user: GlobalUser,\n     id: &str,\n     key: &str,\ndiff --git a/src/commands/kv/key/put.rs b/src/commands/kv/key/put.rs\n--- a/src/commands/kv/key/put.rs\n+++ b/src/commands/kv/key/put.rs\n@@ -25,7 +26,7 @@ pub fn put(\n ) -> Result<(), failure::Error> {\n     let api_endpoint = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/storage/kv/namespaces/{}/values/{}\",\n-        project.account_id,\n+        target.account_id,\n         id,\n         kv::url_encode_key(key)\n     );\ndiff --git a/src/commands/kv/key/put.rs b/src/commands/kv/key/put.rs\n--- a/src/commands/kv/key/put.rs\n+++ b/src/commands/kv/key/put.rs\n@@ -44,17 +45,22 @@ pub fn put(\n \n     // If is_file is true, overwrite value to be the contents of the given\n     // filename in the 'value' arg.\n-    let mut body_text: String;\n-    if is_file {\n-        body_text = fs::read_to_string(value)?;\n-    } else {\n-        body_text = value.to_string();\n-    }\n+    let body_text = match is_file {\n+        true => match &metadata(value) {\n+            Ok(file_type) if file_type.is_file() => fs::read_to_string(value),\n+            Ok(file_type) if file_type.is_dir() => {\n+                failure::bail!(\"--path argument takes a file, {} is a directory\", value)\n+            }\n+            Ok(_) => failure::bail!(\"--path argument takes a file, {} is a symlink\", value), // last remaining value is symlink\n+            Err(e) => failure::bail!(\"{}\", e),\n+        },\n+        false => Ok(value.to_string()),\n+    };\n \n     let client = http::auth_client(&user);\n \n     let url_into_str = url?.into_string();\n-    let mut res = client.put(&url_into_str).body(body_text).send()?;\n+    let mut res = client.put(&url_into_str).body(body_text?).send()?;\n \n     if res.status().is_success() {\n         message::success(\"Success\")\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -5,8 +5,11 @@ use http::status::StatusCode;\n use percent_encoding::{percent_encode, PATH_SEGMENT_ENCODE_SET};\n \n use crate::settings::global_user::GlobalUser;\n+use crate::settings::target::Target;\n use crate::terminal::message;\n \n+use std::collections::HashSet;\n+\n pub mod bulk;\n pub mod key;\n pub mod namespace;\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -16,6 +19,47 @@ const INTERACTIVE_RESPONSE_LEN: usize = 1;\n const YES: &str = \"y\";\n const NO: &str = \"n\";\n \n+fn check_duplicate_namespaces(target: &Target) -> bool {\n+    // HashSet for detecting duplicate namespace bindings\n+    let mut binding_names: HashSet<String> = HashSet::new();\n+\n+    if let Some(namespaces) = &target.kv_namespaces {\n+        for namespace in namespaces {\n+            // Check if this is a duplicate binding\n+            if binding_names.contains(&namespace.binding) {\n+                return true;\n+            } else {\n+                binding_names.insert(namespace.binding.clone());\n+            }\n+        }\n+    }\n+    false\n+}\n+\n+// Get namespace id for a given binding name.\n+pub fn get_namespace_id(target: &Target, binding: &str) -> Result<String, failure::Error> {\n+    if check_duplicate_namespaces(&target) {\n+        failure::bail!(\n+            \"Namespace binding \\\"{}\\\" is duplicated in \\\"{}\\\"\",\n+            binding,\n+            target.name\n+        )\n+    }\n+\n+    if let Some(namespaces) = &target.kv_namespaces {\n+        for namespace in namespaces {\n+            if namespace.binding == binding {\n+                return Ok(namespace.id.to_string());\n+            }\n+        }\n+    }\n+    failure::bail!(\n+        \"Namespace binding \\\"{}\\\" not found in \\\"{}\\\"\",\n+        binding,\n+        target.name\n+    )\n+}\n+\n fn api_client(user: GlobalUser) -> Result<HttpApiClient, failure::Error> {\n     Ok(HttpApiClient::new(Credentials::from(user)))\n }\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -71,9 +115,9 @@ fn help(error_code: u16) -> &'static str {\n     match error_code {\n         // namespace errors\n         10010 | 10011 | 10012 | 10013 | 10014 | 10018 => {\n-            \"Run `wrangler kv list` to see your existing namespaces with IDs\"\n+            \"Run `wrangler kv:namespace list` to see your existing namespaces with IDs\"\n         }\n-        10009 => \"Run `wrangler kv list <namespaceID>` to see your existing keys\", // key errors\n+        10009 => \"Run `wrangler kv:key list` to see your existing keys\", // key errors\n         // TODO: link to more info\n         // limit errors\n         10022 | 10024 | 10030 => \"See documentation\",\ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -7,14 +7,14 @@ use crate::settings::global_user::GlobalUser;\n use crate::settings::target::Target;\n use crate::terminal::message;\n \n-pub fn create(project: &Target, user: GlobalUser, title: &str) -> Result<(), failure::Error> {\n+pub fn create(target: &Target, user: GlobalUser, title: &str) -> Result<(), failure::Error> {\n     let client = kv::api_client(user)?;\n \n     let msg = format!(\"Creating namespace with title \\\"{}\\\"\", title);\n     message::working(&msg);\n \n     let response = client.request(&CreateNamespace {\n-        account_identifier: &project.account_id,\n+        account_identifier: &target.account_id,\n         params: CreateNamespaceParams {\n             title: title.to_string(),\n         },\ndiff --git a/src/commands/kv/namespace/delete.rs b/src/commands/kv/namespace/delete.rs\n--- a/src/commands/kv/namespace/delete.rs\n+++ b/src/commands/kv/namespace/delete.rs\n@@ -6,7 +6,7 @@ use crate::settings::global_user::GlobalUser;\n use crate::settings::target::Target;\n use crate::terminal::message;\n \n-pub fn delete(project: &Target, user: GlobalUser, id: &str) -> Result<(), failure::Error> {\n+pub fn delete(target: &Target, user: GlobalUser, id: &str) -> Result<(), failure::Error> {\n     let client = kv::api_client(user)?;\n \n     match kv::interactive_delete(&format!(\ndiff --git a/src/commands/kv/namespace/delete.rs b/src/commands/kv/namespace/delete.rs\n--- a/src/commands/kv/namespace/delete.rs\n+++ b/src/commands/kv/namespace/delete.rs\n@@ -25,7 +25,7 @@ pub fn delete(project: &Target, user: GlobalUser, id: &str) -> Result<(), failur\n     message::working(&msg);\n \n     let response = client.request(&RemoveNamespace {\n-        account_identifier: &project.account_id,\n+        account_identifier: &target.account_id,\n         namespace_identifier: id,\n     });\n \ndiff --git a/src/commands/kv/namespace/list.rs b/src/commands/kv/namespace/list.rs\n--- a/src/commands/kv/namespace/list.rs\n+++ b/src/commands/kv/namespace/list.rs\n@@ -9,13 +9,13 @@ use crate::settings::global_user::GlobalUser;\n use crate::settings::target::Target;\n use crate::terminal::message;\n \n-pub fn list(project: &Target, user: GlobalUser) -> Result<(), failure::Error> {\n+pub fn list(target: &Target, user: GlobalUser) -> Result<(), failure::Error> {\n     let client = kv::api_client(user)?;\n \n     message::working(\"Fetching namespaces...\");\n \n     let response = client.request(&ListNamespaces {\n-        account_identifier: &project.account_id,\n+        account_identifier: &target.account_id,\n     });\n \n     match response {\ndiff --git a/src/commands/kv/namespace/rename.rs b/src/commands/kv/namespace/rename.rs\n--- a/src/commands/kv/namespace/rename.rs\n+++ b/src/commands/kv/namespace/rename.rs\n@@ -8,7 +8,7 @@ use crate::settings::target::Target;\n use crate::terminal::message;\n \n pub fn rename(\n-    project: &Target,\n+    target: &Target,\n     user: GlobalUser,\n     id: &str,\n     title: &str,\ndiff --git a/src/commands/kv/namespace/rename.rs b/src/commands/kv/namespace/rename.rs\n--- a/src/commands/kv/namespace/rename.rs\n+++ b/src/commands/kv/namespace/rename.rs\n@@ -19,7 +19,7 @@ pub fn rename(\n     message::working(&msg);\n \n     let response = client.request(&RenameNamespace {\n-        account_identifier: &project.account_id,\n+        account_identifier: &target.account_id,\n         namespace_identifier: &id,\n         params: RenameNamespaceParams {\n             title: title.to_string(),\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -7,7 +7,7 @@ use std::env;\n use std::path::Path;\n use std::str::FromStr;\n \n-use clap::{App, AppSettings, Arg, SubCommand};\n+use clap::{App, AppSettings, Arg, ArgGroup, SubCommand};\n use commands::HTTPMethod;\n \n use log::info;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -61,29 +61,83 @@ fn run() -> Result<(), failure::Error> {\n                             Arg::with_name(\"title\")\n                             .help(\"The name for your new namespace\")\n                             .required(true)\n+                            .index(1)\n                         )\n                 )\n                 .subcommand(\n                     SubCommand::with_name(\"delete\")\n                         .about(\"Delete namespace\")\n+                        .arg(\n+                            Arg::with_name(\"binding\")\n+                            .help(\"The binding of the namespace this action applies to\")\n+                            .short(\"b\")\n+                            .long(\"binding\")\n+                            .value_name(\"BINDING NAME\")\n+                            .takes_value(true)\n+                            .global(true)\n+                        )\n                         .arg(\n                             Arg::with_name(\"namespace-id\")\n-                            .help(\"The ID of the namespace this action applies to\")\n+                            .help(\"The id of the namespace this action applies to\")\n+                            .short(\"n\")\n+                            .long(\"namespace-id\")\n+                            .value_name(\"ID\")\n+                            .takes_value(true)\n+                            .global(true)\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"env\")\n+                            .help(\"Environment to use\")\n+                            .short(\"e\")\n+                            .long(\"env\")\n+                            .takes_value(true)\n+                            .value_name(\"ENVIRONMENT NAME\")\n+                            .global(true)\n+                        )\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n                             .required(true)\n                         )\n                 )\n                 .subcommand(\n                     SubCommand::with_name(\"rename\")\n                         .about(\"Rename a namespace\")\n+                        .arg(\n+                            Arg::with_name(\"binding\")\n+                            .help(\"The binding of the namespace this action applies to\")\n+                            .short(\"b\")\n+                            .long(\"binding\")\n+                            .value_name(\"BINDING NAME\")\n+                            .takes_value(true)\n+                            .global(true)\n+                        )\n                         .arg(\n                             Arg::with_name(\"namespace-id\")\n-                            .help(\"The ID of the namespace this action applies to\")\n+                            .help(\"The id of the namespace this action applies to\")\n+                            .short(\"n\")\n+                            .long(\"namespace-id\")\n+                            .value_name(\"ID\")\n+                            .takes_value(true)\n+                            .global(true)\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"env\")\n+                            .help(\"Environment to use\")\n+                            .short(\"e\")\n+                            .long(\"env\")\n+                            .takes_value(true)\n+                            .value_name(\"ENVIRONMENT NAME\")\n+                            .global(true)\n+                        )\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n                             .required(true)\n                         )\n                         .arg(\n                             Arg::with_name(\"title\")\n                             .help(\"New title for the namespace\")\n                             .required(true)\n+                            .index(1)\n                         )\n                 )\n                 .subcommand(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -93,30 +147,54 @@ fn run() -> Result<(), failure::Error> {\n         )\n             .subcommand(SubCommand::with_name(\"kv:key\")\n                 .about(&*format!(\n-                    \"{} Interact with your Workers KV Key-Value Pairs\",\n+                    \"{} Individually manage Workers KV key-value pairs\",\n                     emoji::KV\n                 ))\n+                .arg(\n+                    Arg::with_name(\"binding\")\n+                    .help(\"The binding of the namespace this action applies to\")\n+                    .short(\"b\")\n+                    .long(\"binding\")\n+                    .value_name(\"BINDING NAME\")\n+                    .takes_value(true)\n+                    .global(true)\n+                )\n+                .arg(\n+                    Arg::with_name(\"namespace-id\")\n+                    .help(\"The id of the namespace this action applies to\")\n+                    .short(\"n\")\n+                    .long(\"namespace-id\")\n+                    .value_name(\"ID\")\n+                    .takes_value(true)\n+                    .global(true)\n+                )\n+                .arg(\n+                    Arg::with_name(\"env\")\n+                    .help(\"Environment to use\")\n+                    .short(\"e\")\n+                    .long(\"env\")\n+                    .takes_value(true)\n+                    .value_name(\"ENVIRONMENT NAME\")\n+                    .global(true)\n+                )\n                 .subcommand(\n                     SubCommand::with_name(\"put\")\n                         .about(\"Put a key-value pair into a namespace\")\n-                        .arg(\n-                            Arg::with_name(\"namespace-id\")\n-                            .help(\"The ID of the namespace this action applies to\")\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n                             .required(true)\n-                            // .short(\"n\")\n-                            // .long(\"namespace-id\")\n-                            // .value_name(\"<ID>\")\n-                            // .takes_value(true)\n                         )\n                         .arg(\n                             Arg::with_name(\"key\")\n                             .help(\"Key to write value to\")\n                             .required(true)\n+                            .index(1)\n                         )\n                         .arg(\n                             Arg::with_name(\"value\")\n                             .help(\"Value for key\")\n                             .required(true)\n+                            .index(2)\n                         )\n                         .arg(\n                             Arg::with_name(\"expiration-ttl\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -129,7 +207,7 @@ fn run() -> Result<(), failure::Error> {\n                         .arg(\n                             Arg::with_name(\"expiration\")\n                             .help(\"Number of seconds since the UNIX epoch, indicating when the key-value pair should expire\")\n-                            .short(\"e\")\n+                            .short(\"x\")\n                             .long(\"expiration\")\n                             .takes_value(true)\n                             .value_name(\"SECONDS\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -145,50 +223,37 @@ fn run() -> Result<(), failure::Error> {\n                 .subcommand(\n                     SubCommand::with_name(\"get\")\n                         .about(\"Get a key's value from a namespace\")\n-                        .arg(\n-                            Arg::with_name(\"namespace-id\")\n-                            .help(\"The ID of the namespace this action applies to\")\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n                             .required(true)\n-                            // .short(\"n\")\n-                            // .long(\"namespace-id\")\n-                            // .value_name(\"<ID>\")\n-                            // .takes_value(true)\n                         )\n                         .arg(\n                             Arg::with_name(\"key\")\n                             .help(\"Key whose value to get\")\n                             .required(true)\n+                            .index(1)\n                         )\n                 )\n                 .subcommand(\n                     SubCommand::with_name(\"delete\")\n                         .about(\"Delete a key and its value from a namespace\")\n-                        .arg(\n-                            Arg::with_name(\"namespace-id\")\n-                            .help(\"The ID of the namespace this action applies to\")\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n                             .required(true)\n-                            // .short(\"n\")\n-                            // .long(\"namespace-id\")\n-                            // .value_name(\"<ID>\")\n-                            // .takes_value(true)\n                         )\n                         .arg(\n                             Arg::with_name(\"key\")\n                             .help(\"Key whose value to delete\")\n                             .required(true)\n+                            .index(1)\n                         )\n                 )\n                 .subcommand(\n                     SubCommand::with_name(\"list\")\n                         .about(\"List all keys in a namespace. Produces JSON output\")\n-                        .arg(\n-                            Arg::with_name(\"namespace-id\")\n-                            .help(\"The ID of the namespace this action applies to\")\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n                             .required(true)\n-                            // .short(\"n\")\n-                            // .long(\"namespace-id\")\n-                            // .value_name(\"<ID>\")\n-                            // .takes_value(true)\n                         )\n                         .arg(\n                             Arg::with_name(\"prefix\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -203,44 +268,62 @@ fn run() -> Result<(), failure::Error> {\n         .subcommand(\n             SubCommand::with_name(\"kv:bulk\")\n                 .about(&*format!(\n-                    \"{} Interact with your Workers KV Key-Value Pairs\",\n+                    \"{} Interact with multiple Workers KV key-value pairs at once\",\n                     emoji::KV\n                 ))\n+                .arg(\n+                    Arg::with_name(\"binding\")\n+                    .help(\"The binding of the namespace this action applies to\")\n+                    .short(\"b\")\n+                    .long(\"binding\")\n+                    .value_name(\"BINDING NAME\")\n+                    .takes_value(true)\n+                    .global(true)\n+                )\n+                .arg(\n+                    Arg::with_name(\"namespace-id\")\n+                    .help(\"The id of the namespace this action applies to\")\n+                    .short(\"n\")\n+                    .long(\"namespace-id\")\n+                    .value_name(\"ID\")\n+                    .takes_value(true)\n+                    .global(true)\n+                )\n+                .arg(\n+                    Arg::with_name(\"env\")\n+                    .help(\"Environment to use\")\n+                    .short(\"e\")\n+                    .long(\"env\")\n+                    .takes_value(true)\n+                    .value_name(\"ENVIROMENT NAME\")\n+                    .global(true)\n+                )\n                 .subcommand(\n                     SubCommand::with_name(\"put\")\n                         .about(\"Upload multiple key-value pairs to a namespace\")\n-                        .arg(\n-                            Arg::with_name(\"namespace-id\")\n-                                .help(\"The ID of the namespace this action applies to\")\n-                                .required(true)\n-                                // .short(\"n\")\n-                                // .long(\"namespace-id\")\n-                                // .value_name(\"<ID>\")\n-                                // .takes_value(true)\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n+                            .required(true)\n                         )\n                         .arg(\n                             Arg::with_name(\"path\")\n                             .help(\"the JSON file of key-value pairs to upload, in form [{\\\"key\\\":..., \\\"value\\\":...}\\\"...]\")\n                             .required(true)\n-                            .index(2),\n+                            .index(1)\n                         )\n                 )\n                 .subcommand(\n                     SubCommand::with_name(\"delete\")\n-                        .about(\"Delete multiple keys and their values from a namespace\")\n-                        .arg(\n-                            Arg::with_name(\"namespace-id\")\n-                            .help(\"The ID of the namespace this action applies to\")\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n                             .required(true)\n-                            // .short(\"n\")\n-                            // .long(\"namespace-id\")\n-                            // .value_name(\"<ID>\")\n-                            // .takes_value(true)\n                         )\n+                        .about(\"Delete multiple keys and their values from a namespace\")\n                         .arg(\n                             Arg::with_name(\"path\")\n                             .help(\"the JSON file of key-value pairs to upload, in form [\\\"<example-key>\\\", ...]\")\n                             .required(true)\n+                            .index(1)\n                         )\n                 )\n         )\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -479,25 +562,43 @@ fn run() -> Result<(), failure::Error> {\n         commands::subdomain(name, &user, &target)?;\n     } else if let Some(kv_matches) = matches.subcommand_matches(\"kv:namespace\") {\n         let manifest = settings::target::Manifest::new(config_path)?;\n-        let target = manifest.get_target(matches.value_of(\"env\"), false)?;\n-\n         let user = settings::global_user::GlobalUser::new()?;\n \n         match kv_matches.subcommand() {\n             (\"create\", Some(create_matches)) => {\n+                let target = manifest.get_target(create_matches.value_of(\"env\"), false)?;\n                 let title = create_matches.value_of(\"title\").unwrap();\n                 commands::kv::namespace::create(&target, user, title)?;\n             }\n             (\"delete\", Some(delete_matches)) => {\n-                let id = delete_matches.value_of(\"namespace-id\").unwrap();\n-                commands::kv::namespace::delete(&target, user, id)?;\n+                let target = manifest.get_target(delete_matches.value_of(\"env\"), false)?;\n+                let namespace_id = match delete_matches.value_of(\"binding\") {\n+                    Some(namespace_binding) => {\n+                        commands::kv::get_namespace_id(&target, namespace_binding)?\n+                    }\n+                    None => delete_matches\n+                        .value_of(\"namespace-id\")\n+                        .unwrap() // clap configs ensure that if \"binding\" isn't present,\"namespace-id\" must be.\n+                        .to_string(),\n+                };\n+                commands::kv::namespace::delete(&target, user, &namespace_id)?;\n             }\n             (\"rename\", Some(rename_matches)) => {\n-                let id = rename_matches.value_of(\"namespace-id\").unwrap();\n+                let target = manifest.get_target(rename_matches.value_of(\"env\"), false)?;\n+                let namespace_id = match rename_matches.value_of(\"binding\") {\n+                    Some(namespace_binding) => {\n+                        commands::kv::get_namespace_id(&target, namespace_binding)?\n+                    }\n+                    None => rename_matches\n+                        .value_of(\"namespace-id\")\n+                        .unwrap() // clap configs ensure that if \"binding\" isn't present,\"namespace-id\" must be.\n+                        .to_string(),\n+                };\n                 let title = rename_matches.value_of(\"title\").unwrap();\n-                commands::kv::namespace::rename(&target, user, id, title)?;\n+                commands::kv::namespace::rename(&target, user, &namespace_id, title)?\n             }\n-            (\"list\", Some(_list_matches)) => {\n+            (\"list\", Some(list_matches)) => {\n+                let target = manifest.get_target(list_matches.value_of(\"env\"), false)?;\n                 commands::kv::namespace::list(&target, user)?;\n             }\n             (\"\", None) => message::warn(\"kv:namespace expects a subcommand\"),\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -505,18 +606,33 @@ fn run() -> Result<(), failure::Error> {\n         }\n     } else if let Some(kv_matches) = matches.subcommand_matches(\"kv:key\") {\n         let manifest = settings::target::Manifest::new(config_path)?;\n-        let target = manifest.get_target(matches.value_of(\"env\"), false)?;\n-\n         let user = settings::global_user::GlobalUser::new()?;\n \n-        match kv_matches.subcommand() {\n+        // Get environment and bindings\n+        let (subcommand, subcommand_matches) = kv_matches.subcommand();\n+        let (target, namespace_id) = match subcommand_matches {\n+            Some(subcommand_matches) => {\n+                let target = manifest.get_target(subcommand_matches.value_of(\"env\"), false)?;\n+                let namespace_id = match subcommand_matches.value_of(\"binding\") {\n+                    Some(namespace_binding) => {\n+                        commands::kv::get_namespace_id(&target, namespace_binding)?\n+                    }\n+                    None => subcommand_matches\n+                        .value_of(\"namespace-id\")\n+                        .unwrap() // clap configs ensure that if \"binding\" isn't present,\"namespace-id\" must be.\n+                        .to_string(),\n+                };\n+                (target, namespace_id.to_string())\n+            }\n+            None => unreachable!(), // this is unreachable because all kv:key commands have required arguments.\n+        };\n+\n+        match (subcommand, subcommand_matches) {\n             (\"get\", Some(get_key_matches)) => {\n-                let id = get_key_matches.value_of(\"namespace-id\").unwrap();\n                 let key = get_key_matches.value_of(\"key\").unwrap();\n-                commands::kv::key::get(&target, user, id, key)?;\n+                commands::kv::key::get(&target, user, &namespace_id, key)?\n             }\n             (\"put\", Some(put_key_matches)) => {\n-                let id = put_key_matches.value_of(\"namespace-id\").unwrap();\n                 let key = put_key_matches.value_of(\"key\").unwrap();\n                 let value = put_key_matches.value_of(\"value\").unwrap();\n                 let is_file = match put_key_matches.occurrences_of(\"path\") {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -525,37 +641,59 @@ fn run() -> Result<(), failure::Error> {\n                 };\n                 let expiration = put_key_matches.value_of(\"expiration\");\n                 let ttl = put_key_matches.value_of(\"expiration-ttl\");\n-                commands::kv::key::put(&target, user, id, key, value, is_file, expiration, ttl)?;\n+                commands::kv::key::put(\n+                    &target,\n+                    user,\n+                    &namespace_id,\n+                    key,\n+                    value,\n+                    is_file,\n+                    expiration,\n+                    ttl,\n+                )?\n             }\n-            (\"delete\", Some(delete_matches)) => {\n-                let id = delete_matches.value_of(\"namespace-id\").unwrap();\n-                let key = delete_matches.value_of(\"key\").unwrap();\n-                commands::kv::key::delete(&target, user, id, key)?;\n+            (\"delete\", Some(delete_key_matches)) => {\n+                let key = delete_key_matches.value_of(\"key\").unwrap();\n+                commands::kv::key::delete(&target, user, &namespace_id, key)?\n             }\n-            (\"list\", Some(list_keys_matches)) => {\n-                let id = list_keys_matches.value_of(\"namespace-id\").unwrap();\n-                let prefix = list_keys_matches.value_of(\"prefix\");\n-                commands::kv::key::list(&target, user, id, prefix)?;\n+            (\"list\", Some(list_key_matches)) => {\n+                let prefix = list_key_matches.value_of(\"prefix\");\n+                commands::kv::key::list(&target, user, &namespace_id, prefix)?\n             }\n             (\"\", None) => message::warn(\"kv:key expects a subcommand\"),\n             _ => unreachable!(),\n         }\n     } else if let Some(kv_matches) = matches.subcommand_matches(\"kv:bulk\") {\n         let manifest = settings::target::Manifest::new(config_path)?;\n-        let target = manifest.get_target(matches.value_of(\"env\"), false)?;\n-\n         let user = settings::global_user::GlobalUser::new()?;\n \n-        match kv_matches.subcommand() {\n+        // Get environment and bindings\n+        let (subcommand, subcommand_matches) = kv_matches.subcommand();\n+        let (target, namespace_id) = match subcommand_matches {\n+            Some(subcommand_matches) => {\n+                let target = manifest.get_target(subcommand_matches.value_of(\"env\"), false)?;\n+                let namespace_id = match subcommand_matches.value_of(\"binding\") {\n+                    Some(namespace_binding) => {\n+                        commands::kv::get_namespace_id(&target, namespace_binding)?\n+                    }\n+                    None => subcommand_matches\n+                        .value_of(\"namespace-id\")\n+                        .unwrap() // clap configs ensure that if \"binding\" isn't present,\"namespace-id\" must be.\n+                        .to_string(),\n+                };\n+                (target, namespace_id.to_string())\n+            }\n+            None => unreachable!(), // this is unreachable because all kv:key commands have required arguments.\n+        };\n+\n+        match (subcommand, subcommand_matches) {\n             (\"put\", Some(put_bulk_matches)) => {\n-                let id = put_bulk_matches.value_of(\"namespace-id\").unwrap();\n                 let path = put_bulk_matches.value_of(\"path\").unwrap();\n-                commands::kv::bulk::put(&target, user, id, Path::new(path))?;\n+                commands::kv::bulk::put(&target, user, &namespace_id, Path::new(path))?\n             }\n-            (\"delete\", Some(delete_matches)) => {\n-                let id = delete_matches.value_of(\"namespace-id\").unwrap();\n-                let path = delete_matches.value_of(\"path\").unwrap();\n-                commands::kv::bulk::delete(&target, user, id, Path::new(path))?;\n+            (\"delete\", Some(delete_bulk_matches)) => {\n+                let path = delete_bulk_matches.value_of(\"path\").unwrap();\n+                commands::kv::bulk::delete(&target, user, &namespace_id, Path::new(path))?\n             }\n             (\"\", None) => message::warn(\"kv:bulk expects a subcommand\"),\n             _ => unreachable!(),\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -96,7 +96,7 @@ impl Manifest {\n                     Ok(Some(environment))\n                 } else {\n                     failure::bail!(format!(\n-                        \"{} Could not find environment with name {}\",\n+                        \"{} Could not find environment with name \\\"{}\\\"\",\n                         emoji::WARN,\n                         environment_name\n                     ))\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -123,7 +123,7 @@ impl Manifest {\n         let use_dot_dev_warning =\n             format!(\"{}\\n{} This command will fail in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\", use_dot_dev_failure, emoji::WARN);\n         let wdd_failure = format!(\n-            \"{} Your environment should only include `workers_dot_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dot_dev`.\",\n+            \"{} Your environment should only include \\\"workers_dot_dev\\\" or \\\"route\\\". If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dot_dev`.\",\n             emoji::WARN\n         );\n \n",
        "test_patch": "diff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -34,17 +34,22 @@ pub fn delete(\n     let keys: Result<Vec<String>, failure::Error> = match &metadata(filename) {\n         Ok(file_type) if file_type.is_file() => {\n             let data = fs::read_to_string(filename)?;\n-            Ok(serde_json::from_str(&data)?)\n+            let keys_vec = serde_json::from_str(&data);\n+            if keys_vec.is_err() {\n+                failure::bail!(\"Failed to decode JSON. Please make sure to follow the format, [\\\"test_key_1\\\", \\\"test_key_2\\\", ...]\")\n+            } else {\n+                Ok(keys_vec.unwrap())\n+            }\n         }\n         Ok(_) => failure::bail!(\"{} should be a JSON file, but is not\", filename.display()),\n         Err(e) => failure::bail!(\"{}\", e),\n     };\n \n-    delete_bulk(project, user, namespace_id, keys?)\n+    delete_bulk(target, user, namespace_id, keys?)\n }\n \n fn delete_bulk(\n-    project: &Target,\n+    target: &Target,\n     user: GlobalUser,\n     namespace_id: &str,\n     keys: Vec<String>,\ndiff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -23,17 +23,22 @@ pub fn put(\n     let pairs: Result<Vec<KeyValuePair>, failure::Error> = match &metadata(filename) {\n         Ok(file_type) if file_type.is_file() => {\n             let data = fs::read_to_string(filename)?;\n-            Ok(serde_json::from_str(&data)?)\n+            let data_vec = serde_json::from_str(&data);\n+            if data_vec.is_err() {\n+                failure::bail!(\"Failed to decode JSON. Please make sure to follow the format, [{\\\"key\\\": \\\"test_key\\\", \\\"value\\\": \\\"test_value\\\"}, ...]\")\n+            } else {\n+                Ok(data_vec.unwrap())\n+            }\n         }\n         Ok(_) => failure::bail!(\"{} should be a JSON file, but is not\", filename.display()),\n         Err(e) => failure::bail!(\"{}\", e),\n     };\n \n-    put_bulk(project, user, namespace_id, pairs?)\n+    put_bulk(target, user, namespace_id, pairs?)\n }\n \n fn put_bulk(\n-    project: &Target,\n+    target: &Target,\n     user: GlobalUser,\n     namespace_id: &str,\n     pairs: Vec<KeyValuePair>,\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -85,3 +129,34 @@ fn help(error_code: u16) -> &'static str {\n         _ => \"\",\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::commands::kv;\n+    use crate::settings::target::{KvNamespace, Target, TargetType};\n+\n+    #[test]\n+    fn it_can_detect_duplicate_bindings() {\n+        let target_with_dup_kv_bindings = Target {\n+            account_id: \"\".to_string(),\n+            kv_namespaces: Some(vec![\n+                KvNamespace {\n+                    id: \"fake\".to_string(),\n+                    binding: \"KV\".to_string(),\n+                },\n+                KvNamespace {\n+                    id: \"fake\".to_string(),\n+                    binding: \"KV\".to_string(),\n+                },\n+            ]),\n+            name: \"test-target\".to_string(),\n+            target_type: TargetType::Webpack,\n+            route: None,\n+            routes: None,\n+            webpack_config: None,\n+            workers_dot_dev: false,\n+            zone_id: None,\n+        };\n+        assert!(kv::get_namespace_id(&target_with_dup_kv_bindings, \"\").is_err());\n+    }\n+}\n",
        "problem_statement": "Use binding name, env flag instead of namespace id\n## Existing Design\r\n\r\nCurrently most kv commands require that you specify `namespace id` as a positional argument:\r\n\r\n``` sh\r\n$ wrangler kv:key put 9d28bd2bbb2c4e489006d7d8afa61f07 \"key\" \"value\"\r\n```\r\n\r\nThis is ergonomically awkward and will likely result in a lot of cursing, copy-pasting, and invocations of `wrangler kv:namespace list` or `cat wrangler.toml` to find the appropriate namespace id for a given command.\r\n\r\n## New Design\r\n\r\nWe can instead use the binding name for a given namespace in a project to provide a human-readable/grokable token for identifying a particular namespace in relation to the project. We can also benefit from environments here by allowing for default values (top level, see environments milestone) and accepting an `--env` flag:\r\n\r\n``` sh\r\n$ wrangler kv:key put FOO \"key\" \"value\" [--env <environment>]\r\n```\r\nThis means that given a toml that looks like this:\r\n\r\n``` toml\r\nname = \"worker-site\"\r\ntype = \"webpack\"\r\naccount_id = \"43434f8d0d9f52a395a1472b35f23439\"\r\nworkers_dot_dev = true\r\nkv-namespaces = [\r\n\t{ binding = \"FOO\", id = \"9d28bd2bbb2c4e489006d7d8afa61f07\" },\r\n\t{ binding = \"BAR\", id = \"f5b309d7ebec48649ec0604facb26c7d\" }\r\n]\r\n\r\n[env.staging]\r\nkv-namespaces = [\r\n\t{ binding = \"FOO\", id = \"c417513a199c4289a1a0c8385c58a0e7\" }\r\n]\r\n\r\n[env.prod]\r\nkv-namespaces = [\r\n\t{ binding = \"FOO\", id = \"1f44a56679a040f0bb01ba39599ba704\" }\r\n]\r\n```\r\n\r\nthe following command would `put` to the top level binding named \"STATIC_CONTENT\" (id: 9d28bd2bbb2c4e489006d7d8afa61f07)\r\n\r\n``` sh\r\n$ wrangler kv:key put FOO \"key\" \"value\"\r\n```\r\n\r\nand this would `put` to the binding named \"FOO\" under env.staging (id: c417513a199c4289a1a0c8385c58a0e7):\r\n\r\n``` sh\r\n$ wrangler kv:key put FOO \"key\" \"value\" --env=staging\r\n```\r\n\r\n### Why not use the \"title\" of the namespace?\r\n\r\nIn the context of a Wrangler project, a user is more likely to be interacting with the binding they are using in the worker. There's also not a compelling reason to store namespace titles locally, so using title to refer to a namespace in this way would require an API lookup query on every command invocation, as opposed to the project toml parsing Wrangler already does as part of every command.\r\n\r\n### What if you want to work with a namespace you have not added to a project?\r\n\r\nWe should retain the namespace id argument as a flag and allow a `--` positional argument for the binding name to allow a user to operate on a namespace that is not yet specified in their wrangler project:\r\n\r\n``` sh\r\n$ wrangler kv:key put -- \"key\" \"value\" --namespace_id=f5b309d7ebec48649ec0604facb26c7d\r\n```\n",
        "hints_text": "Blocked until environments support (https://github.com/cloudflare/wrangler/milestone/12) is complete.",
        "created_at": "2019-09-10T05:19:19Z",
        "version": "1.2"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 537,
        "instance_id": "cloudflare__wrangler-legacy-537",
        "issue_numbers": [
            "510"
        ],
        "base_commit": "8fb1f56d37cf8441ed7fcfa48acf41525ab5927c",
        "patch": "diff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -25,6 +25,7 @@ $ wrangler kv:namespace create \"new kv namespace\"\n ```\n \n ### `delete`\n+Deletes a given namespace.\n \n #### Usage\n \ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -37,6 +38,7 @@ yes\n ```\n \n ### `rename`\n+Renames a given namespace.\n \n #### Usage\n \ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -67,12 +69,21 @@ $ wrangler kv:namespace list\n \n ### `put`\n \n-Writes a single key/value pair to the given namespace.\n+Writes a single key/value pair to the given namespace. Optional params include \n+1. `--ttl`: Number of seconds for which the entries should be visible before they expire. At least 60. Takes precedence over 'expiration' option.\n+1. `--expiration`: Number of seconds since the UNIX epoch, indicating when the key-value pair should expire.\n+1. `--path`: Read value from the file at a given path. *This is good for security-sensitive operations, like uploading keys to KV; uploading from a file prevents a key value from being saved in areas like your terminal history.*\n+\n \n #### Usage\n \n ```sh\n $ wrangler kv:key put f7b02e7fc70443149ac906dd81ec1791 \"key\" \"value\" --ttl=10000\n+\u2728  Success\n+```\n+```sh\n+$ wrangler kv:key put f7b02e7fc70443149ac906dd81ec1791 \"key\" value.txt --path\n+\u2728  Success\n ```\n \n ### `get`\ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -83,6 +94,7 @@ Reads a single value by key from the given namespace.\n \n ```sh\n $ wrangler kv:key get f7b02e7fc70443149ac906dd81ec1791 \"key\"\n+=> value\n ```\n \n ### `delete`\ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -132,25 +159,29 @@ Bulk operations take as an argument a pre-built JSON file, which should be a lis\n \n If both `expiration` and `expiration_ttl` are specified for a given key, the API will prefer `expiration_ttl`.\n \n-### `put`\n-\n-Writes a file full of key/value pairs to the given namespace. Takes as its argument a giant json with a list of keys to upload (see JSON spec).\n-\n #### Usage\n \n ```sh\n-$ wrangler kv:bulk put f7b02e7fc70443149ac906dd81ec1791 ./allthethings.json\n+$ wrangler kv:bulk put f7b02e7fc70443149ac906dd81ec1791 allthethingsupload.json\n+\u2728  Success\n ```\n \n ### `delete`\n \n Deletes all specified keys within a given namespace.\n+Takes as an argument a JSON file with a list of keys to delete; for example:\n+```json\n+[\n+    \"key1\",\n+    \"key2\"\n+]\n+```\n \n #### Usage\n \n ```sh\n-$ wrangler kv:bulk delete f7b02e7fc70443149ac906dd81ec1791 ./allthethings.json\n-Are you sure you want to delete all keys in ./allthethings.json? [y/n]\n+$ wrangler kv:bulk delete f7b02e7fc70443149ac906dd81ec1791 allthethingsdelete.json\n+Are you sure you want to delete all keys in allthethingsdelete.json? [y/n]\n yes\n \u2728  Success\n ```\n",
        "test_patch": "diff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -101,26 +113,41 @@ yes\n \n ### `list`\n \n-Outputs a list of all KV namespaces associated with your account id.\n+Outputs a list of all keys in a given namespace. Optional params include\n+1. `--prefix`: A prefix to filter listed keys\n \n #### Usage\n+The example below uses Python's JSON pretty-printing command line tool to pretty-print output.\n \n ```sh\n-$ wrangler kv:key list f7b02e7fc70443149ac906dd81ec1791 --prefix=\"public\"\n-\ud83c\udf00  Retrieving keys\n-\u2728  Success:\n-+------------------+----------------------------------+\n-| KEY              | EXPIRATION                       |\n-+------------------+----------------------------------+\n-| \"key\"            | Wed Aug 28 10:28:44 CDT 2019     |\n-+------------------+----------------------------------+\n+$ wrangler kv:key list f7b02e7fc70443149ac906dd81ec1791 --prefix=\"public\" | python -m json.tool\n+[\n+    {\n+        \"name\": \"public_key\"\n+    }, \n+    {\n+        \"name\": \"public_key_with_expiration\",\n+        \"expiration\": 1568014518\n+    } \n+]\n ```\n \n ## `kv:bulk`\n \n-### JSON body\n+### `put`\n \n-Bulk operations take as an argument a pre-built JSON file, which should be a list of objects with the following schema:\n+Writes a file full of key/value pairs to the given namespace. Takes as an argument a JSON file with a list of key-value pairs to upload (see JSON spec above). An example of JSON input:\n+```json\n+[\n+    {\n+        \"key\": \"test_key\",\n+        \"value\": \"test_value\",\n+        \"expiration_ttl\": 3600\n+    }\n+]\n+```\n+\n+The schema below is the full schema for key-value entries uploaded via the bulk API:\n \n | **Name**                       | **Description**                                              | Optional |\n | ------------------------------ | ------------------------------------------------------------ | -------- |\n",
        "problem_statement": "Readme for KV\n### \ud83d\udca1 Feature request\r\n\r\n<!-- \r\n  Please fill out each section below before submitting your \ud83d\udca1 feature request.\r\n\r\n  Before opening a new issue, please search for existing issues: https://github.com/cloudflare/wrangler/issues\r\n\r\n  Thanks! -->\r\n\r\n#### Overview and problem statement\r\n\r\nAdd to readme\r\n\r\n#### Basic example\r\n\r\n* A copy pasteable .json file example for bulk uploads instead of just the definition\r\n* Example of how to set up a file to be the value of a key (that is possible with the commands right \ud83e\udd14?)\r\n* what `--prefix` does\n",
        "hints_text": "> A copy pasteable .json file example for bulk uploads instead of just the definition\r\n\r\nI don't think this would make a whole lot of sense, as the json file is intended to include a lot of custom keys with their info defined by the user. I would expect it to be something a user generates programmatically using a scripting language or similar.\r\n\r\nHowever I think this issue indicates some confusion; the schema in the documentation indicates the shape of each object in the JSON file generated by a user; the JSON file should actually consist of an Array of objects of the specified shape. Perhaps the docs could be re-worded to make this clearer.\r\n\r\n> Example of how to set up a file to be the value of a key (that is possible with the commands right \ud83e\udd14?)\r\n\r\nThis will be supported by a set of `kv:bucket` subcommands in 1.4.0 (upload, delete, sync).\r\n\r\nHowever we might indicate some instructions for how a user might prepare a file for use as a value in the case where they aren't looking for bucket functionality, but instead want to upload a set of photos with just names as keys, e.g. \r\n\r\n``` json\r\n[{\r\n\t\"key\": \"myCatHatesPickles\",\r\n\t\"value\": \"base64-encoded gif of a terrified cat\",\r\n\t\"base64\": true\r\n}]\r\n```\r\n\r\n> what --prefix does\r\n\r\nGood call!\nThanks! Though yes a program will likely be generating the file, it does make it harder to understand what to make that program generate without a clear example (e.g. you sharing that example was used to help me understand so why not share that with users in the docs? ) \nThe readme is also a little outdated, now that I read it...\r\nfor example, \r\n```sh\r\n$ wrangler kv:key list f7b02e7fc70443149ac906dd81ec1791 --prefix=\"public\"\r\n\ud83c\udf00  Retrieving keys \ud83c\udf00 \r\n\u2728  Success:\r\n+------------------+----------------------------------+\r\n| KEY              | EXPIRATION                       |\r\n+------------------+----------------------------------+\r\n| \"key\"            | Wed Aug 28 10:28:44 CDT 2019     |\r\n+------------------+----------------------------------+\r\n```\r\nis inaccurate--we return a json blob instead.\r\nIt could also be worth adding the whole invocation (what input looks like and what output looks like) for the `kv:key` and `kv:bulk` operations.\r\n\r\nGah!! I'm sorry I didn't make note of this earlier--what we have right now is good for testers, but we'll definitely want to finesse it before 1.3.0 goes live :)",
        "created_at": "2019-09-09T08:04:19Z",
        "version": "1.2"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 525,
        "instance_id": "cloudflare__wrangler-legacy-525",
        "issue_numbers": [
            "480"
        ],
        "base_commit": "4cab5bebfa2452a17aa3d0ef879aeaf7e2d197f7",
        "patch": "diff --git a/src/settings/project/mod.rs b/src/settings/project/mod.rs\n--- a/src/settings/project/mod.rs\n+++ b/src/settings/project/mod.rs\n@@ -7,7 +7,7 @@ pub use project_type::ProjectType;\n use crate::terminal::emoji;\n use crate::terminal::message;\n \n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::fs;\n use std::path::{Path, PathBuf};\n \ndiff --git a/src/settings/project/mod.rs b/src/settings/project/mod.rs\n--- a/src/settings/project/mod.rs\n+++ b/src/settings/project/mod.rs\n@@ -77,7 +77,10 @@ impl Manifest {\n \n         validate_kv_namespaces_config(kv_namespaces)?;\n \n-        let manifest = config.try_into()?;\n+        let manifest: Manifest = config.try_into()?;\n+\n+        check_for_duplicate_names(&manifest)?;\n+\n         Ok(manifest)\n     }\n \n",
        "test_patch": "diff --git a/src/settings/project/mod.rs b/src/settings/project/mod.rs\n--- a/src/settings/project/mod.rs\n+++ b/src/settings/project/mod.rs\n@@ -355,5 +358,41 @@ id = \"0f2ac74b498b48028cb68387c421e279\"\n     Ok(())\n }\n \n+fn check_for_duplicate_names(manifest: &Manifest) -> Result<(), failure::Error> {\n+    let mut names: HashSet<String> = HashSet::new();\n+    let mut duplicate_names: HashSet<String> = HashSet::new();\n+    names.insert(manifest.name.to_string());\n+    if let Some(environments) = &manifest.env {\n+        for (_, environment) in environments.iter() {\n+            if let Some(name) = &environment.name {\n+                if names.contains(name) && !duplicate_names.contains(name) {\n+                    duplicate_names.insert(name.to_string());\n+                } else {\n+                    names.insert(name.to_string());\n+                }\n+            }\n+        }\n+    }\n+    let duplicate_name_string = duplicate_names\n+        .clone()\n+        .into_iter()\n+        .collect::<Vec<String>>()\n+        .join(\", \");\n+    let duplicate_message = match duplicate_names.len() {\n+        1 => Some(\"this name is duplicated\".to_string()),\n+        n if n >= 2 => Some(\"these names are duplicated\".to_string()),\n+        _ => None,\n+    };\n+    if let Some(message) = duplicate_message {\n+        failure::bail!(format!(\n+            \"{} Each name in your `wrangler.toml` must be unique, {}: {}\",\n+            emoji::WARN,\n+            message,\n+            duplicate_name_string\n+        ))\n+    }\n+    Ok(())\n+}\n+\n #[cfg(test)]\n mod tests;\ndiff --git a/src/settings/project/tests/tomls/kv_namespaces.toml b/src/settings/project/tests/tomls/kv_namespaces.toml\n--- a/src/settings/project/tests/tomls/kv_namespaces.toml\n+++ b/src/settings/project/tests/tomls/kv_namespaces.toml\n@@ -5,7 +5,7 @@ account_id = \"\"\n route = \"\"\n \n [env.production]\n-name = \"staging-worker\"\n+name = \"production-worker\"\n zone_id = \"\"\n account_id = \"\"\n route = \"\"\n",
        "problem_statement": "Disallow duplicate names in environments\nWe don't want people accidentally overwriting production workers when they think they're deploying to staging\n",
        "hints_text": "",
        "created_at": "2019-09-05T18:23:14Z",
        "version": "1.2"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 508,
        "instance_id": "cloudflare__wrangler-legacy-508",
        "issue_numbers": [
            "481"
        ],
        "base_commit": "d8e3f08c66dde0b512e71456638a3fcd6cc3e7bb",
        "patch": "diff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -3,15 +3,15 @@ pub mod wranglerjs;\n mod watch;\n pub use watch::watch_and_build;\n \n-use crate::settings::project::{Project, ProjectType};\n+use crate::settings::project::{ProjectType, Target};\n use crate::terminal::message;\n use crate::{commands, install};\n \n use std::path::PathBuf;\n use std::process::Command;\n \n-pub fn build(project: &Project) -> Result<(), failure::Error> {\n-    let project_type = &project.project_type;\n+pub fn build(target: &Target) -> Result<(), failure::Error> {\n+    let project_type = &target.project_type;\n     match project_type {\n         ProjectType::JavaScript => {\n             message::info(\"JavaScript project found. Skipping unnecessary build!\")\ndiff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -27,7 +27,7 @@ pub fn build(project: &Project) -> Result<(), failure::Error> {\n             commands::run(command, &command_name)?;\n         }\n         ProjectType::Webpack => {\n-            wranglerjs::run_build(project)?;\n+            wranglerjs::run_build(target)?;\n         }\n     }\n \ndiff --git a/src/commands/build/watch/mod.rs b/src/commands/build/watch/mod.rs\n--- a/src/commands/build/watch/mod.rs\n+++ b/src/commands/build/watch/mod.rs\n@@ -3,7 +3,7 @@ pub use watcher::wait_for_changes;\n \n use crate::commands::build::{command, wranglerjs};\n use crate::commands::publish::Package;\n-use crate::settings::project::{Project, ProjectType};\n+use crate::settings::project::{ProjectType, Target};\n use crate::terminal::message;\n use crate::{commands, install};\n \ndiff --git a/src/commands/build/watch/mod.rs b/src/commands/build/watch/mod.rs\n--- a/src/commands/build/watch/mod.rs\n+++ b/src/commands/build/watch/mod.rs\n@@ -18,10 +18,10 @@ pub const COOLDOWN_PERIOD: Duration = Duration::from_millis(2000);\n /// watch a project for changes and re-build it when necessary,\n /// outputting a build event to tx.\n pub fn watch_and_build(\n-    project: &Project,\n+    target: &Target,\n     tx: Option<mpsc::Sender<()>>,\n ) -> Result<(), failure::Error> {\n-    let project_type = &project.project_type;\n+    let project_type = &target.project_type;\n     match project_type {\n         ProjectType::JavaScript => {\n             let package = Package::new(\"./\")?;\ndiff --git a/src/commands/build/watch/mod.rs b/src/commands/build/watch/mod.rs\n--- a/src/commands/build/watch/mod.rs\n+++ b/src/commands/build/watch/mod.rs\n@@ -81,7 +81,7 @@ pub fn watch_and_build(\n             });\n         }\n         ProjectType::Webpack => {\n-            wranglerjs::run_build_and_watch(project, tx)?;\n+            wranglerjs::run_build_and_watch(target, tx)?;\n         }\n     }\n \ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -20,7 +20,7 @@ use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use crate::settings::project::Project;\n+use crate::settings::project::Target;\n use crate::terminal::message;\n \n use notify::{self, RecursiveMode, Watcher};\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -34,8 +34,8 @@ use std::time::Duration;\n // executable and wait for completion. The file will receive the a serialized\n // {WranglerjsOutput} struct.\n // Note that the ability to pass a fd is platform-specific\n-pub fn run_build(project: &Project) -> Result<(), failure::Error> {\n-    let (mut command, temp_file, bundle) = setup_build(project)?;\n+pub fn run_build(target: &Target) -> Result<(), failure::Error> {\n+    let (mut command, temp_file, bundle) = setup_build(target)?;\n \n     info!(\"Running {:?}\", command);\n \ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -53,11 +53,8 @@ pub fn run_build(project: &Project) -> Result<(), failure::Error> {\n     }\n }\n \n-pub fn run_build_and_watch(\n-    project: &Project,\n-    tx: Option<Sender<()>>,\n-) -> Result<(), failure::Error> {\n-    let (mut command, temp_file, bundle) = setup_build(project)?;\n+pub fn run_build_and_watch(target: &Target, tx: Option<Sender<()>>) -> Result<(), failure::Error> {\n+    let (mut command, temp_file, bundle) = setup_build(target)?;\n     command.arg(\"--watch=1\");\n \n     info!(\"Running {:?} in watch mode\", command);\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -125,7 +122,7 @@ fn write_wranglerjs_output(\n }\n \n //setup a build to run wranglerjs, return the command, the ipc temp file, and the bundle\n-fn setup_build(project: &Project) -> Result<(Command, PathBuf, Bundle), failure::Error> {\n+fn setup_build(target: &Target) -> Result<(Command, PathBuf, Bundle), failure::Error> {\n     for tool in &[\"node\", \"npm\"] {\n         env_dep_installed(tool)?;\n     }\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -157,7 +154,7 @@ fn setup_build(project: &Project) -> Result<(Command, PathBuf, Bundle), failure:\n     command.arg(format!(\"--wasm-binding={}\", bundle.get_wasm_binding()));\n \n     let webpack_config_path = PathBuf::from(\n-        &project\n+        &target\n             .webpack_config\n             .clone()\n             .unwrap_or_else(|| \"webpack.config.js\".to_string()),\ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -1,4 +1,4 @@\n-use crate::settings::project::{Project, ProjectType};\n+use crate::settings::project::{Manifest, ProjectType};\n use crate::{commands, install};\n use std::path::PathBuf;\n use std::process::Command;\ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -16,7 +16,7 @@ pub fn generate(name: &str, template: &str, pt: Option<ProjectType>) -> Result<(\n     let command_name = format!(\"{:?}\", command);\n \n     commands::run(command, &command_name)?;\n-    Project::generate(name.to_string(), pt, false)?;\n+    Manifest::generate(name.to_string(), pt, false)?;\n     Ok(())\n }\n \ndiff --git a/src/commands/init.rs b/src/commands/init.rs\n--- a/src/commands/init.rs\n+++ b/src/commands/init.rs\n@@ -1,4 +1,4 @@\n-use crate::settings::project::{Project, ProjectType};\n+use crate::settings::project::{Manifest, ProjectType};\n use crate::terminal::message;\n use std::path::Path;\n \ndiff --git a/src/commands/init.rs b/src/commands/init.rs\n--- a/src/commands/init.rs\n+++ b/src/commands/init.rs\n@@ -9,7 +9,7 @@ pub fn init(name: Option<&str>, project_type: Option<ProjectType>) -> Result<(),\n     let dirname = get_current_dirname()?;\n     let name = name.unwrap_or_else(|| &dirname);\n     let project_type = project_type.unwrap_or_default();\n-    Project::generate(name.to_string(), project_type, true)?;\n+    Manifest::generate(name.to_string(), project_type, true)?;\n     message::success(\"Succesfully created a `wrangler.toml`\");\n     Ok(())\n }\ndiff --git a/src/commands/mod.rs b/src/commands/mod.rs\n--- a/src/commands/mod.rs\n+++ b/src/commands/mod.rs\n@@ -18,7 +18,6 @@ pub use init::init;\n pub use publish::preview::preview;\n pub use publish::preview::HTTPMethod;\n pub use publish::publish;\n-pub use publish::publish_environment;\n pub use subdomain::subdomain;\n pub use whoami::whoami;\n \ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -14,64 +14,27 @@ use crate::commands;\n use crate::commands::subdomain::Subdomain;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::project::Project;\n+use crate::settings::project::Target;\n use crate::terminal::message;\n \n-pub fn publish(user: &GlobalUser, project: &Project, release: bool) -> Result<(), failure::Error> {\n-    info!(\"release = {}\", release);\n-\n-    if release {\n-        message::warn(\"--release will be deprecated, please use --environment instead!\");\n-    }\n-\n-    validate_project(project, release)?;\n-    commands::build(&project)?;\n-    publish_script(&user, &project, release)?;\n-    if release {\n-        info!(\"release mode detected, making a route...\");\n-        let route = Route::new(&project)?;\n-        Route::publish(&user, &project, &route)?;\n-        let msg = format!(\n-            \"Success! Your worker was successfully published. You can view it at {}.\",\n-            &route.pattern\n-        );\n-        message::success(&msg);\n-    } else {\n-        message::success(\"Success! Your worker was successfully published.\");\n-    }\n-    Ok(())\n-}\n-\n-pub fn publish_environment(user: &GlobalUser, project: &Project) -> Result<(), failure::Error> {\n-    validate_project(project, true)?;\n-    commands::build(&project)?;\n-    publish_script(&user, &project, true)?;\n-    let route = Route::new(&project)?;\n-    Route::publish(&user, &project, &route)?;\n-    message::success(\n-        &format!(\n-            \"Success! Your worker was successfully published. You can view it at {}.\",\n-            &route.pattern\n-        )\n-        .to_owned(),\n-    );\n+pub fn publish(user: &GlobalUser, target: &Target) -> Result<(), failure::Error> {\n+    info!(\"workers_dot_dev = {}\", target.workers_dot_dev);\n \n+    validate_target(target)?;\n+    commands::build(&target)?;\n+    publish_script(&user, &target)?;\n     Ok(())\n }\n \n-fn publish_script(\n-    user: &GlobalUser,\n-    project: &Project,\n-    release: bool,\n-) -> Result<(), failure::Error> {\n+fn publish_script(user: &GlobalUser, target: &Target) -> Result<(), failure::Error> {\n     let worker_addr = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}\",\n-        project.account_id, project.name,\n+        target.account_id, target.name,\n     );\n \n     let client = http::auth_client(user);\n \n-    let script_upload_form = build_script_upload_form(project)?;\n+    let script_upload_form = build_script_upload_form(target)?;\n \n     let mut res = client\n         .put(&worker_addr)\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -88,28 +51,36 @@ fn publish_script(\n         )\n     }\n \n-    if !release {\n-        let private = project.private.unwrap_or(false);\n-        if !private {\n-            info!(\"--release not passed, publishing to subdomain\");\n-            make_public_on_subdomain(project, user)?;\n-        }\n-    }\n+    let pattern = if !target.workers_dot_dev {\n+        let route = Route::new(&target)?;\n+        Route::publish(&user, &target, &route)?;\n+        info!(\"publishing to route\");\n+        route.pattern\n+    } else {\n+        info!(\"publishing to subdomain\");\n+        publish_to_subdomain(target, user)?\n+    };\n+\n+    info!(\"{}\", &pattern);\n+    message::success(&format!(\n+        \"Success! Your worker was successfully published. You can view it at {}\",\n+        &pattern\n+    ));\n \n     Ok(())\n }\n \n fn build_subdomain_request() -> String {\n-    serde_json::json!({ \"enabled\":true}).to_string()\n+    serde_json::json!({ \"enabled\": true }).to_string()\n }\n \n-fn make_public_on_subdomain(project: &Project, user: &GlobalUser) -> Result<(), failure::Error> {\n+fn publish_to_subdomain(target: &Target, user: &GlobalUser) -> Result<String, failure::Error> {\n     info!(\"checking that subdomain is registered\");\n-    let subdomain = Subdomain::get(&project.account_id, user)?;\n+    let subdomain = Subdomain::get(&target.account_id, user)?;\n \n     let sd_worker_addr = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}/subdomain\",\n-        project.account_id, project.name,\n+        target.account_id, target.name,\n     );\n \n     let client = http::auth_client(user);\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -121,33 +92,27 @@ fn make_public_on_subdomain(project: &Project, user: &GlobalUser) -> Result<(),\n         .body(build_subdomain_request())\n         .send()?;\n \n-    if res.status().is_success() {\n-        let msg = format!(\n-            \"Successfully made your script available at https://{}.{}.workers.dev\",\n-            project.name, subdomain\n-        );\n-        message::success(&msg)\n-    } else {\n+    if !res.status().is_success() {\n         failure::bail!(\n             \"Something went wrong! Status: {}, Details {}\",\n             res.status(),\n             res.text()?\n         )\n     }\n-    Ok(())\n+    Ok(format!(\"https://{}.{}.workers.dev\", target.name, subdomain))\n }\n \n-fn validate_project(project: &Project, release: bool) -> Result<(), failure::Error> {\n+fn validate_target(target: &Target) -> Result<(), failure::Error> {\n     let mut missing_fields = Vec::new();\n \n-    if project.account_id.is_empty() {\n+    if target.account_id.is_empty() {\n         missing_fields.push(\"account_id\")\n     };\n-    if project.name.is_empty() {\n+    if target.name.is_empty() {\n         missing_fields.push(\"name\")\n     };\n \n-    match &project.kv_namespaces {\n+    match &target.kv_namespaces {\n         Some(kv_namespaces) => {\n             for kv in kv_namespaces {\n                 if kv.binding.is_empty() {\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -162,9 +127,9 @@ fn validate_project(project: &Project, release: bool) -> Result<(), failure::Err\n         None => {}\n     }\n \n-    let destination = if release {\n-        //check required fields for release\n-        if project\n+    let destination = if !target.workers_dot_dev {\n+        // check required fields for release\n+        if target\n             .zone_id\n             .as_ref()\n             .unwrap_or(&\"\".to_string())\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -172,13 +137,13 @@ fn validate_project(project: &Project, release: bool) -> Result<(), failure::Err\n         {\n             missing_fields.push(\"zone_id\")\n         };\n-        if project.route.as_ref().unwrap_or(&\"\".to_string()).is_empty() {\n+        if target.route.as_ref().unwrap_or(&\"\".to_string()).is_empty() {\n             missing_fields.push(\"route\")\n         };\n-        //zoned deploy destination\n+        // zoned deploy destination\n         \"a route\"\n     } else {\n-        //zoneless deploy destination\n+        // zoneless deploy destination\n         \"your subdomain\"\n     };\n \ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -17,7 +17,7 @@ use log::info;\n \n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::project::Project;\n+use crate::settings::project::Target;\n use crate::terminal::message;\n \n use std::sync::mpsc::channel;\ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -28,14 +28,14 @@ use ws::{Sender, WebSocket};\n const PREVIEW_ADDRESS: &str = \"https://00000000000000000000000000000000.cloudflareworkers.com\";\n \n pub fn preview(\n-    project: Project,\n+    target: Target,\n     user: Option<GlobalUser>,\n     method: HTTPMethod,\n     body: Option<String>,\n     livereload: bool,\n ) -> Result<(), failure::Error> {\n-    commands::build(&project)?;\n-    let script_id = upload_and_get_id(&project, user.as_ref())?;\n+    commands::build(&target)?;\n+    let script_id = upload_and_get_id(&target, user.as_ref())?;\n \n     let session = Uuid::new_v4().to_simple();\n     let preview_host = \"example.com\";\ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -58,7 +58,7 @@ pub fn preview(\n \n         let broadcaster = server.broadcaster();\n         thread::spawn(move || server.run());\n-        watch_for_changes(&project, user.as_ref(), session.to_string(), broadcaster)?;\n+        watch_for_changes(&target, user.as_ref(), session.to_string(), broadcaster)?;\n     } else {\n         open_browser(&format!(\n             \"https://cloudflareworkers.com/?hide_editor#{0}:{1}{2}\",\ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -125,16 +125,16 @@ fn post(\n }\n \n fn watch_for_changes(\n-    project: &Project,\n+    target: &Target,\n     user: Option<&GlobalUser>,\n     session_id: String,\n     broadcaster: Sender,\n ) -> Result<(), failure::Error> {\n     let (tx, rx) = channel();\n-    commands::watch_and_build(&project, Some(tx))?;\n+    commands::watch_and_build(&target, Some(tx))?;\n \n     while let Ok(_e) = rx.recv() {\n-        if let Ok(new_id) = upload_and_get_id(project, user) {\n+        if let Ok(new_id) = upload_and_get_id(target, user) {\n             let msg = FiddleMessage {\n                 session_id: session_id.clone(),\n                 data: FiddleMessageData::LiveReload { new_id },\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -1,7 +1,7 @@\n use crate::commands::publish;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::project::Project;\n+use crate::settings::project::Target;\n use crate::terminal::message;\n use reqwest::Client;\n use serde::Deserialize;\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -33,19 +33,19 @@ struct V4ApiResponse {\n }\n \n pub fn upload_and_get_id(\n-    project: &Project,\n+    target: &Target,\n     user: Option<&GlobalUser>,\n ) -> Result<String, failure::Error> {\n     let preview = match &user {\n         Some(user) => {\n             log::info!(\"GlobalUser set, running with authentication\");\n \n-            let missing_fields = validate(&project);\n+            let missing_fields = validate(&target);\n \n             if missing_fields.is_empty() {\n                 let client = http::auth_client(&user);\n \n-                authenticated_upload(&client, &project)?\n+                authenticated_upload(&client, &target)?\n             } else {\n                 message::warn(&format!(\n                     \"Your wrangler.toml is missing the following fields: {:?}\",\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -54,7 +54,7 @@ pub fn upload_and_get_id(\n                 message::warn(\"Falling back to unauthenticated preview.\");\n \n                 let client = http::client();\n-                unauthenticated_upload(&client, &project)?\n+                unauthenticated_upload(&client, &target)?\n             }\n         }\n         None => {\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -67,24 +67,24 @@ pub fn upload_and_get_id(\n \n             let client = http::client();\n \n-            unauthenticated_upload(&client, &project)?\n+            unauthenticated_upload(&client, &target)?\n         }\n     };\n \n     Ok(preview.id)\n }\n \n-fn validate(project: &Project) -> Vec<&str> {\n+fn validate(target: &Target) -> Vec<&str> {\n     let mut missing_fields = Vec::new();\n \n-    if project.account_id.is_empty() {\n+    if target.account_id.is_empty() {\n         missing_fields.push(\"account_id\")\n     };\n-    if project.name.is_empty() {\n+    if target.name.is_empty() {\n         missing_fields.push(\"name\")\n     };\n \n-    match &project.kv_namespaces {\n+    match &target.kv_namespaces {\n         Some(kv_namespaces) => {\n             for kv in kv_namespaces {\n                 if kv.binding.is_empty() {\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -102,14 +102,14 @@ fn validate(project: &Project) -> Vec<&str> {\n     missing_fields\n }\n \n-fn authenticated_upload(client: &Client, project: &Project) -> Result<Preview, failure::Error> {\n+fn authenticated_upload(client: &Client, target: &Target) -> Result<Preview, failure::Error> {\n     let create_address = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}/preview\",\n-        project.account_id, project.name\n+        target.account_id, target.name\n     );\n     log::info!(\"address: {}\", create_address);\n \n-    let script_upload_form = publish::build_script_upload_form(&project)?;\n+    let script_upload_form = publish::build_script_upload_form(&target)?;\n \n     let mut res = client\n         .post(&create_address)\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -1,6 +1,6 @@\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::project::Project;\n+use crate::settings::project::Target;\n use crate::terminal::emoji;\n use reqwest::header::CONTENT_TYPE;\n use serde::{Deserialize, Serialize};\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -19,8 +19,8 @@ struct RoutesResponse {\n }\n \n impl Route {\n-    pub fn new(project: &Project) -> Result<Route, failure::Error> {\n-        if project\n+    pub fn new(target: &Target) -> Result<Route, failure::Error> {\n+        if target\n             .route\n             .clone()\n             .expect(\"You must provide a zone_id in your wrangler.toml before publishing!\")\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -30,24 +30,24 @@ impl Route {\n         }\n         let msg_config_error = format!(\"{} Your project config has an error, check your `wrangler.toml`: `route` must be provided.\", emoji::WARN);\n         Ok(Route {\n-            script: Some(project.name.to_string()),\n-            pattern: project.route.clone().expect(&msg_config_error),\n+            script: Some(target.name.to_string()),\n+            pattern: target.route.clone().expect(&msg_config_error),\n         })\n     }\n \n     pub fn publish(\n         user: &GlobalUser,\n-        project: &Project,\n+        target: &Target,\n         route: &Route,\n     ) -> Result<(), failure::Error> {\n-        if route.exists(user, project)? {\n+        if route.exists(user, target)? {\n             return Ok(());\n         }\n-        create(user, project, route)\n+        create(user, target, route)\n     }\n \n-    pub fn exists(&self, user: &GlobalUser, project: &Project) -> Result<bool, failure::Error> {\n-        let routes = get_routes(user, project)?;\n+    pub fn exists(&self, user: &GlobalUser, target: &Target) -> Result<bool, failure::Error> {\n+        let routes = get_routes(user, target)?;\n \n         for route in routes {\n             if route.matches(self) {\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -62,8 +62,8 @@ impl Route {\n     }\n }\n \n-fn get_routes(user: &GlobalUser, project: &Project) -> Result<Vec<Route>, failure::Error> {\n-    let routes_addr = get_routes_addr(project)?;\n+fn get_routes(user: &GlobalUser, target: &Target) -> Result<Vec<Route>, failure::Error> {\n+    let routes_addr = get_routes_addr(target)?;\n \n     let client = http::auth_client(user);\n \ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -84,11 +84,11 @@ fn get_routes(user: &GlobalUser, project: &Project) -> Result<Vec<Route>, failur\n     Ok(routes_response.result)\n }\n \n-fn create(user: &GlobalUser, project: &Project, route: &Route) -> Result<(), failure::Error> {\n+fn create(user: &GlobalUser, target: &Target, route: &Route) -> Result<(), failure::Error> {\n     let client = http::auth_client(user);\n     let body = serde_json::to_string(&route)?;\n \n-    let routes_addr = get_routes_addr(project)?;\n+    let routes_addr = get_routes_addr(target)?;\n \n     info!(\"Creating your route {:#?}\", &route.pattern,);\n     let mut res = client\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -109,8 +109,8 @@ fn create(user: &GlobalUser, project: &Project, route: &Route) -> Result<(), fai\n     Ok(())\n }\n \n-fn get_routes_addr(project: &Project) -> Result<String, failure::Error> {\n-    if let Some(zone_id) = &project.zone_id {\n+fn get_routes_addr(target: &Target) -> Result<String, failure::Error> {\n+    if let Some(zone_id) = &target.zone_id {\n         return Ok(format!(\n             \"https://api.cloudflare.com/client/v4/zones/{}/workers/routes\",\n             zone_id\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -11,16 +11,16 @@ use crate::commands::build::wranglerjs;\n use crate::settings::binding;\n use crate::settings::metadata::Metadata;\n use crate::settings::project::kv_namespace;\n-use crate::settings::project::{Project, ProjectType};\n+use crate::settings::project::{ProjectType, Target};\n \n use project_assets::ProjectAssets;\n use wasm_module::WasmModule;\n \n use super::{krate, Package};\n \n-pub fn build_script_upload_form(project: &Project) -> Result<Form, failure::Error> {\n-    let project_type = &project.project_type;\n-    let kv_namespaces = project.kv_namespaces();\n+pub fn build_script_upload_form(target: &Target) -> Result<Form, failure::Error> {\n+    let project_type = &target.project_type;\n+    let kv_namespaces = target.kv_namespaces();\n     match project_type {\n         ProjectType::Rust => {\n             info!(\"Rust project detected. Publishing...\");\ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -1,6 +1,6 @@\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::project::Project;\n+use crate::settings::project::Target;\n use crate::terminal::{emoji, message};\n \n use serde::{Deserialize, Serialize};\ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -58,8 +58,8 @@ fn subdomain_addr(account_id: &str) -> String {\n     )\n }\n \n-pub fn subdomain(name: &str, user: &GlobalUser, project: &Project) -> Result<(), failure::Error> {\n-    if project.account_id.is_empty() {\n+pub fn subdomain(name: &str, user: &GlobalUser, target: &Target) -> Result<(), failure::Error> {\n+    if target.account_id.is_empty() {\n         failure::bail!(format!(\n             \"{} You must provide an account_id in your wrangler.toml before creating a subdomain!\",\n             emoji::WARN\ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -70,7 +70,7 @@ pub fn subdomain(name: &str, user: &GlobalUser, project: &Project) -> Result<(),\n         name\n     );\n     message::working(&msg);\n-    let account_id = &project.account_id;\n+    let account_id = &target.account_id;\n     let addr = subdomain_addr(account_id);\n     let sd = Subdomain {\n         subdomain: name.to_string(),\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -4,6 +4,7 @@\n extern crate text_io;\n \n use std::env;\n+use std::path::Path;\n use std::str::FromStr;\n \n use clap::{App, AppSettings, Arg, SubCommand};\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -99,7 +100,7 @@ fn run() -> Result<(), failure::Error> {\n                     Arg::with_name(\"env\")\n                         .help(\"environment to build\")\n                         .short(\"e\")\n-                        .long(\"environment\")\n+                        .long(\"env\")\n                         .takes_value(true)\n                 ),\n         )\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -123,7 +124,7 @@ fn run() -> Result<(), failure::Error> {\n                     Arg::with_name(\"env\")\n                         .help(\"environment to preview\")\n                         .short(\"e\")\n-                        .long(\"environment\")\n+                        .long(\"env\")\n                         .takes_value(true)\n                 )\n                 .arg(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -143,13 +144,13 @@ fn run() -> Result<(), failure::Error> {\n                     Arg::with_name(\"release\")\n                         .long(\"release\")\n                         .takes_value(false)\n-                        .help(\"[this will be deprecated, use --environment instead]\\nshould this be published to a workers.dev subdomain or a domain name you have registered\"),\n+                        .help(\"[this will be deprecated, use --env instead]\\nshould this be published to a workers.dev subdomain or a domain name you have registered\"),\n                 )\n                 .arg(\n                     Arg::with_name(\"env\")\n                         .help(\"environments to publish to\")\n                         .short(\"e\")\n-                        .long(\"environment\")\n+                        .long(\"env\")\n                         .takes_value(true)\n                 ),\n         )\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -179,6 +180,8 @@ fn run() -> Result<(), failure::Error> {\n         )))\n         .get_matches();\n \n+    let config_path = Path::new(\"./wrangler.toml\");\n+\n     if let Some(_matches) = matches.subcommand_matches(\"config\") {\n         println!(\"Enter email: \");\n         let mut email: String = read!(\"{}\\n\");\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -216,19 +219,15 @@ fn run() -> Result<(), failure::Error> {\n             None => None,\n         };\n         commands::init(name, project_type)?;\n-    } else if matches.subcommand_matches(\"build\").is_some() {\n+    } else if let Some(matches) = matches.subcommand_matches(\"build\") {\n         info!(\"Getting project settings\");\n-        let project = if matches.is_present(\"env\") {\n-            let environment = matches.value_of(\"env\").unwrap();\n-            settings::project::Project::new_from_environment(environment)?\n-        } else {\n-            settings::project::Project::new()?\n-        };\n-\n-        commands::build(&project)?;\n+        let manifest = settings::project::Manifest::new(config_path)?;\n+        let target = &manifest.get_target(matches.value_of(\"env\"), false)?;\n+        commands::build(&target)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"preview\") {\n         info!(\"Getting project settings\");\n-        let project = settings::project::Project::new()?;\n+        let manifest = settings::project::Manifest::new(config_path)?;\n+        let target = manifest.get_target(matches.value_of(\"env\"), false)?;\n \n         // the preview command can be called with or without a Global User having been config'd\n         // so we convert this Result into an Option\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -243,7 +242,7 @@ fn run() -> Result<(), failure::Error> {\n \n         let watch = matches.is_present(\"watch\");\n \n-        commands::preview(project, user, method, body, watch)?;\n+        commands::preview(target, user, method, body, watch)?;\n     } else if matches.subcommand_matches(\"whoami\").is_some() {\n         info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -255,22 +254,23 @@ fn run() -> Result<(), failure::Error> {\n \n         info!(\"Getting project settings\");\n         if matches.is_present(\"env\") && matches.is_present(\"release\") {\n-            failure::bail!(\"You can only pass --environment or --release, not both\")\n+            failure::bail!(\"You can only pass --env or --release, not both\")\n         }\n+        let manifest = settings::project::Manifest::new(config_path)?;\n         if matches.is_present(\"env\") {\n-            let environment = matches.value_of(\"env\").unwrap();\n-            let project = settings::project::Project::new_from_environment(environment)?;\n-            commands::publish_environment(&user, &project)?;\n+            let target = manifest.get_target(matches.value_of(\"env\"), false)?;\n+            commands::publish(&user, &target)?;\n         } else if matches.is_present(\"release\") {\n-            let project = settings::project::Project::new()?;\n-            commands::publish(&user, &project, true)?;\n+            let target = manifest.get_target(None, true)?;\n+            commands::publish(&user, &target)?;\n         } else {\n-            let project = settings::project::Project::new()?;\n-            commands::publish(&user, &project, false)?;\n+            let target = manifest.get_target(None, false)?;\n+            commands::publish(&user, &target)?;\n         }\n     } else if let Some(matches) = matches.subcommand_matches(\"subdomain\") {\n         info!(\"Getting project settings\");\n-        let project = settings::project::Project::new()?;\n+        let manifest = settings::project::Manifest::new(config_path)?;\n+        let target = manifest.get_target(matches.value_of(\"env\"), false)?;\n \n         info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -279,7 +279,7 @@ fn run() -> Result<(), failure::Error> {\n             .value_of(\"name\")\n             .expect(\"The subdomain name you are requesting must be provided.\");\n \n-        commands::subdomain(name, &user, &project)?;\n+        commands::subdomain(name, &user, &target)?;\n     }\n     Ok(())\n }\ndiff --git a/src/settings/project/mod.rs b/src/settings/project/mod.rs\n--- a/src/settings/project/mod.rs\n+++ b/src/settings/project/mod.rs\n@@ -8,50 +8,287 @@ use crate::terminal::emoji;\n use crate::terminal::message;\n \n use std::collections::HashMap;\n-use std::convert::TryFrom;\n use std::fs;\n use std::path::{Path, PathBuf};\n-use std::str::FromStr;\n \n use log::info;\n \n-use config::{Config, Environment, File, Value};\n+use config::{Config, File};\n use serde::{Deserialize, Serialize};\n \n #[derive(Clone, Debug, Deserialize, Serialize)]\n-pub struct Project {\n+pub struct Target {\n+    pub account_id: String,\n+    #[serde(rename = \"kv-namespaces\")]\n+    pub kv_namespaces: Option<Vec<KvNamespace>>,\n     pub name: String,\n     #[serde(rename = \"type\")]\n     pub project_type: ProjectType,\n-    pub zone_id: Option<String>,\n-    pub private: Option<bool>,\n+    pub route: Option<String>,\n+    pub routes: Option<HashMap<String, String>>,\n     pub webpack_config: Option<String>,\n-    pub account_id: String,\n+    pub workers_dot_dev: bool,\n+    pub zone_id: Option<String>,\n+}\n+\n+impl Target {\n+    pub fn kv_namespaces(&self) -> Vec<KvNamespace> {\n+        self.kv_namespaces.clone().unwrap_or_else(Vec::new)\n+    }\n+}\n+\n+#[derive(Clone, Debug, Deserialize, Serialize)]\n+pub struct Environment {\n+    pub account_id: Option<String>,\n+    #[serde(rename = \"kv-namespaces\")]\n+    pub kv_namespaces: Option<Vec<KvNamespace>>,\n+    pub name: Option<String>,\n     pub route: Option<String>,\n     pub routes: Option<HashMap<String, String>>,\n+    pub webpack_config: Option<String>,\n+    pub workers_dot_dev: Option<bool>,\n+    pub zone_id: Option<String>,\n+}\n+\n+#[derive(Clone, Debug, Deserialize, Serialize)]\n+pub struct Manifest {\n+    pub account_id: String,\n+    pub env: Option<HashMap<String, Environment>>,\n     #[serde(rename = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<KvNamespace>>,\n+    pub name: String,\n+    pub private: Option<bool>,\n+    #[serde(rename = \"type\")]\n+    pub project_type: ProjectType,\n+    pub route: Option<String>,\n+    pub routes: Option<HashMap<String, String>>,\n+    pub webpack_config: Option<String>,\n+    pub workers_dot_dev: Option<bool>,\n+    pub zone_id: Option<String>,\n }\n \n-impl Project {\n+impl Manifest {\n+    pub fn new(config_path: &Path) -> Result<Self, failure::Error> {\n+        let config = read_config(config_path)?;\n+\n+        // check for pre 1.1.0 KV namespace format\n+        let kv_namespaces: Result<Vec<config::Value>, config::ConfigError> =\n+            config.get(\"kv-namespaces\");\n+\n+        validate_kv_namespaces_config(kv_namespaces)?;\n+\n+        let manifest = config.try_into()?;\n+        Ok(manifest)\n+    }\n+\n+    pub fn get_target(\n+        &self,\n+        environment_name: Option<&str>,\n+        release: bool,\n+    ) -> Result<Target, failure::Error> {\n+        if release && self.workers_dot_dev.is_some() {\n+            failure::bail!(\n+                \"The --release flag is not compatible with use of the workers_dot_dev field\"\n+            )\n+        }\n+\n+        if release {\n+            message::warn(\"--release will be deprecated\");\n+        }\n+\n+        let environment = match environment_name {\n+            Some(environment_name) => match &self.env {\n+                Some(environment_table) => {\n+                    let environment = environment_table.get(environment_name);\n+                    match environment {\n+                        Some(environment) => Some(environment),\n+                        None => failure::bail!(format!(\n+                            \"{} Could not find environment with name {}\",\n+                            emoji::WARN,\n+                            environment_name\n+                        )),\n+                    }\n+                }\n+                None => failure::bail!(format!(\n+                    \"{} There are no environments specified in your wrangler.toml\",\n+                    emoji::WARN\n+                )),\n+            },\n+            None => None,\n+        };\n+\n+        let deprecate_warning =\n+            \"Please specify the workers_dot_dev boolean in the top level of your wrangler.toml\";\n+        let wdd_failure = format!(\n+            \"{} Your environment should only include `workers_dot_dev` or `route`\",\n+            emoji::WARN\n+        );\n+\n+        let workers_dot_dev = match environment {\n+            // top level configuration\n+            None => {\n+                if release {\n+                    match self.workers_dot_dev {\n+                        Some(_) => failure::bail!(deprecate_warning),\n+                        None => {\n+                            message::warn(deprecate_warning);\n+                            false // --release means not workers.dev\n+                        }\n+                    }\n+                } else {\n+                    match self.workers_dot_dev {\n+                        Some(wdd) => {\n+                            if wdd && self.route.is_some() {\n+                                failure::bail!(wdd_failure)\n+                            }\n+                            wdd\n+                        }\n+                        None => {\n+                            message::warn(deprecate_warning);\n+                            true // no --release means workers.dev\n+                        }\n+                    }\n+                }\n+            }\n+\n+            // environment configuration\n+            Some(environment) => match environment.workers_dot_dev {\n+                Some(wdd) => {\n+                    if wdd && environment.route.is_some() {\n+                        failure::bail!(wdd_failure)\n+                    }\n+                    wdd\n+                }\n+                None => {\n+                    match self.workers_dot_dev {\n+                        Some(wdd) => {\n+                            let wdd = if wdd && environment.route.is_some() {\n+                                false // use route if workers_dot_dev = true is inherited\n+                            } else {\n+                                wdd\n+                            };\n+                            wdd // inherit from top level\n+                        }\n+                        None => false,\n+                    }\n+                }\n+            },\n+        };\n+\n+        let kv_namespaces = match environment {\n+            Some(environment) => match &environment.kv_namespaces {\n+                Some(kv) => Some(kv.clone()),\n+                None => None,\n+            },\n+            None => self.kv_namespaces.clone(),\n+        };\n+\n+        let account_id = match environment {\n+            Some(environment) => match &environment.account_id {\n+                Some(a) => a.clone(),\n+                None => self.account_id.clone(),\n+            },\n+            None => self.account_id.clone(),\n+        };\n+\n+        let name = match environment {\n+            Some(environment) => match &environment.name {\n+                Some(name) => {\n+                    let name = name.clone();\n+                    if name == self.name {\n+                        failure::bail!(format!(\n+                            \"{} Each `name` in your wrangler.toml must be unique\",\n+                            emoji::WARN\n+                        ))\n+                    }\n+                    name\n+                }\n+                None => match environment_name {\n+                    Some(environment_name) => format!(\"{}-{}\", self.name, environment_name),\n+                    None => failure::bail!(\"You must specify `name` in your wrangler.toml\"),\n+                },\n+            },\n+            None => self.name.clone(),\n+        };\n+\n+        let route = match environment {\n+            Some(environment) => match &environment.route {\n+                Some(route) => match environment.workers_dot_dev {\n+                    Some(wdd) => {\n+                        if wdd {\n+                            failure::bail!(wdd_failure);\n+                        } else {\n+                            Some(route.clone())\n+                        }\n+                    }\n+                    None => Some(route.clone()),\n+                },\n+                None => None,\n+            },\n+            None => self.route.clone(),\n+        };\n+\n+        let routes = match environment {\n+            Some(environment) => match &environment.routes {\n+                Some(routes) => Some(routes.clone()),\n+                None => None,\n+            },\n+            None => self.routes.clone(),\n+        };\n+\n+        let webpack_config = match environment {\n+            Some(environment) => match &environment.webpack_config {\n+                Some(webpack_config) => Some(webpack_config.clone()),\n+                None => self.webpack_config.clone(),\n+            },\n+            None => self.webpack_config.clone(),\n+        };\n+\n+        let zone_id = match environment {\n+            Some(environment) => match &environment.zone_id {\n+                Some(zone_id) => Some(zone_id.clone()),\n+                None => self.zone_id.clone(),\n+            },\n+            None => self.zone_id.clone(),\n+        };\n+\n+        let project_type = self.project_type.clone();\n+\n+        Ok(Target {\n+            project_type,    // MUST inherit\n+            account_id,      // MAY inherit\n+            webpack_config,  // MAY inherit\n+            zone_id,         // MAY inherit\n+            workers_dot_dev, // MAY inherit,\n+            // importantly, the top level name will be modified\n+            // to include the name of the environment\n+            name,          // MAY inherit\n+            kv_namespaces, // MUST NOT inherit\n+            route,         // MUST NOT inherit\n+            routes,        // MUST NOT inherit\n+        })\n+    }\n+\n     pub fn generate(\n         name: String,\n         project_type: ProjectType,\n         init: bool,\n-    ) -> Result<Project, failure::Error> {\n-        let project = Project {\n+    ) -> Result<Manifest, failure::Error> {\n+        let manifest = Manifest {\n+            account_id: String::new(),\n+            env: None,\n+            kv_namespaces: None,\n             name: name.clone(),\n+            private: None,\n             project_type: project_type.clone(),\n-            private: Some(false),\n-            zone_id: Some(String::new()),\n-            account_id: String::new(),\n             route: Some(String::new()),\n             routes: None,\n-            kv_namespaces: None,\n             webpack_config: None,\n+            workers_dot_dev: Some(true),\n+            zone_id: Some(String::new()),\n         };\n \n-        let toml = toml::to_string(&project)?;\n+        let toml = toml::to_string(&manifest)?;\n         let config_path = if init {\n             PathBuf::from(\"./\")\n         } else {\ndiff --git a/src/settings/project/mod.rs b/src/settings/project/mod.rs\n--- a/src/settings/project/mod.rs\n+++ b/src/settings/project/mod.rs\n@@ -61,41 +298,27 @@ impl Project {\n \n         info!(\"Writing a wrangler.toml file at {}\", config_file.display());\n         fs::write(&config_file, &toml)?;\n-        Ok(project)\n-    }\n-\n-    pub fn new() -> Result<Self, failure::Error> {\n-        let config_path = Path::new(\"./wrangler.toml\");\n-        get_project_config(None, config_path)\n-    }\n-\n-    pub fn new_from_environment(environment: &str) -> Result<Self, failure::Error> {\n-        let config_path = Path::new(\"./wrangler.toml\");\n-        get_project_config(Some(environment), config_path)\n-    }\n-\n-    pub fn kv_namespaces(&self) -> Vec<KvNamespace> {\n-        self.kv_namespaces.clone().unwrap_or_else(Vec::new)\n+        Ok(manifest)\n     }\n }\n \n-fn get_project_config(\n-    environment_name: Option<&str>,\n-    config_path: &Path,\n-) -> Result<Project, failure::Error> {\n-    let mut s = Config::new();\n+fn read_config(config_path: &Path) -> Result<Config, failure::Error> {\n+    let mut config = Config::new();\n \n     let config_str = config_path\n         .to_str()\n         .expect(\"project config path should be a string\");\n-    s.merge(File::with_name(config_str))?;\n+    config.merge(File::with_name(config_str))?;\n \n     // Eg.. `CF_ACCOUNT_AUTH_KEY=farts` would set the `account_auth_key` key\n-    s.merge(Environment::with_prefix(\"CF\"))?;\n+    config.merge(config::Environment::with_prefix(\"CF\"))?;\n \n-    // check for pre 1.1.0 KV namespace format\n-    let kv_namespaces: Result<Vec<config::Value>, config::ConfigError> = s.get(\"kv-namespaces\");\n+    Ok(config)\n+}\n \n+fn validate_kv_namespaces_config(\n+    kv_namespaces: Result<Vec<config::Value>, config::ConfigError>,\n+) -> Result<(), failure::Error> {\n     if let Ok(values) = kv_namespaces {\n         let old_format = values.iter().any(|val| val.clone().into_str().is_ok());\n \n",
        "test_patch": "diff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -126,22 +126,22 @@ fn authenticated_upload(client: &Client, project: &Project) -> Result<Preview, f\n     Ok(Preview::from(response.result))\n }\n \n-fn unauthenticated_upload(client: &Client, project: &Project) -> Result<Preview, failure::Error> {\n+fn unauthenticated_upload(client: &Client, target: &Target) -> Result<Preview, failure::Error> {\n     let create_address = \"https://cloudflareworkers.com/script\";\n     log::info!(\"address: {}\", create_address);\n \n     // KV namespaces are not supported by the preview service unless you authenticate\n     // so we omit them and provide the user with a little guidance. We don't error out, though,\n     // because there are valid workarounds for this for testing purposes.\n-    let script_upload_form = if project.kv_namespaces.is_some() {\n+    let script_upload_form = if target.kv_namespaces.is_some() {\n         message::warn(\n             \"KV Namespaces are not supported in preview without setting API credentials and account_id\",\n         );\n-        let mut project = project.clone();\n-        project.kv_namespaces = None;\n-        publish::build_script_upload_form(&project)?\n+        let mut target = target.clone();\n+        target.kv_namespaces = None;\n+        publish::build_script_upload_form(&target)?\n     } else {\n-        publish::build_script_upload_form(&project)?\n+        publish::build_script_upload_form(&target)?\n     };\n \n     let mut res = client\ndiff --git a/src/settings/project/mod.rs b/src/settings/project/mod.rs\n--- a/src/settings/project/mod.rs\n+++ b/src/settings/project/mod.rs\n@@ -118,35 +341,7 @@ id = \"0f2ac74b498b48028cb68387c421e279\"\n             failure::bail!(msg)\n         }\n     }\n-\n-    let environments = s.get_table(\"env\");\n-    if environments.is_err() {\n-        let project: Result<Project, config::ConfigError> = s.try_into();\n-        return project.map_err(|e| {\n-            let msg = format!(\n-                \"{} Your project config has an error, check your `wrangler.toml`: {}\",\n-                emoji::WARN,\n-                e\n-            );\n-            failure::err_msg(msg)\n-        });\n-    }\n-    if environment_name.is_none() {\n-        failure::bail!(\"There are no environments in your `wrangler.toml`!\")\n-    }\n-    let environments = environments.unwrap();\n-    let environment_name = environment_name.unwrap();\n-    let environment = match environments.get(environment_name) {\n-        Some(e) => e,\n-        None => failure::bail!(format!(\n-            \"{0} Your `wrangler.toml` does not contain a `{1}` environment {0}\",\n-            emoji::WARN,\n-            environment_name\n-        )),\n-    };\n-\n-    let project = environment.clone().try_into()?;\n-    Ok(project)\n+    Ok(())\n }\n \n #[cfg(test)]\ndiff --git a/src/settings/project/tests/mod.rs b/src/settings/project/tests/mod.rs\n--- a/src/settings/project/tests/mod.rs\n+++ b/src/settings/project/tests/mod.rs\n@@ -5,48 +5,89 @@ use std::path::{Path, PathBuf};\n \n #[test]\n fn it_builds_from_config() {\n-    const NAME: &str = \"default\";\n-    let toml_path = toml_fixture_path(NAME);\n+    let toml_path = toml_fixture_path(\"default\");\n \n-    let project = get_project_config(Some(NAME), &toml_path).unwrap();\n+    let manifest = Manifest::new(&toml_path).unwrap();\n \n-    assert!(project.kv_namespaces.is_none());\n+    let target = manifest.get_target(None, false).unwrap();\n+    assert!(target.kv_namespaces.is_none());\n }\n \n #[test]\n fn it_builds_from_environments_config() {\n-    const NAME: &str = \"environments\";\n-    let toml_path = toml_fixture_path(NAME);\n+    let toml_path = toml_fixture_path(\"environments\");\n+    let manifest = Manifest::new(&toml_path).unwrap();\n \n-    let project = get_project_config(Some(NAME), &toml_path).unwrap();\n+    let target = manifest.get_target(None, false).unwrap();\n+    assert!(target.kv_namespaces.is_none());\n \n-    assert!(project.kv_namespaces.is_none());\n+    let target = manifest.get_target(Some(\"production\"), false).unwrap();\n+    assert!(target.kv_namespaces.is_none());\n }\n \n #[test]\n fn it_builds_from_environments_config_with_kv() {\n-    const NAME: &str = \"kv_namespaces\";\n-    let toml_path = toml_fixture_path(NAME);\n+    let toml_path = toml_fixture_path(\"kv_namespaces\");\n \n-    let project = get_project_config(Some(NAME), &toml_path).unwrap();\n+    let manifest = Manifest::new(&toml_path).unwrap();\n \n-    assert!(project.kv_namespaces.is_none());\n+    let target = manifest.get_target(None, false).unwrap();\n+    assert!(target.kv_namespaces.is_none());\n+\n+    let target = manifest.get_target(Some(\"production\"), false).unwrap();\n+    let kv_1 = KvNamespace {\n+        id: \"somecrazylongidentifierstring\".to_string(),\n+        binding: \"prodKV-1\".to_string(),\n+    };\n+    let kv_2 = KvNamespace {\n+        id: \"anotherwaytoolongidstring\".to_string(),\n+        binding: \"prodKV-2\".to_string(),\n+    };\n+\n+    match target.kv_namespaces {\n+        Some(kv_namespaces) => {\n+            assert!(kv_namespaces.len() == 2);\n+            assert!(kv_namespaces.contains(&kv_1));\n+            assert!(kv_namespaces.contains(&kv_2));\n+        }\n+        None => assert!(false),\n+    }\n+\n+    let target = manifest.get_target(Some(\"staging\"), false).unwrap();\n+    let kv_1 = KvNamespace {\n+        id: \"somecrazylongidentifierstring\".to_string(),\n+        binding: \"stagingKV-1\".to_string(),\n+    };\n+    let kv_2 = KvNamespace {\n+        id: \"anotherwaytoolongidstring\".to_string(),\n+        binding: \"stagingKV-2\".to_string(),\n+    };\n+    match target.kv_namespaces {\n+        Some(kv_namespaces) => {\n+            assert!(kv_namespaces.len() == 2);\n+            assert!(kv_namespaces.contains(&kv_1));\n+            assert!(kv_namespaces.contains(&kv_2));\n+        }\n+        None => assert!(false),\n+    }\n }\n \n #[test]\n fn it_builds_from_legacy_config() {\n     let toml_path = legacy_toml_fixture_path(\"default\");\n \n-    let project = get_project_config(None, &toml_path).unwrap();\n+    let manifest = Manifest::new(&toml_path).unwrap();\n+    let target = manifest.get_target(None, false).unwrap();\n \n-    assert!(project.kv_namespaces.is_none());\n+    assert!(target.kv_namespaces.is_none());\n }\n \n #[test]\n fn it_builds_from_legacy_config_with_kv() {\n     let toml_path = legacy_toml_fixture_path(\"kv_namespaces\");\n \n-    let project = get_project_config(None, &toml_path).unwrap();\n+    let manifest = Manifest::new(&toml_path).unwrap();\n+    let target = manifest.get_target(None, false).unwrap();\n \n     let kv_1 = KvNamespace {\n         id: \"somecrazylongidentifierstring\".to_string(),\ndiff --git a/src/settings/project/tests/mod.rs b/src/settings/project/tests/mod.rs\n--- a/src/settings/project/tests/mod.rs\n+++ b/src/settings/project/tests/mod.rs\n@@ -57,7 +98,7 @@ fn it_builds_from_legacy_config_with_kv() {\n         binding: \"stagingKV\".to_string(),\n     };\n \n-    match project.kv_namespaces {\n+    match target.kv_namespaces {\n         Some(kv_namespaces) => {\n             assert!(kv_namespaces.len() == 2);\n             assert!(kv_namespaces.contains(&kv_1));\ndiff --git a/src/settings/project/tests/tomls/default.toml b/src/settings/project/tests/tomls/default.toml\n--- a/src/settings/project/tests/tomls/default.toml\n+++ b/src/settings/project/tests/tomls/default.toml\n@@ -1,4 +1,3 @@\n-[env.default]\n type = \"webpack\"\n name = \"worker\"\n zone_id = \"\"\ndiff --git a/src/settings/project/tests/tomls/environments.toml b/src/settings/project/tests/tomls/environments.toml\n--- a/src/settings/project/tests/tomls/environments.toml\n+++ b/src/settings/project/tests/tomls/environments.toml\n@@ -1,12 +1,10 @@\n-[env.default]\n type = \"webpack\"\n name = \"worker\"\n zone_id = \"\"\n-private = false\n account_id = \"\"\n route = \"\"\n \n-[env.environments]\n+[env.production]\n type = \"webpack\"\n name = \"staging-worker\"\n zone_id = \"\"\ndiff --git a/src/settings/project/tests/tomls/invalid_environments.toml b/src/settings/project/tests/tomls/invalid_environments.toml\n--- a/src/settings/project/tests/tomls/invalid_environments.toml\n+++ b/src/settings/project/tests/tomls/invalid_environments.toml\n@@ -1,4 +1,3 @@\n-[env.default]\n type = \"webpack\"\n name = \"worker\"\n zone_id = \"\"\ndiff --git a/src/settings/project/tests/tomls/invalid_environments.toml b/src/settings/project/tests/tomls/invalid_environments.toml\n--- a/src/settings/project/tests/tomls/invalid_environments.toml\n+++ b/src/settings/project/tests/tomls/invalid_environments.toml\n@@ -6,10 +5,32 @@ private = false\n account_id = \"\"\n route = \"\"\n \n-[env.staging]\n+[env.name_conflict]\n+name = \"worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\n+\n+[env.has_private]\n+name = \"worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\n+\n+[env.has_type]\n type = \"webpack\"\n name = \"worker\"\n zone_id = \"\"\n private = false\n account_id = \"\"\n-route = \"\"\n\\ No newline at end of file\n+route = \"\"\n+\n+[env.route_and_dot_dev]\n+name = \"worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"example.com/*\"\n+workersdotdev = true\n\\ No newline at end of file\ndiff --git a/src/settings/project/tests/tomls/kv_namespaces.toml b/src/settings/project/tests/tomls/kv_namespaces.toml\n--- a/src/settings/project/tests/tomls/kv_namespaces.toml\n+++ b/src/settings/project/tests/tomls/kv_namespaces.toml\n@@ -1,21 +1,33 @@\n-[env.default]\n type = \"webpack\"\n name = \"worker\"\n zone_id = \"\"\n-private = false\n account_id = \"\"\n route = \"\"\n-    [[kv-namespaces]]\n-    id = \"somecrazylongidentifierstring\"\n-    binding = \"prodKV\"\n \n-[env.kv_namespaces]\n-type = \"webpack\"\n+[env.production]\n+name = \"staging-worker\"\n+zone_id = \"\"\n+account_id = \"\"\n+route = \"\"\n+\n+[[env.production.kv-namespaces]]\n+id = \"somecrazylongidentifierstring\"\n+binding = \"prodKV-1\"\n+\n+[[env.production.kv-namespaces]]\n+id = \"anotherwaytoolongidstring\"\n+binding = \"prodKV-2\"\n+\n+[env.staging]\n name = \"staging-worker\"\n zone_id = \"\"\n-private = false\n account_id = \"\"\n route = \"\"\n-    [[kv-namespaces]]\n-    id = \"anotherwaytoolongidstring\"\n-    binding = \"stagingKV\"\n\\ No newline at end of file\n+\n+[[env.staging.kv-namespaces]]\n+id = \"somecrazylongidentifierstring\"\n+binding = \"stagingKV-1\"\n+\n+[[env.staging.kv-namespaces]]\n+id = \"anotherwaytoolongidstring\"\n+binding = \"stagingKV-2\"\n\\ No newline at end of file\ndiff --git /dev/null b/src/settings/project/tests/tomls/no_default.toml\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/project/tests/tomls/no_default.toml\n@@ -0,0 +1,15 @@\n+[env.production]\n+type = \"webpack\"\n+name = \"staging-worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\n+\n+[env.staging]\n+type = \"webpack\"\n+name = \"staging-worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\n\\ No newline at end of file\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -10,29 +10,6 @@ use std::str;\n \n const BUNDLE_OUT: &str = \"./worker\";\n \n-macro_rules! multiple_env_settings {\n-    ( $f:expr, $x:expr ) => {\n-        let file_path = fixture_path($f).join(\"wrangler.toml\");\n-        let mut file = File::create(file_path).unwrap();\n-        let content = format!(\n-            r#\"\n-            [env.default]\n-            name = \"prod-test\"\n-            zone_id = \"\"\n-            account_id = \"\"\n-            {}\n-            [env.staging]\n-            name = \"staging-test\"\n-            zone_id = \"\"\n-            account_id = \"\"\n-            {}\n-        \"#,\n-            $x, $x\n-        );\n-        file.write_all(content.as_bytes()).unwrap();\n-    };\n-}\n-\n macro_rules! single_env_settings {\n     ( $f:expr, $x:expr ) => {\n         let file_path = fixture_path($f).join(\"wrangler.toml\");\n",
        "problem_statement": "Create environment toml with wrangler generate\n\n",
        "hints_text": "",
        "created_at": "2019-09-03T17:56:04Z",
        "version": "1.2"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 471,
        "instance_id": "cloudflare__wrangler-legacy-471",
        "issue_numbers": [
            "354"
        ],
        "base_commit": "c56805e5a8f2bd02b3ff1fb03815dc1c5edea06a",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -257,7 +257,7 @@ dependencies = [\n \n [[package]]\n name = \"cloudflare\"\n-version = \"0.3.2\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2377,7 +2377,7 @@ dependencies = [\n  \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cloudflare 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cloudflare 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"console 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2496,7 +2496,7 @@ dependencies = [\n \"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n \"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n-\"checksum cloudflare 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd5a60a61015ab6e3d7ad185b6050a29e4b0bf27353109f739731eda31a6bc40\"\n+\"checksum cloudflare 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5da6a058eb23a3c0957c1fa0ec8ffd451d48701fed8f143b2a59653b43d79a7f\"\n \"checksum config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9107d78ed62b3fa5a86e7d18e647abed48cfd8f8fab6c72f4cdb982d196f7e6\"\n \"checksum console 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ca57c2c14b8a2bf3105bc9d15574aad80babf6a9c44b1058034cdf8bd169628\"\n \"checksum constant_time_eq 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"995a44c877f9212528ccc74b21a232f66ad69001e40ede5bcee2ac9ef2657120\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -17,7 +17,7 @@ clap = \"2.32.0\"\n config = \"0.9.2\"\n console = \"0.7.5\"\n dirs = \"1.0.5\"\n-cloudflare = \"0.3.2\"\n+cloudflare = \"0.4.0\"\n env_logger = \"0.6.1\"\n failure = \"0.1.5\"\n log = \"0.4.6\"\ndiff --git a/src/commands/config/mod.rs b/src/commands/config/mod.rs\n--- a/src/commands/config/mod.rs\n+++ b/src/commands/config/mod.rs\n@@ -17,10 +17,8 @@ pub fn set_file_mode(file: &PathBuf) {\n         .expect(\"could not set permissions on file\");\n }\n \n-pub fn global_config(email: String, api_key: String) -> Result<(), failure::Error> {\n-    let s = GlobalUser { email, api_key };\n-\n-    let toml = toml::to_string(&s)?;\n+pub fn global_config(user: &GlobalUser) -> Result<(), failure::Error> {\n+    let toml = toml::to_string(&user)?;\n \n     let config_dir = get_global_config_dir().expect(\"could not find global config directory\");\n     fs::create_dir_all(&config_dir)?;\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -3,7 +3,7 @@ use std::time::Duration;\n \n use cloudflare::framework::auth::Credentials;\n use cloudflare::framework::response::ApiFailure;\n-use cloudflare::framework::{HttpApiClient, HttpApiClientConfig};\n+use cloudflare::framework::{Environment, HttpApiClient, HttpApiClientConfig};\n \n use http::status::StatusCode;\n use percent_encoding::{percent_encode, PATH_SEGMENT_ENCODE_SET};\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -72,6 +72,7 @@ fn api_client(user: &GlobalUser) -> Result<HttpApiClient, failure::Error> {\n             // This is useful for bulk upload operations.\n             http_timeout: Duration::from_secs(5 * 60),\n         },\n+        Environment::Production,\n     )\n }\n \ndiff --git a/src/commands/preview/upload.rs b/src/commands/preview/upload.rs\n--- a/src/commands/preview/upload.rs\n+++ b/src/commands/preview/upload.rs\n@@ -78,7 +78,7 @@ pub fn upload(\n                 \"You haven't run `wrangler config`. Running preview without authentication\",\n             );\n             message::help(\n-                \"Run `wrangler config` or set $CF_API_KEY and $CF_EMAIL to configure your user.\",\n+                \"Run `wrangler config` or set either $CF_API_TOKEN or ($CF_EMAIL, $CF_API_KEY) to configure your user.\",\n             );\n \n             if sites_preview {\ndiff --git a/src/commands/whoami/mod.rs b/src/commands/whoami/mod.rs\n--- a/src/commands/whoami/mod.rs\n+++ b/src/commands/whoami/mod.rs\n@@ -1,12 +1,20 @@\n use crate::settings::global_user::GlobalUser;\n use crate::terminal::{emoji, message};\n \n-pub fn whoami(user: &GlobalUser) {\n+pub fn whoami(user: &GlobalUser) -> Result<(), failure::Error> {\n+    // If using email + API key for auth, simply prints out email from config file.\n+    let email: String = match &user.email {\n+        Some(email) => email.to_string(),\n+        None => failure::bail!(\n+            \"At the moment, Wrangler cannot get user information for users using API tokens\"\n+        ),\n+    };\n+\n     let msg = format!(\n         \"{} You are logged in with the email '{}'.\",\n         emoji::WAVING,\n-        user.email\n+        email\n     );\n-\n     message::info(&msg);\n+    Ok(())\n }\ndiff --git a/src/http.rs b/src/http.rs\n--- a/src/http.rs\n+++ b/src/http.rs\n@@ -38,12 +38,34 @@ pub fn client(feature: Option<&str>) -> Client {\n \n pub fn auth_client(feature: Option<&str>, user: &GlobalUser) -> Client {\n     let mut headers = headers(feature);\n-    headers.insert(\"X-Auth-Key\", HeaderValue::from_str(&user.api_key).unwrap());\n-    headers.insert(\"X-Auth-Email\", HeaderValue::from_str(&user.email).unwrap());\n+    add_auth_headers(&mut headers, user);\n \n     builder()\n-        .default_headers(headers)\n+        .default_headers(headers.to_owned())\n         .redirect(RedirectPolicy::none())\n         .build()\n         .expect(\"could not create authenticated http client\")\n }\n+\n+fn add_auth_headers<'a>(headers: &'a mut HeaderMap, user: &GlobalUser) {\n+    match &user.api_token {\n+        Some(token) => headers.insert(\n+            \"Authorization\",\n+            HeaderValue::from_str(&format!(\"Bearer {}\", &token)).unwrap(),\n+        ),\n+        None => {\n+            // fallback to email + API key auth option\n+            match &user.email {\n+                Some(email) => {\n+                    headers.insert(\"X-Auth-Email\", HeaderValue::from_str(&email).unwrap())\n+                }\n+                None => None,\n+            };\n+            match &user.api_key {\n+                Some(key) => headers.insert(\"X-Auth-Key\", HeaderValue::from_str(&key).unwrap()),\n+                None => None,\n+            };\n+            None\n+        }\n+    };\n+}\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -15,6 +15,7 @@ use wrangler::commands;\n use wrangler::commands::kv::key::KVMetaData;\n use wrangler::installer;\n use wrangler::settings;\n+use wrangler::settings::global_user::GlobalUser;\n use wrangler::settings::target::TargetType;\n use wrangler::terminal::emoji;\n use wrangler::terminal::message;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -369,7 +370,13 @@ fn run() -> Result<(), failure::Error> {\n                 .about(&*format!(\n                     \"{} Setup wrangler with your Cloudflare account\",\n                     emoji::SLEUTH\n-                )),\n+                ))\n+                .arg(\n+                    Arg::with_name(\"api-key\")\n+                        .help(\"use an email and global API key for authentication. This is not recommended; use API tokens (the default) if possible.\")\n+                        .long(\"api-key\")\n+                        .takes_value(false),\n+                ),\n         )\n         .subcommand(\n             SubCommand::with_name(\"subdomain\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -391,15 +398,42 @@ fn run() -> Result<(), failure::Error> {\n \n     let config_path = Path::new(\"./wrangler.toml\");\n \n-    if let Some(_matches) = matches.subcommand_matches(\"config\") {\n-        println!(\"Enter email: \");\n-        let mut email: String = read!(\"{}\\n\");\n-        email.truncate(email.trim_end().len());\n-        println!(\"Enter api key: \");\n-        let mut api_key: String = read!(\"{}\\n\");\n-        api_key.truncate(api_key.trim_end().len());\n+    if let Some(matches) = matches.subcommand_matches(\"config\") {\n+        let api_key = matches.is_present(\"api-key\");\n+\n+        let mut user = GlobalUser {\n+            email: None,\n+            api_key: None,\n+            api_token: None,\n+        };\n+\n+        if !api_key {\n+            // Default: use API token.\n+            message::info(\"Looking to use a Global API Key and email instead? Run \\\"wrangler config --api-key\\\". (Not Recommended)\");\n+            println!(\"Enter API token: \");\n+            let mut api_token_str: String = read!(\"{}\\n\");\n+            api_token_str.truncate(api_token_str.trim_end().len());\n+            if !api_token_str.is_empty() {\n+                user.api_token = Some(api_token_str);\n+            }\n+        } else {\n+            message::warn(\"We don't recommend using your Global API Key! Please consider using an API Token instead. https://support.cloudflare.com/hc/en-us/articles/200167836-Managing-API-Tokens-and-Keys\");\n+            println!(\"Enter email: \");\n+            let mut email_str: String = read!(\"{}\\n\");\n+            email_str.truncate(email_str.trim_end().len());\n+            if !email_str.is_empty() {\n+                user.email = Some(email_str);\n+            }\n+\n+            println!(\"Enter global API key: \");\n+            let mut api_key_str: String = read!(\"{}\\n\");\n+            api_key_str.truncate(api_key_str.trim_end().len());\n+            if !api_key_str.is_empty() {\n+                user.api_key = Some(api_key_str);\n+            }\n+        }\n \n-        commands::global_config(email, api_key)?;\n+        commands::global_config(&user)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"generate\") {\n         let name = matches.value_of(\"name\").unwrap_or(\"worker\");\n         let site = matches.is_present(\"site\");\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -478,7 +512,7 @@ fn run() -> Result<(), failure::Error> {\n         log::info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\n \n-        commands::whoami(&user);\n+        commands::whoami(&user)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"publish\") {\n         log::info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -10,8 +10,9 @@ use config::{Config, Environment, File};\n \n #[derive(Clone, Debug, Deserialize, Serialize)]\n pub struct GlobalUser {\n-    pub email: String,\n-    pub api_key: String,\n+    pub email: Option<String>,\n+    pub api_key: Option<String>,\n+    pub api_token: Option<String>,\n }\n \n impl GlobalUser {\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -22,9 +23,16 @@ impl GlobalUser {\n \n impl From<GlobalUser> for Credentials {\n     fn from(user: GlobalUser) -> Credentials {\n+        if let Some(token) = user.api_token {\n+            return Credentials::UserAuthToken { token: token };\n+        }\n+\n+        // fallback to email and global API key.\n+        // If either of the fields below are None, just substitute in an empty string\n+        // and these credentials will trigger the appropriate \"missing field\" response from the API.\n         Credentials::UserAuthKey {\n-            key: user.api_key,\n-            email: user.email,\n+            key: user.api_key.unwrap_or(\"\".to_string()),\n+            email: user.email.unwrap_or(\"\".to_string()),\n         }\n     }\n }\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -50,7 +58,7 @@ fn get_global_config() -> Result<GlobalUser, failure::Error> {\n     }\n \n     // Eg.. `CF_API_KEY=farts` would set the `account_auth_key` key\n-    // envs are: CF_API_KEY and CF_EMAIL\n+    // envs are: CF_EMAIL, CF_API_KEY and CF_API_TOKEN\n     s.merge(Environment::with_prefix(\"CF\"))?;\n \n     let global_user: Result<GlobalUser, config::ConfigError> = s.try_into();\n",
        "test_patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -83,14 +83,21 @@ $ wrangler publish\n \n ### \ud83d\udd27 `config`\n \n-  Configure your global Cloudflare user. This is an interactive command that will prompt you for your email and API key:\n+  Configure your global Cloudflare user. This is an interactive command that will prompt you for your API token:\n \n   ```bash\n   wrangler config\n+  Enter API token:\n+  superlongapitoken\n+  ```\n+\n+  You can also provide your email and global API key (this is not recommended for security reasons):\n+  ```bash\n+  wrangler config --api-key\n   Enter email:\n   testuser@example.com\n-  Enter api key:\n-  ...\n+  Enter global API key:\n+  superlongapikey\n   ```\n \n   You can also [use environment variables](https://developers.cloudflare.com/workers/tooling/wrangler/configuration/) to configure these values.\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -102,10 +109,19 @@ $ wrangler publish\n \n   Additionally, you can configure different [environments](https://developers.cloudflare.com/workers/tooling/wrangler/configuration/environments).\n \n+  You can also use environment variables to handle authentication when you publish a Worker.\n \n-  ```bash\n-  wrangler publish\n-  ```\n+    ```bash\n+    # e.g.\n+    CF_API_TOKEN=superlongtoken wrangler publish\n+    # where\n+    # $CF_API_TOKEN -> your Cloudflare API token\n+\n+    CF_API_KEY=superlongapikey CF_EMAIL=testuser@example.com wrangler publish\n+    # where\n+    # $CF_API_KEY -> your Cloudflare API key\n+    # $CF_EMAIL -> your Cloudflare account email\n+    ```\n \n ### \ud83d\uddc2 `kv`\n \ndiff --git a/tests/config.rs b/tests/config.rs\n--- a/tests/config.rs\n+++ b/tests/config.rs\n@@ -6,23 +6,29 @@ use std::process::{Child, Command, Stdio};\n \n #[test]\n fn it_generates_the_config_unix_eol() {\n-    generate_config_with(\"\\n\");\n+    generate_config_with(\"\\n\", false); // Test `wrangler config`\n+    generate_config_with(\"\\n\", true); // Test `wrangler config --api-key`\n }\n \n #[test]\n fn it_generates_the_config_windows_eol() {\n-    generate_config_with(\"\\r\\n\");\n+    generate_config_with(\"\\r\\n\", false); // Test `wrangler config`\n+    generate_config_with(\"\\r\\n\", true); // Test `wrangler config`\n }\n \n-fn generate_config_with(eol: &str) {\n+fn generate_config_with(eol: &str, use_api_key: bool) {\n     let fake_home_dir = env::current_dir()\n         .expect(\"could not retrieve cwd\")\n         .join(format!(\".it_generates_the_config_{}\", random_chars(5)));\n-    let cmd = config_with_wrangler_home(fake_home_dir.to_str().unwrap());\n+    let cmd = config_with_wrangler_home(fake_home_dir.to_str().unwrap(), use_api_key);\n     let mut stdin = cmd.stdin.unwrap();\n \n-    write!(stdin, \"email@example.com{}\", eol).unwrap();\n-    write!(stdin, \"apikeythisissecretandlong{}\", eol).unwrap();\n+    if use_api_key {\n+        write!(stdin, \"email@example.com{}\", eol).unwrap();\n+        write!(stdin, \"apikeythisissecretandlong{}\", eol).unwrap();\n+    } else {\n+        write!(stdin, \"apitokenthisissecretandlong{}\", eol).unwrap();\n+    }\n \n     let mut buffer = \"\".to_string();\n     let mut stdout = cmd.stdout.expect(\"stdout\");\ndiff --git a/tests/config.rs b/tests/config.rs\n--- a/tests/config.rs\n+++ b/tests/config.rs\n@@ -35,12 +41,21 @@ fn generate_config_with(eol: &str) {\n \n     let config = fs::read_to_string(&config_file)\n         .unwrap_or_else(|_| panic!(\"could not read config at {:?}\", &config_file));\n-    assert_eq!(\n-        config,\n-        r#\"email = \"email@example.com\"\n+\n+    if use_api_key {\n+        assert_eq!(\n+            config,\n+            r#\"email = \"email@example.com\"\n api_key = \"apikeythisissecretandlong\"\n \"#\n-    );\n+        );\n+    } else {\n+        assert_eq!(\n+            config,\n+            r#\"api_token = \"apitokenthisissecretandlong\"\n+\"#\n+        );\n+    }\n \n     // check dir permissions (linux only)\n     if cfg!(target_os = \"linux\") {\ndiff --git a/tests/config.rs b/tests/config.rs\n--- a/tests/config.rs\n+++ b/tests/config.rs\n@@ -56,15 +71,26 @@ api_key = \"apikeythisissecretandlong\"\n     fs::remove_dir_all(&fake_home_dir).expect(\"could not delete dir\");\n }\n \n-fn config_with_wrangler_home(home_dir: &str) -> Child {\n+fn config_with_wrangler_home(home_dir: &str, use_api_key: bool) -> Child {\n     let mut wrangler = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n-    wrangler\n-        .arg(\"config\")\n-        .stdin(Stdio::piped())\n-        .stdout(Stdio::piped())\n-        .env(\"WRANGLER_HOME\", home_dir)\n-        .spawn()\n-        .unwrap()\n+    if use_api_key {\n+        wrangler\n+            .arg(\"config\")\n+            .arg(\"--api-key\")\n+            .stdin(Stdio::piped())\n+            .stdout(Stdio::piped())\n+            .env(\"WRANGLER_HOME\", home_dir)\n+            .spawn()\n+            .unwrap()\n+    } else {\n+        wrangler\n+            .arg(\"config\")\n+            .stdin(Stdio::piped())\n+            .stdout(Stdio::piped())\n+            .env(\"WRANGLER_HOME\", home_dir)\n+            .spawn()\n+            .unwrap()\n+    }\n }\n \n fn random_chars(n: usize) -> String {\n",
        "problem_statement": "Add Support for API Tokens\nAPI Keys and API Tokens both work when authenticating with Cloudflare API endpoints: https://api.cloudflare.com/#getting-started-requests.\r\n\r\nThis is a feature request to add support for using API Tokens, instead of having to use the Global API Key & Email.\n",
        "hints_text": "",
        "created_at": "2019-08-26T21:10:11Z",
        "version": "1.5"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 2159,
        "instance_id": "cloudflare__wrangler-legacy-2159",
        "issue_numbers": [
            "2148"
        ],
        "base_commit": "69d1c203ec867ab6328a810a4bb89bc087433410",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -1,5 +1,86 @@\n # Changelog\n \n+## v1.19.6\n+\n+- ### Features\n+\n+  - **Add `wrangler1` as an alias - [TehShrike], [pull/2139]**\n+\n+    So that when @cloudflare/wrangler is installed along wrangler2, they can each be referenced in npm run scripts.\n+\n+    See https://github.com/cloudflare/wrangler2/pull/40\n+\n+    [tehshrike]: https://github.com/TehShrike\n+    [pull/2139]: https://github.com/cloudflare/wrangler/pull/2139\n+\n+- ### Fixes\n+\n+  - **Don't look for background updates unless Wrangler finished successfully - [jyn514], [pull/2150]**\n+\n+    This works around a segfault due to OpenSSL's exit handlers not being thread-safe.\n+\n+    See https://github.com/cloudflare/wrangler/issues/1464#issuecomment-988245785 for an explanation and alternatives.\n+\n+    [jyn514]: https://github.com/jyn514\n+    [pull/2150]: https://github.com/cloudflare/wrangler/pull/2150\n+\n+  - **fix: incomplete binary with npm installation - [12f23eddde], [pull/2149]**\n+\n+    Closes #2148.\n+    This PR modifies binary-install.js ([reference](https://stackoverflow.com/questions/55374755/node-js-axios-download-file-stream-and-writefile)) to make sure the file stream is complete before the program finishes.\n+    I'm not a\n+    ... truncated\n+\n+    [12f23eddde]: https://github.com/12f23eddde\n+    [pull/2149]: https://github.com/cloudflare/wrangler/pull/2149\n+\n+  - **Get https websockets working - [jyn514], [pull/2153]**\n+\n+    It turns out websocket upgrades with HTTP/2 require an HTTP extension,\n+    which Cloudflare doesn't currently support: https://datatracker.ietf.org/doc/html/rfc8441\n+\n+    To avoid this, enable HTTP/1 for the remote client.\n+\n+    This required an upd\n+    ... truncated\n+\n+    [jyn514]: https://github.com/jyn514\n+    [pull/2153]: https://github.com/cloudflare/wrangler/pull/2153\n+\n+  - **Get the audit CI job passing - [jyn514], [pull/2151]**\n+\n+    Note that I didn't say \"fix the vulnerabilities\" - this just ignores the `chrono` and `time` vulnerabilities because they're both very hard to fix and not very common in practice.\n+\n+    This uncovered a tokio vulnerability, which I've fixed by\n+    ... truncated\n+\n+    [jyn514]: https://github.com/jyn514\n+    [pull/2151]: https://github.com/cloudflare/wrangler/pull/2151\n+\n+  - **Proxy websocket connections when using authenticated (realish) preview - [jyn514], [pull/2135]**\n+\n+    Previously, Wrangler would return a \"101 Switching Protocols\" response\n+    and then immediately close the TCP connection. This changes it to instead\n+    continue proxying the connection to the remote worker.\n+\n+    This is simpler than `wrangler dev\n+    ... truncated\n+\n+    [jyn514]: https://github.com/jyn514\n+    [pull/2135]: https://github.com/cloudflare/wrangler/pull/2135\n+\n+- ### Maintenance\n+\n+  - **Update Rust toolchain to 1.57 - [taylorlee], [pull/2145]**\n+\n+    I originally updated my toolchain to 1.56.1 on a local branch, since afaict rust-analyzer wasn't able to work with derived StructOpt proc-macros in 1.54. Since 1.57 was released today, I figured I'd update it all the way in this pr.\n+\n+    foll\n+    ... truncated\n+\n+    [taylorlee]: https://github.com/taylorlee\n+    [pull/2145]: https://github.com/cloudflare/wrangler/pull/2145\n+\n ## v1.19.5\n \n - ## Features\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -32,15 +32,6 @@ dependencies = [\n  \"memchr\",\n ]\n \n-[[package]]\n-name = \"ansi_term\"\n-version = \"0.11.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n-dependencies = [\n- \"winapi 0.3.9\",\n-]\n-\n [[package]]\n name = \"ansi_term\"\n version = \"0.12.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -52,18 +43,18 @@ dependencies = [\n \n [[package]]\n name = \"anyhow\"\n-version = \"1.0.45\"\n+version = \"1.0.51\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ee10e43ae4a853c0a3591d4e2ada1719e553be18199d9da9d4a83f5927c2f5c7\"\n+checksum = \"8b26702f315f53b6071259e15dd9d64528213b44d61de1ec926eca7715d62203\"\n dependencies = [\n  \"backtrace\",\n ]\n \n [[package]]\n name = \"arc-swap\"\n-version = \"1.4.0\"\n+version = \"1.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e6df5aef5c5830360ce5218cecb8f018af3438af5686ae945094affc86fdec63\"\n+checksum = \"c5d78ce20460b82d3fa150275ed9d55e21064fc7951177baacf86a145c4a4b1f\"\n \n [[package]]\n name = \"arrayref\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -93,9 +84,9 @@ dependencies = [\n \n [[package]]\n name = \"async-trait\"\n-version = \"0.1.51\"\n+version = \"0.1.52\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"44318e776df68115a881de9a8fd1b9e53368d7a4a5ce4cc48517da3393233a5e\"\n+checksum = \"061a7acccaa286c011ddc30970520b98fa40e00c9d644633fb26b5fc63a265e3\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -285,9 +276,9 @@ dependencies = [\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.71\"\n+version = \"1.0.72\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"79c2681d6594606957bbb8631c4b90a7fcaaa72cdb714743a437b156d6a7eedd\"\n+checksum = \"22a9137b95ea06864e018375b72adfb7db6e6f68cfc8df5a04d00288050485ee\"\n \n [[package]]\n name = \"cfg-if\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -324,17 +315,17 @@ dependencies = [\n  \"num-integer\",\n  \"num-traits\",\n  \"serde\",\n- \"time\",\n+ \"time 0.1.44\",\n  \"winapi 0.3.9\",\n ]\n \n [[package]]\n name = \"clap\"\n-version = \"2.33.3\"\n+version = \"2.34.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"37e58ac78573c40708d45522f0d80fa2f01cc4f9b4e2bf749807255454312002\"\n+checksum = \"a0610544180c38b88101fecf2dd634b174a62eef6946f84dfc6a7127512b381c\"\n dependencies = [\n- \"ansi_term 0.11.0\",\n+ \"ansi_term\",\n  \"atty\",\n  \"bitflags\",\n  \"strsim 0.8.0\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -386,7 +377,7 @@ version = \"2.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"1fd32eb54d016e203b7c2600e3a7802c75843a92e38ccc4869aefeca21771a64\"\n dependencies = [\n- \"ansi_term 0.12.1\",\n+ \"ansi_term\",\n  \"atty\",\n  \"libc\",\n  \"serde\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -514,9 +505,9 @@ dependencies = [\n \n [[package]]\n name = \"crc32fast\"\n-version = \"1.2.1\"\n+version = \"1.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"81156fece84ab6a9f2afdb109ce3ae577e42b1228441eded99bd77f627953b1a\"\n+checksum = \"738c290dfaea84fc1ca15ad9c168d083b05a714e1efddd8edaab678dc28d2836\"\n dependencies = [\n  \"cfg-if 1.0.0\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -549,7 +540,7 @@ checksum = \"22813a6dc45b335f9bade10bf7271dc477e81113e89eb251a0bc2a8a81c536e1\"\n dependencies = [\n  \"bstr\",\n  \"csv-core\",\n- \"itoa\",\n+ \"itoa 0.4.8\",\n  \"ryu\",\n  \"serde\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -565,9 +556,9 @@ dependencies = [\n \n [[package]]\n name = \"curl\"\n-version = \"0.4.40\"\n+version = \"0.4.41\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"877cc2f9b8367e32b6dabb9d581557e651cb3aa693a37f8679091bbf42687d5d\"\n+checksum = \"1bc6d233563261f8db6ffb83bbaad5a73837a6e6b28868e926337ebbdece0be3\"\n dependencies = [\n  \"curl-sys\",\n  \"libc\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -580,9 +571,9 @@ dependencies = [\n \n [[package]]\n name = \"curl-sys\"\n-version = \"0.4.50+curl-7.79.1\"\n+version = \"0.4.51+curl-7.80.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4856b76919dd599f31236bb18db5f5bd36e2ce131e64f857ca5c259665b76171\"\n+checksum = \"d130987e6a6a34fe0889e1083022fa48cd90e6709a84be3fb8dd95801de5af20\"\n dependencies = [\n  \"cc\",\n  \"libc\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -595,9 +586,9 @@ dependencies = [\n \n [[package]]\n name = \"darling\"\n-version = \"0.13.0\"\n+version = \"0.13.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"757c0ded2af11d8e739c4daea1ac623dd1624b06c844cf3f5a39f1bdbd99bb12\"\n+checksum = \"d0d720b8683f8dd83c65155f0530560cba68cd2bf395f6513a483caee57ff7f4\"\n dependencies = [\n  \"darling_core\",\n  \"darling_macro\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -605,9 +596,9 @@ dependencies = [\n \n [[package]]\n name = \"darling_core\"\n-version = \"0.13.0\"\n+version = \"0.13.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2c34d8efb62d0c2d7f60ece80f75e5c63c1588ba68032740494b0b9a996466e3\"\n+checksum = \"7a340f241d2ceed1deb47ae36c4144b2707ec7dd0b649f894cb39bb595986324\"\n dependencies = [\n  \"fnv\",\n  \"ident_case\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -619,9 +610,9 @@ dependencies = [\n \n [[package]]\n name = \"darling_macro\"\n-version = \"0.13.0\"\n+version = \"0.13.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ade7bff147130fe5e6d39f089c6bd49ec0250f35d70b2eebf72afdfc919f15cc\"\n+checksum = \"72c41b3b7352feb3211a0d743dc5700a4e3b60f51bd2b368892d1e0f9a95f44b\"\n dependencies = [\n  \"darling_core\",\n  \"quote\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -740,9 +731,9 @@ checksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n \n [[package]]\n name = \"encoding_rs\"\n-version = \"0.8.29\"\n+version = \"0.8.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a74ea89a0a1b98f6332de42c95baff457ada66d1cb4030f9ff151b2041a1c746\"\n+checksum = \"7896dc8abb250ffdda33912550faa54c88ec8b998dec0b2c55ab224921ce11df\"\n dependencies = [\n  \"cfg-if 1.0.0\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1080,9 +1071,9 @@ dependencies = [\n \n [[package]]\n name = \"h2\"\n-version = \"0.3.7\"\n+version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7fd819562fcebdac5afc5c113c3ec36f902840b70fd4fc458799c8ce4607ae55\"\n+checksum = \"8f072413d126e57991455e0a922b31e4c8ba7c2ffbebf6b78b4f8521397d65cd\"\n dependencies = [\n  \"bytes 1.1.0\",\n  \"fnv\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1135,7 +1126,7 @@ checksum = \"1323096b05d41827dadeaee54c9981958c0f94e670bc94ed80037d1a7b8b186b\"\n dependencies = [\n  \"bytes 1.1.0\",\n  \"fnv\",\n- \"itoa\",\n+ \"itoa 0.4.8\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1169,9 +1160,9 @@ checksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n \n [[package]]\n name = \"hyper\"\n-version = \"0.14.15\"\n+version = \"0.14.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"436ec0091e4f20e655156a30a0df3770fe2900aa301e548e08446ec794b6953c\"\n+checksum = \"b7ec3e62bdc98a2f0393a5048e4c30ef659440ea6e0e572965103e72bd836f55\"\n dependencies = [\n  \"bytes 1.1.0\",\n  \"futures-channel\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1182,7 +1173,7 @@ dependencies = [\n  \"http-body\",\n  \"httparse\",\n  \"httpdate\",\n- \"itoa\",\n+ \"itoa 0.4.8\",\n  \"pin-project-lite\",\n  \"socket2\",\n  \"tokio\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1331,9 +1322,9 @@ dependencies = [\n \n [[package]]\n name = \"itertools\"\n-version = \"0.10.1\"\n+version = \"0.10.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"69ddb889f9d0d08a67338271fa9b62996bc788c7796a5c18cf057420aaed5eaf\"\n+checksum = \"a9a9d19fa1e79b6215ff29b9d6880b706147f16e9b1dbb1e4e5947b5b02bc5e3\"\n dependencies = [\n  \"either\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1344,6 +1335,12 @@ version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"b71991ff56294aa922b450139ee08b3bfc70982c6b2c7562771375cf73542dd4\"\n \n+[[package]]\n+name = \"itoa\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1aab8fc367588b89dcee83ab0fd66b72b50b72fa1904d7095045ace2b0c81c35\"\n+\n [[package]]\n name = \"js-sys\"\n version = \"0.3.55\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1390,9 +1387,9 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.107\"\n+version = \"0.2.112\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fbe5e23404da5b4f555ef85ebed98fb4083e55a00c317800bc2a50ede9f3d219\"\n+checksum = \"1b03d17f364a3a042d5e5d46b053bbbf82c92c9430c592dd4c064dc6ee997125\"\n \n [[package]]\n name = \"libflate\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1698,9 +1695,9 @@ dependencies = [\n \n [[package]]\n name = \"once_cell\"\n-version = \"1.8.0\"\n+version = \"1.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"692fcb63b64b1758029e0a96ee63e049ce8c5948587f2f7208df04625e5f6b56\"\n+checksum = \"da32515d9f6e6e489d7bc9d84c71b060db7247dc035bbe44eac88cf87486d8d5\"\n \n [[package]]\n name = \"opaque-debug\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1736,18 +1733,18 @@ checksum = \"28988d872ab76095a6e6ac88d99b54fd267702734fd7ffe610ca27f533ddb95a\"\n \n [[package]]\n name = \"openssl-src\"\n-version = \"300.0.2+3.0.0\"\n+version = \"111.17.0+1.1.1m\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"14a760a11390b1a5daf72074d4f6ff1a6e772534ae191f999f57e9ee8146d1fb\"\n+checksum = \"05d6a336abd10814198f66e2a91ccd7336611f30334119ca8ce300536666fcf4\"\n dependencies = [\n  \"cc\",\n ]\n \n [[package]]\n name = \"openssl-sys\"\n-version = \"0.9.70\"\n+version = \"0.9.72\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c6517987b3f8226b5da3661dad65ff7f300cc59fb5ea8333ca191fc65fde3edf\"\n+checksum = \"7e46109c383602735fa0a2e48dd2b7c892b048e1bf69e5c3b1d804b7d9c203cb\"\n dependencies = [\n  \"autocfg\",\n  \"cc\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1839,21 +1836,21 @@ checksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n \n [[package]]\n name = \"pkg-config\"\n-version = \"0.3.22\"\n+version = \"0.3.24\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"12295df4f294471248581bc09bef3c38a5e46f1e36d6a37353621a0c6c357e1f\"\n+checksum = \"58893f751c9b0412871a09abd62ecd2a00298c6c83befa223ef98c52aef40cbe\"\n \n [[package]]\n name = \"plist\"\n-version = \"1.2.1\"\n+version = \"1.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a38d026d73eeaf2ade76309d0c65db5a35ecf649e3cec428db316243ea9d6711\"\n+checksum = \"bd39bc6cdc9355ad1dc5eeedefee696bb35c34caf21768741e81826c0bbd7225\"\n dependencies = [\n  \"base64\",\n- \"chrono\",\n  \"indexmap\",\n  \"line-wrap\",\n  \"serde\",\n+ \"time 0.3.5\",\n  \"xml-rs\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1865,9 +1862,9 @@ checksum = \"ed0cfbc8191465bed66e1718596ee0b0b35d5ee1f41c5df2189d0fe8bde535ba\"\n \n [[package]]\n name = \"predicates\"\n-version = \"2.0.3\"\n+version = \"2.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5c6ce811d0b2e103743eec01db1c50612221f173084ce2f7941053e94b6bb474\"\n+checksum = \"95e5a7689e456ab905c22c2b48225bb921aba7c8dfa58440d68ba13f6222a715\"\n dependencies = [\n  \"difflib\",\n  \"float-cmp\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1945,9 +1942,9 @@ checksum = \"bc881b2c22681370c6a780e47af9840ef841837bc98118431d4e1868bd0c1086\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.32\"\n+version = \"1.0.34\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ba508cc11742c0dc5c1659771673afbab7a0efab23aa17e854cbab0837ed0b43\"\n+checksum = \"2f84e92c0f7c9d58328b85a78557813e4bd845130db68d7184635344399423b1\"\n dependencies = [\n  \"unicode-xid\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2231,15 +2228,15 @@ dependencies = [\n \n [[package]]\n name = \"rustversion\"\n-version = \"1.0.5\"\n+version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"61b3909d758bb75c79f23d4736fac9433868679d3ad2ea7a61e3c25cfda9a088\"\n+checksum = \"f2cc38e8fa666e2de3c4aba7edeb5ffc5246c1c2ed0e3d17e560aeeba736b23f\"\n \n [[package]]\n name = \"ryu\"\n-version = \"1.0.5\"\n+version = \"1.0.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e\"\n+checksum = \"73b4b750c782965c211b42f022f59af1fbceabdd026623714f104152f1ec149f\"\n \n [[package]]\n name = \"safemem\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2307,18 +2304,18 @@ checksum = \"568a8e6258aa33c13358f81fd834adb854c6f7c9468520910a9b1e8fac068012\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.130\"\n+version = \"1.0.131\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f12d06de37cf59146fbdecab66aa99f9fe4f78722e3607577a5375d66bd0c913\"\n+checksum = \"b4ad69dfbd3e45369132cc64e6748c2d65cdfb001a2b1c232d128b4ad60561c1\"\n dependencies = [\n  \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.130\"\n+version = \"1.0.131\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d7bc1a1ab1961464eae040d96713baa5a724a8152c1222492465b54322ec508b\"\n+checksum = \"b710a83c4e0dff6a3d511946b95274ad9ca9e5d3ae497b63fda866ac955358d2\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2327,11 +2324,11 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.69\"\n+version = \"1.0.73\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e466864e431129c7e0d3476b92f20458e5879919a0596c6472738d9fa2d342f8\"\n+checksum = \"bcbd0344bc6533bc7ec56df11d42fb70f1b912351c0825ccb7211b59d8af7cf5\"\n dependencies = [\n- \"itoa\",\n+ \"itoa 1.0.1\",\n  \"ryu\",\n  \"serde\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2364,7 +2361,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"edfa57a7f8d9c1d260a549e7224100f6c43d43f9103e06dd8b4095a9b2b43ce9\"\n dependencies = [\n  \"form_urlencoded\",\n- \"itoa\",\n+ \"itoa 0.4.8\",\n  \"ryu\",\n  \"serde\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2593,9 +2590,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.81\"\n+version = \"1.0.82\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f2afee18b8beb5a596ecb4a2dce128c719b4ba399d34126b9e4396e3f9860966\"\n+checksum = \"8daf5dd0bb60cbd4137b1b587d2fc0ae729bc07cf01cd70b36a1ed5ade3b9d59\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2632,9 +2629,9 @@ checksum = \"f764005d11ee5f36500a149ace24e00e3da98b0158b3e2d53a7495660d3f4d60\"\n \n [[package]]\n name = \"tar\"\n-version = \"0.4.37\"\n+version = \"0.4.38\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d6f5515d3add52e0bbdcad7b83c388bb36ba7b754dda3b5f5bc2d38640cdba5c\"\n+checksum = \"4b55807c0344e1e6c04d7c965f5289c39a8d94ae23ed5c0b57aabac549f871c6\"\n dependencies = [\n  \"filetime\",\n  \"libc\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2776,6 +2773,16 @@ dependencies = [\n  \"winapi 0.3.9\",\n ]\n \n+[[package]]\n+name = \"time\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"41effe7cfa8af36f439fac33861b66b049edc6f9a32331e2312660529c1c24ad\"\n+dependencies = [\n+ \"itoa 0.4.8\",\n+ \"libc\",\n+]\n+\n [[package]]\n name = \"tinyvec\"\n version = \"1.5.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2793,11 +2800,10 @@ checksum = \"cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c\"\n \n [[package]]\n name = \"tokio\"\n-version = \"1.14.0\"\n+version = \"1.15.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"70e992e41e0d2fb9f755b37446f20900f64446ef54874f40a60c78f021ac6144\"\n+checksum = \"fbbf1c778ec206785635ce8ad57fe52b3009ae9e0c9f574a728f3049d3e55838\"\n dependencies = [\n- \"autocfg\",\n  \"bytes 1.1.0\",\n  \"libc\",\n  \"memchr\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2812,9 +2818,9 @@ dependencies = [\n \n [[package]]\n name = \"tokio-macros\"\n-version = \"1.6.0\"\n+version = \"1.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c9efc1aba077437943f7515666aa2b882dfabfbfdf89c819ea75a8d6e9eaba5e\"\n+checksum = \"b557f72f448c511a979e2564e55d74e6c4432fc96ff4f6241bc6bded342643b7\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -3324,7 +3330,7 @@ dependencies = [\n \n [[package]]\n name = \"wrangler\"\n-version = \"1.19.5\"\n+version = \"1.19.6\"\n dependencies = [\n  \"anyhow\",\n  \"assert_cmd\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -3439,5 +3445,5 @@ dependencies = [\n  \"crc32fast\",\n  \"flate2\",\n  \"thiserror\",\n- \"time\",\n+ \"time 0.1.44\",\n ]\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -1,6 +1,6 @@\n [package]\n name = \"wrangler\"\n-version = \"1.19.5\"\n+version = \"1.19.6\"\n authors = [\"The Wrangler Team <wrangler@cloudflare.com>\"]\n edition = \"2018\"\n license = \"MIT/Apache-2.0\"\ndiff --git a/npm/npm-shrinkwrap.json b/npm/npm-shrinkwrap.json\n--- a/npm/npm-shrinkwrap.json\n+++ b/npm/npm-shrinkwrap.json\n@@ -1,12 +1,12 @@\n {\n   \"name\": \"@cloudflare/wrangler\",\n-  \"version\": \"1.19.5\",\n+  \"version\": \"1.19.6\",\n   \"lockfileVersion\": 2,\n   \"requires\": true,\n   \"packages\": {\n     \"\": {\n       \"name\": \"@cloudflare/wrangler\",\n-      \"version\": \"1.19.5\",\n+      \"version\": \"1.19.6\",\n       \"hasInstallScript\": true,\n       \"license\": \"MIT OR Apache-2.0\",\n       \"dependencies\": {\ndiff --git a/npm/npm-shrinkwrap.json b/npm/npm-shrinkwrap.json\n--- a/npm/npm-shrinkwrap.json\n+++ b/npm/npm-shrinkwrap.json\n@@ -15,7 +15,8 @@\n         \"tar\": \"^6.1.10\"\n       },\n       \"bin\": {\n-        \"wrangler\": \"run-wrangler.js\"\n+        \"wrangler\": \"run-wrangler.js\",\n+        \"wrangler1\": \"run-wrangler.js\"\n       }\n     },\n     \"node_modules/axios\": {\ndiff --git a/npm/package.json b/npm/package.json\n--- a/npm/package.json\n+++ b/npm/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"@cloudflare/wrangler\",\n-  \"version\": \"1.19.5\",\n+  \"version\": \"1.19.6\",\n   \"description\": \"Command-line interface for all things Cloudflare Workers\",\n   \"main\": \"binary.js\",\n   \"scripts\": {\ndiff --git /dev/null b/package-lock.json\nnew file mode 100644\n--- /dev/null\n+++ b/package-lock.json\n@@ -0,0 +1,6 @@\n+{\n+  \"name\": \"wrangler\",\n+  \"lockfileVersion\": 2,\n+  \"requires\": true,\n+  \"packages\": {}\n+}\n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1157,9 +1148,9 @@ checksum = \"acd94fdbe1d4ff688b67b04eee2e17bd50995534a61539e45adfefb45e5e5503\"\n \n [[package]]\n name = \"httpdate\"\n-version = \"1.0.1\"\n+version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6456b8a6c8f33fee7d958fcd1b60d55b11940a79e63ae87013e6d22e26034440\"\n+checksum = \"c4a1e36c821dbe04574f602848a19f742f4fb3c98d40449f11bcad18d6b17421\"\n \n [[package]]\n name = \"humantime\"\n",
        "problem_statement": "wrangler binary is not complete when installing using npm\n### \ud83d\udc1b Bug report\r\n\r\n<!-- \r\n  Did you remember to update wrangler?\r\n  https://developers.cloudflare.com/workers/cli-wrangler/install-update#update\r\n\r\n  Did you search for related issues?\r\n  https://github.com/cloudflare/wrangler/issues\r\n-->\r\n\r\n#### Describe the bug\r\n\r\nAfter an installation with npm, `wrangler` gave me this error:\r\n```\r\nError: spawnSync C:\\Users\\{user}\\.wrangler\\bin\\wrangler ENOENT\r\n```\r\n\r\nDigging into this, I found the wrangler binary in {user}/.wrangler is smaller than what it should be (7192KB/13646KB). Wrangler worker fine after substituting the binary from https://workers.cloudflare.com/get-npm-wrangler-binary/1.19.5/x86_64-pc-windows-msvc.\r\n\r\nHowever, I did not encounter this issue when configuring wrangler on my mac days before. Maybe it is something with the network connection?\r\n\r\n#### Reproduce the bug\r\n\r\nA list of steps to reproduce the bug.\r\n\r\nrun `npm i @cloudflare/wrangler -g`\r\n\r\n#### Expected behavior\r\n\r\nwrangler binary should be complete and running.\r\n\r\n#### Environment and versions\r\n\r\nFill out the following information about your environment.\r\n\r\n* operating system: Windows 10 Pro x64 21H2 \r\n* output of `wrangler -V`: `1.19.5`\r\n* output of `node -v`: `v14.15.1`\r\n* content of `wrangler.toml`: not required to reproduce\r\n\n",
        "hints_text": "This might be the cause [binary-install.js, L94](https://github.com/cloudflare/wrangler/blob/master/npm/binary-install.js#L94)\r\n\r\nAs mentioned in [this stackoverflow post](https://stackoverflow.com/questions/55374755/node-js-axios-download-file-stream-and-writefile), you may end up with an incomplete file when simply calling `axios(responseType: \"stream\").then()`.\r\n\r\nHere's a code snippet to replicate this:\r\n\r\n```javascript\r\nconst tar = require(\"tar\");\r\nconst axios = require(\"axios\");\r\n\r\naxios({ url:\"https://workers.cloudflare.com/get-npm-wrangler-binary/1.19.5/x86_64-pc-windows-msvc\", responseType: \"stream\" })\r\n.then(res => { res.data.pipe(tar.x({strip:1, C:\"f1\"}));})\r\n.then(() => { console.log(\"done 1\"); })\r\n\r\n\r\naxios({ url:\"https://workers.cloudflare.com/get-npm-wrangler-binary/1.19.5/x86_64-pc-windows-msvc\", responseType: \"stream\" })\r\n.then( res=> {\r\n    const writer = tar.x({strip:1, C:\"f2\"});\r\n    //ensure that the user can call `then()` only when the file has\r\n    //been downloaded entirely.\r\n    return new Promise((resolve, reject) => {\r\n      res.data.pipe(writer);\r\n      let error = null;\r\n      writer.on('error', err => {\r\n        error = err;\r\n        writer.close();\r\n        reject(err);\r\n      });\r\n      writer.on('close', () => {\r\n        if (!error) {\r\n          resolve(true);\r\n        }\r\n        //no need to call the reject here, as it will have been called in the\r\n        //'error' stream;\r\n      });\r\n    });\r\n}).then(() => { console.log(\"done 2\"); })\r\n```\r\n\nThis is great work, thanks for the detailed bug report @12f23eddde, and following up with the detailed bug fix. I believe you're right. ",
        "created_at": "2021-12-16T14:39:56Z",
        "version": "1.19"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 2153,
        "instance_id": "cloudflare__wrangler-legacy-2153",
        "issue_numbers": [
            "1910"
        ],
        "base_commit": "5131a94559b0948704c3ea6e1eaa19d8139db0c1",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -563,15 +563,6 @@ dependencies = [\n  \"memchr\",\n ]\n \n-[[package]]\n-name = \"ct-logs\"\n-version = \"0.8.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c1a816186fa68d9e426e3cb4ae4dff1fcd8e4a2c34b781bf7a822574a0d0aac8\"\n-dependencies = [\n- \"sct\",\n-]\n-\n [[package]]\n name = \"curl\"\n version = \"0.4.40\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1178,9 +1169,9 @@ checksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n \n [[package]]\n name = \"hyper\"\n-version = \"0.14.14\"\n+version = \"0.14.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2b91bb1f221b6ea1f1e4371216b70f40748774c2fb5971b450c07773fb92d26b\"\n+checksum = \"436ec0091e4f20e655156a30a0df3770fe2900aa301e548e08446ec794b6953c\"\n dependencies = [\n  \"bytes 1.1.0\",\n  \"futures-channel\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1202,19 +1193,17 @@ dependencies = [\n \n [[package]]\n name = \"hyper-rustls\"\n-version = \"0.22.1\"\n+version = \"0.23.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5f9f7a97316d44c0af9b0301e65010573a853a9fc97046d7331d7f6bc0fd5a64\"\n+checksum = \"d87c48c02e0dc5e3b849a2041db3029fd066650f8f717c07bf8ed78ccb895cac\"\n dependencies = [\n- \"ct-logs\",\n- \"futures-util\",\n+ \"http\",\n  \"hyper\",\n  \"log\",\n  \"rustls\",\n  \"rustls-native-certs\",\n  \"tokio\",\n  \"tokio-rustls\",\n- \"webpki\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2123,9 +2112,9 @@ dependencies = [\n \n [[package]]\n name = \"reqwest\"\n-version = \"0.11.6\"\n+version = \"0.11.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"66d2927ca2f685faf0fc620ac4834690d29e7abb153add10f5812eef20b5e280\"\n+checksum = \"07bea77bc708afa10e59905c3d4af7c8fd43c9214251673095ff8b14345fcbc5\"\n dependencies = [\n  \"base64\",\n  \"bytes 1.1.0\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2147,6 +2136,7 @@ dependencies = [\n  \"percent-encoding 2.1.0\",\n  \"pin-project-lite\",\n  \"rustls\",\n+ \"rustls-pemfile\",\n  \"serde\",\n  \"serde_json\",\n  \"serde_urlencoded\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2208,29 +2198,37 @@ checksum = \"7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342\"\n \n [[package]]\n name = \"rustls\"\n-version = \"0.19.1\"\n+version = \"0.20.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"35edb675feee39aec9c99fa5ff985081995a06d594114ae14cbe797ad7b7a6d7\"\n+checksum = \"d37e5e2290f3e040b594b1a9e04377c2c671f1a1cfd9bfdef82106ac1c113f84\"\n dependencies = [\n- \"base64\",\n  \"log\",\n  \"ring\",\n  \"sct\",\n- \"webpki\",\n+ \"webpki 0.22.0\",\n ]\n \n [[package]]\n name = \"rustls-native-certs\"\n-version = \"0.5.0\"\n+version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5a07b7c1885bd8ed3831c289b7870b13ef46fe0e856d288c30d9cc17d75a2092\"\n+checksum = \"5ca9ebdfa27d3fc180e42879037b5338ab1c040c06affd00d8338598e7800943\"\n dependencies = [\n  \"openssl-probe\",\n- \"rustls\",\n+ \"rustls-pemfile\",\n  \"schannel\",\n  \"security-framework\",\n ]\n \n+[[package]]\n+name = \"rustls-pemfile\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5eebeaeb360c87bfb72e84abdb3447159c0eaececf1bef2aecd65a8be949d1c9\"\n+dependencies = [\n+ \"base64\",\n+]\n+\n [[package]]\n name = \"rustversion\"\n version = \"1.0.5\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2270,9 +2268,9 @@ dependencies = [\n \n [[package]]\n name = \"sct\"\n-version = \"0.6.1\"\n+version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b362b83898e0e69f38515b82ee15aa80636befe47c3b6d3d89a911e78fc228ce\"\n+checksum = \"d53dcdb7c9f8158937a7981b48accfd39a43af418591a5d008c7b22b5e1b7ca4\"\n dependencies = [\n  \"ring\",\n  \"untrusted\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2846,13 +2844,13 @@ dependencies = [\n \n [[package]]\n name = \"tokio-rustls\"\n-version = \"0.22.0\"\n+version = \"0.23.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bc6844de72e57df1980054b38be3a9f4702aba4858be64dd700181a8a6d0e1b6\"\n+checksum = \"4baa378e417d780beff82bf54ceb0d195193ea6a00c14e22359e7f39456b5689\"\n dependencies = [\n  \"rustls\",\n  \"tokio\",\n- \"webpki\",\n+ \"webpki 0.22.0\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -3242,13 +3240,23 @@ dependencies = [\n  \"untrusted\",\n ]\n \n+[[package]]\n+name = \"webpki\"\n+version = \"0.22.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f095d78192e208183081cc07bc5515ef55216397af48b873e5edcd72637fa1bd\"\n+dependencies = [\n+ \"ring\",\n+ \"untrusted\",\n+]\n+\n [[package]]\n name = \"webpki-roots\"\n version = \"0.21.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"aabe153544e473b775453675851ecc86863d2a81d786d741f6b76778f2a48940\"\n dependencies = [\n- \"webpki\",\n+ \"webpki 0.21.4\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -3362,6 +3370,7 @@ dependencies = [\n  \"regex\",\n  \"reqwest\",\n  \"rustls\",\n+ \"rustls-pemfile\",\n  \"semver\",\n  \"serde\",\n  \"serde_json\",\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -32,7 +32,7 @@ futures-util = \"0.3\"\n globset = \"0.4.6\"\n http = \"0.2.1\"\n hyper = { version = \"0.14.7\", features = [\"http2\", \"server\", \"runtime\"] }\n-hyper-rustls = \"0.22.1\"\n+hyper-rustls = \"0.23\"\n ignore = \"0.4.17\"\n indicatif = \"0.15.0\"\n log = \"0.4.11\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -49,7 +49,8 @@ prettytable-rs = \"0.8.0\"\n rand = \"0.8.3\"\n regex = \"1.4.1\"\n reqwest = { version = \"0.11.3\", features = [\"blocking\", \"json\", \"multipart\"] }\n-rustls = \"0.19.1\"\n+rustls = \"0.20.2\"\n+rustls-pemfile = \"0.2.1\"\n semver = \"1.0.3\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0.60\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -63,7 +64,7 @@ text_io = \"0.1.8\"\n tokio = { version = \"1.5.0\", default-features = false, features = [\"io-std\", \"time\", \"macros\", \"process\", \"signal\", \"sync\"] }\n tokio-native-tls = \"0.3.0\"\n tokio-retry = \"0.3\"\n-tokio-rustls = \"0.22.0\"\n+tokio-rustls = \"0.23.0\"\n tokio-stream = \"0.1.5\"\n tokio-tungstenite = \"0.14.0\"\n toml = \"0.5.8\"\ndiff --git a/src/commands/dev/edge/server/http.rs b/src/commands/dev/edge/server/http.rs\n--- a/src/commands/dev/edge/server/http.rs\n+++ b/src/commands/dev/edge/server/http.rs\n@@ -1,6 +1,6 @@\n use super::preview_request;\n use crate::commands::dev::utils::{get_path_as_str, rewrite_redirect};\n-use crate::commands::dev::{Protocol, ServerConfig};\n+use crate::commands::dev::{self, Protocol, ServerConfig};\n use crate::terminal::emoji;\n \n use std::sync::{Arc, Mutex};\ndiff --git a/src/commands/dev/edge/server/http.rs b/src/commands/dev/edge/server/http.rs\n--- a/src/commands/dev/edge/server/http.rs\n+++ b/src/commands/dev/edge/server/http.rs\n@@ -9,8 +9,7 @@ use anyhow::Result;\n use chrono::prelude::*;\n use hyper::service::{make_service_fn, service_fn};\n use hyper::upgrade::OnUpgrade;\n-use hyper::{Body, Client as HyperClient, Server};\n-use hyper_rustls::HttpsConnector;\n+use hyper::Server;\n use tokio::sync::oneshot::{Receiver, Sender};\n \n pub async fn http(\ndiff --git a/src/commands/dev/edge/server/http.rs b/src/commands/dev/edge/server/http.rs\n--- a/src/commands/dev/edge/server/http.rs\n+++ b/src/commands/dev/edge/server/http.rs\n@@ -21,8 +20,7 @@ pub async fn http(\n     shutdown_channel: (Receiver<()>, Sender<()>),\n ) -> Result<()> {\n     // set up https client to connect to the preview service\n-    let https = HttpsConnector::with_native_roots();\n-    let client = HyperClient::builder().build::<_, Body>(https);\n+    let client = dev::client();\n \n     let listening_address = server_config.listening_address;\n \ndiff --git a/src/commands/dev/edge/server/https.rs b/src/commands/dev/edge/server/https.rs\n--- a/src/commands/dev/edge/server/https.rs\n+++ b/src/commands/dev/edge/server/https.rs\n@@ -1,6 +1,6 @@\n use super::preview_request;\n use crate::commands::dev::utils::{get_path_as_str, rewrite_redirect};\n-use crate::commands::dev::{tls, Protocol, ServerConfig};\n+use crate::commands::dev::{self, tls, Protocol, ServerConfig};\n use crate::terminal::emoji;\n use crate::terminal::message::{Message, StdOut};\n use std::sync::{Arc, Mutex};\ndiff --git a/src/commands/dev/edge/server/https.rs b/src/commands/dev/edge/server/https.rs\n--- a/src/commands/dev/edge/server/https.rs\n+++ b/src/commands/dev/edge/server/https.rs\n@@ -11,8 +11,7 @@ use futures_util::{stream::StreamExt, FutureExt};\n \n use hyper::service::{make_service_fn, service_fn};\n use hyper::upgrade::OnUpgrade;\n-use hyper::{Body, Client as HyperClient, Server};\n-use hyper_rustls::HttpsConnector;\n+use hyper::Server;\n use tokio::net::TcpListener;\n use tokio::sync::oneshot::{Receiver, Sender};\n \ndiff --git a/src/commands/dev/edge/server/https.rs b/src/commands/dev/edge/server/https.rs\n--- a/src/commands/dev/edge/server/https.rs\n+++ b/src/commands/dev/edge/server/https.rs\n@@ -25,8 +24,7 @@ pub async fn https(\n     tls::generate_cert()?;\n \n     // set up https client to connect to the preview service\n-    let https = HttpsConnector::with_native_roots();\n-    let client = HyperClient::builder().build::<_, Body>(https);\n+    let client = dev::client();\n \n     let listening_address = server_config.listening_address;\n \ndiff --git a/src/commands/dev/gcs/server/http.rs b/src/commands/dev/gcs/server/http.rs\n--- a/src/commands/dev/gcs/server/http.rs\n+++ b/src/commands/dev/gcs/server/http.rs\n@@ -1,4 +1,5 @@\n use super::preview_request;\n+use crate::commands::dev;\n use crate::commands::dev::gcs::headers::destructure_response;\n use crate::commands::dev::server_config::ServerConfig;\n use crate::commands::dev::utils::{get_path_as_str, rewrite_redirect};\ndiff --git a/src/commands/dev/gcs/server/http.rs b/src/commands/dev/gcs/server/http.rs\n--- a/src/commands/dev/gcs/server/http.rs\n+++ b/src/commands/dev/gcs/server/http.rs\n@@ -9,15 +10,13 @@ use std::sync::{Arc, Mutex};\n use anyhow::Result;\n use chrono::prelude::*;\n use hyper::service::{make_service_fn, service_fn};\n-use hyper::{Body, Client as HyperClient, Response, Server};\n-use hyper_rustls::HttpsConnector;\n+use hyper::{Response, Server};\n \n /// performs all logic that takes an incoming request\n /// and routes it to the Workers runtime preview service\n pub async fn http(server_config: ServerConfig, preview_id: Arc<Mutex<String>>) -> Result<()> {\n     // set up https client to connect to the preview service\n-    let https = HttpsConnector::with_native_roots();\n-    let client = HyperClient::builder().build::<_, Body>(https);\n+    let client = dev::client();\n \n     let listening_address = server_config.listening_address;\n \ndiff --git a/src/commands/dev/gcs/server/https.rs b/src/commands/dev/gcs/server/https.rs\n--- a/src/commands/dev/gcs/server/https.rs\n+++ b/src/commands/dev/gcs/server/https.rs\n@@ -1,4 +1,5 @@\n use super::preview_request;\n+use crate::commands::dev;\n use crate::commands::dev::gcs::headers::destructure_response;\n use crate::commands::dev::server_config::ServerConfig;\n use crate::commands::dev::tls;\ndiff --git a/src/commands/dev/gcs/server/https.rs b/src/commands/dev/gcs/server/https.rs\n--- a/src/commands/dev/gcs/server/https.rs\n+++ b/src/commands/dev/gcs/server/https.rs\n@@ -11,8 +12,7 @@ use anyhow::Result;\n use chrono::prelude::*;\n use futures_util::{FutureExt, StreamExt};\n use hyper::service::{make_service_fn, service_fn};\n-use hyper::{Body, Client as HyperClient, Response, Server};\n-use hyper_rustls::HttpsConnector;\n+use hyper::{Response, Server};\n use tokio::net::TcpListener;\n \n /// performs all logic that takes an incoming request\ndiff --git a/src/commands/dev/gcs/server/https.rs b/src/commands/dev/gcs/server/https.rs\n--- a/src/commands/dev/gcs/server/https.rs\n+++ b/src/commands/dev/gcs/server/https.rs\n@@ -21,8 +21,7 @@ pub async fn https(server_config: ServerConfig, preview_id: Arc<Mutex<String>>)\n     tls::generate_cert()?;\n \n     // set up https client to connect to the preview service\n-    let https = HttpsConnector::with_native_roots();\n-    let client = HyperClient::builder().build::<_, Body>(https);\n+    let client = dev::client();\n \n     let listening_address = server_config.listening_address;\n \ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -5,6 +5,9 @@ mod socket;\n mod tls;\n mod utils;\n \n+use hyper::client::HttpConnector;\n+use hyper::Body;\n+use hyper_rustls::HttpsConnector;\n pub use server_config::Protocol;\n pub use server_config::ServerConfig;\n \ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -17,6 +20,16 @@ use crate::terminal::styles;\n \n use anyhow::Result;\n \n+fn client() -> hyper::Client<HttpsConnector<HttpConnector>> {\n+    let builder = hyper_rustls::HttpsConnectorBuilder::new()\n+        .with_native_roots()\n+        .https_or_http();\n+    // Cloudflare doesn't currently support websockets with HTTP/2.\n+    // Allow using HTTP/1.1 for websocket connections.\n+    let https = builder.enable_http1().build();\n+    hyper::Client::builder().build::<_, Body>(https)\n+}\n+\n /// `wrangler dev` starts a server on a dev machine that routes incoming HTTP requests\n /// to a Cloudflare Workers runtime and returns HTTP responses\n #[allow(clippy::too_many_arguments)]\ndiff --git a/src/commands/dev/tls/mod.rs b/src/commands/dev/tls/mod.rs\n--- a/src/commands/dev/tls/mod.rs\n+++ b/src/commands/dev/tls/mod.rs\n@@ -5,8 +5,7 @@ use anyhow::Result;\n use core::task::{Context, Poll};\n use fs::File;\n use futures_util::stream::Stream;\n-use rustls::internal::pemfile;\n-use rustls::{NoClientAuth, ServerConfig};\n+use rustls::{server::NoClientAuth, ServerConfig};\n use std::path::PathBuf;\n use std::pin::Pin;\n use std::sync::Arc;\ndiff --git a/src/commands/dev/tls/mod.rs b/src/commands/dev/tls/mod.rs\n--- a/src/commands/dev/tls/mod.rs\n+++ b/src/commands/dev/tls/mod.rs\n@@ -30,10 +29,13 @@ pub(super) fn get_tls_acceptor() -> Result<TlsAcceptor> {\n     let key = load_private_key(privkey)?;\n \n     // Do not use client certificate authentication.\n-    let mut cfg = ServerConfig::new(NoClientAuth::new());\n+    let cfg = ServerConfig::builder()\n+        .with_safe_defaults()\n+        .with_client_cert_verifier(NoClientAuth::new());\n \n     // Select a certificate to use.\n-    cfg.set_single_cert(certs, key)\n+    let cfg = cfg\n+        .with_single_cert(certs, key)\n         .map_err(|e| io_error(format!(\"{}\", e)))?;\n \n     Ok(TlsAcceptor::from(Arc::new(cfg)))\ndiff --git a/src/commands/dev/tls/mod.rs b/src/commands/dev/tls/mod.rs\n--- a/src/commands/dev/tls/mod.rs\n+++ b/src/commands/dev/tls/mod.rs\n@@ -71,7 +73,10 @@ fn load_certs(file: PathBuf) -> io::Result<Vec<rustls::Certificate>> {\n     let mut reader = io::BufReader::new(certfile);\n \n     // Load and return certificate.\n-    pemfile::certs(&mut reader).map_err(|_| io_error(\"failed to load certificate\".into()))\n+    match rustls_pemfile::certs(&mut reader) {\n+        Ok(certs) => Ok(certs.into_iter().map(rustls::Certificate).collect()),\n+        Err(_) => Err(io_error(\"failed to load certificate\".into())),\n+    }\n }\n \n // Load private key from file.\ndiff --git a/src/commands/dev/tls/mod.rs b/src/commands/dev/tls/mod.rs\n--- a/src/commands/dev/tls/mod.rs\n+++ b/src/commands/dev/tls/mod.rs\n@@ -81,10 +86,10 @@ fn load_private_key(file: PathBuf) -> io::Result<rustls::PrivateKey> {\n     let mut reader = io::BufReader::new(keyfile);\n \n     // Load and return a single private key.\n-    let keys = pemfile::pkcs8_private_keys(&mut reader)\n+    let mut keys = rustls_pemfile::pkcs8_private_keys(&mut reader)\n         .map_err(|_| io_error(\"failed to load private key\".into()))?;\n     if keys.len() != 1 {\n         return Err(io_error(\"expected a single private key\".into()));\n     }\n-    Ok(keys[0].clone())\n+    Ok(rustls::PrivateKey(keys.pop().unwrap()))\n }\n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2993,7 +2991,7 @@ version = \"1.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"1f559b464de2e2bdabcac6a210d12e9b5a5973c251e102c44c585c71d51bd78e\"\n dependencies = [\n- \"cfg-if 0.1.10\",\n+ \"cfg-if 1.0.0\",\n  \"rand 0.8.4\",\n  \"static_assertions\",\n ]\n",
        "problem_statement": "Cannot connect to websocket with wrangler dev\n### \ud83d\udc1b Bug report\r\n\r\n<!-- \r\n  Did you remember to update wrangler?\r\n  https://developers.cloudflare.com/workers/cli-wrangler/install-update#update\r\n\r\n  Did you search for related issues?\r\n  https://github.com/cloudflare/wrangler/issues\r\n-->\r\n\r\n#### Describe the bug\r\n\r\nI keep getting this message when trying to connect to websocket using `wrangler dev`. Non-websocket routes work fine though.\r\n\r\n```\r\n[2021-05-04 22:54:59] GET dev-bug.ulrjch.workers.dev/ws HTTP/1.1 400 Bad Request\r\n[2021-05-04 22:55:08] GET dev-bug.ulrjch.workers.dev/ HTTP/1.1 200 OK\r\n```\r\n![image](https://user-images.githubusercontent.com/15166715/117025215-4d7b6c80-ad2d-11eb-8530-ea325f5c5217.png)\r\n\r\n#### Reproduce the bug\r\n\r\n1. Clone https://github.com/universse/wrangler-bug\r\n2. Enter `account_id` in `wrangler.toml`\r\n3. Run `wrangler dev`\r\n4. Open `index.html`\r\n5. Above error messages would appear in terminal.\r\n\r\nOptional: It works fine when published.\r\n1. Run `wrangler publish`\r\n2. Replace websocket link in `index.html`\r\n3. Open `index.html`\r\n4. Websocket connection is successful.\r\n\r\n#### Expected behavior\r\n\r\nShould be able to connect to websocket using `wrangler dev`.\r\n\r\n#### Environment and versions\r\n\r\nFill out the following information about your environment.\r\n\r\n* operating system: Windows 10 Home\r\n* output of `wrangler -V`:  wrangler 1.16.0-durable-objects-rc.0\r\n* output of `node -v`: v15.10.0\r\n* content of `wrangler.toml`: per repo\r\n\n",
        "hints_text": "I have tried `type: \"webpack\"` for `wrangler.toml` as well. It doesn't work still.\nWe currently do not support WebSocket debugging in `wrangler dev`, but obviously we should. Will get back to you as we figure out the complexity for this addition.\nHey it's September now, how's this doing? I've found the same issue with wrangler dev and can confirm it only works when published.\r\n\r\n```bash\r\n$ wrangler -V\r\nwrangler 1.19.3\r\n```\nWe've scheduled to fix this in q4 (ie - before the end of this year) Until then, the recommendation is to use miniflare https://github.com/cloudflare/wrangler/issues/2079#issuecomment-924759723 Sorry for the delay on this, we'll fix it soon. ",
        "created_at": "2021-12-08T17:59:47Z",
        "version": "1.19"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 2110,
        "instance_id": "cloudflare__wrangler-legacy-2110",
        "issue_numbers": [
            "2051",
            "2051"
        ],
        "base_commit": "ecc1f1f03997453debdecd7782a51723c6dcd396",
        "patch": "diff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -35,7 +35,7 @@ pub fn generate(\n     log::info!(\"Generating a new worker project with name '{}'\", new_name);\n     run_generate(&new_name, template)?;\n \n-    let config_path = PathBuf::from(\"./\").join(&name);\n+    let config_path = PathBuf::from(\"./\").join(&new_name);\n     // TODO: this is tightly coupled to our site template. Need to remove once\n     // we refine our generate logic.\n     let generated_site = if site {\n",
        "test_patch": "diff --git a/tests/generate.rs b/tests/generate.rs\n--- a/tests/generate.rs\n+++ b/tests/generate.rs\n@@ -32,6 +32,30 @@ fn it_generates_with_arguments() {\n     cleanup(name);\n }\n \n+#[test]\n+fn it_generates_toml_file_in_correct_directory() {\n+    let name = \"collision-example\";\n+    let expected_name = \"collision-example-1\";\n+    let template = \"https://github.com/cloudflare/rustwasm-worker-template\";\n+    let project_type = \"webpack\";\n+    fs::create_dir_all(Path::new(name)).unwrap();\n+\n+    generate(Some(name), Some(template), Some(project_type));\n+    assert_eq!(Path::new(expected_name).exists(), true);\n+\n+    let wranglertoml_path = format!(\"{}/wrangler.toml\", expected_name);\n+    assert_eq!(Path::new(&wranglertoml_path).exists(), true);\n+\n+    let wranglertoml_text = fs::read_to_string(wranglertoml_path).unwrap();\n+    assert!(wranglertoml_text.contains(expected_name));\n+\n+    let unexpected_wranglertoml_path = format!(\"{}/wrangler.toml\", name);\n+    assert_eq!(Path::new(&unexpected_wranglertoml_path).exists(), false);\n+\n+    cleanup(name);\n+    cleanup(expected_name);\n+}\n+\n pub fn generate(name: Option<&str>, template: Option<&str>, project_type: Option<&str>) {\n     let mut wrangler = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n     if name.is_none() && template.is_none() && project_type.is_none() {\n",
        "problem_statement": "Strange behavior generating to a existing directory\n### \ud83d\udc1b Bug report\r\n\r\n#### Describe the bug\r\n\r\nWhen doing `wrangle generate` to a existing directory `test`, the behavior is strange. A TOML file is written to the existing directory but with the name field `test-1`. Everything other, plus another TOML file is written to a new directory `test-1` but with the name field `helloworld`. The newly created directory's TOML's type field is also wrong.\r\n\r\n#### Reproduce the bug\r\n\r\n```\r\n$ wrangler -V\r\nwrangler 1.19.1\r\n$ mkdir wrangler\r\n$ cd wrangler\r\n$ mkdir test\r\n$ wrangler generate --type=webpack test\r\n Creating project called `test-1`...\r\n Done! New project created /home/Menci/wrangler/test-1\r\n$ find\r\n.\r\n./test\r\n./test/wrangler.toml\r\n./test-1\r\n./test-1/.gitignore\r\n./test-1/.prettierrc\r\n./test-1/CODE_OF_CONDUCT.md\r\n./test-1/LICENSE_APACHE\r\n./test-1/LICENSE_MIT\r\n./test-1/README.md\r\n./test-1/index.js\r\n./test-1/package.json\r\n./test-1/wrangler.toml\r\n./test-1/.cargo-ok\r\n./test-1/.git\r\n<.git sub-directories omitted>\r\n./test-1/.git/HEAD\r\n$ cat ./test/wrangler.toml\r\nname = \"test-1\"\r\ntype = \"webpack\"\r\nroute = ''\r\nzone_id = ''\r\nusage_model = ''\r\ncompatibility_flags = []\r\nworkers_dev = true\r\n$ cat ./test-1/wrangler.toml\r\nname = \"helloworld\"\r\ntype = \"javascript\"\r\n\r\naccount_id = \"\"\r\nworkers_dev = true\r\nroute = \"\"\r\nzone_id = \"\"\r\n```\r\n\r\n#### Expected behavior\r\n\r\nWrangle should deny generating to a existing non-empty directory and success generating to a existing empty directory.\r\n\r\n#### Environment and versions\r\n\r\nFill out the following information about your environment.\r\n\r\n* operating system: Manjaro Linux\r\n* output of `wrangler -V`: `wrangler 1.19.1`\r\n* output of `node -v`: `v16.7.0`\r\n\nStrange behavior generating to a existing directory\n### \ud83d\udc1b Bug report\r\n\r\n#### Describe the bug\r\n\r\nWhen doing `wrangle generate` to a existing directory `test`, the behavior is strange. A TOML file is written to the existing directory but with the name field `test-1`. Everything other, plus another TOML file is written to a new directory `test-1` but with the name field `helloworld`. The newly created directory's TOML's type field is also wrong.\r\n\r\n#### Reproduce the bug\r\n\r\n```\r\n$ wrangler -V\r\nwrangler 1.19.1\r\n$ mkdir wrangler\r\n$ cd wrangler\r\n$ mkdir test\r\n$ wrangler generate --type=webpack test\r\n Creating project called `test-1`...\r\n Done! New project created /home/Menci/wrangler/test-1\r\n$ find\r\n.\r\n./test\r\n./test/wrangler.toml\r\n./test-1\r\n./test-1/.gitignore\r\n./test-1/.prettierrc\r\n./test-1/CODE_OF_CONDUCT.md\r\n./test-1/LICENSE_APACHE\r\n./test-1/LICENSE_MIT\r\n./test-1/README.md\r\n./test-1/index.js\r\n./test-1/package.json\r\n./test-1/wrangler.toml\r\n./test-1/.cargo-ok\r\n./test-1/.git\r\n<.git sub-directories omitted>\r\n./test-1/.git/HEAD\r\n$ cat ./test/wrangler.toml\r\nname = \"test-1\"\r\ntype = \"webpack\"\r\nroute = ''\r\nzone_id = ''\r\nusage_model = ''\r\ncompatibility_flags = []\r\nworkers_dev = true\r\n$ cat ./test-1/wrangler.toml\r\nname = \"helloworld\"\r\ntype = \"javascript\"\r\n\r\naccount_id = \"\"\r\nworkers_dev = true\r\nroute = \"\"\r\nzone_id = \"\"\r\n```\r\n\r\n#### Expected behavior\r\n\r\nWrangle should deny generating to a existing non-empty directory and success generating to a existing empty directory.\r\n\r\n#### Environment and versions\r\n\r\nFill out the following information about your environment.\r\n\r\n* operating system: Manjaro Linux\r\n* output of `wrangler -V`: `wrangler 1.19.1`\r\n* output of `node -v`: `v16.7.0`\r\n\n",
        "hints_text": "Hi @Menci  - \r\n\r\nThanks for reporting this. We'll do some further investigating.\nHi @Menci  - \r\n\r\nThanks for reporting this. We'll do some further investigating.",
        "created_at": "2021-10-26T20:38:45Z",
        "version": "1.19"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 2080,
        "instance_id": "cloudflare__wrangler-legacy-2080",
        "issue_numbers": [
            "2078"
        ],
        "base_commit": "ce2d2a86fed7dca645bfe593c9383e18447f0fab",
        "patch": "diff --git a/src/cli/dev.rs b/src/cli/dev.rs\n--- a/src/cli/dev.rs\n+++ b/src/cli/dev.rs\n@@ -19,6 +19,7 @@ pub fn dev(\n ) -> Result<()> {\n     log::info!(\"Starting dev server\");\n     let manifest = Manifest::new(&cli_params.config)?;\n+    manifest.warn_about_compatibility_date();\n \n     // Check if arg not given but present in wrangler.toml\n     if let Some(d) = &manifest.dev {\ndiff --git a/src/cli/publish.rs b/src/cli/publish.rs\n--- a/src/cli/publish.rs\n+++ b/src/cli/publish.rs\n@@ -28,6 +28,8 @@ pub fn publish(\n \n     log::info!(\"Getting project settings\");\n     let manifest = Manifest::new(&cli_params.config)?;\n+    manifest.warn_about_compatibility_date();\n+\n     let mut target = manifest.get_target(cli_params.environment.as_deref(), false)?;\n \n     if let Some(migration) = migration.into_migrations() {\n",
        "test_patch": "diff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -94,13 +94,6 @@ impl Manifest {\n \n         check_for_duplicate_names(&manifest)?;\n \n-        if manifest.compatibility_date.is_none() {\n-            StdOut::warn(&format!(\n-                \"Your configuration file is missing compatibility_date, so a distant past date is assumed. To get the latest possibly-breaking bug fixes, add this line to your wrangler.toml:\\n\\n    compatibility_date = \\\"{}\\\"\\n\",\n-                Utc::now().format(\"%F\")));\n-            StdOut::warn(\"For more information about compatibility dates, see: https://developers.cloudflare.com/workers/platform/compatibility-dates\");\n-        }\n-\n         Ok(manifest)\n     }\n \ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -451,6 +444,25 @@ impl Manifest {\n         }\n     }\n \n+    pub fn warn_about_compatibility_date(&self) {\n+        if self.compatibility_date.is_some() {\n+            return;\n+        }\n+        let current_date = Utc::now().format(\"%F\");\n+        let message = &format!(\n+            r#\"\n+    Your configuration file is missing compatibility_date, so a past date is assumed.\n+    To get the latest possibly-breaking bug fixes, add this line to your wrangler.toml:\n+\n+        compatibility_date = \"{}\"\n+\n+    For more information, see: https://developers.cloudflare.com/workers/platform/compatibility-dates\n+        \"#,\n+            current_date\n+        );\n+        StdOut::warn(message);\n+    }\n+\n     fn warn_on_account_info(&self) {\n         let account_id_env = env::var(\"CF_ACCOUNT_ID\").is_ok();\n         let zone_id_env = env::var(\"CF_ZONE_ID\").is_ok();\n",
        "problem_statement": "Only warn about compatibility date for `wrangler publish`\nWe only need to poke about the `compatibility_date` when the developer is running `wrangler publish`, not the other commands.\n",
        "hints_text": "",
        "created_at": "2021-09-20T05:18:05Z",
        "version": "1.19"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 2038,
        "instance_id": "cloudflare__wrangler-legacy-2038",
        "issue_numbers": [
            "2037"
        ],
        "base_commit": "8b49b3bbd7917c4cc290029aa4c87e186e777fa8",
        "patch": "diff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -55,10 +55,6 @@ pub struct Manifest {\n     pub dev: Option<Dev>,\n     #[serde(alias = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<ConfigKvNamespace>>,\n-    pub env: Option<HashMap<String, Environment>>,\n-    pub vars: Option<HashMap<String, String>>,\n-    pub text_blobs: Option<HashMap<String, PathBuf>>,\n-    pub wasm_modules: Option<HashMap<String, PathBuf>>,\n     pub triggers: Option<Triggers>,\n     pub durable_objects: Option<DurableObjects>,\n     #[serde(default, with = \"string_empty_as_none\")]\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -66,6 +62,10 @@ pub struct Manifest {\n     pub compatibility_date: Option<String>,\n     #[serde(default)]\n     pub compatibility_flags: Vec<String>,\n+    pub env: Option<HashMap<String, Environment>>,\n+    pub vars: Option<HashMap<String, String>>,\n+    pub text_blobs: Option<HashMap<String, PathBuf>>,\n+    pub wasm_modules: Option<HashMap<String, PathBuf>>,\n }\n \n impl Manifest {\n",
        "test_patch": "diff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -743,4 +743,17 @@ mod tests {\n \n         Ok(())\n     }\n+\n+    #[test]\n+    fn serialize() {\n+        let manifest = Manifest {\n+            vars: Some(\n+                vec![(String::from(\"FOO\"), String::from(\"some value\"))]\n+                    .into_iter()\n+                    .collect(),\n+            ),\n+            ..Default::default()\n+        };\n+        assert!(toml::to_string(&manifest).is_ok());\n+    }\n }\n",
        "problem_statement": "Serializing manifest result in TOML error\n### \ud83d\udc1b Bug report\r\n\r\n<!-- \r\n  Did you remember to update wrangler?\r\n  https://developers.cloudflare.com/workers/cli-wrangler/install-update#update\r\n\r\n  Did you search for related issues?\r\n  https://github.com/cloudflare/wrangler/issues\r\n-->\r\n\r\n#### Describe the bug\r\n\r\nWhen trying to serialize `wrangler::settings::toml::Manifest` with some non-none `HashMap` value, the TOML serializer throws [ValueAfterTable error](https://github.com/alexcrichton/toml-rs/blob/d8a9a98cbbaa3c734e972ed8809ff62a6f4a781c/src/ser.rs#L131-L134). This is because TOML requires that table fields must come after other fields. \r\n\r\n#### Reproduce the bug\r\n\r\nThe following code panics.\r\n\r\n```rust\r\nlet manifest = Manifest {\r\n    vars: Some(vec![\r\n        (String::from(\"FOO\"), String::from(\"some value\")),\r\n    ].into_iter().collect()),\r\n    ..Default::default()\r\n};\r\nprintln!(\"{}\", toml::to_string(&manifest).unwrap());\r\n```\r\n\r\n#### Expected behavior\r\n\r\nThe manifest is correctly serialized.\r\n\r\n#### Environment and versions\r\n\r\n* output of `wrangler -V`:\r\n`1.19.0`\r\n\n",
        "hints_text": "",
        "created_at": "2021-08-19T21:49:50Z",
        "version": "1.19"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 2024,
        "instance_id": "cloudflare__wrangler-legacy-2024",
        "issue_numbers": [
            "1700"
        ],
        "base_commit": "5675efa83adf58d416f15fa23ee19083dea1c834",
        "patch": "diff --git a/src/deploy/zoned.rs b/src/deploy/zoned.rs\n--- a/src/deploy/zoned.rs\n+++ b/src/deploy/zoned.rs\n@@ -40,10 +40,6 @@ impl ZonedTarget {\n                     }))\n                     .collect();\n \n-                if routes.is_empty() {\n-                    anyhow::bail!(\"No routes specified\");\n-                }\n-\n                 Ok(Self {\n                     zone_id: zone_id.to_owned(),\n                     routes,\ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -39,16 +39,22 @@ impl Environment {\n         &self,\n         top_level_account_id: Option<String>,\n         top_level_zone_id: Option<String>,\n+        top_level_workers_dev: Option<bool>,\n     ) -> Option<RouteConfig> {\n         let account_id = self.account_id.clone().or(top_level_account_id).into();\n         let zone_id = self.zone_id.clone().or(top_level_zone_id);\n+        let workers_dev = self.workers_dev.or(top_level_workers_dev);\n \n-        if self.workers_dev.is_none() && self.route.is_none() && self.routes.is_none() {\n+        if self.workers_dev.is_none()\n+            && self.zone_id.is_none()\n+            && self.route.is_none()\n+            && self.routes.is_none()\n+        {\n             None\n         } else {\n             Some(RouteConfig {\n                 account_id,\n-                workers_dev: self.workers_dev,\n+                workers_dev,\n                 route: self.route.clone(),\n                 routes: self.routes.clone(),\n                 zone_id,\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -215,6 +215,11 @@ impl Manifest {\n         let mut add_routed_deployments = |route_config: &RouteConfig| -> Result<()> {\n             if route_config.is_zoned() {\n                 let zoned = deploy::ZonedTarget::build(&script, route_config)?;\n+\n+                if zoned.routes.is_empty() {\n+                    return Ok(());\n+                }\n+\n                 // This checks all of the configured routes for the wildcard ending and warns\n                 // the user that their site may not work as expected without it.\n                 if self.site.is_some() {\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -240,13 +245,26 @@ impl Manifest {\n                 deployments.push(DeployTarget::Zoneless(zoneless));\n             }\n \n+            if !route_config.is_zoned()\n+                && !route_config.is_zoneless()\n+                && (route_config.route.is_some()\n+                    || (route_config.routes.is_some()\n+                        && !route_config.routes.as_ref().unwrap().is_empty()))\n+            {\n+                anyhow::bail!(\n+                    \"Routes specified with no zone, specify `zone_id` in your wrangler.toml\"\n+                )\n+            }\n+\n             Ok(())\n         };\n \n         if let Some(env) = env {\n-            if let Some(env_route_cfg) =\n-                env.route_config(self.account_id.if_present().cloned(), self.zone_id.clone())\n-            {\n+            if let Some(env_route_cfg) = env.route_config(\n+                self.account_id.if_present().cloned(),\n+                self.zone_id.clone(),\n+                self.workers_dev,\n+            ) {\n                 add_routed_deployments(&env_route_cfg)\n             } else {\n                 let config = self.route_config();\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -289,7 +307,7 @@ impl Manifest {\n         };\n \n         if durable_objects.is_none() && deployments.is_empty() {\n-            anyhow::bail!(\"Please specify your deployment routes or `workers_dev = true` inside of your configuration file. For more information, see: https://developers.cloudflare.com/workers/cli-wrangler/configuration#keys\")\n+            StdOut::warn(\"No deployment routes specified, worker will not be triggered. Please specify your deployment routes or set `workers_dev = true` inside of your configuration file in order to trigger your worker. For more information, see: https://developers.cloudflare.com/workers/cli-wrangler/configuration#keys\");\n         }\n \n         Ok(deployments)\n",
        "test_patch": "diff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -13,14 +13,14 @@ const ACCOUNT_ID: &str = \"fakeaccountid\";\n \n // TOP LEVEL TESTS\n #[test]\n-fn it_errors_on_empty_get_deployments() {\n+fn it_can_get_empty_deployments() {\n     let test_toml = WranglerToml::webpack(\"empty\");\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n     let environment = None;\n \n-    assert!(manifest.get_deployments(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -100,7 +100,7 @@ fn it_errors_on_get_deployments_missing_account_id() {\n }\n \n #[test]\n-fn it_errors_on_zoneless_get_deployments_workers_dev_false() {\n+fn it_can_zoneless_get_deployments_workers_dev_false() {\n     let script_name = \"zoneless_false\";\n     let workers_dev = false;\n     let test_toml = WranglerToml::zoneless(script_name, ACCOUNT_ID, workers_dev);\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -109,7 +109,7 @@ fn it_errors_on_zoneless_get_deployments_workers_dev_false() {\n \n     let environment = None;\n \n-    assert!(manifest.get_deployments(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -285,7 +285,7 @@ fn it_errors_on_single_route_get_deployments_missing_zone_id() {\n }\n \n #[test]\n-fn it_errors_on_single_route_get_deployments_empty_route() {\n+fn it_can_single_route_get_deployments_empty_route() {\n     let script_name = \"single_route_empty_route\";\n     let pattern = \"\";\n \ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -295,11 +295,11 @@ fn it_errors_on_single_route_get_deployments_empty_route() {\n \n     let environment = None;\n \n-    assert!(manifest.get_deployments(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_ok());\n }\n \n #[test]\n-fn it_errors_on_single_route_get_deployments_missing_route() {\n+fn it_can_single_route_get_deployments_missing_route() {\n     let script_name = \"single_route_missing_route\";\n \n     let mut test_toml = WranglerToml::zoned_single_route(script_name, ZONE_ID, \"\");\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -309,7 +309,7 @@ fn it_errors_on_single_route_get_deployments_missing_route() {\n \n     let environment = None;\n \n-    assert!(manifest.get_deployments(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -438,7 +438,7 @@ fn it_errors_on_multi_route_get_deployments_missing_zone_id() {\n }\n \n #[test]\n-fn it_errors_on_multi_route_get_deployments_empty_routes_list() {\n+fn it_can_multi_route_get_deployments_empty_routes_list() {\n     let script_name = \"multi_route_empty_routes_list\";\n     let patterns = [];\n \ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -448,11 +448,11 @@ fn it_errors_on_multi_route_get_deployments_empty_routes_list() {\n \n     let environment = None;\n \n-    assert!(manifest.get_deployments(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_ok());\n }\n \n #[test]\n-fn it_errors_on_multi_route_get_deployments_empty_route() {\n+fn it_can_multi_route_get_deployments_empty_route() {\n     let script_name = \"multi_route_empty_route\";\n     let patterns = [\"\"];\n \ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -462,7 +462,7 @@ fn it_errors_on_multi_route_get_deployments_empty_route() {\n \n     let environment = None;\n \n-    assert!(manifest.get_deployments(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -536,7 +536,7 @@ fn when_top_level_empty_env_empty() {\n \n     let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deployments.is_err());\n+    assert!(actual_deployments.is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -552,7 +552,7 @@ fn when_top_level_empty_env_has_zone_id() {\n \n     let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deployments.is_err());\n+    assert!(actual_deployments.is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -569,7 +569,7 @@ fn when_top_level_empty_env_workers_dev_false() {\n \n     let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deployments.is_err());\n+    assert!(actual_deployments.is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -606,7 +606,7 @@ fn when_top_level_empty_zoned_single_route_env() {\n \n     let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deployments.is_err());\n+    assert!(actual_deployments.is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -636,7 +636,7 @@ fn when_top_level_empty_env_zoned_single_route_zone_id_only() {\n \n     let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deployments.is_err());\n+    assert!(actual_deployments.is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -678,7 +678,7 @@ fn when_top_level_empty_zoned_multi_route_env_routes_empty() {\n \n     let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deployments.is_err());\n+    assert!(actual_deployments.is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -694,7 +694,7 @@ fn when_top_level_empty_zoned_multi_route_env_route_empty() {\n \n     let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deployments.is_err());\n+    assert!(actual_deployments.is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -779,7 +779,7 @@ fn when_top_level_zoneless_env_zoneless_workers_dev_false() {\n \n     let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deployments.is_err());\n+    assert!(actual_deployments.is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -840,9 +840,14 @@ fn when_top_level_zoneless_env_zoned_single_route_zone_id_missing() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n+    let environment = Some(TEST_ENV_NAME);\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME)).unwrap();\n+    let expected_deployments = vec![DeployTarget::Zoneless(ZonelessTarget {\n+        account_id: ACCOUNT_ID.to_string(),\n+        script_name: manifest.worker_name(environment),\n+    })];\n \n-    assert!(actual_deployments.is_err());\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -861,15 +866,22 @@ fn when_top_level_zoneless_env_zoned_single_route() {\n \n     let expected_name = manifest.worker_name(Some(TEST_ENV_NAME));\n \n+    let environment = Some(TEST_ENV_NAME);\n     let expected_routes = vec![Route {\n         script: Some(expected_name),\n         pattern: PATTERN.to_string(),\n         id: None,\n     }];\n-    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n-        zone_id: ZONE_ID.to_string(),\n-        routes: expected_routes,\n-    })];\n+    let expected_deployments = vec![\n+        DeployTarget::Zoned(ZonedTarget {\n+            zone_id: ZONE_ID.to_string(),\n+            routes: expected_routes,\n+        }),\n+        DeployTarget::Zoneless(ZonelessTarget {\n+            account_id: ACCOUNT_ID.to_string(),\n+            script_name: manifest.worker_name(environment),\n+        }),\n+    ];\n \n     assert_eq!(actual_deployments, expected_deployments);\n }\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -889,7 +901,7 @@ fn when_top_level_zoneless_env_zoned_multi_route_routes_list_empty() {\n \n     let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deployments.is_err());\n+    assert!(actual_deployments.is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -907,7 +919,7 @@ fn when_top_level_zoneless_env_zoned_multi_route_route_empty() {\n \n     let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deployments.is_err());\n+    assert!(actual_deployments.is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -935,10 +947,16 @@ fn when_top_level_zoneless_env_zoned_multi_route_route_key_present() {\n         })\n         .collect();\n \n-    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n-        routes: expected_routes,\n-        zone_id: ZONE_ID.to_owned(),\n-    })];\n+    let expected_deployments = vec![\n+        DeployTarget::Zoned(ZonedTarget {\n+            routes: expected_routes,\n+            zone_id: ZONE_ID.to_owned(),\n+        }),\n+        DeployTarget::Zoneless(ZonelessTarget {\n+            account_id: ACCOUNT_ID.to_string(),\n+            script_name: expected_name,\n+        }),\n+    ];\n \n     let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME)).unwrap();\n \ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -958,9 +976,13 @@ fn when_top_level_zoneless_env_zoned_multi_route_zone_id_missing() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME)).unwrap();\n+    let expected_deployments = vec![DeployTarget::Zoneless(ZonelessTarget {\n+        account_id: ACCOUNT_ID.to_string(),\n+        script_name: manifest.worker_name(Some(TEST_ENV_NAME)),\n+    })];\n \n-    assert!(actual_deployments.is_err());\n+    assert_eq!(expected_deployments, actual_deployments);\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -989,10 +1011,16 @@ fn when_top_level_zoneless_env_zoned_multi_route() {\n         })\n         .collect();\n \n-    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n-        zone_id: ZONE_ID.to_string(),\n-        routes: expected_routes,\n-    })];\n+    let expected_deployments = vec![\n+        DeployTarget::Zoned(ZonedTarget {\n+            zone_id: ZONE_ID.to_string(),\n+            routes: expected_routes,\n+        }),\n+        DeployTarget::Zoneless(ZonelessTarget {\n+            account_id: ACCOUNT_ID.to_string(),\n+            script_name: expected_name,\n+        }),\n+    ];\n \n     assert_eq!(actual_deployments, expected_deployments);\n }\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -1026,7 +1054,7 @@ fn when_top_level_zoned_env_zoneless_workers_dev_false() {\n \n     let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deployments.is_err());\n+    assert!(actual_deployments.is_ok());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deployments.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deployments.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -1065,7 +1093,7 @@ fn when_top_level_zoned_env_zoned_single_route_route_empty() {\n \n     let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deployments.is_err());\n+    assert!(actual_deployments.is_ok());\n }\n \n #[test]\ndiff --git a/tests/fixtures/wrangler_toml.rs b/tests/fixtures/wrangler_toml.rs\n--- a/tests/fixtures/wrangler_toml.rs\n+++ b/tests/fixtures/wrangler_toml.rs\n@@ -124,11 +124,15 @@ impl WranglerToml {\n         account_id: &'static str,\n         workers_dev: bool,\n     ) -> WranglerToml {\n-        WranglerToml {\n+        let wrangler_toml = WranglerToml {\n             workers_dev: Some(workers_dev),\n             account_id: Some(account_id),\n             ..WranglerToml::webpack(name)\n-        }\n+        };\n+\n+        eprintln!(\"{:#?}\", &wrangler_toml);\n+\n+        wrangler_toml\n     }\n \n     pub fn zoned_single_route(\n",
        "problem_statement": "publish worker without any routes or triggers\n### \ud83d\udca1 Feature request\r\n\r\n#### Overview and problem statement\r\n\r\nI developed a workers script, which is useful for handling website traffic when the server is under maintenance. Of course, I won't route this workers to any address, nor publish it to workers.dev domain, if the server is not under maintenance. So I need a command that can push my script update to Cloudflare Workers without routing it to a any route or workers.dev domain.\r\n\r\n#### Basic example\r\n\r\n`wrangler push` - a command to push latest script changes to the Cloudflare Workers without routing it to any route.\n",
        "hints_text": "Interesting, I totally understand your use-case here. What if we just allow you to use `wrangler publish` without any routes? I don't think we would need a seperate command.\n@Electroid No problem, it's a great solution, and it gets to the point.\n> Interesting, I totally understand your use-case here. What if we just allow you to use `wrangler publish` without any routes? I don't think we would need a seperate command.\r\n\r\nWould this cover the use case where it's possible to trigger workers, but not have them accessible publicly?\r\n\r\nThe idea is to run periodic cronjob-like functions that talk to other services, without those jobs/workers being accessible via public routes.\r\nP.S. I'm new to CloudFlare workers, so I might have missed another way to achieve this :slightly_smiling_face: \n@nprokopic you want to check out Cron Triggers: https://developers.cloudflare.com/workers/platform/cron-triggers\n\nBasically the same as the Workers you've deployed that respond to \"fetch\" events, however with a slightly different entry point: https://developers.cloudflare.com/workers/runtime-apis/scheduled-event\n@Electroid Any updates on this feature request?",
        "created_at": "2021-08-10T18:28:23Z",
        "version": "1.19"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1592,
        "instance_id": "cloudflare__wrangler-legacy-1592",
        "issue_numbers": [
            "1574"
        ],
        "base_commit": "7400d7527a592e049432ce944b6d23d055fc3b93",
        "patch": "diff --git a/src/commands/dev/edge/mod.rs b/src/commands/dev/edge/mod.rs\n--- a/src/commands/dev/edge/mod.rs\n+++ b/src/commands/dev/edge/mod.rs\n@@ -6,8 +6,9 @@ use setup::{upload, Session};\n use watch::watch_for_changes;\n \n use crate::commands::dev::{socket, Protocol, ServerConfig};\n+use crate::deploy::DeployTarget;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::toml::{DeployConfig, Target};\n+use crate::settings::toml::Target;\n \n use tokio::runtime::Runtime as TokioRuntime;\n \ndiff --git a/src/commands/dev/edge/mod.rs b/src/commands/dev/edge/mod.rs\n--- a/src/commands/dev/edge/mod.rs\n+++ b/src/commands/dev/edge/mod.rs\n@@ -18,17 +19,17 @@ pub fn dev(\n     target: Target,\n     user: GlobalUser,\n     server_config: ServerConfig,\n-    deploy_config: DeployConfig,\n+    deploy_target: DeployTarget,\n     local_protocol: Protocol,\n     upstream_protocol: Protocol,\n     verbose: bool,\n ) -> Result<(), failure::Error> {\n-    let session = Session::new(&target, &user, &deploy_config)?;\n+    let session = Session::new(&target, &user, &deploy_target)?;\n     let mut target = target;\n \n     let preview_token = upload(\n         &mut target,\n-        &deploy_config,\n+        &deploy_target,\n         &user,\n         session.preview_token.clone(),\n         verbose,\ndiff --git a/src/commands/dev/edge/mod.rs b/src/commands/dev/edge/mod.rs\n--- a/src/commands/dev/edge/mod.rs\n+++ b/src/commands/dev/edge/mod.rs\n@@ -43,7 +44,7 @@ pub fn dev(\n         thread::spawn(move || {\n             watch_for_changes(\n                 target,\n-                &deploy_config,\n+                &deploy_target,\n                 &user,\n                 Arc::clone(&preview_token),\n                 session_token,\ndiff --git a/src/commands/dev/edge/setup.rs b/src/commands/dev/edge/setup.rs\n--- a/src/commands/dev/edge/setup.rs\n+++ b/src/commands/dev/edge/setup.rs\n@@ -1,8 +1,9 @@\n use std::path::Path;\n \n+use crate::deploy::DeployTarget;\n use crate::kv::bulk;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::toml::{DeployConfig, Target};\n+use crate::settings::toml::Target;\n use crate::sites::{add_namespace, sync};\n use crate::terminal::message::{Message, StdOut};\n use crate::upload;\ndiff --git a/src/commands/dev/edge/setup.rs b/src/commands/dev/edge/setup.rs\n--- a/src/commands/dev/edge/setup.rs\n+++ b/src/commands/dev/edge/setup.rs\n@@ -13,7 +14,7 @@ use serde_json::json;\n \n pub(super) fn upload(\n     target: &mut Target,\n-    deploy_config: &DeployConfig,\n+    deploy_target: &DeployTarget,\n     user: &GlobalUser,\n     session_token: String,\n     verbose: bool,\ndiff --git a/src/commands/dev/edge/setup.rs b/src/commands/dev/edge/setup.rs\n--- a/src/commands/dev/edge/setup.rs\n+++ b/src/commands/dev/edge/setup.rs\n@@ -38,7 +39,7 @@ pub(super) fn upload(\n         (Vec::new(), None, None)\n     };\n \n-    let session_config = get_session_config(deploy_config);\n+    let session_config = get_session_config(deploy_target);\n     let address = get_upload_address(target);\n \n     let script_upload_form = upload::form::build(target, asset_manifest, Some(session_config))?;\ndiff --git a/src/commands/dev/edge/setup.rs b/src/commands/dev/edge/setup.rs\n--- a/src/commands/dev/edge/setup.rs\n+++ b/src/commands/dev/edge/setup.rs\n@@ -76,9 +77,9 @@ impl Session {\n     pub fn new(\n         target: &Target,\n         user: &GlobalUser,\n-        deploy_config: &DeployConfig,\n+        deploy_target: &DeployTarget,\n     ) -> Result<Session, failure::Error> {\n-        let exchange_url = get_exchange_url(deploy_config, user)?;\n+        let exchange_url = get_exchange_url(deploy_target, user)?;\n         let host = match exchange_url.host_str() {\n             Some(host) => Ok(host.to_string()),\n             None => Err(failure::format_err!(\ndiff --git a/src/commands/dev/edge/setup.rs b/src/commands/dev/edge/setup.rs\n--- a/src/commands/dev/edge/setup.rs\n+++ b/src/commands/dev/edge/setup.rs\n@@ -86,13 +87,14 @@ impl Session {\n             )),\n         }?;\n \n-        let host = match deploy_config {\n-            DeployConfig::Zoned(_) => host,\n-            DeployConfig::Zoneless(_) => {\n+        let host = match deploy_target {\n+            DeployTarget::Zoned(_) => host,\n+            DeployTarget::Zoneless(_) => {\n                 let namespaces: Vec<&str> = host.as_str().split('.').collect();\n                 let subdomain = namespaces[1];\n                 format!(\"{}.{}.workers.dev\", target.name, subdomain)\n             }\n+            _ => unreachable!(),\n         };\n \n         let client = crate::http::legacy_auth_client(&user);\ndiff --git a/src/commands/dev/edge/setup.rs b/src/commands/dev/edge/setup.rs\n--- a/src/commands/dev/edge/setup.rs\n+++ b/src/commands/dev/edge/setup.rs\n@@ -114,30 +116,32 @@ impl Session {\n     }\n }\n \n-fn get_session_config(deploy_config: &DeployConfig) -> serde_json::Value {\n-    match deploy_config {\n-        DeployConfig::Zoned(config) => {\n+fn get_session_config(target: &DeployTarget) -> serde_json::Value {\n+    match target {\n+        DeployTarget::Zoned(config) => {\n             let mut routes: Vec<String> = Vec::new();\n             for route in &config.routes {\n                 routes.push(route.pattern.clone());\n             }\n             json!({ \"routes\": routes })\n         }\n-        DeployConfig::Zoneless(_) => json!({\"workers_dev\": true}),\n+        DeployTarget::Zoneless(_) => json!({\"workers_dev\": true}),\n+        _ => unreachable!(),\n     }\n }\n \n-fn get_session_address(deploy_config: &DeployConfig) -> String {\n-    match deploy_config {\n-        DeployConfig::Zoned(config) => format!(\n+fn get_session_address(target: &DeployTarget) -> String {\n+    match target {\n+        DeployTarget::Zoned(config) => format!(\n             \"https://api.cloudflare.com/client/v4/zones/{}/workers/edge-preview\",\n             config.zone_id\n         ),\n         // TODO: zoneless is probably wrong\n-        DeployConfig::Zoneless(config) => format!(\n+        DeployTarget::Zoneless(config) => format!(\n             \"https://api.cloudflare.com/client/v4/accounts/{}/workers/subdomain/edge-preview\",\n             config.account_id\n         ),\n+        _ => unreachable!(),\n     }\n }\n \ndiff --git a/src/commands/dev/edge/setup.rs b/src/commands/dev/edge/setup.rs\n--- a/src/commands/dev/edge/setup.rs\n+++ b/src/commands/dev/edge/setup.rs\n@@ -149,11 +153,11 @@ fn get_upload_address(target: &mut Target) -> String {\n }\n \n fn get_exchange_url(\n-    deploy_config: &DeployConfig,\n+    deploy_target: &DeployTarget,\n     user: &GlobalUser,\n ) -> Result<Url, failure::Error> {\n     let client = crate::http::legacy_auth_client(&user);\n-    let address = get_session_address(deploy_config);\n+    let address = get_session_address(deploy_target);\n     let url = Url::parse(&address)?;\n     let response = client.get(url).send()?.error_for_status()?;\n     let text = &response.text()?;\ndiff --git a/src/commands/dev/edge/watch.rs b/src/commands/dev/edge/watch.rs\n--- a/src/commands/dev/edge/watch.rs\n+++ b/src/commands/dev/edge/watch.rs\n@@ -1,14 +1,14 @@\n use std::sync::{mpsc, Arc, Mutex};\n \n use crate::commands::dev::edge::setup;\n-\n+use crate::deploy::DeployTarget;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::toml::{DeployConfig, Target};\n+use crate::settings::toml::Target;\n use crate::watch::watch_and_build;\n \n pub fn watch_for_changes(\n     target: Target,\n-    deploy_config: &DeployConfig,\n+    deploy_target: &DeployTarget,\n     user: &GlobalUser,\n     preview_token: Arc<Mutex<String>>,\n     session_token: String,\ndiff --git a/src/commands/dev/edge/watch.rs b/src/commands/dev/edge/watch.rs\n--- a/src/commands/dev/edge/watch.rs\n+++ b/src/commands/dev/edge/watch.rs\n@@ -20,7 +20,7 @@ pub fn watch_for_changes(\n     while receiver.recv().is_ok() {\n         let user = user.clone();\n         let target = target.clone();\n-        let deploy_config = deploy_config.clone();\n+        let deploy_target = deploy_target.clone();\n         let session_token = session_token.clone();\n         let mut target = target;\n \ndiff --git a/src/commands/dev/edge/watch.rs b/src/commands/dev/edge/watch.rs\n--- a/src/commands/dev/edge/watch.rs\n+++ b/src/commands/dev/edge/watch.rs\n@@ -32,7 +32,7 @@ pub fn watch_for_changes(\n         //\n         // this allows the server to route subsequent requests\n         // to the proper script\n-        *preview_token = setup::upload(&mut target, &deploy_config, &user, session_token, verbose)?;\n+        *preview_token = setup::upload(&mut target, &deploy_target, &user, session_token, verbose)?;\n     }\n \n     Ok(())\ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -9,8 +9,9 @@ pub use server_config::Protocol;\n pub use server_config::ServerConfig;\n \n use crate::build::build_target;\n+use crate::deploy::{DeployTarget, DeploymentSet};\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::toml::{DeployConfig, Target};\n+use crate::settings::toml::Target;\n use crate::terminal::message::{Message, StdOut};\n use crate::terminal::styles;\n \ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -18,7 +19,7 @@ use crate::terminal::styles;\n /// to a Cloudflare Workers runtime and returns HTTP responses\n pub fn dev(\n     target: Target,\n-    deploy_config: DeployConfig,\n+    deployments: DeploymentSet,\n     user: Option<GlobalUser>,\n     server_config: ServerConfig,\n     local_protocol: Protocol,\ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -28,6 +29,28 @@ pub fn dev(\n     // before serving requests we must first build the Worker\n     build_target(&target)?;\n \n+    let deploy_target = {\n+        let valid_targets = deployments\n+            .into_iter()\n+            .filter(|t| matches!(t, DeployTarget::Zoned(_) | DeployTarget::Zoneless(_)))\n+            .collect::<Vec<_>>();\n+\n+        let valid_target = valid_targets\n+            .iter()\n+            .find(|&t| matches!(t, DeployTarget::Zoned(_)))\n+            .or_else(|| {\n+                valid_targets\n+                    .iter()\n+                    .find(|&t| matches!(t, DeployTarget::Zoneless(_)))\n+            });\n+\n+        if let Some(target) = valid_target {\n+            target.clone()\n+        } else {\n+            failure::bail!(\"No valid deployment targets: `wrangler dev` can only be used to develop zoned and zoneless deployments\")\n+        }\n+    };\n+\n     let host_str = styles::highlight(\"--host\");\n     let local_str = styles::highlight(\"--local-protocol\");\n     let upstream_str = styles::highlight(\"--upstream-protocol\");\ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -48,7 +71,7 @@ pub fn dev(\n                 target,\n                 user,\n                 server_config,\n-                deploy_config,\n+                deploy_target,\n                 local_protocol,\n                 upstream_protocol,\n                 verbose,\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -5,11 +5,11 @@ use indicatif::{ProgressBar, ProgressStyle};\n use serde::{Deserialize, Serialize};\n \n use crate::build::build_target;\n-use crate::deploy;\n+use crate::deploy::{self, DeploymentSet};\n use crate::http::{self, Feature};\n use crate::kv::bulk;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::toml::{DeployConfig, Target};\n+use crate::settings::toml::Target;\n use crate::sites;\n use crate::terminal::emoji;\n use crate::terminal::message::{Message, Output, StdErr, StdOut};\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -20,16 +20,49 @@ pub struct PublishOutput {\n     pub success: bool,\n     pub name: String,\n     pub urls: Vec<String>,\n+    pub schedules: Vec<String>,\n }\n \n pub fn publish(\n     user: &GlobalUser,\n     target: &mut Target,\n-    deploy_config: DeployConfig,\n+    deployments: DeploymentSet,\n     out: Output,\n ) -> Result<(), failure::Error> {\n     validate_target_required_fields_present(target)?;\n \n+    let deploy = |target: &Target| match deploy::worker(&user, &deployments) {\n+        Ok(deploy::DeployResults { urls, schedules }) => {\n+            let result_msg = match (urls.as_slice(), schedules.as_slice()) {\n+                ([], []) => \"Successfully published your script\".to_owned(),\n+                ([], schedules) => format!(\n+                    \"Successfully published your script with this schedule\\n {}\",\n+                    schedules.join(\"\\n \")\n+                ),\n+                (urls, []) => format!(\n+                    \"Successfully published your script to\\n {}\",\n+                    urls.join(\"\\n \")\n+                ),\n+                (urls, schedules) => format!(\n+                    \"Successfully published your script to\\n {}\\nwith this schedule\\n {}\",\n+                    urls.join(\"\\n \"),\n+                    schedules.join(\"\\n \")\n+                ),\n+            };\n+            StdErr::success(&result_msg);\n+            if out == Output::Json {\n+                StdOut::as_json(&PublishOutput {\n+                    success: true,\n+                    name: target.name.clone(),\n+                    urls,\n+                    schedules,\n+                });\n+            }\n+            Ok(())\n+        }\n+        Err(e) => Err(e),\n+    };\n+\n     // Build the script before uploading and log build result\n     let build_result = build_target(&target);\n     match build_result {\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -42,7 +75,6 @@ pub fn publish(\n     if let Some(site_config) = &target.site {\n         let path = &site_config.bucket.clone();\n         validate_bucket_location(path)?;\n-        warn_site_incompatible_route(&deploy_config);\n \n         let site_namespace = sites::add_namespace(user, target, false)?;\n \ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -77,26 +109,7 @@ pub fn publish(\n         // Next, upload and deploy the worker with the updated asset_manifest\n         upload::script(&upload_client, &target, Some(asset_manifest))?;\n \n-        match deploy::worker(&user, &deploy_config) {\n-            Ok(urls) => {\n-                let result_msg = format!(\"Successfully published your script to {}\", urls[0]);\n-                match out {\n-                    Output::Json => {\n-                        let mut jsonout = PublishOutput::default();\n-                        jsonout.success = true;\n-                        jsonout.name = target.name.clone();\n-                        jsonout.urls = urls;\n-                        StdErr::success(&result_msg);\n-                        StdOut::as_json(&jsonout);\n-                    }\n-                    Output::PlainText => {\n-                        StdOut::success(&result_msg);\n-                    }\n-                }\n-                Ok(())\n-            }\n-            Err(e) => Err(e),\n-        }?;\n+        deploy(target)?;\n \n         // Finally, remove any stale files\n         if !to_delete.is_empty() {\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -128,51 +141,12 @@ pub fn publish(\n         let upload_client = http::legacy_auth_client(user);\n \n         upload::script(&upload_client, &target, None)?;\n-        match deploy::worker(&user, &deploy_config) {\n-            Ok(urls) => {\n-                let result_msg = format!(\"Successfully published your script to {}\", urls[0]);\n-                match out {\n-                    Output::Json => {\n-                        let mut jsonout = PublishOutput::default();\n-                        jsonout.success = true;\n-                        jsonout.name = target.name.clone();\n-                        jsonout.urls = urls;\n-                        StdErr::success(&result_msg);\n-                        StdOut::as_json(&jsonout);\n-                    }\n-                    Output::PlainText => {\n-                        StdOut::success(&result_msg);\n-                    }\n-                }\n-                Ok(())\n-            }\n-            Err(e) => Err(e),\n-        }?;\n+        deploy(target)?;\n     }\n \n     Ok(())\n }\n \n-// This checks all of the configured routes for the wildcard ending and warns\n-// the user that their site may not work as expected without it.\n-fn warn_site_incompatible_route(deploy_config: &DeployConfig) {\n-    if let DeployConfig::Zoned(zoned) = &deploy_config {\n-        let mut no_star_routes = Vec::new();\n-        for route in &zoned.routes {\n-            if !route.pattern.ends_with('*') {\n-                no_star_routes.push(route.pattern.to_string());\n-            }\n-        }\n-\n-        if !no_star_routes.is_empty() {\n-            StdOut::warn(&format!(\n-                \"The following routes in your configuration file should have a trailing * to apply the Worker on every path, otherwise your site will not behave as expected.\\n{}\",\n-                no_star_routes.join(\"\\n\"))\n-            );\n-        }\n-    }\n-}\n-\n // We don't want folks setting their bucket to the top level directory,\n // which is where wrangler commands are always called from.\n pub fn validate_bucket_location(bucket: &PathBuf) -> Result<(), failure::Error> {\ndiff --git a/src/deploy/mod.rs b/src/deploy/mod.rs\n--- a/src/deploy/mod.rs\n+++ b/src/deploy/mod.rs\n@@ -1,75 +1,50 @@\n-mod route;\n-use route::publish_routes;\n+mod schedule;\n+mod zoned;\n+mod zoneless;\n \n-use crate::commands::subdomain::Subdomain;\n-use crate::http;\n-use crate::settings::global_user::GlobalUser;\n-use crate::settings::toml::{DeployConfig, Zoneless};\n+pub use schedule::ScheduleTarget;\n+pub use zoned::ZonedTarget;\n+pub use zoneless::ZonelessTarget;\n \n-pub fn worker(\n-    user: &GlobalUser,\n-    deploy_config: &DeployConfig,\n-) -> Result<Vec<String>, failure::Error> {\n-    match deploy_config {\n-        DeployConfig::Zoneless(zoneless_config) => {\n-            // this is a zoneless deploy\n-            log::info!(\"publishing to workers.dev subdomain\");\n-            let deploy_address = publish_zoneless(user, zoneless_config)?;\n-            let addresses = vec![deploy_address];\n-            Ok(addresses)\n-        }\n-        DeployConfig::Zoned(zoned_config) => {\n-            // this is a zoned deploy\n-            log::info!(\"publishing to zone {}\", zoned_config.zone_id);\n-\n-            let published_routes = publish_routes(&user, zoned_config)?;\n+use crate::settings::global_user::GlobalUser;\n \n-            let addresses: Vec<String> =\n-                published_routes.iter().map(|r| format!(\"{}\", r)).collect();\n+/// A set of deploy targets.\n+pub type DeploymentSet = Vec<DeployTarget>;\n \n-            Ok(addresses)\n-        }\n-    }\n+#[derive(Debug, PartialEq, Clone)]\n+pub enum DeployTarget {\n+    Zoned(ZonedTarget),\n+    Zoneless(ZonelessTarget),\n+    Schedule(ScheduleTarget),\n }\n \n-fn publish_zoneless(\n+pub fn worker(\n     user: &GlobalUser,\n-    zoneless_config: &Zoneless,\n-) -> Result<String, failure::Error> {\n-    log::info!(\"checking that subdomain is registered\");\n-    let subdomain = match Subdomain::get(&zoneless_config.account_id, user)? {\n-        Some(subdomain) => subdomain,\n-        None => failure::bail!(\"Before publishing to workers.dev, you must register a subdomain. Please choose a name for your subdomain and run `wrangler subdomain <name>`.\")\n-    };\n-\n-    let sd_worker_addr = format!(\n-        \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}/subdomain\",\n-        zoneless_config.account_id, zoneless_config.script_name,\n-    );\n-\n-    let client = http::legacy_auth_client(user);\n-\n-    log::info!(\"Making public on subdomain...\");\n-    let res = client\n-        .post(&sd_worker_addr)\n-        .header(\"Content-type\", \"application/json\")\n-        .body(build_subdomain_request())\n-        .send()?;\n-\n-    if !res.status().is_success() {\n-        failure::bail!(\n-            \"Something went wrong! Status: {}, Details {}\",\n-            res.status(),\n-            res.text()?\n-        )\n+    deploy_targets: &[DeployTarget],\n+) -> Result<DeployResults, failure::Error> {\n+    let mut results = DeployResults::default();\n+    for target in deploy_targets {\n+        match target {\n+            DeployTarget::Zoned(zoned) => {\n+                let route_urls = zoned.deploy(user)?;\n+                results.urls.extend(route_urls);\n+            }\n+            DeployTarget::Zoneless(zoneless) => {\n+                let worker_dev = zoneless.deploy(user)?;\n+                results.urls.push(worker_dev);\n+            }\n+            DeployTarget::Schedule(schedule) => {\n+                let schedules = schedule.deploy(user)?;\n+                results.schedules.extend(schedules);\n+            }\n+        }\n     }\n \n-    Ok(format!(\n-        \"https://{}.{}.workers.dev\",\n-        zoneless_config.script_name, subdomain\n-    ))\n+    Ok(results)\n }\n \n-fn build_subdomain_request() -> String {\n-    serde_json::json!({ \"enabled\": true }).to_string()\n+#[derive(Default)]\n+pub struct DeployResults {\n+    pub urls: Vec<String>,\n+    pub schedules: Vec<String>,\n }\ndiff --git /dev/null b/src/deploy/schedule.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/deploy/schedule.rs\n@@ -0,0 +1,60 @@\n+use crate::http;\n+use crate::settings::global_user::GlobalUser;\n+\n+#[derive(Clone, Debug, PartialEq)]\n+pub struct ScheduleTarget {\n+    pub account_id: String,\n+    pub script_name: String,\n+    pub crons: Vec<String>,\n+}\n+\n+impl ScheduleTarget {\n+    pub fn build(\n+        account_id: String,\n+        script_name: String,\n+        crons: Vec<String>,\n+    ) -> Result<Self, failure::Error> {\n+        // TODO: add validation for expressions before pushing them to the API\n+        // we can do this once the cron parser is open sourced\n+        Ok(Self {\n+            account_id,\n+            script_name,\n+            crons,\n+        })\n+    }\n+\n+    pub fn deploy(&self, user: &GlobalUser) -> Result<Vec<String>, failure::Error> {\n+        log::info!(\"publishing schedules\");\n+        let schedule_worker_addr = format!(\n+            \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}/schedules\",\n+            self.account_id, self.script_name,\n+        );\n+\n+        let client = http::legacy_auth_client(user);\n+\n+        log::info!(\"Pushing {} schedule(s)...\", self.crons.len());\n+        let res = client\n+            .put(&schedule_worker_addr)\n+            .header(\"Content-Type\", \"application/json\")\n+            .body(build_schedules_request(&self.crons))\n+            .send()?;\n+\n+        if !res.status().is_success() {\n+            failure::bail!(\n+                \"Something went wrong! Status: {}, Details {}\",\n+                res.status(),\n+                res.text()?\n+            )\n+        }\n+\n+        Ok(self.crons.clone())\n+    }\n+}\n+\n+fn build_schedules_request(crons: &[String]) -> String {\n+    let values = crons\n+        .iter()\n+        .map(|s| serde_json::json!({ \"cron\": s }))\n+        .collect();\n+    serde_json::Value::Array(values).to_string()\n+}\ndiff --git a/src/deploy/route.rs b/src/deploy/zoned.rs\n--- a/src/deploy/route.rs\n+++ b/src/deploy/zoned.rs\n@@ -7,11 +7,65 @@ use cloudflare::framework::apiclient::ApiClient;\n \n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::toml::{Route, Zoned};\n+use crate::settings::toml::{Route, RouteConfig};\n+use crate::terminal::message::{Message, StdOut};\n+\n+#[derive(Clone, Debug, PartialEq)]\n+pub struct ZonedTarget {\n+    pub zone_id: String,\n+    pub routes: Vec<Route>,\n+}\n+\n+impl ZonedTarget {\n+    pub fn build(script_name: &str, route_config: &RouteConfig) -> Result<Self, failure::Error> {\n+        match route_config.zone_id.as_ref() {\n+            Some(zone_id) if !zone_id.is_empty() => {\n+                let new_route = |route: &String| Route {\n+                    id: None,\n+                    script: Some(script_name.to_string()),\n+                    pattern: route.to_string(),\n+                };\n+                let routes: Vec<Route> = route_config\n+                    .route\n+                    .iter()\n+                    .map(new_route)\n+                    .chain(route_config.routes.iter().flatten().filter_map(|route| {\n+                        if route.is_empty() {\n+                            StdOut::warn(\"your configuration file contains an empty route\");\n+                            None\n+                        } else {\n+                            Some(new_route(route))\n+                        }\n+                    }))\n+                    .collect();\n+\n+                if routes.is_empty() {\n+                    failure::bail!(\"No routes specified\");\n+                }\n+\n+                Ok(Self {\n+                    zone_id: zone_id.to_owned(),\n+                    routes,\n+                })\n+            }\n+            _ => failure::bail!(\"field `zone_id` is required to deploy to routes\"),\n+        }\n+    }\n+\n+    pub fn deploy(&self, user: &GlobalUser) -> Result<Vec<String>, failure::Error> {\n+        log::info!(\"publishing to zone {}\", self.zone_id);\n+\n+        let published_routes = publish_routes(&user, self)?;\n+\n+        let display_results: Vec<String> = published_routes.iter().map(|r| r.to_string()).collect();\n+\n+        Ok(display_results)\n+    }\n+}\n \n pub fn publish_routes(\n     user: &GlobalUser,\n-    zoned_config: &Zoned,\n+    zoned_config: &ZonedTarget,\n ) -> Result<Vec<RouteUploadResult>, failure::Error> {\n     // For the moment, we'll just make this call once and make all our decisions based on the response.\n     // There is a possibility of race conditions, but we just report back the results and allow the\ndiff --git /dev/null b/src/deploy/zoneless.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/deploy/zoneless.rs\n@@ -0,0 +1,63 @@\n+use crate::commands::subdomain::Subdomain;\n+use crate::http;\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::toml::RouteConfig;\n+\n+#[derive(Clone, Debug, PartialEq)]\n+pub struct ZonelessTarget {\n+    pub account_id: String,\n+    pub script_name: String,\n+}\n+\n+impl ZonelessTarget {\n+    pub fn build(script_name: &str, route_config: &RouteConfig) -> Result<Self, failure::Error> {\n+        match route_config.account_id.as_ref() {\n+            // TODO: Deserialize empty strings to None; cannot do this for account id\n+            // yet without a large refactor.\n+            Some(account_id) if !account_id.is_empty() => Ok(Self {\n+                script_name: script_name.to_string(),\n+                account_id: account_id.to_string(),\n+            }),\n+            _ => failure::bail!(\"field `account_id` is required to deploy to workers.dev\"),\n+        }\n+    }\n+\n+    pub fn deploy(&self, user: &GlobalUser) -> Result<String, failure::Error> {\n+        log::info!(\"publishing to workers.dev subdomain\");\n+        log::info!(\"checking that subdomain is registered\");\n+        let subdomain = match Subdomain::get(&self.account_id, user)? {\n+            Some(subdomain) => subdomain,\n+            None => failure::bail!(\"Before publishing to workers.dev, you must register a subdomain. Please choose a name for your subdomain and run `wrangler subdomain <name>`.\")\n+        };\n+\n+        let sd_worker_addr = format!(\n+            \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}/subdomain\",\n+            self.account_id, self.script_name,\n+        );\n+\n+        let client = http::legacy_auth_client(user);\n+\n+        log::info!(\"Making public on subdomain...\");\n+        let res = client\n+            .post(&sd_worker_addr)\n+            .header(\"Content-type\", \"application/json\")\n+            .body(build_subdomain_request())\n+            .send()?;\n+\n+        if !res.status().is_success() {\n+            failure::bail!(\n+                \"Something went wrong! Status: {}, Details {}\",\n+                res.status(),\n+                res.text()?\n+            )\n+        }\n+\n+        let deploy_address = format!(\"https://{}.{}.workers.dev\", self.script_name, subdomain);\n+\n+        Ok(deploy_address)\n+    }\n+}\n+\n+fn build_subdomain_request() -> String {\n+    serde_json::json!({ \"enabled\": true }).to_string()\n+}\ndiff --git a/src/fixtures/mod.rs b/src/fixtures/mod.rs\n--- a/src/fixtures/mod.rs\n+++ b/src/fixtures/mod.rs\n@@ -1,5 +1,5 @@\n mod wrangler_toml;\n-pub use wrangler_toml::{EnvConfig, KvConfig, SiteConfig, WranglerToml, TEST_ENV_NAME};\n+pub use wrangler_toml::{EnvConfig, KvConfig, SiteConfig, Triggers, WranglerToml, TEST_ENV_NAME};\n \n use std::fs;\n use std::fs::File;\ndiff --git a/src/fixtures/wrangler_toml.rs b/src/fixtures/wrangler_toml.rs\n--- a/src/fixtures/wrangler_toml.rs\n+++ b/src/fixtures/wrangler_toml.rs\n@@ -16,6 +16,11 @@ pub struct KvConfig {\n     pub id: Option<&'static str>,\n }\n \n+#[derive(Clone, Debug, Default, Serialize)]\n+pub struct Triggers {\n+    pub crons: Option<Vec<String>>,\n+}\n+\n #[derive(Clone, Debug, Default, Serialize)]\n pub struct SiteConfig {\n     pub bucket: Option<&'static str>,\ndiff --git a/src/fixtures/wrangler_toml.rs b/src/fixtures/wrangler_toml.rs\n--- a/src/fixtures/wrangler_toml.rs\n+++ b/src/fixtures/wrangler_toml.rs\n@@ -39,6 +44,7 @@ pub struct EnvConfig {\n     #[serde(alias = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<KvConfig>>,\n     pub vars: Option<HashMap<&'static str, &'static str>>,\n+    pub triggers: Option<Triggers>,\n }\n \n impl EnvConfig {\ndiff --git a/src/fixtures/wrangler_toml.rs b/src/fixtures/wrangler_toml.rs\n--- a/src/fixtures/wrangler_toml.rs\n+++ b/src/fixtures/wrangler_toml.rs\n@@ -98,6 +104,7 @@ pub struct WranglerToml {\n     pub kv_namespaces: Option<Vec<KvConfig>>,\n     pub site: Option<SiteConfig>,\n     pub vars: Option<HashMap<&'static str, &'static str>>,\n+    pub triggers: Option<Triggers>,\n }\n \n impl WranglerToml {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -525,18 +525,16 @@ fn run() -> Result<(), failure::Error> {\n                 )\n                 .arg(\n                     Arg::with_name(\"local-protocol\")\n-                    .help(\"sets the protocol on which the wrangler dev listens, by default this is http but can be set to https\")\n-                    .long(\"local-protocol\")\n-                    .takes_value(true)\n-                    )\n+                        .help(\"sets the protocol on which the wrangler dev listens, by default this is http but can be set to https\")\n+                        .long(\"local-protocol\")\n+                        .takes_value(true)\n+                )\n                 .arg(\n                     Arg::with_name(\"upstream-protocol\")\n-                    .help(\"sets the protocol on which requests are sent to the host, by default this is https but can be set to http\")\n-                    .long(\"upstream-protocol\")\n-                    .takes_value(true)\n-                    )\n-                .arg(verbose_arg.clone())\n-                .arg(wrangler_file.clone())\n+                        .help(\"sets the protocol on which requests are sent to the host, by default this is https but can be set to http\")\n+                        .long(\"upstream-protocol\")\n+                        .takes_value(true)\n+                )\n         )\n         .subcommand(\n             SubCommand::with_name(\"publish\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -772,6 +770,8 @@ fn run() -> Result<(), failure::Error> {\n \n         commands::preview(target, user, options, verbose)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"dev\") {\n+        use commands::dev::Protocol;\n+\n         log::info!(\"Starting dev server\");\n \n         let config_path = Path::new(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -787,31 +787,20 @@ fn run() -> Result<(), failure::Error> {\n             .value_of(\"port\")\n             .map(|p| p.parse().expect(\"--port expects a number\"));\n \n-        type Protocol = commands::dev::Protocol;\n         let mut local_protocol_str: Option<&str> = matches.value_of(\"local-protocol\");\n         let mut upstream_protocol_str: Option<&str> = matches.value_of(\"upstream-protocol\");\n \n         // Check if arg not given but present in wrangler.toml\n         if let Some(d) = &manifest.dev {\n-            if ip.is_none() && d.ip.is_some() {\n-                ip = d.ip.as_deref();\n-            }\n-\n-            if port.is_none() && d.port.is_some() {\n-                port = d.port;\n-            }\n-\n-            if local_protocol_str.is_none() && d.local_protocol.is_some() {\n-                local_protocol_str = d.local_protocol.as_deref();\n-            }\n-\n-            if upstream_protocol_str.is_none() && d.upstream_protocol.is_some() {\n-                upstream_protocol_str = d.upstream_protocol.as_deref();\n-            }\n+            ip = ip.or_else(|| d.ip.as_deref());\n+            port = port.or(d.port);\n+            local_protocol_str = local_protocol_str.or_else(|| d.local_protocol.as_deref());\n+            upstream_protocol_str =\n+                upstream_protocol_str.or_else(|| d.upstream_protocol.as_deref());\n         }\n \n         let env = matches.value_of(\"env\");\n-        let deploy_config = manifest.deploy_config(env)?;\n+        let deployments = manifest.get_deployments(env)?;\n         is_preview = true;\n         let target = manifest.get_target(env, is_preview)?;\n         let user = settings::global_user::GlobalUser::new().ok();\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -824,7 +813,7 @@ fn run() -> Result<(), failure::Error> {\n \n         commands::dev::dev(\n             target,\n-            deploy_config,\n+            deployments,\n             user,\n             server_config,\n             local_protocol,\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -861,7 +850,7 @@ fn run() -> Result<(), failure::Error> {\n         let manifest = settings::toml::Manifest::new(config_path)?;\n         let env = matches.value_of(\"env\");\n         let mut target = manifest.get_target(env, is_preview)?;\n-        let deploy_config = manifest.deploy_config(env)?;\n+        let deploy_config = manifest.get_deployments(env)?;\n         if matches.is_present(\"output\") && matches.value_of(\"output\") == Some(\"json\") {\n             commands::publish(&user, &mut target, deploy_config, Output::Json)?;\n         } else {\ndiff --git a/src/settings/toml/deploy_config.rs /dev/null\n--- a/src/settings/toml/deploy_config.rs\n+++ /dev/null\n@@ -1,160 +0,0 @@\n-use crate::settings::toml::Route;\n-use crate::terminal::message::{Message, StdOut};\n-#[derive(Clone, Debug, PartialEq)]\n-pub enum DeployConfig {\n-    Zoneless(Zoneless),\n-    Zoned(Zoned),\n-}\n-\n-impl DeployConfig {\n-    pub fn build(\n-        script_name: &str,\n-        route_config: &RouteConfig,\n-    ) -> Result<DeployConfig, failure::Error> {\n-        if route_config.is_valid() {\n-            failure::bail!(\n-                \"you must set EITHER workers_dev = true OR provide a zone_id and route/routes.\"\n-            )\n-        }\n-\n-        if route_config.is_zoneless() {\n-            DeployConfig::build_zoneless(script_name, route_config)\n-        } else if route_config.is_zoned() {\n-            DeployConfig::build_zoned(script_name, route_config)\n-        } else {\n-            failure::bail!(\"No deploy target specified\");\n-        }\n-    }\n-\n-    fn build_zoneless(\n-        script_name: &str,\n-        route_config: &RouteConfig,\n-    ) -> Result<DeployConfig, failure::Error> {\n-        if let Some(account_id) = &route_config.account_id {\n-            // TODO: Deserialize empty strings to None; cannot do this for account id\n-            // yet without a large refactor.\n-            if account_id.is_empty() {\n-                failure::bail!(\"field `account_id` is required to deploy to workers.dev\");\n-            }\n-            let zoneless = Zoneless {\n-                script_name: script_name.to_string(),\n-                account_id: account_id.to_string(),\n-            };\n-\n-            Ok(DeployConfig::Zoneless(zoneless))\n-        } else {\n-            failure::bail!(\"field `account_id` is required to deploy to workers.dev\");\n-        }\n-    }\n-\n-    fn build_zoned(\n-        script_name: &str,\n-        route_config: &RouteConfig,\n-    ) -> Result<DeployConfig, failure::Error> {\n-        if let Some(zone_id) = &route_config.zone_id {\n-            if zone_id.is_empty() {\n-                failure::bail!(\"field `zone_id` is required to deploy to routes\");\n-            }\n-\n-            if route_config.has_conflicting_targets() {\n-                failure::bail!(\"specify either `route` or `routes`\");\n-            }\n-\n-            let mut zoned = Zoned {\n-                zone_id: zone_id.to_owned(),\n-                routes: Vec::new(),\n-            };\n-\n-            if let Some(route) = &route_config.route {\n-                zoned.routes.push(Route {\n-                    id: None,\n-                    script: Some(script_name.to_string()),\n-                    pattern: route.to_string(),\n-                });\n-            } else if let Some(routes) = &route_config.routes {\n-                for route in routes {\n-                    if route.is_empty() {\n-                        StdOut::warn(\"your configuration file contains an empty route\")\n-                    } else {\n-                        zoned.routes.push(Route {\n-                            id: None,\n-                            script: Some(script_name.to_string()),\n-                            pattern: route.to_string(),\n-                        })\n-                    }\n-                }\n-            }\n-\n-            if zoned.routes.is_empty() {\n-                failure::bail!(\"No routes specified\");\n-            }\n-\n-            Ok(DeployConfig::Zoned(zoned))\n-        } else {\n-            failure::bail!(\"field `zone_id` is required to deploy to routes\");\n-        }\n-    }\n-}\n-\n-#[derive(Clone, Debug, PartialEq)]\n-pub struct Zoneless {\n-    pub account_id: String,\n-    pub script_name: String,\n-}\n-\n-#[derive(Clone, Debug, PartialEq)]\n-pub struct Zoned {\n-    pub zone_id: String,\n-    pub routes: Vec<Route>,\n-}\n-\n-#[derive(Debug)]\n-pub struct RouteConfig {\n-    pub workers_dev: Option<bool>,\n-    pub route: Option<String>,\n-    pub routes: Option<Vec<String>>,\n-    pub zone_id: Option<String>,\n-    pub account_id: Option<String>,\n-}\n-\n-impl RouteConfig {\n-    fn is_valid(&self) -> bool {\n-        self.workers_dev_false_by_itself() || self.has_conflicting_targets()\n-    }\n-\n-    fn has_conflicting_targets(&self) -> bool {\n-        if self.is_zoneless() {\n-            self.has_routes_defined()\n-        } else if let Some(routes) = &self.routes {\n-            !routes.is_empty() && self.route.is_some()\n-        } else {\n-            false\n-        }\n-    }\n-\n-    fn has_routes_defined(&self) -> bool {\n-        if self.route.is_some() {\n-            true\n-        } else if let Some(routes) = &self.routes {\n-            !routes.is_empty()\n-        } else {\n-            false\n-        }\n-    }\n-\n-    fn is_zoneless(&self) -> bool {\n-        self.workers_dev.unwrap_or_default()\n-    }\n-\n-    fn is_zoned(&self) -> bool {\n-        self.has_routes_defined() || self.zone_id.is_some()\n-    }\n-\n-    fn workers_dev_false_by_itself(&self) -> bool {\n-        if let Some(workers_dev) = self.workers_dev {\n-            !workers_dev && !self.has_routes_defined()\n-        } else {\n-            false\n-        }\n-    }\n-}\ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -3,9 +3,10 @@ use std::collections::HashMap;\n use serde::{Deserialize, Serialize};\n use serde_with::rust::string_empty_as_none;\n \n-use crate::settings::toml::deploy_config::RouteConfig;\n use crate::settings::toml::kv_namespace::ConfigKvNamespace;\n+use crate::settings::toml::route::RouteConfig;\n use crate::settings::toml::site::Site;\n+use crate::settings::toml::triggers::Triggers;\n \n #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]\n pub struct Environment {\ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -24,6 +25,7 @@ pub struct Environment {\n     #[serde(alias = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<ConfigKvNamespace>>,\n     pub vars: Option<HashMap<String, String>>,\n+    pub triggers: Option<Triggers>,\n }\n \n impl Environment {\ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -32,17 +34,8 @@ impl Environment {\n         top_level_account_id: String,\n         top_level_zone_id: Option<String>,\n     ) -> Option<RouteConfig> {\n-        let account_id = if self.account_id.is_none() {\n-            Some(top_level_account_id)\n-        } else {\n-            self.account_id.clone()\n-        };\n-\n-        let zone_id = if self.zone_id.is_none() {\n-            top_level_zone_id\n-        } else {\n-            self.zone_id.clone()\n-        };\n+        let account_id = self.account_id.clone().or(Some(top_level_account_id));\n+        let zone_id = self.zone_id.clone().or(top_level_zone_id);\n \n         if self.workers_dev.is_none() && self.route.is_none() && self.routes.is_none() {\n             None\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -10,15 +10,21 @@ use serde::{Deserialize, Serialize};\n use serde_with::rust::string_empty_as_none;\n \n use crate::commands::{validate_worker_name, DEFAULT_CONFIG_PATH};\n-use crate::settings::toml::deploy_config::{DeployConfig, RouteConfig};\n+use crate::deploy::{self, DeployTarget, DeploymentSet};\n use crate::settings::toml::dev::Dev;\n use crate::settings::toml::environment::Environment;\n use crate::settings::toml::kv_namespace::{ConfigKvNamespace, KvNamespace};\n+use crate::settings::toml::route::RouteConfig;\n use crate::settings::toml::site::Site;\n use crate::settings::toml::target_type::TargetType;\n+use crate::settings::toml::triggers::Triggers;\n use crate::settings::toml::Target;\n-use crate::terminal::message::{Message, StdOut};\n-use crate::terminal::{emoji, styles};\n+use crate::terminal::{\n+    emoji,\n+    message::{Message, StdOut},\n+    styles,\n+};\n+\n #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]\n pub struct Manifest {\n     #[serde(default)]\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -43,6 +49,7 @@ pub struct Manifest {\n     pub kv_namespaces: Option<Vec<ConfigKvNamespace>>,\n     pub env: Option<HashMap<String, Environment>>,\n     pub vars: Option<HashMap<String, String>>,\n+    pub triggers: Option<Triggers>,\n }\n \n impl Manifest {\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -156,29 +163,88 @@ impl Manifest {\n         }\n     }\n \n-    pub fn deploy_config(&self, env: Option<&str>) -> Result<DeployConfig, failure::Error> {\n+    pub fn get_deployments(&self, env: Option<&str>) -> Result<DeploymentSet, failure::Error> {\n         let script = self.worker_name(env);\n         validate_worker_name(&script)?;\n \n-        if let Some(environment) = self.get_environment(env)? {\n-            // if there is an environment level deploy target, try to return that\n-            if let Some(env_route_config) =\n-                environment.route_config(self.account_id.clone(), self.zone_id.clone())\n+        let mut deployments = DeploymentSet::new();\n+\n+        let env = self.get_environment(env)?;\n+\n+        let mut add_routed_deployments =\n+            |route_config: &RouteConfig| -> Result<(), failure::Error> {\n+                if route_config.is_zoned() {\n+                    let zoned = deploy::ZonedTarget::build(&script, route_config)?;\n+                    // This checks all of the configured routes for the wildcard ending and warns\n+                    // the user that their site may not work as expected without it.\n+                    if self.site.is_some() {\n+                        let no_star_routes = zoned\n+                            .routes\n+                            .iter()\n+                            .filter(|r| !r.pattern.ends_with('*'))\n+                            .map(|r| r.pattern.as_str())\n+                            .collect::<Vec<_>>();\n+                        if !no_star_routes.is_empty() {\n+                            StdOut::warn(&format!(\n+                            \"The following routes in your configuration file should have a trailing * to apply the Worker on every path, otherwise your site will not behave as expected.\\n{}\",\n+                            no_star_routes.join(\"\\n\"))\n+                        );\n+                        }\n+                    }\n+\n+                    deployments.push(DeployTarget::Zoned(zoned));\n+                }\n+\n+                if route_config.is_zoneless() {\n+                    let zoneless = deploy::ZonelessTarget::build(&script, route_config)?;\n+                    deployments.push(DeployTarget::Zoneless(zoneless));\n+                }\n+\n+                Ok(())\n+            };\n+\n+        if let Some(env) = env {\n+            if let Some(env_route_cfg) =\n+                env.route_config(self.account_id.clone(), self.zone_id.clone())\n             {\n-                DeployConfig::build(&script, &env_route_config)\n+                add_routed_deployments(&env_route_cfg)\n             } else {\n-                // If the top level config is Zoned, the user needs to specify new route config\n-                let top_level_config = DeployConfig::build(&script, &self.route_config())?;\n-                match top_level_config {\n-                    DeployConfig::Zoned(_) => failure::bail!(\n-                        \"you must specify route(s) per environment for zoned deploys.\"\n-                    ),\n-                    DeployConfig::Zoneless(_) => Ok(top_level_config),\n+                let config = self.route_config();\n+                if config.is_zoned() {\n+                    failure::bail!(\"you must specify route(s) per environment for zoned deploys.\");\n+                } else {\n+                    add_routed_deployments(&config)\n                 }\n             }\n         } else {\n-            DeployConfig::build(&script, &self.route_config())\n+            add_routed_deployments(&self.route_config())\n+        }?;\n+\n+        let crons = match env {\n+            Some(e) => {\n+                let account_id = e.account_id.as_ref().unwrap_or(&self.account_id);\n+                e.triggers\n+                    .as_ref()\n+                    .or_else(|| self.triggers.as_ref())\n+                    .map(|t| (t.crons.as_slice(), account_id))\n+            }\n+            None => self\n+                .triggers\n+                .as_ref()\n+                .map(|t| (t.crons.as_slice(), &self.account_id)),\n+        };\n+\n+        if let Some((crons, account)) = crons {\n+            let scheduled =\n+                deploy::ScheduleTarget::build(account.clone(), script.clone(), crons.to_vec())?;\n+            deployments.push(DeployTarget::Schedule(scheduled));\n+        }\n+\n+        if deployments.is_empty() {\n+            failure::bail!(\"No deployments specified!\")\n         }\n+\n+        Ok(deployments)\n     }\n \n     pub fn get_account_id(&self, environment_name: Option<&str>) -> Result<String, failure::Error> {\ndiff --git a/src/settings/toml/mod.rs b/src/settings/toml/mod.rs\n--- a/src/settings/toml/mod.rs\n+++ b/src/settings/toml/mod.rs\n@@ -1,4 +1,3 @@\n-mod deploy_config;\n mod dev;\n mod environment;\n mod kv_namespace;\ndiff --git a/src/settings/toml/mod.rs b/src/settings/toml/mod.rs\n--- a/src/settings/toml/mod.rs\n+++ b/src/settings/toml/mod.rs\n@@ -7,12 +6,12 @@ mod route;\n mod site;\n mod target;\n mod target_type;\n+mod triggers;\n \n-pub use deploy_config::{DeployConfig, Zoned, Zoneless};\n pub use environment::Environment;\n pub use kv_namespace::{ConfigKvNamespace, KvNamespace};\n pub use manifest::Manifest;\n-pub use route::Route;\n+pub use route::{Route, RouteConfig};\n pub use site::Site;\n pub use target::Target;\n pub use target_type::TargetType;\ndiff --git a/src/settings/toml/route.rs b/src/settings/toml/route.rs\n--- a/src/settings/toml/route.rs\n+++ b/src/settings/toml/route.rs\n@@ -18,3 +18,44 @@ impl From<&WorkersRoute> for Route {\n         }\n     }\n }\n+\n+#[derive(Debug)]\n+pub struct RouteConfig {\n+    pub workers_dev: Option<bool>,\n+    pub route: Option<String>,\n+    pub routes: Option<Vec<String>>,\n+    pub zone_id: Option<String>,\n+    pub account_id: Option<String>,\n+}\n+\n+impl RouteConfig {\n+    pub fn has_routes_defined(&self) -> bool {\n+        if self.route.is_some() {\n+            true\n+        } else if let Some(routes) = &self.routes {\n+            !routes.is_empty()\n+        } else {\n+            false\n+        }\n+    }\n+\n+    pub fn routes(&self) -> impl Iterator<Item = &String> {\n+        self.route.iter().chain(self.routes.iter().flatten())\n+    }\n+\n+    pub fn is_zoneless(&self) -> bool {\n+        self.workers_dev.unwrap_or_default()\n+    }\n+\n+    pub fn is_zoned(&self) -> bool {\n+        self.has_routes_defined() && self.zone_id.is_some()\n+    }\n+\n+    pub fn workers_dev_false_by_itself(&self) -> bool {\n+        if let Some(workers_dev) = self.workers_dev {\n+            !workers_dev && !self.has_routes_defined()\n+        } else {\n+            false\n+        }\n+    }\n+}\ndiff --git /dev/null b/src/settings/toml/triggers.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/toml/triggers.rs\n@@ -0,0 +1,6 @@\n+use serde::{Deserialize, Serialize};\n+\n+#[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]\n+pub struct Triggers {\n+    pub crons: Vec<String>,\n+}\ndiff --git a/src/terminal/message.rs b/src/terminal/message.rs\n--- a/src/terminal/message.rs\n+++ b/src/terminal/message.rs\n@@ -3,6 +3,7 @@ use super::emoji;\n use billboard::{Billboard, BorderColor, BorderStyle};\n use serde::Serialize;\n \n+#[derive(Clone, Copy, PartialEq, Debug)]\n pub enum Output {\n     Json,\n     PlainText,\n",
        "test_patch": "diff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -1,10 +1,10 @@\n use std::str::FromStr;\n \n+use crate::deploy::{DeployTarget, ScheduleTarget, ZonedTarget, ZonelessTarget};\n use crate::settings::toml::route::Route;\n use crate::settings::toml::Manifest;\n-use crate::settings::toml::{DeployConfig, Zoned, Zoneless};\n \n-use crate::fixtures::{EnvConfig, WranglerToml, TEST_ENV_NAME};\n+use crate::fixtures::{EnvConfig, Triggers, WranglerToml, TEST_ENV_NAME};\n \n // Test consts\n const ZONE_ID: &str = \"samplezoneid\";\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -13,18 +13,18 @@ const ACCOUNT_ID: &str = \"fakeaccountid\";\n \n // TOP LEVEL TESTS\n #[test]\n-fn it_errors_on_empty_deploy_config() {\n+fn it_errors_on_empty_get_deployments() {\n     let test_toml = WranglerToml::webpack(\"empty\");\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n #[test]\n-fn it_errors_on_conflicting_deploy_configs() {\n+fn it_can_get_multiple_deployments() {\n     let script_name = \"workers_dev_true_and_zoned_config\";\n     let workers_dev = true;\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -34,13 +34,28 @@ fn it_errors_on_conflicting_deploy_configs() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n+    let expected_deployments = vec![\n+        DeployTarget::Zoned(ZonedTarget {\n+            routes: vec![Route {\n+                script: Some(script_name.to_owned()),\n+                pattern: PATTERN.to_owned(),\n+                id: None,\n+            }],\n+            zone_id: ZONE_ID.to_owned(),\n+        }),\n+        DeployTarget::Zoneless(ZonelessTarget {\n+            account_id: ACCOUNT_ID.to_owned(),\n+            script_name: script_name.to_owned(),\n+        }),\n+    ];\n     let environment = None;\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\n-fn it_can_get_a_top_level_zoneless_deploy_config() {\n+fn it_can_get_a_top_level_zoneless_get_deployments() {\n     let script_name = \"zoneless\";\n     let workers_dev = true;\n     let test_toml = WranglerToml::zoneless(script_name, ACCOUNT_ID, workers_dev);\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -48,17 +63,17 @@ fn it_can_get_a_top_level_zoneless_deploy_config() {\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n     let environment = None;\n-    let actual_deploy_config = manifest.deploy_config(environment).unwrap();\n-    let expected_deploy_config = DeployConfig::Zoneless(Zoneless {\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n+    let expected_deployments = vec![DeployTarget::Zoneless(ZonelessTarget {\n         script_name: script_name.to_string(),\n         account_id: ACCOUNT_ID.to_string(),\n-    });\n+    })];\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\n-fn it_errors_on_deploy_config_missing_name() {\n+fn it_errors_on_get_deployments_missing_name() {\n     let script_name = \"\";\n     let workers_dev = true;\n     let test_toml = WranglerToml::zoneless(script_name, ACCOUNT_ID, workers_dev);\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -67,11 +82,11 @@ fn it_errors_on_deploy_config_missing_name() {\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n #[test]\n-fn it_errors_on_deploy_config_missing_account_id() {\n+fn it_errors_on_get_deployments_missing_account_id() {\n     let script_name = \"zoneless_no_account_id\";\n     let workers_dev = true;\n     let mut test_toml = WranglerToml::zoneless(script_name, ACCOUNT_ID, workers_dev);\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -81,11 +96,11 @@ fn it_errors_on_deploy_config_missing_account_id() {\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n #[test]\n-fn it_errors_on_zoneless_deploy_config_workers_dev_false() {\n+fn it_errors_on_zoneless_get_deployments_workers_dev_false() {\n     let script_name = \"zoneless_false\";\n     let workers_dev = false;\n     let test_toml = WranglerToml::zoneless(script_name, ACCOUNT_ID, workers_dev);\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -94,11 +109,11 @@ fn it_errors_on_zoneless_deploy_config_workers_dev_false() {\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n #[test]\n-fn it_can_get_a_single_route_zoned_deploy_config() {\n+fn it_can_get_a_single_route_zoned_get_deployments() {\n     let script_name = \"single_route_zoned\";\n \n     let test_toml = WranglerToml::zoned_single_route(script_name, ZONE_ID, PATTERN);\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -106,22 +121,22 @@ fn it_can_get_a_single_route_zoned_deploy_config() {\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n     let environment = None;\n-    let actual_deploy_config = manifest.deploy_config(environment).unwrap();\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n     let expected_routes = vec![Route {\n         script: Some(script_name.to_string()),\n         pattern: PATTERN.to_string(),\n         id: None,\n     }];\n-    let expected_deploy_config = DeployConfig::Zoned(Zoned {\n+    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n         zone_id: ZONE_ID.to_string(),\n         routes: expected_routes,\n-    });\n+    })];\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\n-fn it_can_get_a_single_route_zoned_deploy_config_workers_dev_false() {\n+fn it_can_get_a_single_route_zoned_get_deployments_workers_dev_false() {\n     let script_name = \"single_route_zoned_workers_dev_false\";\n \n     let mut test_toml = WranglerToml::zoned_single_route(script_name, ZONE_ID, PATTERN);\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -129,23 +144,119 @@ fn it_can_get_a_single_route_zoned_deploy_config_workers_dev_false() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let environment = None;\n-    let actual_deploy_config = manifest.deploy_config(environment).unwrap();\n     let expected_routes = vec![Route {\n         script: Some(script_name.to_string()),\n         pattern: PATTERN.to_string(),\n         id: None,\n     }];\n-    let expected_deploy_config = DeployConfig::Zoned(Zoned {\n+    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n         zone_id: ZONE_ID.to_string(),\n         routes: expected_routes,\n+    })];\n+    let environment = None;\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n+\n+    assert_eq!(actual_deployments, expected_deployments);\n+}\n+\n+#[test]\n+fn it_can_get_a_scheduled_no_workers_dev_no_zoned() {\n+    let script_name = \"single_schedule\";\n+\n+    let crons = vec![\"0 * * * *\".to_owned()];\n+\n+    let mut test_toml = WranglerToml::webpack(script_name);\n+    test_toml.account_id = Some(ACCOUNT_ID);\n+    test_toml.triggers = Some(Triggers {\n+        crons: Some(crons.clone()),\n     });\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    let toml_string = toml::to_string(&test_toml).unwrap();\n+    let manifest = Manifest::from_str(&toml_string).unwrap();\n+\n+    let expected_deployments = vec![DeployTarget::Schedule(ScheduleTarget {\n+        account_id: ACCOUNT_ID.to_owned(),\n+        script_name: script_name.to_owned(),\n+        crons: crons,\n+    })];\n+    let environment = None;\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n+\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\n-fn it_errors_on_single_route_deploy_config_empty_zone_id() {\n+fn it_can_get_a_scheduled_in_env_no_workers_dev_no_zoned() {\n+    let script_name = \"single_schedule\";\n+\n+    let env_crons = vec![\"0 * * * *\".to_owned()];\n+\n+    let env_config = EnvConfig {\n+        triggers: Some(Triggers {\n+            crons: Some(env_crons.clone()),\n+        }),\n+        ..EnvConfig::default()\n+    };\n+    let mut test_toml = WranglerToml {\n+        account_id: Some(ACCOUNT_ID),\n+        triggers: Some(Triggers {\n+            crons: Some(vec![\"0 * * * *\".to_owned()]),\n+        }),\n+        ..WranglerToml::webpack(script_name)\n+    };\n+    test_toml\n+        .env\n+        .get_or_insert_with(Default::default)\n+        .insert(\"b\", env_config);\n+\n+    let toml_string = toml::to_string(&test_toml).unwrap();\n+    let manifest = Manifest::from_str(&toml_string).unwrap();\n+\n+    let environment = Some(\"b\");\n+    let worker_name = manifest.worker_name(Some(\"b\"));\n+    let expected_deployments = vec![DeployTarget::Schedule(ScheduleTarget {\n+        account_id: ACCOUNT_ID.to_owned(),\n+        script_name: worker_name,\n+        crons: env_crons,\n+    })];\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n+\n+    assert_eq!(actual_deployments, expected_deployments);\n+}\n+#[test]\n+fn it_cat_get_inherited_env_schedules() {\n+    // with no zoned, zoneless, or schedule targets in environment, we error\n+    let script_name = \"single_schedule\";\n+\n+    let crons = vec![\"0 * * * *\".to_owned()];\n+    let env = EnvConfig::custom_script_name(\"inherited_schedule\");\n+\n+    let mut test_toml = WranglerToml::webpack(script_name);\n+    test_toml.account_id = Some(ACCOUNT_ID);\n+    test_toml.triggers = Some(Triggers {\n+        crons: Some(crons.clone()),\n+    });\n+    test_toml\n+        .env\n+        .get_or_insert_with(Default::default)\n+        .insert(\"b\", env);\n+\n+    let toml_string = toml::to_string(&test_toml).unwrap();\n+    let manifest = Manifest::from_str(&toml_string).unwrap();\n+\n+    let environment = Some(\"b\");\n+    let expected_deployments = vec![DeployTarget::Schedule(ScheduleTarget {\n+        account_id: ACCOUNT_ID.to_owned(),\n+        script_name: \"inherited_schedule\".to_owned(),\n+        crons,\n+    })];\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n+\n+    assert_eq!(actual_deployments, expected_deployments);\n+}\n+\n+#[test]\n+fn it_errors_on_single_route_get_deployments_empty_zone_id() {\n     let script_name = \"single_route_empty_zone_id\";\n     let empty_zone_id = \"\";\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -155,11 +266,11 @@ fn it_errors_on_single_route_deploy_config_empty_zone_id() {\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n #[test]\n-fn it_errors_on_single_route_deploy_config_missing_zone_id() {\n+fn it_errors_on_single_route_get_deployments_missing_zone_id() {\n     let script_name = \"single_route_empty_zone_id\";\n     let empty_zone_id = \"\";\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -170,11 +281,11 @@ fn it_errors_on_single_route_deploy_config_missing_zone_id() {\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n #[test]\n-fn it_errors_on_single_route_deploy_config_empty_route() {\n+fn it_errors_on_single_route_get_deployments_empty_route() {\n     let script_name = \"single_route_empty_route\";\n     let pattern = \"\";\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -184,11 +295,11 @@ fn it_errors_on_single_route_deploy_config_empty_route() {\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n #[test]\n-fn it_errors_on_single_route_deploy_config_missing_route() {\n+fn it_errors_on_single_route_get_deployments_missing_route() {\n     let script_name = \"single_route_missing_route\";\n \n     let mut test_toml = WranglerToml::zoned_single_route(script_name, ZONE_ID, \"\");\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -198,11 +309,11 @@ fn it_errors_on_single_route_deploy_config_missing_route() {\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n #[test]\n-fn it_can_get_a_multi_route_zoned_deploy_config() {\n+fn it_can_get_a_multi_route_zoned_get_deployments() {\n     let script_name = \"multi_route_zoned\";\n     let patterns = [PATTERN, \"blog.hostname.tld/*\"];\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -220,19 +331,19 @@ fn it_can_get_a_multi_route_zoned_deploy_config() {\n             id: None,\n         })\n         .collect();\n-    let expected_deploy_config = DeployConfig::Zoned(Zoned {\n+    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n         zone_id: ZONE_ID.to_string(),\n         routes: expected_routes,\n-    });\n+    })];\n \n     let environment = None;\n-    let actual_deploy_config = manifest.deploy_config(environment).unwrap();\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\n-fn it_can_get_a_multi_route_zoned_deploy_config_workers_dev_false() {\n+fn it_can_get_a_multi_route_zoned_get_deployments_workers_dev_false() {\n     let script_name = \"multi_route_zoned_workers_dev_false\";\n     let patterns = [PATTERN, \"blog.hostname.tld/*\"];\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -251,19 +362,51 @@ fn it_can_get_a_multi_route_zoned_deploy_config_workers_dev_false() {\n             id: None,\n         })\n         .collect();\n-    let expected_deploy_config = DeployConfig::Zoned(Zoned {\n+    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n         zone_id: ZONE_ID.to_string(),\n         routes: expected_routes,\n-    });\n+    })];\n \n     let environment = None;\n-    let actual_deploy_config = manifest.deploy_config(environment).unwrap();\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\n-fn it_errors_on_multi_route_deploy_config_empty_zone_id() {\n+fn it_can_get_multi_route_with_route() {\n+    let script_name = \"multi_route_with_route\";\n+    let patterns = [PATTERN];\n+\n+    let mut test_toml = WranglerToml::webpack(script_name);\n+    test_toml.workers_dev = Some(false);\n+    test_toml.routes = Some(patterns.to_vec());\n+    test_toml.route = Some(\"blog.hostname.tld/*\");\n+    test_toml.zone_id = Some(ZONE_ID);\n+    let toml_string = toml::to_string(&test_toml).unwrap();\n+    let manifest = Manifest::from_str(&toml_string).unwrap();\n+\n+    let expected_routes = std::iter::once(\"blog.hostname.tld/*\")\n+        .chain(patterns.iter().copied())\n+        .map(|p| Route {\n+            script: Some(script_name.to_string()),\n+            pattern: (*p).to_string(),\n+            id: None,\n+        })\n+        .collect();\n+    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n+        zone_id: ZONE_ID.to_string(),\n+        routes: expected_routes,\n+    })];\n+\n+    let environment = None;\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n+\n+    assert_eq!(actual_deployments, expected_deployments);\n+}\n+\n+#[test]\n+fn it_errors_on_multi_route_get_deployments_empty_zone_id() {\n     let script_name = \"multi_route_empty_zone_id\";\n     let patterns = [PATTERN, \"blog.hostname.tld/*\"];\n     let empty_zone_id = \"\";\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -274,11 +417,11 @@ fn it_errors_on_multi_route_deploy_config_empty_zone_id() {\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n #[test]\n-fn it_errors_on_multi_route_deploy_config_missing_zone_id() {\n+fn it_errors_on_multi_route_get_deployments_missing_zone_id() {\n     let script_name = \"multi_route_missing_zone_id\";\n     let patterns = [PATTERN, \"blog.hostname.tld/*\"];\n     let empty_zone_id = \"\";\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -291,11 +434,11 @@ fn it_errors_on_multi_route_deploy_config_missing_zone_id() {\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n #[test]\n-fn it_errors_on_multi_route_deploy_config_empty_routes_list() {\n+fn it_errors_on_multi_route_get_deployments_empty_routes_list() {\n     let script_name = \"multi_route_empty_routes_list\";\n     let patterns = [];\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -305,11 +448,11 @@ fn it_errors_on_multi_route_deploy_config_empty_routes_list() {\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n #[test]\n-fn it_errors_on_multi_route_deploy_config_empty_route() {\n+fn it_errors_on_multi_route_get_deployments_empty_route() {\n     let script_name = \"multi_route_empty_route\";\n     let patterns = [\"\"];\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -319,11 +462,11 @@ fn it_errors_on_multi_route_deploy_config_empty_route() {\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n #[test]\n-fn it_errors_on_deploy_config_route_and_routes() {\n+fn it_can_get_a_route_with_routes() {\n     let script_name = \"route_and_routes\";\n     let patterns = [\"blog.hostname.tld/*\"];\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -332,13 +475,27 @@ fn it_errors_on_deploy_config_route_and_routes() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n+    let expected_routes = std::iter::once(PATTERN)\n+        .chain(patterns.iter().copied())\n+        .map(|p| Route {\n+            script: Some(script_name.to_string()),\n+            pattern: (*p).to_string(),\n+            id: None,\n+        })\n+        .collect();\n+    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n+        routes: expected_routes,\n+        zone_id: ZONE_ID.to_owned(),\n+    })];\n+\n     let environment = None;\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\n-fn it_errors_on_deploy_config_route_and_workers_dev_true() {\n+fn it_gets_deployments_with_route_and_workers_dev_true() {\n     let script_name = \"route_and_workers_dev\";\n \n     let mut test_toml = WranglerToml::zoned_single_route(script_name, ZONE_ID, PATTERN);\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -348,11 +505,11 @@ fn it_errors_on_deploy_config_route_and_workers_dev_true() {\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n #[test]\n-fn it_errors_on_deploy_config_routes_and_workers_dev_true() {\n+fn it_gets_deployments_with_routes_and_workers_dev_true() {\n     let script_name = \"routes_and_workers_dev\";\n     let patterns = [PATTERN];\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -363,7 +520,7 @@ fn it_errors_on_deploy_config_routes_and_workers_dev_true() {\n \n     let environment = None;\n \n-    assert!(manifest.deploy_config(environment).is_err());\n+    assert!(manifest.get_deployments(environment).is_err());\n }\n \n // ENVIRONMENT TESTS\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -377,9 +534,9 @@ fn when_top_level_empty_env_empty() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -393,9 +550,9 @@ fn when_top_level_empty_env_has_zone_id() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -410,9 +567,9 @@ fn when_top_level_empty_env_workers_dev_false() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -427,13 +584,13 @@ fn when_top_level_empty_env_workers_dev_true() {\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n     let environment = Some(TEST_ENV_NAME);\n-    let actual_deploy_config = manifest.deploy_config(environment).unwrap();\n-    let expected_deploy_config = DeployConfig::Zoneless(Zoneless {\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n+    let expected_deployments = vec![DeployTarget::Zoneless(ZonelessTarget {\n         script_name: manifest.worker_name(environment),\n         account_id: account_id.to_string(),\n-    });\n+    })];\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -447,9 +604,9 @@ fn when_top_level_empty_zoned_single_route_env() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -462,9 +619,9 @@ fn when_top_level_empty_env_zoned_single_route_no_zone_id() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -477,9 +634,9 @@ fn when_top_level_empty_env_zoned_single_route_zone_id_only() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -491,7 +648,7 @@ fn when_top_level_empty_env_zoned_single_route() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME)).unwrap();\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME)).unwrap();\n \n     let expected_name = manifest.worker_name(Some(TEST_ENV_NAME));\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -500,12 +657,12 @@ fn when_top_level_empty_env_zoned_single_route() {\n         pattern: PATTERN.to_string(),\n         id: None,\n     }];\n-    let expected_deploy_config = DeployConfig::Zoned(Zoned {\n+    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n         zone_id: ZONE_ID.to_string(),\n         routes: expected_routes,\n-    });\n+    })];\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -519,9 +676,9 @@ fn when_top_level_empty_zoned_multi_route_env_routes_empty() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -535,9 +692,9 @@ fn when_top_level_empty_zoned_multi_route_env_route_empty() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -551,9 +708,9 @@ fn when_top_level_empty_zoned_multi_route_env_zone_id_missing() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -567,7 +724,7 @@ fn when_top_level_empty_zoned_multi_route_env() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME)).unwrap();\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME)).unwrap();\n \n     let expected_name = manifest.worker_name(Some(TEST_ENV_NAME));\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -580,12 +737,12 @@ fn when_top_level_empty_zoned_multi_route_env() {\n         })\n         .collect();\n \n-    let expected_deploy_config = DeployConfig::Zoned(Zoned {\n+    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n         zone_id: ZONE_ID.to_string(),\n         routes: expected_routes,\n-    });\n+    })];\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -600,13 +757,13 @@ fn when_top_level_zoneless_env_empty() {\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n     let environment = Some(TEST_ENV_NAME);\n-    let actual_deploy_config = manifest.deploy_config(environment).unwrap();\n-    let expected_deploy_config = DeployConfig::Zoneless(Zoneless {\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n+    let expected_deployments = vec![DeployTarget::Zoneless(ZonelessTarget {\n         script_name: manifest.worker_name(environment),\n         account_id: ACCOUNT_ID.to_string(),\n-    });\n+    })];\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -620,9 +777,9 @@ fn when_top_level_zoneless_env_zoneless_workers_dev_false() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -638,13 +795,13 @@ fn when_top_level_zoneless_env_zoneless_workers_dev_true() {\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n     let environment = Some(TEST_ENV_NAME);\n-    let actual_deploy_config = manifest.deploy_config(environment).unwrap();\n-    let expected_deploy_config = DeployConfig::Zoneless(Zoneless {\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n+    let expected_deployments = vec![DeployTarget::Zoneless(ZonelessTarget {\n         account_id: ACCOUNT_ID.to_string(),\n         script_name: manifest.worker_name(environment),\n-    });\n+    })];\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -661,13 +818,13 @@ fn when_top_level_zoneless_env_zoned_single_route_empty() {\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n     let environment = Some(TEST_ENV_NAME);\n-    let actual_deploy_config = manifest.deploy_config(environment).unwrap();\n-    let expected_deploy_config = DeployConfig::Zoneless(Zoneless {\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n+    let expected_deployments = vec![DeployTarget::Zoneless(ZonelessTarget {\n         account_id: ACCOUNT_ID.to_string(),\n         script_name: manifest.worker_name(environment),\n-    });\n+    })];\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -683,9 +840,9 @@ fn when_top_level_zoneless_env_zoned_single_route_zone_id_missing() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -700,7 +857,7 @@ fn when_top_level_zoneless_env_zoned_single_route() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME)).unwrap();\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME)).unwrap();\n \n     let expected_name = manifest.worker_name(Some(TEST_ENV_NAME));\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -709,12 +866,12 @@ fn when_top_level_zoneless_env_zoned_single_route() {\n         pattern: PATTERN.to_string(),\n         id: None,\n     }];\n-    let expected_deploy_config = DeployConfig::Zoned(Zoned {\n+    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n         zone_id: ZONE_ID.to_string(),\n         routes: expected_routes,\n-    });\n+    })];\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -730,9 +887,9 @@ fn when_top_level_zoneless_env_zoned_multi_route_routes_list_empty() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -748,14 +905,14 @@ fn when_top_level_zoneless_env_zoned_multi_route_route_empty() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\n fn when_top_level_zoneless_env_zoned_multi_route_route_key_present() {\n-    // when route key also present, error\n+    // when route key also present, append routes to route\n     let patterns = [PATTERN];\n     let mut env_config = EnvConfig::zoned_multi_route(ZONE_ID, patterns.to_vec());\n     env_config.route = Some(\"blog.hostname.tld/*\");\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -767,9 +924,25 @@ fn when_top_level_zoneless_env_zoned_multi_route_route_key_present() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let expected_name = manifest.worker_name(Some(TEST_ENV_NAME));\n+    let expected_routes = std::iter::once(\"blog.hostname.tld/*\")\n+        .into_iter()\n+        .chain(patterns.iter().copied())\n+        .map(|p| Route {\n+            script: Some(expected_name.clone()),\n+            pattern: p.to_owned(),\n+            id: None,\n+        })\n+        .collect();\n+\n+    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n+        routes: expected_routes,\n+        zone_id: ZONE_ID.to_owned(),\n+    })];\n \n-    assert!(actual_deploy_config.is_err());\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME)).unwrap();\n+\n+    assert_eq!(expected_deployments, actual_deployments);\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -785,9 +958,9 @@ fn when_top_level_zoneless_env_zoned_multi_route_zone_id_missing() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -803,7 +976,7 @@ fn when_top_level_zoneless_env_zoned_multi_route() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME)).unwrap();\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME)).unwrap();\n \n     let expected_name = manifest.worker_name(Some(TEST_ENV_NAME));\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -816,12 +989,12 @@ fn when_top_level_zoneless_env_zoned_multi_route() {\n         })\n         .collect();\n \n-    let expected_deploy_config = DeployConfig::Zoned(Zoned {\n+    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n         zone_id: ZONE_ID.to_string(),\n         routes: expected_routes,\n-    });\n+    })];\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -834,9 +1007,9 @@ fn when_top_level_zoned_env_empty() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -851,9 +1024,9 @@ fn when_top_level_zoned_env_zoneless_workers_dev_false() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -869,13 +1042,13 @@ fn when_top_level_zoned_env_zoneless_workers_dev_true() {\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n     let environment = Some(TEST_ENV_NAME);\n-    let actual_deploy_config = manifest.deploy_config(environment).unwrap();\n-    let expected_deploy_config = DeployConfig::Zoneless(Zoneless {\n+    let actual_deployments = manifest.get_deployments(environment).unwrap();\n+    let expected_deployments = vec![DeployTarget::Zoneless(ZonelessTarget {\n         account_id: ACCOUNT_ID.to_string(),\n         script_name: manifest.worker_name(environment),\n-    });\n+    })];\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -890,9 +1063,9 @@ fn when_top_level_zoned_env_zoned_single_route_route_empty() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME));\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME));\n \n-    assert!(actual_deploy_config.is_err());\n+    assert!(actual_deployments.is_err());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -907,7 +1080,7 @@ fn when_top_level_zoned_env_zoned_single_route_zone_id_missing() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME)).unwrap();\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME)).unwrap();\n \n     let expected_name = manifest.worker_name(Some(TEST_ENV_NAME));\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -916,12 +1089,12 @@ fn when_top_level_zoned_env_zoned_single_route_zone_id_missing() {\n         pattern: env_pattern.to_string(),\n         id: None,\n     }];\n-    let expected_deploy_config = DeployConfig::Zoned(Zoned {\n+    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n         zone_id: ZONE_ID.to_string(),\n         routes: expected_routes,\n-    });\n+    })];\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -937,7 +1110,7 @@ fn when_top_level_zoned_env_zoned_single_route() {\n     let toml_string = toml::to_string(&test_toml).unwrap();\n     let manifest = Manifest::from_str(&toml_string).unwrap();\n \n-    let actual_deploy_config = manifest.deploy_config(Some(TEST_ENV_NAME)).unwrap();\n+    let actual_deployments = manifest.get_deployments(Some(TEST_ENV_NAME)).unwrap();\n \n     let expected_name = manifest.worker_name(Some(TEST_ENV_NAME));\n \ndiff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deployments.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deployments.rs\n@@ -946,10 +1119,10 @@ fn when_top_level_zoned_env_zoned_single_route() {\n         pattern: PATTERN.to_string(),\n         id: None,\n     }];\n-    let expected_deploy_config = DeployConfig::Zoned(Zoned {\n+    let expected_deployments = vec![DeployTarget::Zoned(ZonedTarget {\n         zone_id: env_zone_id.to_string(),\n         routes: expected_routes,\n-    });\n+    })];\n \n-    assert_eq!(actual_deploy_config, expected_deploy_config);\n+    assert_eq!(actual_deployments, expected_deployments);\n }\ndiff --git a/src/settings/toml/tests/mod.rs b/src/settings/toml/tests/mod.rs\n--- a/src/settings/toml/tests/mod.rs\n+++ b/src/settings/toml/tests/mod.rs\n@@ -1,4 +1,4 @@\n-mod deploy_config;\n+mod deployments;\n \n use super::*;\n \n",
        "problem_statement": "Mini RFC: Cron Triggers\nCron triggers are out, but there isn't a way to configure them from wrangler. To support cron triggers, I propose we add a new `triggers` table with a `crons` field as an array of strings.\r\n\r\n### Example\r\n\r\n```toml\r\nname = \"scheduled\"\r\ntype = \"javascript\"\r\naccount_id = \"...\"\r\n\r\n[triggers]\r\ncrons = [\"* * * * *\"]\r\n```\r\n\r\n```toml\r\nname = \"weekly\"\r\ntype = \"javascript\"\r\naccount_id = \"...\"\r\n\r\n[triggers]\r\ncrons = [\"0 0 * JAN-JUN FRI\", \"0 0 * JUL-DEC SAT\"]\r\n```\n",
        "hints_text": "cc: @ashleymichal \nSince webpack doesn't allow emitting JavaScript modules syntax yet we should probably restrict to type javascript only\n> Since webpack doesn't allow emitting JavaScript modules syntax yet we should probably restrict to type javascript only\r\n\r\nWe still support the original `addEventListener` form so this works without module support.\nMy scheduled worker doesn't need `workers_dev` but also doesn't need a `route`/`routes` because it only handles `'scheduled'` events. I currently have to leave `workers_dev = true`, otherwise I'll get \"Error: No deploy target specified\" when trying to publish my worker.\r\n\r\nThus: `triggers` should be considered a deploy target as well \ud83e\udd13 \nYeah, part of this work will be making multiple target deployments possible instead of exclusively zoned or zoneless.\nCurrently the dashboard indicates\r\n\r\n> If this Worker is managed by Wrangler, add Cron Triggers via CLI commands or to your wrangler.toml file instead.\r\n\r\n![image](https://user-images.githubusercontent.com/3864879/95074573-10a3b480-070f-11eb-91b4-f86de8d4ca8f.png)\r\n\r\nHowever if I understand this issue correctly, this is not yet supported by `wrangler.toml`.\r\n\r\nDo you have an estimate when this will be possible? (and maybe change the dashboard hint in the meantime...)\n@oliverpool I'm working full time on it, so it should be a PR sometime this week. You're also right that the dash is incorrect and I've submitted changes to remove that.",
        "created_at": "2020-10-10T00:15:16Z",
        "version": "1.11"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1566,
        "instance_id": "cloudflare__wrangler-legacy-1566",
        "issue_numbers": [
            "980"
        ],
        "base_commit": "69298039c45f5e44b7b3c05d09f24676d068f113",
        "patch": "diff --git a/src/sites/mod.rs b/src/sites/mod.rs\n--- a/src/sites/mod.rs\n+++ b/src/sites/mod.rs\n@@ -68,23 +68,43 @@ pub fn add_namespace(\n pub fn directory_keys_values(\n     target: &Target,\n     directory: &Path,\n-) -> Result<(Vec<KeyValuePair>, AssetManifest), failure::Error> {\n+) -> Result<(Vec<KeyValuePair>, AssetManifest, Vec<String>), failure::Error> {\n     match &fs::metadata(directory) {\n         Ok(file_type) if file_type.is_dir() => {\n             let mut upload_vec: Vec<KeyValuePair> = Vec::new();\n             let mut asset_manifest = AssetManifest::new();\n-\n+            let mut file_list: Vec<String> = Vec::new();\n             let dir_walker = get_dir_iterator(target, directory)?;\n             let spinner_style =\n                 ProgressStyle::default_spinner().template(\"{spinner}   Preparing {msg}...\");\n             let spinner = ProgressBar::new_spinner().with_style(spinner_style);\n+            let regexset: regex::RegexSet;\n+            if cfg!(windows) {\n+                regexset = regex::RegexSet::new(&[\n+                    r\"^.*(\\\\.(.)*)+(\\\\.*)*$\",    // Hidden files\n+                    r\"^.*\\\\.well-known(\\\\.*)*$\", // Well-known\n+                ])?;\n+            } else {\n+                regexset = regex::RegexSet::new(&[\n+                    r\"^.*(/\\.(.)*)+(/.*)*$\",   // Hidden files\n+                    r\"^.*\\.well-known(/.*)*$\", // Well-known\n+                ])?;\n+            }\n+\n             for entry in dir_walker {\n                 spinner.tick();\n                 let entry = entry.unwrap();\n                 let path = entry.path();\n                 if path.is_file() {\n                     spinner.set_message(&format!(\"{}\", path.display()));\n-\n+                    let str_path = path.to_str().unwrap();\n+\n+                    let matches = regexset.matches(str_path);\n+                    //Catch hidden files which are NOT .well-known and don't upload\n+                    if matches.matched(0) && !matches.matched(1) {\n+                        continue;\n+                    }\n+                    file_list.push(path.to_str().unwrap().to_string());\n                     validate_file_size(&path)?;\n \n                     let value = std::fs::read(path)?;\ndiff --git a/src/sites/mod.rs b/src/sites/mod.rs\n--- a/src/sites/mod.rs\n+++ b/src/sites/mod.rs\n@@ -108,7 +128,7 @@ pub fn directory_keys_values(\n                     asset_manifest.insert(url_safe_path, key);\n                 }\n             }\n-            Ok((upload_vec, asset_manifest))\n+            Ok((upload_vec, asset_manifest, file_list))\n         }\n         Ok(_file_type) => {\n             // any other file types (files, symlinks)\ndiff --git a/src/sites/mod.rs b/src/sites/mod.rs\n--- a/src/sites/mod.rs\n+++ b/src/sites/mod.rs\n@@ -165,6 +185,7 @@ fn get_dir_iterator(target: &Target, directory: &Path) -> Result<Walk, failure::\n     let ignore = build_ignore(target, directory)?;\n     Ok(WalkBuilder::new(directory)\n         .git_ignore(false)\n+        .hidden(false)\n         .overrides(ignore)\n         .build())\n }\ndiff --git a/src/sites/sync.rs b/src/sites/sync.rs\n--- a/src/sites/sync.rs\n+++ b/src/sites/sync.rs\n@@ -38,7 +38,7 @@ pub fn sync(\n         }\n     }\n \n-    let (pairs, asset_manifest): (Vec<KeyValuePair>, AssetManifest) =\n+    let (pairs, asset_manifest, _): (Vec<KeyValuePair>, AssetManifest, _) =\n         directory_keys_values(target, path)?;\n \n     let to_upload = filter_files(pairs.clone(), &remote_keys);\n",
        "test_patch": "diff --git a/src/sites/mod.rs b/src/sites/mod.rs\n--- a/src/sites/mod.rs\n+++ b/src/sites/mod.rs\n@@ -332,7 +353,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn it_can_ignore_hidden() {\n+    fn it_can_ignore_hidden_except_wellknown() {\n         let mut site = Site::default();\n         site.bucket = PathBuf::from(\"fake\");\n         let target = make_target(site);\ndiff --git a/src/sites/mod.rs b/src/sites/mod.rs\n--- a/src/sites/mod.rs\n+++ b/src/sites/mod.rs\n@@ -344,16 +365,21 @@ mod tests {\n         }\n \n         fs::create_dir(test_dir).unwrap();\n-        let test_pathname = format!(\"{}/.ignore_me.txt\", test_dir);\n-        let test_path = PathBuf::from(&test_pathname);\n-        fs::File::create(&test_path).unwrap();\n-\n-        let files: Vec<_> = get_dir_iterator(&target, Path::new(test_dir))\n-            .unwrap()\n-            .map(|entry| entry.unwrap().path().to_owned())\n-            .collect();\n-\n-        assert!(!files.contains(&test_path));\n+        fs::create_dir(format!(\"{}/.well-known\", test_dir)).unwrap();\n+        fs::File::create(&PathBuf::from(&format!(\"{}/.ignore_me.txt\", test_dir))).unwrap();\n+        fs::File::create(&PathBuf::from(&format!(\n+            \"{}/.well-known/dontignoreme.txt\",\n+            test_dir\n+        )))\n+        .unwrap();\n+        let (_, _, file_list) = directory_keys_values(&target, Path::new(test_dir)).unwrap();\n+        if cfg!(windows) {\n+            assert!(!file_list.contains(&format!(\"{}\\\\.ignore_me.txt\", test_dir)));\n+            assert!(file_list.contains(&format!(\"{}\\\\.well-known\\\\dontignoreme.txt\", test_dir)));\n+        } else {\n+            assert!(!file_list.contains(&format!(\"{}/.ignore_me.txt\", test_dir)));\n+            assert!(file_list.contains(&format!(\"{}/.well-known/dontignoreme.txt\", test_dir)));\n+        }\n \n         fs::remove_dir_all(test_dir).unwrap();\n     }\n",
        "problem_statement": "Always upload `.well-known` dotfiles\nWrangler doesn't appear to publish hidden files. In particular, I'm attempting to publish a Hugo site with public/.well-known/* (I.e. .well-known/keybase.txt, .well-known/matrix/server, etc.) These files are definitely in public/, but don't appear in the key list for the created namespace.\n",
        "hints_text": "Figured out that `include = [\"*\"]` in wrangler.toml gets me a bit further with this. But while /.well-known/keybase.txt is served up fine, /.well-known/matrix/client and /.well-known/matrix/server aren't. I see the following in `kv:list`:\r\n\r\n```\r\n  {\r\n    \"name\": \".well-known/keybase.8c602ecfc951c47ee9ad9845116e2082d5999a988f145dde543a7a1d1e75ab23.txt\"\r\n  }\r\n  {\r\n    \"name\": \".well-known/matrix/server.f9a5bcb8e11c9fc83a11d31e40daf3083d228ed0396d3abcbd45e8c4ea5ebfac\"\r\n  },\r\n  {\r\n    \"name\": \".well-known/matrix/client.c8ca63cb67a167114e46fc4b5ce38c70b751572b83038dd1ea79cf5bc1c30a6a\"\r\n  },\r\n```\r\n\r\nSo they seem to be there, but I can't get them via Curl as I can /.well-known/keybase.txt.\r\n\r\nWhat are the hash-looking things after the file's base and before the extension? Wondering if something is confused by the lack of extension on my /.well-known/matrix/* files.\r\n\r\nThis is kind of unintuitive. Every other platform I've worked with happily assumes that anything in public/ is meant for serving. I may still have some header massaging to do to ensure that, say, /.well-known/matrix/server gets the correct content-type, but it shouldn't be this hard to just ship my directory content and count on it arriving intact.\r\n\r\nThanks.\nThanks for the feedback. We don't upload hidden files by default because if there is any sensitive info, it will be served globally on our network.\r\n\r\n> What are the hash-looking things after the file's base and before the extension? \r\n\r\nHashes of the content contained in the file to ensure unique content is cached on Cloudflare properly. It's pretty fascinating how we implemented this, read more here: https://blog.cloudflare.com/extending-the-workers-platform/\r\n\r\n> Wondering if something is confused by the lack of extension on my /.well-known/matrix/* files.\r\n\r\nA mime library is used to determine the content type to serve from the extension. Would you mind sharing the actual results of the curl with the `-v` flag? \nThanks. It's a 404. The URLs:\n\n\nhttps://lightsoutgames.nolan.workers.dev/.well-known/keybase.txt works\n\nhttps://lightsoutgames.nolan.workers.dev/.well-known/matrix/server doesn't\n\n\nBoth files appear in my public/ directory.\n\n\nMy wrangler.toml site config:\n\n\n```\n\n[site]\nbucket = \"./public\"\ninclude = [\n \u00a0 \"*\",\n \u00a0 \".well-known/matrix/*\",\n]\n\n```\n\n\nNot sure if I need the additional .well-known path, or if it needs to be \nrelative to the bucket. I think I tried both.\n\n\nThanks.\n\n\nA custom 404 is caching:\r\n\r\n```\r\ncurl -v https://lightsoutgames.nolan.workers.dev/.well-known/matrix/server  2>&1 | egrep -i \"404|cache\"\r\n< HTTP/2 404\r\n< cache-control: max-age=8640000\r\n< cf-cache-status: HIT\r\n```\r\nDid you adjust the cache settings on `getAssetFromKV` ? Or adjust any other internals of `workers-site/index.js`? Can you try purging your Cloudflare cache? \nNo changes to index.js. I do eventually need to tweak the content-types \nof files in .well-known, but I thought I'd get them serving first.\n\nI ran `rangler kv:namespace delete` on both existing namespace IDs \n(preview and deployed site) and verified that `wrangler kv:namespace \nlist` is empty. Same result.\n\n\nThanks for the help so far.\n\n\n\nSorry for the back and forth, we actually don't serve files without extensions. After speaking with the team, we agree the kv asset handler should though, so we are moving this issue to that repo. \r\n\r\nIn the meantime, you can work around this for your project by passing in a customer modifier to `getAssetFromKV`. Instead of using the default `mapRequestToAsset` which maps requests w/o extensions to an `index.html`, you'd want to have the request just be the root. \r\n\r\nCode would look something like \r\n\r\n```\r\nconst mapRequestToAsset = (request: Request) => {\r\n  return request //  to NOT append index.html to files with no extensions\r\n  } \r\n```\r\nSee more docs on this at https://github.com/cloudflare/kv-asset-handler#maprequesttoasset\nThanks. Where can I find the newly-opened issue? Poked around \nhttps://github.com/cloudflare/kv-asset-handler/issues but nothing looked \nimmediately promising.\n\n@ndarilek I'm either going to file a new one today or transfer this one there. Need to decide if there is also work we want to do in Wrangler to include dotfiles.\nThanks! I'd like to subscribe, so if it's a new issue, please link it here.\n\n@ndarilek see https://github.com/cloudflare/workers-sdk/issues/4989\nFollowing up on the original issue, which is allowing `.well-known` to be uploaded by default:\r\nGiven that the `include` field is a whitelist that, if specified, overrides ALL upload ignore conditions and only permits the upload of whatever matches whitelist entries, we're stuck with instructing users to specify `include = [\"*\"]` or `include = [\".well-known\", <all other directories specified in bucket>]`. These solutions are workable but honestly not sastisfactory; since `.well-known` is an IETF standard, we should support it by default.\r\n\r\nThe problem with supporting it by default in our preexisting code is that the Ignore crate adopts the `include` rules that are consistent with cargo; that is, if any whitelist exists, the only files that are uploaded MUST match whatever patterns are in the whitelist. This leaves us in the same situation as before--asking users to specify every directory that gets uploaded.\r\n\r\nThis leaves us with other options to consider:\r\n\r\n1. Introduce a `hidden` bool flag to `[sites]` in wrangler.toml that toggles the upload of hidden files. Potentially more ergonomic than specifying `include = [\"*\"]`, plus this won't mess with users' preexisting `include` and `exclude` fields (conflicts will be resolved with standard gitignore conflict resolution).\r\n1. Do nothing and just have users specify `include = [\"*\"]`.\r\n\r\nI could gravitate towards either of these options at this point. I don't really love either of them, though, because they simply just allow for the upload of hidden files. I'd prefer more granularity, where only `.well-known` is uploaded and other hidden files are ignored by default.\n From an end user perspective, I don't particularly mind which option \nyou go with. It's been a couple weeks since I worked with this so my \nmemory of the specifics isn't great, but I remember it being very \ndifficult to notice that these files were being ignored to begin with. \nIt only occurred to me after doing the upload to try hitting them via \ncurl, and when that failed, that wrangler may not be uploading dotfiles.\n\n\nIf you'd just make it clearer that certain files aren't being uploaded, \nI think that'd help immensely. Or, given that dotfiles are used to \ncontain sensitive information, make it an error to initiate an upload \nwithout explicitly including or excluding them. Again, I don't mind \nwhich, I just wish it didn't fail quietly, or so quietly that I have to \nuse `--verbose` or equivalent to spot it.\n\n\nThanks.\n\n\nThank you for the feedback, @ndarilek! This is super helpful. I can definitely add a warning message about hidden files being ignored (and not have this lumped in under verbose output).\nI'd second automatically uploading `.well-known` - I got bit by this as well, and everything about that directory really says _I know that this is a directory with some stuff I deliberately put here for deploy!_\r\n\r\nOn the second issue, files w/o an extension, how should I update this so that I serve only these files w/o extensions?  I use Gatsby and I'm not exactly sure if I need the file name appending logic.  Perhaps there's something a bit more precise than just removing the default behavior of Wrangler setups.\nI'd like to second, or third/fourth/whatever,\u00a0 including .well-known by \ndefault as a fix for this issue. I've got a few sites I want to migrate, \nand this is a big blocker since two include .well-known/matrix/server. \nRight now these sit right at the sweet spot where they're mostly static \nbut need some dynamic behavior. I don't want to make them full-blown \nSPAs, but at some point I'm going to want to do a bit of \nheader/cookie-based auth. Workers seems like a great fit, but I can't \nlose Matrix server discovery support.\n\n\nThanks.\n\n\nHere's a hacky potential workaround for some .well-known routes. In workers-site/index.js:\r\n\r\n```\r\n    if (url.pathname == \"/.well-known/matrix/server\")\r\n      return new Response(\r\n        '{\"m.server\": \"matrix.my.domain:443\"}',\r\n        {\r\n          headers: {\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            \"Content-Type\": \"application/json\"\r\n          }\r\n        }\r\n      )\r\n    else\r\n      return await getAssetFromKV(event, options)\r\n```\r\n\r\nWould love to continue serving that as a static file, but for now it seems to work. Naturally, tweak for your own .well-known routes/path matches.\nFor future people, I ended up with this:\r\n\r\n```javascript\r\nif (url.pathname == applePayPath) return new Response(applePayBody);\r\n```\r\n\r\nIt\u2019s not really great and adding a lot more of these could get onerous and error-prone.  I hope the team allows some built-in mechanism for this someday.\nThis issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n\nSo this isn't getting fixed? This whole trend of projects marking issues \nas stale automatically has always baffled me. Someone else is just going \nto have this issue in a few more months unless we routinely poke it to \nkeep it open.\n\n\nFWIW, the lack of this feature put me off of using Cloudflare Workers to \nhost a static site. Not trying to seem harsh, but if Cloudflare's tools \nare just going to arbitrarily not upload files from a directory, that's \nkind of not what I want from anything advertising itself as a static \nsite hosting tool, and it might be good to rework the branding. I'll \nstill use Workers to intercept requests where needed, but if I can't \nhost .well-known files then there are several needs I just can't meet.\n\n\n@ndarilek i'm going to update this issue to always upload `.well-known` files within the bucket directory. hopefully we can add it to the milestone for 1.11.0, which should go out in a few weeks.\r\n\r\nThank you for re-upping.\nI think @gabbifish 's comment still stands. The overrides truly do override all the existing paths in the [crate we are depending on to walk the directory](https://docs.rs/ignore/0.4.16/ignore/struct.WalkBuilder.html). This behavior seems really weird, so I've asked a [question on the repository page](https://github.com/BurntSushi/ripgrep/discussions/1652).\nIt looks like getting a fix for `ignore::WalkBuilder` not traversing directories recursively when overrides are given is unlikely. My understanding is that the maintainer of ripgrep[ isn't accepting changes on the include crate right now.](https://github.com/BurntSushi/ripgrep/issues/1394#issuecomment-586633779). So, do we want to introduce a hidden bool flag to `[sites]` in `wrangler.toml` that toggles the upload of hidden files, or mark this as a wontfix?\nThat would be a sad outcome \ud83d\ude14.  We could make use of uploading invisibles to remove a bunch of really dumb hacks.\nWhy not an explicit opt-in/opt-out field rather than toggling a boolean for all hidden directories? I'd like one sensical default behavior for what gets uploaded with the ability to opt in or out by directory pattern or file (e.g. `include: [.well-known/*, .my-speicla-file]`\nJust wanted to chime in that my company is also trying to use Cloudflare Worker Sites because it was marketed as a static site hosting service, but issues like this make it hard for me to continue advocating for it... Our bundle doesn't currently have anything sensitive so I'll do combination of the above hacks for now - but this is pretty rough.\nNext step: we'll evaluate just doing this ourselves natively without a dependency on the Walkdir/Glob crates, since our use case is rather narrow.",
        "created_at": "2020-09-21T16:29:26Z",
        "version": "1.11"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1543,
        "instance_id": "cloudflare__wrangler-legacy-1543",
        "issue_numbers": [
            "483"
        ],
        "base_commit": "8c399bdd83fb92fea2e1b452a07964c604ceb28b",
        "patch": "diff --git a/src/fixtures/wrangler_toml.rs b/src/fixtures/wrangler_toml.rs\n--- a/src/fixtures/wrangler_toml.rs\n+++ b/src/fixtures/wrangler_toml.rs\n@@ -44,6 +44,7 @@ pub struct EnvConfig {\n     #[serde(alias = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<KvConfig>>,\n     pub vars: Option<HashMap<&'static str, &'static str>>,\n+    pub text_blobs: Option<HashMap<&'static str, &'static str>>,\n     pub triggers: Option<Triggers>,\n }\n \ndiff --git a/src/fixtures/wrangler_toml.rs b/src/fixtures/wrangler_toml.rs\n--- a/src/fixtures/wrangler_toml.rs\n+++ b/src/fixtures/wrangler_toml.rs\n@@ -104,6 +105,7 @@ pub struct WranglerToml {\n     pub kv_namespaces: Option<Vec<KvConfig>>,\n     pub site: Option<SiteConfig>,\n     pub vars: Option<HashMap<&'static str, &'static str>>,\n+    pub text_blobs: Option<HashMap<&'static str, &'static str>>,\n     pub triggers: Option<Triggers>,\n }\n \ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -1,4 +1,5 @@\n use std::collections::HashMap;\n+use std::path::PathBuf;\n \n use serde::{Deserialize, Serialize};\n use serde_with::rust::string_empty_as_none;\ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -25,6 +26,7 @@ pub struct Environment {\n     #[serde(alias = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<ConfigKvNamespace>>,\n     pub vars: Option<HashMap<String, String>>,\n+    pub text_blobs: Option<HashMap<String, PathBuf>>,\n     pub triggers: Option<Triggers>,\n }\n \ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -49,6 +49,7 @@ pub struct Manifest {\n     pub kv_namespaces: Option<Vec<ConfigKvNamespace>>,\n     pub env: Option<HashMap<String, Environment>>,\n     pub vars: Option<HashMap<String, String>>,\n+    pub text_blobs: Option<HashMap<String, PathBuf>>,\n     pub triggers: Option<Triggers>,\n }\n \ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -295,6 +296,7 @@ impl Manifest {\n             kv_namespaces: get_namespaces(self.kv_namespaces.clone(), preview)?, // Not inherited\n             site: self.site.clone(), // Inherited\n             vars: self.vars.clone(), // Not inherited\n+            text_blobs: self.text_blobs.clone(), // Inherited\n         };\n \n         let environment = self.get_environment(environment_name)?;\ndiff --git a/src/settings/toml/target.rs b/src/settings/toml/target.rs\n--- a/src/settings/toml/target.rs\n+++ b/src/settings/toml/target.rs\n@@ -16,6 +16,7 @@ pub struct Target {\n     pub webpack_config: Option<String>,\n     pub site: Option<Site>,\n     pub vars: Option<HashMap<String, String>>,\n+    pub text_blobs: Option<HashMap<String, PathBuf>>,\n }\n \n impl Target {\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -33,6 +33,13 @@ pub fn build(\n     let mut plain_texts: Vec<PlainText> = Vec::new();\n     let mut wasm_modules: Vec<WasmModule> = Vec::new();\n \n+    if let Some(blobs) = &target.text_blobs {\n+        for (key, blob_path) in blobs.iter() {\n+            let blob = fs::read_to_string(blob_path)?;\n+            text_blobs.push(TextBlob::new(blob, key.clone())?);\n+        }\n+    }\n+\n     if let Some(vars) = &target.vars {\n         for (key, value) in vars.iter() {\n             plain_texts.push(PlainText::new(key.clone(), value.clone())?)\n",
        "test_patch": "diff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -124,6 +124,7 @@ mod tests {\n             webpack_config: None,\n             site: None,\n             vars: None,\n+            text_blobs: None,\n         };\n         assert!(kv::get_namespace_id(&target_with_dup_kv_bindings, \"\").is_err());\n     }\ndiff --git a/src/sites/mod.rs b/src/sites/mod.rs\n--- a/src/sites/mod.rs\n+++ b/src/sites/mod.rs\n@@ -320,6 +320,7 @@ mod tests {\n             webpack_config: None,\n             site: Some(site),\n             vars: None,\n+            text_blobs: None,\n         }\n     }\n \ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -227,6 +227,35 @@ fn it_previews_with_config_text() {\n     preview_succeeds_with(&fixture, None, test_value);\n }\n \n+#[test]\n+fn it_previews_with_text_blob() {\n+    let fixture = Fixture::new();\n+    fixture.create_file(\n+        \"index.js\",\n+        r#\"\n+        addEventListener('fetch', event => {\n+            event.respondWith(handleRequest(event.request))\n+        })\n+\n+        async function handleRequest(request) {\n+            return new Response(BLOB)\n+        }\n+    \"#,\n+    );\n+    fixture.create_default_package_json();\n+\n+    let test_value: &'static str = \"sdhftiuyrtdhfjgpoopuyrdfjgkyitudrhf\";\n+    fixture.create_file(\"blob.txt\", test_value);\n+\n+    let mut wrangler_toml = WranglerToml::javascript(\"test-preview-with-config\");\n+    let mut blobs: HashMap<&'static str, &'static str> = HashMap::new();\n+    blobs.insert(\"BLOB\", \"blob.txt\");\n+    wrangler_toml.text_blobs = Some(blobs);\n+    fixture.create_wrangler_toml(wrangler_toml);\n+\n+    preview_succeeds_with(&fixture, None, test_value);\n+}\n+\n fn preview_succeeds_with(fixture: &Fixture, env: Option<&str>, expected: &str) {\n     env::remove_var(\"CF_ACCOUNT_ID\");\n     env::remove_var(\"CF_ZONE_ID\");\n",
        "problem_statement": "Allow file bindings as text_blob \n### \ud83d\udca1 Feature request\r\n\r\n<!-- \r\n  Please fill out each section below before submitting your \ud83d\udca1 feature request.\r\n\r\n  Before opening a new issue, please search for existing issues: https://github.com/cloudflare/wrangler/issues\r\n\r\n  Thanks! -->\r\n\r\n#### Overview and problem statement\r\n\r\nWe have a worker that does a HTML transformation that adds a new JavaScript script tag, called client code. We want to store the client code along the server-side transformation.\r\n\r\nThe server-side and client-side codes need to keep sync, even during deployements, so I think KV wouldn't be a good fit.\r\n\r\nAlternatively, we can use webpack to inline the client-side code into the worker. But allowing files as text_blob seems useful (a customer requested to inline images, we can use the same technique). \r\n\r\n#### Basic example\r\n\r\nworker.js:\r\n```js\r\naddEventListener('fetch', event => {\r\n  event.respondWith(handleRequest(event.request))\r\n})\r\n\r\nasync function handleRequest(request) {\r\n  return new Response(CLIENT_SIDE_CODE);\r\n}\r\n```\r\n\r\nmetadata.json:\r\n```json\r\n{\r\n  \"body_part\": \"foo\",\r\n  \"bindings\": [\r\n    {\r\n      \"name\": \"CLIENT_SIDE_CODE\",\r\n      \"type\": \"text_blob\",\r\n      \"part\": \"CLIENT_SIDE_CODE\"\r\n    },\r\n  ]\r\n}\r\n```\r\n\r\nThen the multipart from needs to include the `CLIENT_SIDE_CODE` part. Note that the size limit needs to take metadata.json into account too.\n",
        "hints_text": "WIP branch https://github.com/cloudflare/wrangler/tree/sven/text-blobs\nThis is _kinda_ supported with the introduction of sites but we would need to add some stuff to `wrangler.toml` to expose it to users\nWe wanted to avoid using KV for that.\nI understand - with workers sites we upload an asset manifest that is a text blob. Text blobs can be uploaded, the back end is there in wrangler, we just haven't done the work to expose it to the users\n@ashleymichal, what are you thinking in terms of an approach here? I am not opposed to putting full text bindings in wrangler.toml. The alternate approach is to upload text bindings exactly like secrets, but I think this is problematic from an API perspective; we're further straying away from the original intent of bundling workers with their bindings every upload. Secrets was supposed to be the only exception to that.\nthese should only be specified in the toml under something like \"globals\". we will not be adding commands for these, as they would add little value for lots of state inconsistencies.\nwe should make sure you can have per-env blobs as i'm sure they will be used to distinguish between staging and prod in the code\ni think blobs should follow a pretty standard inherit pattern; that is, i would not _force_ users to specify per-environment text vars.\r\n\r\nWhat does need some design is whether it is in scope to include blobs on the scale of files; in which case, wrangler would need to handle both string and pathbuf types coming in from the toml. i don't think that is hard, per se, but is a consideration.\nBlob could host a sourcemap too, we need it to be per env.\nperhaps i was not clear: text blobs should be subject to the same inheritance pattern as some other fields; if one is specified top level but not at the env level, it should inherit, but an env level specification should overwrite. what i'm suggesting is that we not error or even necessarily warn if a text binding is not specified for every env.\n@xtuc do you think this is solved with secrets/config vars?\nthis  should not (and likely  cannot) be handled by secrets/config  vars   due to size limitations.\nThis issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n\nThis issue has been automatically closed because it has not had recent activity. You may re-open the issue if it is still relevant.\n",
        "created_at": "2020-09-03T05:03:11Z",
        "version": "1.12"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1522,
        "instance_id": "cloudflare__wrangler-legacy-1522",
        "issue_numbers": [
            "1283"
        ],
        "base_commit": "510b0c0fdeebeed7977adf4c1121eba72fb5b5ac",
        "patch": "diff --git a/src/build/mod.rs b/src/build/mod.rs\n--- a/src/build/mod.rs\n+++ b/src/build/mod.rs\n@@ -1,5 +1,6 @@\n use crate::settings::toml::{Target, TargetType};\n-use crate::terminal::{message, styles};\n+use crate::terminal::message::{Message, StdOut};\n+use crate::terminal::styles;\n use crate::wranglerjs;\n use crate::{commands, install};\n \ndiff --git a/src/build/mod.rs b/src/build/mod.rs\n--- a/src/build/mod.rs\n+++ b/src/build/mod.rs\n@@ -10,7 +11,7 @@ pub fn build(target: &Target) -> Result<(), failure::Error> {\n     let target_type = &target.target_type;\n     match target_type {\n         TargetType::JavaScript => {\n-            message::info(\"JavaScript project found. Skipping unnecessary build!\")\n+            StdOut::info(\"JavaScript project found. Skipping unnecessary build!\")\n         }\n         TargetType::Rust => {\n             let _ = which::which(\"rustc\").map_err(|e| {\ndiff --git a/src/build/mod.rs b/src/build/mod.rs\n--- a/src/build/mod.rs\n+++ b/src/build/mod.rs\n@@ -38,7 +39,7 @@ pub fn build(target: &Target) -> Result<(), failure::Error> {\n }\n \n pub fn command(args: &[&str], binary_path: &PathBuf) -> Command {\n-    message::working(\"Compiling your project to WebAssembly...\");\n+    StdOut::working(\"Compiling your project to WebAssembly...\");\n \n     let mut c = if cfg!(target_os = \"windows\") {\n         let mut c = Command::new(\"cmd\");\ndiff --git a/src/commands/config.rs b/src/commands/config.rs\n--- a/src/commands/config.rs\n+++ b/src/commands/config.rs\n@@ -10,7 +10,8 @@ use cloudflare::framework::apiclient::ApiClient;\n \n use crate::http;\n use crate::settings::{get_global_config_path, global_user::GlobalUser};\n-use crate::terminal::{message, styles};\n+use crate::terminal::message::{Message, StdOut};\n+use crate::terminal::styles;\n \n // set the permissions on the dir, we want to avoid that other user reads to file\n #[cfg(not(target_os = \"windows\"))]\ndiff --git a/src/commands/config.rs b/src/commands/config.rs\n--- a/src/commands/config.rs\n+++ b/src/commands/config.rs\n@@ -23,7 +24,7 @@ pub fn set_file_mode(file: &PathBuf) {\n \n pub fn global_config(user: &GlobalUser, verify: bool) -> Result<(), failure::Error> {\n     if verify {\n-        message::info(\"Validating credentials...\");\n+        StdOut::info(\"Validating credentials...\");\n         validate_credentials(user)?;\n     }\n \ndiff --git a/src/commands/config.rs b/src/commands/config.rs\n--- a/src/commands/config.rs\n+++ b/src/commands/config.rs\n@@ -34,7 +35,7 @@ pub fn global_config(user: &GlobalUser, verify: bool) -> Result<(), failure::Err\n     #[cfg(not(target_os = \"windows\"))]\n     set_file_mode(&config_file);\n \n-    message::success(&format!(\n+    StdOut::success(&format!(\n         \"Successfully configured. You can find your configuration file at: {}\",\n         &config_file.to_string_lossy()\n     ));\ndiff --git a/src/commands/dev/edge/server/https.rs b/src/commands/dev/edge/server/https.rs\n--- a/src/commands/dev/edge/server/https.rs\n+++ b/src/commands/dev/edge/server/https.rs\n@@ -1,8 +1,8 @@\n use super::preview_request;\n use crate::commands::dev::utils::{get_path_as_str, rewrite_redirect};\n use crate::commands::dev::{tls, Protocol, ServerConfig};\n-use crate::terminal::{emoji, message};\n-\n+use crate::terminal::emoji;\n+use crate::terminal::message::{Message, StdOut};\n use std::sync::{Arc, Mutex};\n \n use chrono::prelude::*;\ndiff --git a/src/commands/dev/edge/server/https.rs b/src/commands/dev/edge/server/https.rs\n--- a/src/commands/dev/edge/server/https.rs\n+++ b/src/commands/dev/edge/server/https.rs\n@@ -91,7 +91,7 @@ pub async fn https(\n                 Ok(x) => Some(Ok(x)),\n                 Err(e) => {\n                     eprintln!(\"Client connection error {}\", e);\n-                    message::info(\"Make sure to use https and `--insecure` with curl\");\n+                    StdOut::info(\"Make sure to use https and `--insecure` with curl\");\n                     None\n                 }\n             }\ndiff --git a/src/commands/dev/edge/server/https.rs b/src/commands/dev/edge/server/https.rs\n--- a/src/commands/dev/edge/server/https.rs\n+++ b/src/commands/dev/edge/server/https.rs\n@@ -103,7 +103,7 @@ pub async fn https(\n     .serve(service);\n \n     println!(\"{} Listening on https://{}\", emoji::EAR, listening_address);\n-    message::info(\"Generated certificate is not verified, browsers will give a warning and curl will require `--insecure`\");\n+    StdOut::info(\"Generated certificate is not verified, browsers will give a warning and curl will require `--insecure`\");\n \n     if let Err(e) = server.await {\n         eprintln!(\"{}\", e);\ndiff --git a/src/commands/dev/edge/setup.rs b/src/commands/dev/edge/setup.rs\n--- a/src/commands/dev/edge/setup.rs\n+++ b/src/commands/dev/edge/setup.rs\n@@ -4,7 +4,7 @@ use crate::kv::bulk;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::{DeployConfig, Target};\n use crate::sites::{add_namespace, sync};\n-use crate::terminal::message;\n+use crate::terminal::message::{Message, StdOut};\n use crate::upload;\n \n use reqwest::Url;\ndiff --git a/src/commands/dev/edge/setup.rs b/src/commands/dev/edge/setup.rs\n--- a/src/commands/dev/edge/setup.rs\n+++ b/src/commands/dev/edge/setup.rs\n@@ -29,7 +29,7 @@ pub(super) fn upload(\n \n         // First, upload all existing files in given directory\n         if verbose {\n-            message::info(\"Uploading updated files...\");\n+            StdOut::info(\"Uploading updated files...\");\n         }\n \n         bulk::put(target, user, &site_namespace.id, to_upload, &None)?;\ndiff --git a/src/commands/dev/edge/setup.rs b/src/commands/dev/edge/setup.rs\n--- a/src/commands/dev/edge/setup.rs\n+++ b/src/commands/dev/edge/setup.rs\n@@ -52,7 +52,7 @@ pub(super) fn upload(\n \n     if !to_delete.is_empty() {\n         if verbose {\n-            message::info(\"Deleting stale files...\");\n+            StdOut::info(\"Deleting stale files...\");\n         }\n \n         bulk::delete(target, user, &site_namespace_id.unwrap(), to_delete, &None)?;\ndiff --git a/src/commands/dev/gcs/server/https.rs b/src/commands/dev/gcs/server/https.rs\n--- a/src/commands/dev/gcs/server/https.rs\n+++ b/src/commands/dev/gcs/server/https.rs\n@@ -3,8 +3,8 @@ use crate::commands::dev::gcs::headers::destructure_response;\n use crate::commands::dev::server_config::ServerConfig;\n use crate::commands::dev::tls;\n use crate::commands::dev::utils::{get_path_as_str, rewrite_redirect};\n-use crate::terminal::{emoji, message};\n-\n+use crate::terminal::emoji;\n+use crate::terminal::message::{Message, StdOut};\n use std::sync::{Arc, Mutex};\n \n use chrono::prelude::*;\ndiff --git a/src/commands/dev/gcs/server/https.rs b/src/commands/dev/gcs/server/https.rs\n--- a/src/commands/dev/gcs/server/https.rs\n+++ b/src/commands/dev/gcs/server/https.rs\n@@ -114,7 +114,7 @@ pub async fn https(\n                 Ok(x) => Some(Ok(x)),\n                 Err(e) => {\n                     eprintln!(\"Client connection error {}\", e);\n-                    message::info(\"Make sure to use https and `--insecure` with curl\");\n+                    StdOut::info(\"Make sure to use https and `--insecure` with curl\");\n                     None\n                 }\n             }\ndiff --git a/src/commands/dev/gcs/server/https.rs b/src/commands/dev/gcs/server/https.rs\n--- a/src/commands/dev/gcs/server/https.rs\n+++ b/src/commands/dev/gcs/server/https.rs\n@@ -131,7 +131,7 @@ pub async fn https(\n         listening_address.to_string()\n     );\n \n-    message::info(\"Generated certificate is not verified, browsers will give a warning and curl will require `--insecure`\");\n+    StdOut::info(\"Generated certificate is not verified, browsers will give a warning and curl will require `--insecure`\");\n \n     if let Err(e) = server.await {\n         eprintln!(\"{}\", e);\ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -11,7 +11,8 @@ pub use server_config::ServerConfig;\n use crate::build;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::{DeployConfig, Target};\n-use crate::terminal::{message, styles};\n+use crate::terminal::message::{Message, StdOut};\n+use crate::terminal::styles;\n \n /// `wrangler dev` starts a server on a dev machine that routes incoming HTTP requests\n /// to a Cloudflare Workers runtime and returns HTTP responses\ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -55,7 +56,7 @@ pub fn dev(\n         }\n \n         // If user is authenticated but host is provided, use gcs with given host\n-        message::warn(\n+        StdOut::warn(\n             format!(\n                 \"{} provided, will run unauthenticated and upstream to provided host\",\n                 host_str\ndiff --git a/src/commands/dev/tls/certs.rs b/src/commands/dev/tls/certs.rs\n--- a/src/commands/dev/tls/certs.rs\n+++ b/src/commands/dev/tls/certs.rs\n@@ -12,8 +12,7 @@ use std::fs;\n use std::path::PathBuf;\n \n use crate::settings::get_wrangler_home_dir;\n-use crate::terminal::message;\n-\n+use crate::terminal::message::{Message, StdOut};\n /// Create files for cert and private key\n fn create_output_files() -> Result<Option<(PathBuf, PathBuf)>, failure::Error> {\n     let home = get_wrangler_home_dir()?.join(\"config\");\ndiff --git a/src/commands/dev/tls/certs.rs b/src/commands/dev/tls/certs.rs\n--- a/src/commands/dev/tls/certs.rs\n+++ b/src/commands/dev/tls/certs.rs\n@@ -25,7 +24,7 @@ fn create_output_files() -> Result<Option<(PathBuf, PathBuf)>, failure::Error> {\n     } else {\n         fs::create_dir_all(&home)?;\n \n-        message::info(format!(\"Generating certificate and private key for https server, if you would like to use your own you can replace `dev-cert.pem` and `dev-privkey.rsa` at {}\", home.to_str().unwrap()).as_str());\n+        StdOut::info(format!(\"Generating certificate and private key for https server, if you would like to use your own you can replace `dev-cert.pem` and `dev-privkey.rsa` at {}\", home.to_str().unwrap()).as_str());\n \n         Ok(Some((cert, privkey)))\n     }\ndiff --git a/src/commands/init.rs b/src/commands/init.rs\n--- a/src/commands/init.rs\n+++ b/src/commands/init.rs\n@@ -2,8 +2,7 @@ use std::path::{Path, PathBuf};\n \n use crate::commands::validate_worker_name;\n use crate::settings::toml::{Manifest, Site, TargetType};\n-use crate::terminal::message;\n-\n+use crate::terminal::message::{Message, StdOut};\n pub fn init(\n     name: Option<&str>,\n     target_type: Option<TargetType>,\ndiff --git a/src/commands/init.rs b/src/commands/init.rs\n--- a/src/commands/init.rs\n+++ b/src/commands/init.rs\n@@ -42,12 +41,12 @@ entry-point = \"workers-site\"\n         )?;\n \n         site.scaffold_worker()?;\n-        message::success(\"Successfully scaffolded workers site\");\n+        StdOut::success(\"Successfully scaffolded workers site\");\n     } else {\n         Manifest::generate(name.to_string(), Some(target_type), &config_path, None)?;\n     }\n \n-    message::success(\"Succesfully created a `wrangler.toml`\");\n+    StdOut::success(\"Succesfully created a `wrangler.toml`\");\n     Ok(())\n }\n \ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -14,8 +14,7 @@ use crate::kv::bulk::BATCH_KEY_MAX;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n use crate::terminal::interactive;\n-use crate::terminal::message;\n-\n+use crate::terminal::message::{Message, StdOut};\n pub fn run(\n     target: &Target,\n     user: &GlobalUser,\ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -30,7 +29,7 @@ pub fn run(\n     )) {\n         Ok(true) => (),\n         Ok(false) => {\n-            message::info(&format!(\"Not deleting keys in {}\", filename.display()));\n+            StdOut::info(&format!(\"Not deleting keys in {}\", filename.display()));\n             return Ok(());\n         }\n         Err(e) => failure::bail!(e),\ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -52,7 +51,7 @@ pub fn run(\n \n     let len = keys.len();\n \n-    message::working(&format!(\"deleting {} key value pairs\", len));\n+    StdOut::working(&format!(\"deleting {} key value pairs\", len));\n \n     let progress_bar = if len > BATCH_KEY_MAX {\n         let pb = ProgressBar::new(len as u64);\ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -68,6 +67,6 @@ pub fn run(\n         pb.finish_with_message(&format!(\"deleted {} key value pairs\", len));\n     }\n \n-    message::success(\"Success\");\n+    StdOut::success(\"Success\");\n     Ok(())\n }\ndiff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -13,8 +13,7 @@ use crate::kv::bulk::put;\n use crate::kv::bulk::BATCH_KEY_MAX;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n-use crate::terminal::message;\n-\n+use crate::terminal::message::{Message, StdOut};\n pub fn run(\n     target: &Target,\n     user: &GlobalUser,\ndiff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -41,7 +40,7 @@ pub fn run(\n \n     let len = pairs.len();\n \n-    message::working(&format!(\"uploading {} key value pairs\", len));\n+    StdOut::working(&format!(\"uploading {} key value pairs\", len));\n     let progress_bar = if len > BATCH_KEY_MAX {\n         let pb = ProgressBar::new(len as u64);\n         pb.set_style(ProgressStyle::default_bar().template(\"{wide_bar} {pos}/{len}\\n{msg}\"));\ndiff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -56,6 +55,6 @@ pub fn run(\n         pb.finish_with_message(&format!(\"uploaded {} key value pairs\", len));\n     }\n \n-    message::success(\"Success\");\n+    StdOut::success(\"Success\");\n     Ok(())\n }\ndiff --git a/src/commands/kv/key/delete.rs b/src/commands/kv/key/delete.rs\n--- a/src/commands/kv/key/delete.rs\n+++ b/src/commands/kv/key/delete.rs\n@@ -6,8 +6,7 @@ use crate::http;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n use crate::terminal::interactive;\n-use crate::terminal::message;\n-\n+use crate::terminal::message::{Message, StdOut};\n pub fn delete(\n     target: &Target,\n     user: &GlobalUser,\ndiff --git a/src/commands/kv/key/delete.rs b/src/commands/kv/key/delete.rs\n--- a/src/commands/kv/key/delete.rs\n+++ b/src/commands/kv/key/delete.rs\n@@ -20,14 +19,14 @@ pub fn delete(\n     match interactive::confirm(&format!(\"Are you sure you want to delete key \\\"{}\\\"?\", key)) {\n         Ok(true) => (),\n         Ok(false) => {\n-            message::info(&format!(\"Not deleting key \\\"{}\\\"\", key));\n+            StdOut::info(&format!(\"Not deleting key \\\"{}\\\"\", key));\n             return Ok(());\n         }\n         Err(e) => failure::bail!(e),\n     }\n \n     let msg = format!(\"Deleting key \\\"{}\\\"\", key);\n-    message::working(&msg);\n+    StdOut::working(&msg);\n \n     let response = client.request(&DeleteKey {\n         account_identifier: &target.account_id,\ndiff --git a/src/commands/kv/key/delete.rs b/src/commands/kv/key/delete.rs\n--- a/src/commands/kv/key/delete.rs\n+++ b/src/commands/kv/key/delete.rs\n@@ -36,7 +35,7 @@ pub fn delete(\n     });\n \n     match response {\n-        Ok(_) => message::success(\"Success\"),\n+        Ok(_) => StdOut::success(\"Success\"),\n         Err(e) => print!(\"{}\", format_error(e)),\n     }\n \ndiff --git a/src/commands/kv/key/put.rs b/src/commands/kv/key/put.rs\n--- a/src/commands/kv/key/put.rs\n+++ b/src/commands/kv/key/put.rs\n@@ -12,8 +12,7 @@ use crate::commands::kv;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n-use crate::terminal::message;\n-\n+use crate::terminal::message::{Message, StdOut};\n pub struct KVMetaData {\n     pub namespace_id: String,\n     pub key: String,\ndiff --git a/src/commands/kv/key/put.rs b/src/commands/kv/key/put.rs\n--- a/src/commands/kv/key/put.rs\n+++ b/src/commands/kv/key/put.rs\n@@ -69,7 +68,7 @@ pub fn put(target: &Target, user: &GlobalUser, data: KVMetaData) -> Result<(), f\n \n     let response_status = res.status();\n     if response_status.is_success() {\n-        message::success(\"Success\")\n+        StdOut::success(\"Success\")\n     } else {\n         // This is logic pulled from cloudflare-rs for pretty error formatting right now;\n         // it will be redundant when we switch to using cloudflare-rs for all API requests.\ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -5,8 +5,7 @@ use crate::http;\n use crate::kv::namespace::create;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::{ConfigKvNamespace, KvNamespace, Manifest};\n-use crate::terminal::message;\n-\n+use crate::terminal::message::{Message, StdOut};\n pub fn run(\n     manifest: &Manifest,\n     is_preview: bool,\ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -23,7 +22,7 @@ pub fn run(\n         title.push_str(\"_preview\");\n     }\n     let msg = format!(\"Creating namespace with title \\\"{}\\\"\", title);\n-    message::working(&msg);\n+    StdOut::working(&msg);\n \n     let client = http::cf_v4_client(user)?;\n     let result = create(&client, &account_id, &title);\ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -31,7 +30,7 @@ pub fn run(\n     match result {\n         Ok(success) => {\n             let namespace = success.result;\n-            message::success(\"Success!\");\n+            StdOut::success(\"Success!\");\n             println!(\n                 \"{}\",\n                 toml_modification_instructions(\ndiff --git a/src/commands/kv/namespace/delete.rs b/src/commands/kv/namespace/delete.rs\n--- a/src/commands/kv/namespace/delete.rs\n+++ b/src/commands/kv/namespace/delete.rs\n@@ -4,8 +4,7 @@ use crate::kv::namespace::delete;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n use crate::terminal::interactive;\n-use crate::terminal::message;\n-\n+use crate::terminal::message::{Message, StdOut};\n pub fn run(target: &Target, user: &GlobalUser, id: &str) -> Result<(), failure::Error> {\n     kv::validate_target(target)?;\n     let client = http::cf_v4_client(user)?;\ndiff --git a/src/commands/kv/namespace/delete.rs b/src/commands/kv/namespace/delete.rs\n--- a/src/commands/kv/namespace/delete.rs\n+++ b/src/commands/kv/namespace/delete.rs\n@@ -16,20 +15,20 @@ pub fn run(target: &Target, user: &GlobalUser, id: &str) -> Result<(), failure::\n     )) {\n         Ok(true) => (),\n         Ok(false) => {\n-            message::info(&format!(\"Not deleting namespace {}\", id));\n+            StdOut::info(&format!(\"Not deleting namespace {}\", id));\n             return Ok(());\n         }\n         Err(e) => failure::bail!(e),\n     }\n \n     let msg = format!(\"Deleting namespace {}\", id);\n-    message::working(&msg);\n+    StdOut::working(&msg);\n \n     let response = delete(client, target, id);\n     match response {\n         Ok(_) => {\n-            message::success(\"Success\");\n-            message::warn(\n+            StdOut::success(\"Success\");\n+            StdOut::warn(\n                 \"Make sure to remove this \\\"kv-namespace\\\" entry from your configuration file!\",\n             )\n         }\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -10,7 +10,8 @@ use crate::kv::bulk;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::{DeployConfig, Target};\n use crate::sites;\n-use crate::terminal::{emoji, message};\n+use crate::terminal::emoji;\n+use crate::terminal::message::{Message, StdOut};\n use crate::upload;\n \n pub fn publish(\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -34,7 +35,7 @@ pub fn publish(\n             sites::sync(target, user, &site_namespace.id, &path)?;\n \n         // First, upload all existing files in bucket directory\n-        message::working(\"Uploading site files\");\n+        StdOut::working(\"Uploading site files\");\n         let upload_progress_bar = if to_upload.len() > bulk::BATCH_KEY_MAX {\n             let upload_progress_bar = ProgressBar::new(to_upload.len() as u64);\n             upload_progress_bar\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -65,7 +66,7 @@ pub fn publish(\n \n         // Finally, remove any stale files\n         if !to_delete.is_empty() {\n-            message::info(\"Deleting stale files...\");\n+            StdOut::info(\"Deleting stale files...\");\n \n             let delete_progress_bar = if to_delete.len() > bulk::BATCH_KEY_MAX {\n                 let delete_progress_bar = ProgressBar::new(to_delete.len() as u64);\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -112,7 +113,7 @@ fn warn_site_incompatible_route(deploy_config: &DeployConfig) {\n         }\n \n         if !no_star_routes.is_empty() {\n-            message::warn(&format!(\n+            StdOut::warn(&format!(\n                 \"The following routes in your configuration file should have a trailing * to apply the Worker on every path, otherwise your site will not behave as expected.\\n{}\",\n                 no_star_routes.join(\"\\n\"))\n             );\ndiff --git a/src/commands/route.rs b/src/commands/route.rs\n--- a/src/commands/route.rs\n+++ b/src/commands/route.rs\n@@ -5,8 +5,7 @@ use cloudflare::framework::apiclient::ApiClient;\n \n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::terminal::message;\n-\n+use crate::terminal::message::{Message, StdOut};\n pub fn list(zone_identifier: String, user: &GlobalUser) -> Result<(), failure::Error> {\n     let client = http::cf_v4_client(user)?;\n \ndiff --git a/src/commands/route.rs b/src/commands/route.rs\n--- a/src/commands/route.rs\n+++ b/src/commands/route.rs\n@@ -40,7 +39,7 @@ pub fn delete(\n     match result {\n         Ok(success) => {\n             let msg = format!(\"Successfully deleted route with id {}\", success.result.id);\n-            message::success(&msg);\n+            StdOut::success(&msg);\n         }\n \n         Err(e) => failure::bail!(\"{}\", http::format_error(e, Some(&error_suggestions))),\ndiff --git a/src/commands/secret.rs b/src/commands/secret.rs\n--- a/src/commands/secret.rs\n+++ b/src/commands/secret.rs\n@@ -5,7 +5,8 @@ use cloudflare::framework::response::ApiFailure;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n-use crate::terminal::{emoji, interactive, message};\n+use crate::terminal::message::{Message, StdOut};\n+use crate::terminal::{emoji, interactive};\n use crate::upload;\n \n fn format_error(e: ApiFailure) -> String {\ndiff --git a/src/commands/secret.rs b/src/commands/secret.rs\n--- a/src/commands/secret.rs\n+++ b/src/commands/secret.rs\n@@ -56,7 +57,7 @@ pub fn upload_draft_worker(\n         ApiFailure::Error(_, api_errors) => {\n             let error = &api_errors.errors[0];\n             if error.code == 10007 {\n-                message::working(&format!(\"Worker {} doesn't exist in the API yet. Creating a draft Worker so we can create new secret.\", target.name));\n+                StdOut::working(&format!(\"Worker {} doesn't exist in the API yet. Creating a draft Worker so we can create new secret.\", target.name));\n                 let upload_client = http::legacy_auth_client(user);\n                 Some(upload::script(&upload_client, target, None))\n             } else {\ndiff --git a/src/commands/secret.rs b/src/commands/secret.rs\n--- a/src/commands/secret.rs\n+++ b/src/commands/secret.rs\n@@ -79,7 +80,7 @@ pub fn create_secret(name: &str, user: &GlobalUser, target: &Target) -> Result<(\n         failure::bail!(\"Your secret cannot be empty.\")\n     }\n \n-    message::working(&format!(\n+    StdOut::working(&format!(\n         \"Creating the secret for script name {}\",\n         target.name\n     ));\ndiff --git a/src/commands/secret.rs b/src/commands/secret.rs\n--- a/src/commands/secret.rs\n+++ b/src/commands/secret.rs\n@@ -99,7 +100,7 @@ pub fn create_secret(name: &str, user: &GlobalUser, target: &Target) -> Result<(\n     });\n \n     match response {\n-        Ok(_) => message::success(&format!(\"Success! Uploaded secret {}.\", name)),\n+        Ok(_) => StdOut::success(&format!(\"Success! Uploaded secret {}.\", name)),\n         Err(e) => match upload_draft_worker(&e, user, target) {\n             None => failure::bail!(format_error(e)),\n             Some(draft_upload_response) => match draft_upload_response {\ndiff --git a/src/commands/secret.rs b/src/commands/secret.rs\n--- a/src/commands/secret.rs\n+++ b/src/commands/secret.rs\n@@ -111,7 +112,7 @@ pub fn create_secret(name: &str, user: &GlobalUser, target: &Target) -> Result<(\n                     });\n \n                     match retry_response {\n-                        Ok(_) => message::success(&format!(\"Success! Uploaded secret {}.\", name)),\n+                        Ok(_) => StdOut::success(&format!(\"Success! Uploaded secret {}.\", name)),\n                         Err(e) => failure::bail!(format_error(e)),\n                     }\n                 }\ndiff --git a/src/commands/secret.rs b/src/commands/secret.rs\n--- a/src/commands/secret.rs\n+++ b/src/commands/secret.rs\n@@ -132,13 +133,13 @@ pub fn delete_secret(name: &str, user: &GlobalUser, target: &Target) -> Result<(\n     )) {\n         Ok(true) => (),\n         Ok(false) => {\n-            message::info(&format!(\"Not deleting secret {}.\", name));\n+            StdOut::info(&format!(\"Not deleting secret {}.\", name));\n             return Ok(());\n         }\n         Err(e) => failure::bail!(e),\n     }\n \n-    message::working(&format!(\n+    StdOut::working(&format!(\n         \"Deleting the secret {} on script {}.\",\n         name, target.name\n     ));\ndiff --git a/src/commands/secret.rs b/src/commands/secret.rs\n--- a/src/commands/secret.rs\n+++ b/src/commands/secret.rs\n@@ -152,7 +153,7 @@ pub fn delete_secret(name: &str, user: &GlobalUser, target: &Target) -> Result<(\n     });\n \n     match response {\n-        Ok(_) => message::success(&format!(\"Success! Deleted secret {}.\", name)),\n+        Ok(_) => StdOut::success(&format!(\"Success! Deleted secret {}.\", name)),\n         Err(e) => failure::bail!(format_error(e)),\n     }\n \ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -1,7 +1,8 @@\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n-use crate::terminal::{emoji, interactive, message};\n+use crate::terminal::message::{Message, StdOut};\n+use crate::terminal::{emoji, interactive};\n \n use serde::{Deserialize, Serialize};\n \ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -67,7 +68,7 @@ impl Subdomain {\n             };\n             failure::bail!(msg)\n         }\n-        message::success(&format!(\"Success! You've registered {}.\", name));\n+        StdOut::success(&format!(\"Success! You've registered {}.\", name));\n         Ok(())\n     }\n }\ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -115,7 +116,7 @@ fn register_subdomain(\n         \"Registering your subdomain, {}.workers.dev, this could take up to a minute.\",\n         name\n     );\n-    message::working(&msg);\n+    StdOut::working(&msg);\n     Subdomain::put(name, &target.account_id, user)\n }\n \ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -130,7 +131,7 @@ pub fn set_subdomain(name: &str, user: &GlobalUser, target: &Target) -> Result<(\n     if let Some(subdomain) = subdomain {\n         if subdomain == name {\n             let msg = format!(\"You have already registered {}.workers.dev\", subdomain);\n-            message::success(&msg);\n+            StdOut::success(&msg);\n             return Ok(());\n         } else {\n             // list all the affected scripts\ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -158,7 +159,7 @@ pub fn set_subdomain(name: &str, user: &GlobalUser, target: &Target) -> Result<(\n             match interactive::confirm(&prompt_msg) {\n                 Ok(true) => (),\n                 Ok(false) => {\n-                    message::info(&format!(\"Keeping subdomain: {}.workers.dev\", subdomain));\n+                    StdOut::info(&format!(\"Keeping subdomain: {}.workers.dev\", subdomain));\n                     return Ok(());\n                 }\n                 Err(e) => failure::bail!(e),\ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -173,11 +174,11 @@ pub fn get_subdomain(user: &GlobalUser, target: &Target) -> Result<(), failure::\n     let subdomain = Subdomain::get(&target.account_id, user)?;\n     if let Some(subdomain) = subdomain {\n         let msg = format!(\"{}.workers.dev\", subdomain);\n-        message::info(&msg);\n+        StdOut::info(&msg);\n     } else {\n         let msg =\n             \"No subdomain registered. Use `wrangler subdomain <name>` to register one.\".to_string();\n-        message::user_error(&msg);\n+        StdOut::user_error(&msg);\n     }\n     Ok(())\n }\ndiff --git a/src/commands/whoami.rs b/src/commands/whoami.rs\n--- a/src/commands/whoami.rs\n+++ b/src/commands/whoami.rs\n@@ -1,7 +1,7 @@\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::terminal::{emoji, message, styles};\n-\n+use crate::terminal::message::{Message, StdOut};\n+use crate::terminal::{emoji, styles};\n use cloudflare::endpoints::account::{self, Account};\n use cloudflare::endpoints::user::GetUserDetails;\n use cloudflare::framework::apiclient::ApiClient;\ndiff --git a/src/commands/whoami.rs b/src/commands/whoami.rs\n--- a/src/commands/whoami.rs\n+++ b/src/commands/whoami.rs\n@@ -52,7 +52,7 @@ pub fn whoami(user: &GlobalUser) -> Result<(), failure::Error> {\n         }\n         msg.push_str(&format!(\"\\n\\nPlease generate a new token and authenticate with {} or {}\\nfor more information when running {}\", login_msg, config_msg, whoami_msg));\n     }\n-    message::billboard(&msg);\n+    StdOut::billboard(&msg);\n     if table.len() > 1 {\n         println!(\"{}\", &table);\n     }\ndiff --git a/src/deploy/mod.rs b/src/deploy/mod.rs\n--- a/src/deploy/mod.rs\n+++ b/src/deploy/mod.rs\n@@ -5,8 +5,7 @@ use crate::commands::subdomain::Subdomain;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::{DeployConfig, Zoneless};\n-use crate::terminal::message;\n-\n+use crate::terminal::message::{Message, StdOut};\n pub fn worker(user: &GlobalUser, deploy_config: &DeployConfig) -> Result<(), failure::Error> {\n     match deploy_config {\n         DeployConfig::Zoneless(zoneless_config) => {\ndiff --git a/src/deploy/mod.rs b/src/deploy/mod.rs\n--- a/src/deploy/mod.rs\n+++ b/src/deploy/mod.rs\n@@ -14,7 +13,7 @@ pub fn worker(user: &GlobalUser, deploy_config: &DeployConfig) -> Result<(), fai\n             log::info!(\"publishing to workers.dev subdomain\");\n             let deploy_address = publish_zoneless(user, zoneless_config)?;\n \n-            message::success(&format!(\n+            StdOut::success(&format!(\n                 \"Successfully published your script to {}\",\n                 deploy_address\n             ));\ndiff --git a/src/deploy/mod.rs b/src/deploy/mod.rs\n--- a/src/deploy/mod.rs\n+++ b/src/deploy/mod.rs\n@@ -30,7 +29,7 @@ pub fn worker(user: &GlobalUser, deploy_config: &DeployConfig) -> Result<(), fai\n             let display_results: Vec<String> =\n                 published_routes.iter().map(|r| format!(\"{}\", r)).collect();\n \n-            message::success(&format!(\n+            StdOut::success(&format!(\n                 \"Deployed to the following routes:\\n{}\",\n                 display_results.join(\"\\n\")\n             ));\ndiff --git a/src/http/cf.rs b/src/http/cf.rs\n--- a/src/http/cf.rs\n+++ b/src/http/cf.rs\n@@ -8,8 +8,8 @@ use http::StatusCode;\n \n use crate::http::{feature::headers, Feature, DEFAULT_HTTP_TIMEOUT_SECONDS};\n use crate::settings::global_user::GlobalUser;\n-use crate::terminal::{emoji, message};\n-\n+use crate::terminal::emoji;\n+use crate::terminal::message::{Message, StdOut};\n pub fn cf_v4_client(user: &GlobalUser) -> Result<HttpApiClient, failure::Error> {\n     let config = HttpApiClientConfig {\n         http_timeout: Duration::from_secs(DEFAULT_HTTP_TIMEOUT_SECONDS),\ndiff --git a/src/http/cf.rs b/src/http/cf.rs\n--- a/src/http/cf.rs\n+++ b/src/http/cf.rs\n@@ -81,8 +81,8 @@ fn print_status_code_context(status_code: StatusCode) {\n     match status_code {\n       // Folks should never hit PAYLOAD_TOO_LARGE, given that Wrangler ensures that bulk file uploads\n       // are max ~50 MB in size. This case is handled anyways out of an abundance of caution.\n-      StatusCode::PAYLOAD_TOO_LARGE => message::warn(\"Returned status code 413, Payload Too Large. Please make sure your upload is less than 100MB in size\"),\n-      StatusCode::GATEWAY_TIMEOUT => message::warn(\"Returned status code 504, Gateway Timeout. Please try again in a few seconds\"),\n+      StatusCode::PAYLOAD_TOO_LARGE => StdOut::warn(\"Returned status code 413, Payload Too Large. Please make sure your upload is less than 100MB in size\"),\n+      StatusCode::GATEWAY_TIMEOUT => StdOut::warn(\"Returned status code 504, Gateway Timeout. Please try again in a few seconds\"),\n       _ => (),\n   }\n }\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -19,7 +19,8 @@ use wrangler::preview::{HttpMethod, PreviewOpt};\n use wrangler::settings;\n use wrangler::settings::global_user::GlobalUser;\n use wrangler::settings::toml::TargetType;\n-use wrangler::terminal::{emoji, interactive, message, styles};\n+use wrangler::terminal::message::{Message, StdOut};\n+use wrangler::terminal::{emoji, interactive, styles};\n use wrangler::version::background_check_for_updates;\n \n fn main() -> Result<(), ExitFailure> {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -48,7 +49,7 @@ fn main() -> Result<(), ExitFailure> {\n         let update_docs_url =\n             styles::url(\"https://developers.cloudflare.com/workers/quickstart#updating-the-cli\");\n \n-        message::billboard(&format!(\n+        StdOut::billboard(&format!(\n             \"{}\\n{}\\n{}\",\n             new_version_available, update_message, update_docs_url\n         ));\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -649,11 +650,11 @@ fn run() -> Result<(), failure::Error> {\n \n         let user: GlobalUser = if default {\n             // API Tokens are the default\n-            message::billboard(&format!(\"To find your API Token, go to {}\\nand create it using the \\\"Edit Cloudflare Workers\\\" template.\\n\\nConsider using {} which only requires your Cloudflare username and password.\\n\\nIf you are trying to use your Global API Key instead of an API Token\\n{}, run {}.\", api_token_url, wrangler_login_msg, not_recommended_msg, recommended_cmd_msg));\n+            StdOut::billboard(&format!(\"To find your API Token, go to {}\\nand create it using the \\\"Edit Cloudflare Workers\\\" template.\\n\\nConsider using {} which only requires your Cloudflare username and password.\\n\\nIf you are trying to use your Global API Key instead of an API Token\\n{}, run {}.\", api_token_url, wrangler_login_msg, not_recommended_msg, recommended_cmd_msg));\n             let api_token: String = interactive::get_user_input(\"Enter API Token: \");\n             GlobalUser::TokenAuth { api_token }\n         } else {\n-            message::billboard(&format!(\"We don't recommend using your Global API Key!\\nPlease consider using an API Token instead.\\n\\n{}\", token_support_url));\n+            StdOut::billboard(&format!(\"We don't recommend using your Global API Key!\\nPlease consider using an API Token instead.\\n\\n{}\", token_support_url));\n             let email: String = interactive::get_user_input(\"Enter Email: \");\n             let api_key: String = interactive::get_user_input(\"Enter Global API Key: \");\n \ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -837,11 +838,11 @@ fn run() -> Result<(), failure::Error> {\n             let publish_release_msg = styles::highlight(\"`wrangler publish --release`\");\n             let publish_msg = styles::highlight(\"`wrangler publish`\");\n             let environments_url = styles::url(\"https://developers.cloudflare.com/workers/tooling/wrangler/configuration/environments\");\n-            message::warn(&format!(\n+            StdOut::warn(&format!(\n                 \"{} is deprecated and behaves exactly the same as {}.\",\n                 publish_release_msg, publish_msg\n             ));\n-            message::warn(&format!(\"See {} for more information.\", environments_url));\n+            StdOut::warn(&format!(\"See {} for more information.\", environments_url));\n         }\n \n         log::info!(\"Getting project settings\");\ndiff --git a/src/preview/fiddle_messenger.rs b/src/preview/fiddle_messenger.rs\n--- a/src/preview/fiddle_messenger.rs\n+++ b/src/preview/fiddle_messenger.rs\n@@ -1,4 +1,4 @@\n-use crate::terminal::message;\n+use crate::terminal::message::{Message, StdOut};\n use log::info;\n use serde::Serialize;\n use ws::{CloseCode, Handler, Handshake, Sender};\ndiff --git a/src/preview/fiddle_messenger.rs b/src/preview/fiddle_messenger.rs\n--- a/src/preview/fiddle_messenger.rs\n+++ b/src/preview/fiddle_messenger.rs\n@@ -63,14 +63,14 @@ impl Handler for FiddleMessageServer {\n             );\n         } else {\n             if !origin_is_safe {\n-                message::user_error(&format!(\n+                StdOut::user_error(&format!(\n                     \"Denied connection from site {}. This is not a trusted origin\",\n                     origin\n                 ));\n             }\n \n             if !addr_is_safe {\n-                message::user_error(&format!(\n+                StdOut::user_error(&format!(\n                     \"Denied connection originating from {} which is outside this machine\",\n                     incoming_addr\n                 ));\ndiff --git a/src/preview/mod.rs b/src/preview/mod.rs\n--- a/src/preview/mod.rs\n+++ b/src/preview/mod.rs\n@@ -21,7 +21,8 @@ use crate::build;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n-use crate::terminal::{message, open_browser};\n+use crate::terminal::message::{Message, StdOut};\n+use crate::terminal::open_browser;\n use crate::watch::watch_and_build;\n \n pub fn preview(\ndiff --git a/src/preview/mod.rs b/src/preview/mod.rs\n--- a/src/preview/mod.rs\n+++ b/src/preview/mod.rs\n@@ -111,7 +112,7 @@ fn client_request(payload: &RequestPayload, script_id: &str, sites_preview: bool\n     } else {\n         format!(\"Your Worker responded with: {}\", worker_res)\n     };\n-    message::preview(&msg);\n+    StdOut::preview(&msg);\n }\n \n fn get(\ndiff --git a/src/preview/mod.rs b/src/preview/mod.rs\n--- a/src/preview/mod.rs\n+++ b/src/preview/mod.rs\n@@ -138,7 +139,7 @@ fn post(\n         None => client.post(url).header(\"Cookie\", cookie).send(),\n     };\n     let msg = format!(\"POST {}\", url);\n-    message::preview(&msg);\n+    StdOut::preview(&msg);\n     Ok(res?.text()?)\n }\n \ndiff --git a/src/preview/mod.rs b/src/preview/mod.rs\n--- a/src/preview/mod.rs\n+++ b/src/preview/mod.rs\n@@ -169,9 +170,9 @@ fn watch_for_changes(\n             if !headless {\n                 match broadcaster.send(serde_json::to_string(&msg)?) {\n                     Ok(_) => {\n-                        message::preview(\"Updated preview with changes\");\n+                        StdOut::preview(\"Updated preview with changes\");\n                     }\n-                    Err(_e) => message::user_error(\"communication with preview failed\"),\n+                    Err(_e) => StdOut::user_error(\"communication with preview failed\"),\n                 }\n             }\n \ndiff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -8,7 +8,8 @@ use crate::kv::bulk;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n use crate::sites::{add_namespace, sync, AssetManifest};\n-use crate::terminal::{message, styles};\n+use crate::terminal::message::{Message, StdOut};\n+use crate::terminal::styles;\n use crate::upload;\n \n #[derive(Debug, Deserialize)]\ndiff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -66,7 +67,7 @@ pub fn upload(\n \n                     // First, upload all existing files in given directory\n                     if verbose {\n-                        message::info(\"Uploading updated files...\");\n+                        StdOut::info(\"Uploading updated files...\");\n                     }\n \n                     bulk::put(target, user, &site_namespace.id, to_upload, &None)?;\ndiff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -74,7 +75,7 @@ pub fn upload(\n                     let preview = authenticated_upload(&client, &target, Some(asset_manifest))?;\n                     if !to_delete.is_empty() {\n                         if verbose {\n-                            message::info(\"Deleting stale files...\");\n+                            StdOut::info(\"Deleting stale files...\");\n                         }\n \n                         bulk::delete(target, user, &site_namespace.id, to_delete, &None)?;\ndiff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -85,11 +86,11 @@ pub fn upload(\n                     authenticated_upload(&client, &target, None)?\n                 }\n             } else {\n-                message::warn(&format!(\n+                StdOut::warn(&format!(\n                     \"Your configuration file is missing the following fields: {:?}\",\n                     missing_fields\n                 ));\n-                message::warn(\"Falling back to unauthenticated preview.\");\n+                StdOut::warn(\"Falling back to unauthenticated preview.\");\n                 if sites_preview {\n                     failure::bail!(SITES_UNAUTH_PREVIEW_ERR)\n                 }\ndiff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -101,11 +102,11 @@ pub fn upload(\n             let wrangler_config_msg = styles::highlight(\"`wrangler config`\");\n             let wrangler_login_msg = styles::highlight(\"`wrangler login`\");\n             let docs_url_msg = styles::url(\"https://developers.cloudflare.com/workers/tooling/wrangler/configuration/#using-environment-variables\");\n-            message::billboard(\n+            StdOut::billboard(\n             &format!(\"You have not provided your Cloudflare credentials.\\n\\nPlease run {}, {}, or visit\\n{}\\nfor info on authenticating with environment variables.\", wrangler_login_msg, wrangler_config_msg, docs_url_msg)\n             );\n \n-            message::info(\"Running preview without authentication.\");\n+            StdOut::info(\"Running preview without authentication.\");\n \n             if sites_preview {\n                 failure::bail!(SITES_UNAUTH_PREVIEW_ERR)\ndiff --git a/src/settings/toml/deploy_config.rs b/src/settings/toml/deploy_config.rs\n--- a/src/settings/toml/deploy_config.rs\n+++ b/src/settings/toml/deploy_config.rs\n@@ -1,6 +1,5 @@\n use crate::settings::toml::Route;\n-use crate::terminal::message;\n-\n+use crate::terminal::message::{Message, StdOut};\n #[derive(Clone, Debug, PartialEq)]\n pub enum DeployConfig {\n     Zoneless(Zoneless),\ndiff --git a/src/settings/toml/deploy_config.rs b/src/settings/toml/deploy_config.rs\n--- a/src/settings/toml/deploy_config.rs\n+++ b/src/settings/toml/deploy_config.rs\n@@ -75,7 +74,7 @@ impl DeployConfig {\n             } else if let Some(routes) = &route_config.routes {\n                 for route in routes {\n                     if route.is_empty() {\n-                        message::warn(\"your configuration file contains an empty route\")\n+                        StdOut::warn(\"your configuration file contains an empty route\")\n                     } else {\n                         zoned.routes.push(Route {\n                             id: None,\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -17,8 +17,8 @@ use crate::settings::toml::kv_namespace::{ConfigKvNamespace, KvNamespace};\n use crate::settings::toml::site::Site;\n use crate::settings::toml::target_type::TargetType;\n use crate::settings::toml::Target;\n-use crate::terminal::{emoji, message, styles};\n-\n+use crate::terminal::message::{Message, StdOut};\n+use crate::terminal::{emoji, styles};\n #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]\n pub struct Manifest {\n     #[serde(default)]\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -85,7 +85,7 @@ impl Manifest {\n                 config.warn_on_account_info();\n                 if let Some(target_type) = &target_type {\n                     if config.target_type != *target_type {\n-                        message::warn(&format!(\"The template recommends the \\\"{}\\\" type. Using type \\\"{}\\\" may cause errors, we recommend changing the type field in wrangler.toml to \\\"{}\\\"\", config.target_type, target_type, config.target_type));\n+                        StdOut::warn(&format!(\"The template recommends the \\\"{}\\\" type. Using type \\\"{}\\\" may cause errors, we recommend changing the type field in wrangler.toml to \\\"{}\\\"\", config.target_type, target_type, config.target_type));\n                     }\n                 }\n                 Ok(config)\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -336,10 +336,10 @@ impl Manifest {\n             let account_id_msg = styles::highlight(\"account_id\");\n             let zone_id_msg = styles::highlight(\"zone_id\");\n             let dash_url = styles::url(\"https://dash.cloudflare.com\");\n-            message::help(\n+            StdOut::help(\n                 &format!(\"You will need to update the following fields in the created {} file before continuing:\", toml_msg)\n             );\n-            message::help(&format!(\n+            StdOut::help(&format!(\n                 \"You can find your {} in the right sidebar of your account's Workers page, and {} in the right sidebar of a zone's overview tab at {}\",\n                 account_id_msg, zone_id_msg, dash_url\n             ));\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -433,7 +433,7 @@ fn get_namespaces(\n                 if let Some(preview_id) = &ns.preview_id {\n                     if let Some(id) = &ns.id {\n                         if preview_id == id {\n-                            message::warn(\"Specifying the same KV namespace ID for both preview and production sessions may cause bugs in your production worker! Proceed with caution.\");\n+                            StdOut::warn(\"Specifying the same KV namespace ID for both preview and production sessions may cause bugs in your production worker! Proceed with caution.\");\n                         }\n                     }\n                     Ok(KvNamespace {\ndiff --git a/src/sites/mod.rs b/src/sites/mod.rs\n--- a/src/sites/mod.rs\n+++ b/src/sites/mod.rs\n@@ -22,8 +22,7 @@ use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n use crate::kv::namespace::{upsert, UpsertedNamespace};\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::{KvNamespace, Target};\n-use crate::terminal::message;\n-\n+use crate::terminal::message::{Message, StdOut};\n pub const KEY_MAX_SIZE: usize = 512;\n // Oddly enough, metadata.len() returns a u64, not usize.\n pub const VALUE_MAX_SIZE: u64 = 10 * 1024 * 1024;\ndiff --git a/src/sites/mod.rs b/src/sites/mod.rs\n--- a/src/sites/mod.rs\n+++ b/src/sites/mod.rs\n@@ -43,13 +42,13 @@ pub fn add_namespace(\n     let site_namespace = match upsert(target, &user, title)? {\n         UpsertedNamespace::Created(namespace) => {\n             let msg = format!(\"Created namespace for Workers Site \\\"{}\\\"\", namespace.title);\n-            message::working(&msg);\n+            StdOut::working(&msg);\n \n             namespace\n         }\n         UpsertedNamespace::Reused(namespace) => {\n             let msg = format!(\"Using namespace for Workers Site \\\"{}\\\"\", namespace.title);\n-            message::working(&msg);\n+            StdOut::working(&msg);\n \n             namespace\n         }\ndiff --git a/src/sites/sync.rs b/src/sites/sync.rs\n--- a/src/sites/sync.rs\n+++ b/src/sites/sync.rs\n@@ -3,15 +3,14 @@ use std::path::Path;\n \n use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n \n+use super::directory_keys_values;\n+use super::manifest::AssetManifest;\n use crate::commands::kv;\n use crate::http;\n use crate::kv::key::KeyList;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n-use crate::terminal::message;\n-\n-use super::directory_keys_values;\n-use super::manifest::AssetManifest;\n+use crate::terminal::message::{Message, StdOut};\n \n pub fn sync(\n     target: &Target,\ndiff --git a/src/sites/sync.rs b/src/sites/sync.rs\n--- a/src/sites/sync.rs\n+++ b/src/sites/sync.rs\n@@ -58,7 +57,7 @@ pub fn sync(\n         .map(|key| key.to_owned())\n         .collect();\n \n-    message::success(\"Success\");\n+    StdOut::success(\"Success\");\n     Ok((to_upload, to_delete, asset_manifest))\n }\n \ndiff --git a/src/terminal/message.rs b/src/terminal/message.rs\n--- a/src/terminal/message.rs\n+++ b/src/terminal/message.rs\n@@ -2,59 +2,86 @@ use super::emoji;\n \n use billboard::{Billboard, BorderColor, BorderStyle};\n \n-fn message(msg: &str) {\n-    println!(\"{}\", msg);\n-}\n+pub trait Message {\n+    fn message(msg: &str);\n \n-pub fn billboard(msg: &str) {\n-    let billboard = Billboard::builder()\n-        .border_style(BorderStyle::Round)\n-        .border_color(BorderColor::Cyan)\n-        .margin(1)\n-        .build();\n-    billboard.display(msg);\n-}\n+    fn info(msg: &str) {\n+        let msg = format!(\"{} {}\", emoji::INFO, msg);\n+        Self::message(&msg);\n+    }\n \n-pub fn info(msg: &str) {\n-    let msg = format!(\"{} {}\", emoji::INFO, msg);\n-    message(&msg);\n-}\n+    fn warn(msg: &str) {\n+        let msg = format!(\"{} {}\", emoji::WARN, msg);\n+        Self::message(&msg);\n+    }\n \n-pub fn warn(msg: &str) {\n-    let msg = format!(\"{} {}\", emoji::WARN, msg);\n-    message(&msg);\n-}\n+    fn success(msg: &str) {\n+        let msg = format!(\"{} {}\", emoji::SPARKLES, msg);\n+        Self::message(&msg);\n+    }\n \n-pub fn success(msg: &str) {\n-    let msg = format!(\"{} {}\", emoji::SPARKLES, msg);\n-    message(&msg);\n-}\n+    fn user_error(msg: &str) {\n+        let msg = format!(\"{} {}\", emoji::EYES, msg);\n+        Self::message(&msg);\n+    }\n \n-pub fn user_error(msg: &str) {\n-    let msg = format!(\"{} {}\", emoji::EYES, msg);\n-    message(&msg);\n-}\n+    fn working(msg: &str) {\n+        let msg = format!(\"{} {}\", emoji::SWIRL, msg);\n+        Self::message(&msg);\n+    }\n \n-pub fn working(msg: &str) {\n-    let msg = format!(\"{} {}\", emoji::SWIRL, msg);\n-    message(&msg);\n-}\n+    fn preview(msg: &str) {\n+        let msg = format!(\"{} {}\", emoji::WORKER, msg);\n+        Self::message(&msg);\n+    }\n \n-pub fn preview(msg: &str) {\n-    let msg = format!(\"{} {}\", emoji::WORKER, msg);\n-    message(&msg);\n+    fn help(msg: &str) {\n+        let msg = format!(\"{} {}\", emoji::SLEUTH, msg);\n+        Self::message(&msg);\n+    }\n+\n+    fn billboard(msg: &str);\n+    fn deprecation_warning(msg: &str);\n }\n \n-pub fn help(msg: &str) {\n-    let msg = format!(\"{} {}\", emoji::SLEUTH, msg);\n-    message(&msg);\n+pub struct StdOut;\n+\n+impl Message for StdOut {\n+    fn message(msg: &str) {\n+        println!(\"{}\", msg);\n+    }\n+\n+    fn billboard(msg: &str) {\n+        let billboard = Billboard::builder()\n+            .border_style(BorderStyle::Round)\n+            .border_color(BorderColor::Cyan)\n+            .margin(1)\n+            .build();\n+        billboard.display(msg);\n+    }\n+\n+    fn deprecation_warning(msg: &str) {\n+        let bb = Billboard::builder()\n+            .border_style(BorderStyle::Round)\n+            .border_color(BorderColor::Red)\n+            .margin(1)\n+            .build();\n+        bb.display(msg);\n+    }\n }\n \n-pub fn deprecation_warning(msg: &str) {\n-    let bb = Billboard::builder()\n-        .border_style(BorderStyle::Round)\n-        .border_color(BorderColor::Red)\n-        .margin(1)\n-        .build();\n-    bb.display(msg);\n+pub struct StdErr;\n+\n+impl Message for StdErr {\n+    fn message(msg: &str) {\n+        eprintln!(\"{}\", msg);\n+    }\n+\n+    fn billboard(_msg: &str) {\n+        panic!(\"Can't display billboard to stderr.\")\n+    }\n+\n+    fn deprecation_warning(_msg: &str) {\n+        panic!(\"Can't display billboard warning to stderr.\")\n+    }\n }\ndiff --git a/src/watch/mod.rs b/src/watch/mod.rs\n--- a/src/watch/mod.rs\n+++ b/src/watch/mod.rs\n@@ -5,7 +5,7 @@ pub use watcher::wait_for_changes;\n \n use crate::build::command;\n use crate::settings::toml::{Target, TargetType};\n-use crate::terminal::message;\n+use crate::terminal::message::{Message, StdOut};\n use crate::wranglerjs;\n use crate::{commands, install};\n \ndiff --git a/src/watch/mod.rs b/src/watch/mod.rs\n--- a/src/watch/mod.rs\n+++ b/src/watch/mod.rs\n@@ -37,7 +37,7 @@ pub fn watch_and_build(\n                 watcher\n                     .watch(JAVASCRIPT_PATH, RecursiveMode::Recursive)\n                     .unwrap();\n-                message::info(&format!(\"watching {:?}\", &JAVASCRIPT_PATH));\n+                StdOut::info(&format!(\"watching {:?}\", &JAVASCRIPT_PATH));\n \n                 loop {\n                     match wait_for_changes(&watcher_rx, COOLDOWN_PERIOD) {\ndiff --git a/src/watch/mod.rs b/src/watch/mod.rs\n--- a/src/watch/mod.rs\n+++ b/src/watch/mod.rs\n@@ -48,7 +48,7 @@ pub fn watch_and_build(\n                         }\n                         Err(e) => {\n                             log::debug!(\"{:?}\", e);\n-                            message::user_error(\"Something went wrong while watching.\")\n+                            StdOut::user_error(\"Something went wrong while watching.\")\n                         }\n                     }\n                 }\ndiff --git a/src/watch/mod.rs b/src/watch/mod.rs\n--- a/src/watch/mod.rs\n+++ b/src/watch/mod.rs\n@@ -83,7 +83,7 @@ pub fn watch_and_build(\n                         .watch(entry.path(), RecursiveMode::Recursive)\n                         .unwrap();\n                 }\n-                message::info(&format!(\"watching {:?}\", &RUST_PATH));\n+                StdOut::info(&format!(\"watching {:?}\", &RUST_PATH));\n \n                 loop {\n                     match wait_for_changes(&watcher_rx, COOLDOWN_PERIOD) {\ndiff --git a/src/watch/mod.rs b/src/watch/mod.rs\n--- a/src/watch/mod.rs\n+++ b/src/watch/mod.rs\n@@ -96,7 +96,7 @@ pub fn watch_and_build(\n                                 }\n                             }\n                         }\n-                        Err(_) => message::user_error(\"Something went wrong while watching.\"),\n+                        Err(_) => StdOut::user_error(\"Something went wrong while watching.\"),\n                     }\n                 }\n             });\ndiff --git a/src/watch/watcher.rs b/src/watch/watcher.rs\n--- a/src/watch/watcher.rs\n+++ b/src/watch/watcher.rs\n@@ -5,7 +5,7 @@ use std::time::Duration;\n \n use failure::{format_err, Error};\n \n-use crate::terminal::message;\n+use crate::terminal::message::{Message, StdOut};\n use log::info;\n \n // Add cooldown for all types of events to watching logic\ndiff --git a/src/watch/watcher.rs b/src/watch/watcher.rs\n--- a/src/watch/watcher.rs\n+++ b/src/watch/watcher.rs\n@@ -17,7 +17,7 @@ pub fn wait_for_changes(\n         let event = rx.recv()?;\n         match get_changed_path_from_event(event) {\n             Ok(Some(path)) => {\n-                message::working(\"Detected changes...\");\n+                StdOut::working(\"Detected changes...\");\n                 // wait for cooldown\n                 while rx.recv_timeout(cooldown).is_ok() {}\n                 return Ok(path);\ndiff --git a/src/watch/watcher.rs b/src/watch/watcher.rs\n--- a/src/watch/watcher.rs\n+++ b/src/watch/watcher.rs\n@@ -26,7 +26,7 @@ pub fn wait_for_changes(\n                 continue; // was an event type we don't care about, continue\n             }\n             Err(error) => {\n-                message::user_error(&format!(\"WatchError {:?}\", error));\n+                StdOut::user_error(&format!(\"WatchError {:?}\", error));\n                 continue;\n             }\n         };\ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -23,7 +23,7 @@ use semver::Version;\n \n use crate::install;\n use crate::settings::toml::Target;\n-use crate::terminal::message;\n+use crate::terminal::message::{Message, StdOut};\n use crate::upload::package::Package;\n use crate::watch::{wait_for_changes, COOLDOWN_PERIOD};\n \ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -94,7 +94,7 @@ pub fn run_build_and_watch(target: &Target, tx: Option<Sender<()>>) -> Result<()\n                 Ok(_) => {\n                     if is_first {\n                         is_first = false;\n-                        message::info(\"Ignoring stale first change\");\n+                        StdOut::info(\"Ignoring stale first change\");\n                         // skip the first change event\n                         // so we don't do a refresh immediately\n                         continue;\ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -111,7 +111,7 @@ pub fn run_build_and_watch(target: &Target, tx: Option<Sender<()>>) -> Result<()\n                         }\n                     }\n                 }\n-                Err(_) => message::user_error(\"Something went wrong while watching.\"),\n+                Err(_) => StdOut::user_error(\"Something went wrong while watching.\"),\n             }\n         }\n     });\ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -125,7 +125,7 @@ fn write_wranglerjs_output(\n     custom_webpack: bool,\n ) -> Result<(), failure::Error> {\n     if output.has_errors() {\n-        message::user_error(output.get_errors().as_str());\n+        StdOut::user_error(output.get_errors().as_str());\n         if custom_webpack {\n             failure::bail!(\n             \"webpack returned an error. Try configuring `entry` in your webpack config relative to the current working directory, or setting `context = __dirname` in your webpack config.\"\ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -144,7 +144,7 @@ fn write_wranglerjs_output(\n         output.project_size()\n     );\n \n-    message::success(&msg);\n+    StdOut::success(&msg);\n     Ok(())\n }\n \ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -186,7 +186,7 @@ fn setup_build(target: &Target) -> Result<(Command, PathBuf, Bundle), failure::E\n         None => {\n             let config_path = PathBuf::from(\"webpack.config.js\".to_string());\n             if config_path.exists() {\n-                message::warn(\"If you would like to use your own custom webpack configuration, you will need to add this to your configuration file:\\nwebpack_config = \\\"webpack.config.js\\\"\");\n+                StdOut::warn(\"If you would like to use your own custom webpack configuration, you will need to add this to your configuration file:\\nwebpack_config = \\\"webpack.config.js\\\"\");\n             }\n             None\n         }\n",
        "test_patch": "diff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -185,14 +186,14 @@ fn unauthenticated_upload(target: &Target) -> Result<Preview, failure::Error> {\n     // so we omit them and provide the user with a little guidance. We don't error out, though,\n     // because there are valid workarounds for this for testing purposes.\n     if !target.kv_namespaces.is_empty() {\n-        message::warn(\n+        StdOut::warn(\n             \"KV Namespaces are not supported in preview without setting API credentials and account_id\",\n         );\n \n         target.kv_namespaces = Vec::new();\n     }\n     if target.site.is_some() {\n-        message::warn(\n+        StdOut::warn(\n             \"Sites are not supported in preview without setting API credentials and account_id\",\n         );\n         target.site = None;\n",
        "problem_statement": "send messages to stderr instead of stdout\nmost of wrangler's output is for user interaction; when it gets mixed in with structured output like json that wants to be piped to another command it gets messy, like in the below comment. We should update our message crate to send messages to stderr, and use a new crate for stdout.\r\n\r\n> ...when I *want* to see the junk, I often want to pipe it to something else. This doesn't work that well currently though:\r\n```\r\n$ wrangler preview | xxd | head\r\n00000000: e2ac 87ef b88f 2049 6e73 7461 6c6c 696e  ...... Installin\r\n00000010: 6720 7761 736d 2d70 6163 6b2e 2e2e 0ae2  g wasm-pack.....\r\n00000020: ac87 efb8 8f20 496e 7374 616c 6c69 6e67  ..... Installing\r\n00000030: 2077 7261 6e67 6c65 726a 732e 2e2e 0ae2   wranglerjs.....\r\n00000040: 9ca8 2020 2042 7569 6c74 2073 7563 6365  ..   Built succe\r\n00000050: 7373 6675 6c6c 792e 0af0 9f91 b7e2 808d  ssfully.........\r\n00000060: e299 80ef b88f 2047 4554 2068 7474 7073  ...... GET https\r\n00000070: 3a2f 2f30 3030 3030 3030 3030 3030 3030  ://0000000000000\r\n00000080: 3030 3030 3030 3030 3030 3030 3030 3030  0000000000000000\r\n00000090: 3030 302e 636c 6f75 6466 6c61 7265 776f  000.cloudflarewo\r\n000000a0: 726b 6572 732e 636f 6d0a f09f 91b7 e280  rkers.com.......\r\n000000b0: 8de2 9980 efb8 8f20 596f 7572 2077 6f72  ....... Your wor\r\n000000c0: 6b65 7220 7265 7370 6f6e 6465 6420 7769  ker responded wi\r\n000000d0: 7468 3a20 efbf bd01 0102 001c 001c 0000  th: ............\r\n```\r\n\r\n> I *think* my actual output starts after the 0x20, but I'm not sure \ud83e\udd37\u200d\u2642\r\n\r\n_Originally posted by @pwfff in https://github.com/cloudflare/wrangler/issues/218#issuecomment-501394762_\n",
        "hints_text": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n",
        "created_at": "2020-08-24T17:25:34Z",
        "version": "1.11"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1447,
        "instance_id": "cloudflare__wrangler-legacy-1447",
        "issue_numbers": [
            "1138"
        ],
        "base_commit": "b87f31e6efcd841001cb1dd2f34585db4e709148",
        "patch": "diff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -189,6 +189,13 @@ fn unauthenticated_upload(target: &Target) -> Result<Preview, failure::Error> {\n         );\n         target.kv_namespaces = Vec::new();\n     }\n+    if target.site.is_some() {\n+        message::warn(\n+            \"Sites are not supported in preview without setting API credentials and account_id\",\n+        );\n+        target.site = None;\n+    }\n+\n     let script_upload_form = upload::form::build(&target, None)?;\n     let client = http::client();\n     let res = client\n",
        "test_patch": "diff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -180,7 +180,7 @@ fn unauthenticated_upload(target: &Target) -> Result<Preview, failure::Error> {\n     log::info!(\"address: {}\", create_address);\n \n     let mut target = target.clone();\n-    // KV namespaces are not supported by the preview service unless you authenticate\n+    // KV namespaces and sites are not supported by the preview service unless you authenticate\n     // so we omit them and provide the user with a little guidance. We don't error out, though,\n     // because there are valid workarounds for this for testing purposes.\n     if !target.kv_namespaces.is_empty() {\n",
        "problem_statement": "Prevent preview/dev for unauthenticated workers sites\nWe currently prevent `wrangler preview` if there are namespaces - let's extend that to if there are sites\n",
        "hints_text": "What do you think about this change as a way to handle?\r\n\r\nCurrent:\r\n\r\nhttps://github.com/cloudflare/wrangler/blob/9ce660f1d2a75e0e696a378449524a3a516845c2/src/preview/upload.rs#L177\r\n\r\nProposed:\r\n\r\n```rust\r\n...\r\n\r\nfn unauthenticated_upload(target: &Target) -> Result<Preview, failure::Error> {\r\n    let create_address = \"https://cloudflareworkers.com/script\";\r\n    log::info!(\"address: {}\", create_address);\r\n\r\n    // KV namespaces and Sites are not supported by the preview service unless you authenticate\r\n    // so we omit them and provide the user with a little guidance. We don't error out, though,\r\n    // because there are valid workarounds for this for testing purposes.\r\n    let script_upload_form = if target.kv_namespaces.is_some() {\r\n        message::warn(\r\n            \"KV Namespaces are not supported in preview without setting API credentials and account_id\",\r\n        );\r\n        let mut target = target.clone();\r\n        target.kv_namespaces = None;\r\n        upload::form::build(&target, None)?\r\n    }\r\n    // --- Check for and handle presence of a Site\r\n    else if target.site.is_some() {\r\n        message::warn(\r\n            \"Sites are not supported in preview without setting API credentials and account_id\",\r\n        );\r\n        let mut target = target.clone();\r\n        target.site = None;\r\n        upload::form::build(&target, None)?\r\n    }\r\n    // ---\r\n    else {\r\n        upload::form::build(&target, None)?\r\n    };\r\n    let client = http::client();\r\n    let res = client\r\n        .post(create_address)\r\n        .multipart(script_upload_form)\r\n        .send()?\r\n        .error_for_status()?;\r\n\r\n    let text = &res.text()?;\r\n    log::info!(\"Response from preview: {:#?}\", text);\r\n\r\n    let preview: Preview =\r\n        serde_json::from_str(text).expect(\"could not create a script on cloudflareworkers.com\");\r\n\r\n    Ok(preview)\r\n}\r\n\r\n...\r\n```\nseems good to me @bradyjoslin \ud83d\ude04 \nHey @bradyjoslin are you planning on making a PR with that change? I can do it if you would like\nHi @jspspike - please feel free to run with the PR.  Thanks for checking!",
        "created_at": "2020-07-13T21:21:15Z",
        "version": "1.10"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1413,
        "instance_id": "cloudflare__wrangler-legacy-1413",
        "issue_numbers": [
            "1412"
        ],
        "base_commit": "9beee5162386c1fb116a496236e6c2a1443e131f",
        "patch": "diff --git a/src/commands/dev/gcs/headers.rs b/src/commands/dev/gcs/headers.rs\n--- a/src/commands/dev/gcs/headers.rs\n+++ b/src/commands/dev/gcs/headers.rs\n@@ -60,7 +60,7 @@ fn strip_response_headers_prefix(parts: &mut ResponseParts) -> Result<(), failur\n         if name.starts_with(HEADER_PREFIX) {\n             let header_name = &name[HEADER_PREFIX.len()..];\n             let header_name = HeaderName::from_bytes(header_name.as_bytes())?;\n-            headers.insert(header_name, value.clone());\n+            headers.append(header_name, value.clone());\n         }\n     }\n     parts.headers = headers;\n",
        "test_patch": "diff --git a/src/commands/dev/gcs/headers.rs b/src/commands/dev/gcs/headers.rs\n--- a/src/commands/dev/gcs/headers.rs\n+++ b/src/commands/dev/gcs/headers.rs\n@@ -81,3 +81,29 @@ fn set_response_status(parts: &mut ResponseParts) -> Result<(), failure::Error>\n     parts.status = StatusCode::from_str(status_vec[0])?;\n     Ok(())\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use hyper::Response;\n+\n+    #[test]\n+    fn headers_are_appended() {\n+        let first_cookie = \"chocolate chip\".to_string();\n+        let second_cookie = \"peanut butter\".to_string();\n+        let response = Response::builder()\n+            .header(\"cf-ew-raw-Set-Cookie\", &first_cookie)\n+            .header(\"cf-ew-raw-Set-Cookie\", &second_cookie)\n+            .body(())\n+            .unwrap();\n+        let (mut parts, body) = response.into_parts();\n+        strip_response_headers_prefix(&mut parts).unwrap();\n+        let response = Response::from_parts(parts, body);\n+        let cookie_jar = response.headers().get_all(\"Set-Cookie\");\n+\n+        let mut iter = cookie_jar.iter();\n+        assert_eq!(&first_cookie, iter.next().unwrap());\n+        assert_eq!(&second_cookie, iter.next().unwrap());\n+        assert!(iter.next().is_none());\n+    }\n+}\n",
        "problem_statement": "[dev] handle multiple value headers\nI'm unable to get `wrangler dev` to return multiple `Set-Cookie` headers in a worker response. I've tried in both of the following ways: \r\n\r\n_explicitly appending them_\r\n```js\r\n// not working, only last gets sent (`cookie2`)\r\n\r\nresp.headers.append('Set-Cookie', 'cookie1=true')\r\nresp.headers.append('Set-Cookie', 'cookie2=true')\r\n```\r\n_passing them in the options object of the response_\r\n```js\r\n// not working, only last gets sent (`cookie2`)\r\n\r\nheaders: {\r\n   'Set-Cookie': 'cookie1=true',\r\n   'Set-Cookie': 'cookie2=true'\r\n}\r\n```\r\n\r\nI've so far only been trying to get this to work using `wrangler dev`... perhaps it's a wider Workers issue/limitation? Perhaps I'm missing something obvious here?\r\n\r\n_Originally posted by @yet-another-dev in https://github.com/cloudflare/wrangler/issues/1047#issuecomment-649705103_\r\n\r\n---\r\n\r\nThe issue here is that we do not properly handle response headers that have multiple values. We iterate over them all and end up overwriting each response header with the following one, which is why @yet-another-dev only sees the last cookie header in the response\n",
        "hints_text": "",
        "created_at": "2020-06-25T17:58:09Z",
        "version": "1.10"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 760,
        "instance_id": "cloudflare__wrangler-legacy-760",
        "issue_numbers": [
            "716"
        ],
        "base_commit": "96c333ae4711adf99c1963945207122cbd7f7673",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2,7 +2,7 @@\n # It is not intended for manual editing.\n [[package]]\n name = \"adler32\"\n-version = \"1.0.3\"\n+version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -66,11 +66,11 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.37\"\n+version = \"0.3.38\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"backtrace-sys 0.1.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -97,10 +97,10 @@ name = \"binary-install\"\n version = \"0.0.3-alpha\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"curl 0.4.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl 0.4.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"is_executable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -111,7 +111,7 @@ dependencies = [\n \n [[package]]\n name = \"bitflags\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -151,7 +151,7 @@ dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-automata 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -208,7 +208,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"cfg-if\"\n-version = \"0.1.9\"\n+version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -219,7 +219,7 @@ dependencies = [\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-integer 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -230,7 +230,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -253,7 +253,7 @@ name = \"cloudabi\"\n version = \"0.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -268,8 +268,8 @@ dependencies = [\n  \"maplit 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"reqwest 0.9.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_with 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -288,7 +288,7 @@ dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rust-ini 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -336,7 +336,7 @@ dependencies = [\n  \"idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"publicsuffix 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"try_from 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -362,7 +362,7 @@ name = \"crc32fast\"\n version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -370,6 +370,14 @@ name = \"crossbeam\"\n version = \"0.2.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"crossbeam-channel\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"crossbeam-deque\"\n version = \"0.7.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -385,7 +393,7 @@ version = \"0.7.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"arrayvec 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memoffset 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -405,7 +413,7 @@ name = \"crossbeam-utils\"\n version = \"0.6.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -418,7 +426,7 @@ dependencies = [\n  \"csv-core 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ryu 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -431,21 +439,21 @@ dependencies = [\n \n [[package]]\n name = \"curl\"\n-version = \"0.4.23\"\n+version = \"0.4.24\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"curl-sys 0.4.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl-sys 0.4.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.49 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"schannel 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"schannel 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"socket2 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"curl-sys\"\n-version = \"0.4.21\"\n+version = \"0.4.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.45 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -502,10 +510,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"encoding_rs\"\n-version = \"0.8.19\"\n+version = \"0.8.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -525,7 +533,7 @@ name = \"error-chain\"\n version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -536,7 +544,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -553,7 +561,7 @@ name = \"failure\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -578,7 +586,7 @@ name = \"filetime\"\n version = \"0.2.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -586,12 +594,12 @@ dependencies = [\n \n [[package]]\n name = \"flate2\"\n-version = \"1.0.11\"\n+version = \"1.0.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"miniz-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miniz_oxide 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -632,7 +640,7 @@ name = \"fsevent\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fsevent-sys 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -654,7 +662,7 @@ name = \"fuchsia-zircon\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -690,11 +698,23 @@ name = \"getrandom\"\n version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"wasi 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"globset\"\n+version = \"0.4.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"aho-corasick 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bstr 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"h2\"\n version = \"0.1.26\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -773,9 +793,9 @@ dependencies = [\n  \"tokio-buf 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-executor 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-reactor 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio-reactor 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-tcp 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-threadpool 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio-threadpool 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-timer 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"want 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -812,6 +832,23 @@ dependencies = [\n  \"unicode-normalization 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"ignore\"\n+version = \"0.4.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"same-file 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 2.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"indexmap\"\n version = \"1.2.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -822,7 +859,7 @@ name = \"inotify\"\n version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"inotify-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -891,7 +928,7 @@ name = \"libflate\"\n version = \"0.1.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"adler32 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"adler32 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rle-decode-fast 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -922,15 +959,6 @@ name = \"linked-hash-map\"\n version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"lock_api\"\n-version = \"0.1.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"owning_ref 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"lock_api\"\n version = \"0.3.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -952,7 +980,7 @@ name = \"log\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -995,21 +1023,12 @@ dependencies = [\n  \"unicase 2.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"miniz-sys\"\n-version = \"0.1.12\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"cc 1.0.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"miniz_oxide\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"adler32 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"adler32 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1062,7 +1081,7 @@ dependencies = [\n  \"openssl 0.10.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.49 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"schannel 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"schannel 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"security-framework 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"security-framework-sys 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1073,7 +1092,7 @@ name = \"net2\"\n version = \"0.2.33\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1097,7 +1116,7 @@ name = \"notify\"\n version = \"4.0.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fsevent 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fsevent-sys 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1158,8 +1177,8 @@ name = \"openssl\"\n version = \"0.10.24\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1192,23 +1211,6 @@ dependencies = [\n  \"vcpkg 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"owning_ref\"\n-version = \"0.4.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"parking_lot\"\n-version = \"0.7.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"parking_lot\"\n version = \"0.9.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1219,24 +1221,12 @@ dependencies = [\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"parking_lot_core\"\n-version = \"0.4.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"parking_lot_core\"\n version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1316,7 +1306,7 @@ dependencies = [\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.3\"\n+version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1352,7 +1342,7 @@ name = \"quote\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1375,7 +1365,7 @@ dependencies = [\n \n [[package]]\n name = \"rand\"\n-version = \"0.7.1\"\n+version = \"0.7.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"getrandom 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1553,8 +1543,8 @@ dependencies = [\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cookie 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cookie_store 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"encoding_rs 0.8.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"encoding_rs 0.8.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"http 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hyper 0.12.35 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1563,14 +1553,14 @@ dependencies = [\n  \"mime 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mime_guess 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_urlencoded 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-executor 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-threadpool 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio-threadpool 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-timer 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1625,18 +1615,13 @@ dependencies = [\n \n [[package]]\n name = \"schannel\"\n-version = \"0.1.15\"\n+version = \"0.1.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"scopeguard\"\n-version = \"0.3.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"scopeguard\"\n version = \"1.0.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1681,10 +1666,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.100\"\n+version = \"1.0.101\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde_derive 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1701,10 +1686,10 @@ dependencies = [\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.100\"\n+version = \"1.0.101\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1716,7 +1701,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ryu 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1727,7 +1712,7 @@ dependencies = [\n  \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1745,7 +1730,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1754,7 +1739,7 @@ name = \"serde_with\"\n version = \"1.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_with_macros 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1775,7 +1760,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1876,8 +1861,8 @@ dependencies = [\n  \"chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libflate 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slog-async 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slog-kvfilter 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1897,17 +1882,12 @@ name = \"socket2\"\n version = \"0.3.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"stable_deref_trait\"\n-version = \"1.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"string\"\n version = \"0.2.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1936,7 +1916,7 @@ name = \"syn\"\n version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1973,9 +1953,9 @@ name = \"tempfile\"\n version = \"3.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2050,9 +2030,9 @@ dependencies = [\n  \"tokio-current-thread 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-executor 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-reactor 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio-reactor 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-tcp 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-threadpool 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio-threadpool 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-timer 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2096,7 +2076,7 @@ dependencies = [\n \n [[package]]\n name = \"tokio-reactor\"\n-version = \"0.1.9\"\n+version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2105,7 +2085,7 @@ dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-executor 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2131,21 +2111,21 @@ dependencies = [\n  \"iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-reactor 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio-reactor 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"tokio-threadpool\"\n-version = \"0.1.15\"\n+version = \"0.1.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-deque 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-queue 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-executor 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2166,7 +2146,7 @@ name = \"toml\"\n version = \"0.4.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2174,7 +2154,7 @@ name = \"toml\"\n version = \"0.5.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2209,7 +2189,7 @@ name = \"try_from\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2404,10 +2384,11 @@ dependencies = [\n  \"env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"exitfailure 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"http 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ignore 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"notify 4.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2418,14 +2399,13 @@ dependencies = [\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"reqwest 0.9.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"sha2 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"text_io 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"walkdir 2.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"which 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ws 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2479,13 +2459,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bzip2 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"podio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [metadata]\n-\"checksum adler32 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e522997b529f05601e05166c07ed17789691f562762c7f3b987263d2dedee5c\"\n+\"checksum adler32 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d2e7343e7fc9de883d1b0341e0b13970f764c14101234857d2ddafa1cb1cac2\"\n \"checksum aho-corasick 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"58fb5e95d83b38284460a5fda7d6470aa0b8844d283a0b614b8535e880800d2d\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n \"checksum arc-swap 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc4662175ead9cd84451d5c35070517777949a2ed84551764129cedb88384841\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2510,7 +2490,7 @@ dependencies = [\n \"checksum bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6584aa36f5ad4c9247f5323b0a42f37802b37a836f0ad87084d7a33961abe25f\"\n \"checksum c2-chacha 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7d64d04786e0f528460fc884753cf8dddcc466be308f6026f8e355c41a0e4101\"\n \"checksum cc 1.0.45 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fc9a35e1f4290eb9e5fc54ba6cf40671ed2a2514c3eeb2b2a908dda2ea5a1be\"\n-\"checksum cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b486ce3ccf7ffd79fdeb678eac06a9e6c09fc88d33836340becb8fffe87c5e33\"\n+\"checksum cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \"checksum chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8493056968583b0193c1bb04d6f7684586f3726992d6c573261941a895dbd68\"\n \"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n \"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2525,14 +2505,15 @@ dependencies = [\n \"checksum core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b\"\n \"checksum crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n \"checksum crossbeam 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd66663db5a988098a89599d4857919b3acf7f61402e61365acfd3919857b9be\"\n+\"checksum crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8ec7fcd21571dc78f96cc96243cab8d8f035247c3efd16c687be154c3fa9efa\"\n \"checksum crossbeam-deque 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b18cd2e169ad86297e6bc0ad9aa679aee9daa4f19e8163860faf7c164e4f5a71\"\n \"checksum crossbeam-epoch 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fedcd6772e37f3da2a9af9bf12ebe046c0dfe657992377b4df982a2b54cd37a9\"\n \"checksum crossbeam-queue 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c979cd6cfe72335896575c6b5688da489e420d36a27a0b9eb0c73db574b4a4b\"\n \"checksum crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"04973fa96e96579258a5091af6003abde64af786b860f18622b82e026cca60e6\"\n \"checksum csv 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"37519ccdfd73a75821cac9319d4fce15a81b9fcf75f951df5b9988aa3a0af87d\"\n \"checksum csv-core 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9b5cadb6b25c77aeff80ba701712494213f4a8418fcda2ee11b6560c3ad0bf4c\"\n-\"checksum curl 0.4.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6458247e474561f731d5c13cb5c83c91f752eee770c431d50d22cb07d006e91\"\n-\"checksum curl-sys 0.4.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"520594da9914c1dc77ce3be450fc1c74fde67c82966d80f8e93c6d460eb0e9ae\"\n+\"checksum curl 0.4.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d08ad3cb89d076a36b0ce5749eec2c9964f70c0c58480ab6b75a91ec4fc206d8\"\n+\"checksum curl-sys 0.4.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9a9a4e417722876332136a00cacf92c2ceb331fab4b52b6a1ad16c6cd79255\"\n \"checksum data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f4f47ca1860a761136924ddd2422ba77b2ea54fe8cc75b9040804a0d9d32ad97\"\n \"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \"checksum digest 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2540,7 +2521,7 @@ dependencies = [\n \"checksum dtoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea57b42383d091c85abcc2706240b94ab2a8fa1fc81c10ff23c4de06e2a90b5e\"\n \"checksum either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb1f6b1ce1c140482ea30ddd3335fc0024ac7ee112895426e0a629a6c20adfe3\"\n \"checksum encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n-\"checksum encoding_rs 0.8.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"79906e1ad1f7f8bc48864fcc6ffd58336fb5992e627bf61928099cb25fdf4314\"\n+\"checksum encoding_rs 0.8.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87240518927716f79692c2ed85bfe6e98196d18c6401ec75355760233a7e12e9\"\n \"checksum env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\n \"checksum error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ab49e9dcb602294bc42f9a7dfc9bc6e936fca4418ea300dbfb84fe16de0b7d9\"\n \"checksum escargot 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ceb9adbf9874d5d028b5e4c5739d22b71988252b25c9c98fe7cf9738bee84597\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2549,7 +2530,7 @@ dependencies = [\n \"checksum failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea1063915fd7ef4309e222a5a07cf9c319fb9c7836b1f89b85458672dbb127e1\"\n \"checksum fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n \"checksum filetime 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6bd7380b54ced79dda72ecc35cc4fbbd1da6bba54afaa37e96fd1c2a308cd469\"\n-\"checksum flate2 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2adaffba6388640136149e18ed080b77a78611c1e1d6de75aedcdf78df5d4682\"\n+\"checksum flate2 1.0.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad3c5233c9a940c8719031b423d7e6c16af66e031cb0420b0896f5245bf181d3\"\n \"checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \"checksum foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\n \"checksum foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2564,6 +2545,7 @@ dependencies = [\n \"checksum futures-cpupool 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab90cde24b3319636588d0c35fe03b1333857621051837ed769faefb4c2162e4\"\n \"checksum generic-array 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec\"\n \"checksum getrandom 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"473a1265acc8ff1e808cd0a1af8cee3c2ee5200916058a2ca113c29f2d903571\"\n+\"checksum globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925aa2cac82d8834e2b2a4415b6f6879757fb5c0928fc445ae76461a12eed8f2\"\n \"checksum h2 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a5b34c246847f938a410a03c5458c7fee2274436675e76d8b903c08efc29c462\"\n \"checksum hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n \"checksum http 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"372bcb56f939e449117fb0869c2e8fd8753a8223d92a172c6e808cf123a5b6e4\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2574,6 +2556,7 @@ dependencies = [\n \"checksum hyper-tls 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a800d6aa50af4b5850b2b0f659625ce9504df908e9733b635720483be26174f\"\n \"checksum idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e\"\n \"checksum idna 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\n+\"checksum ignore 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0ec16832258409d571aaef8273f3c3cc5b060d784e159d1a0f3b0017308f84a7\"\n \"checksum indexmap 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a61202fbe46c4a951e9404a720a0180bcf3212c750d735cb5c4ba4dc551299f3\"\n \"checksum inotify 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40b54539f3910d6f84fbf9a643efd6e3aa6e4f001426c0329576128255994718\"\n \"checksum inotify-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e74a1aa87c59aeff6ef2cc2fa62d41bc43f54952f55652656b18a02fd5e356c0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2589,7 +2572,6 @@ dependencies = [\n \"checksum libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2eb5e43362e38e2bca2fd5f5134c4d4564a23a5c28e9b95411652021a8675ebe\"\n \"checksum linked-hash-map 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d262045c5b87c0861b3f004610afd0e2c851e2908d08b6c870cbb9d5f494ecd\"\n \"checksum linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\n-\"checksum lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"62ebf1391f6acad60e5c8b43706dde4582df75c06698ab44511d15016bc2442c\"\n \"checksum lock_api 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8912e782533a93a167888781b836336a6ca5da6175c05944c86cf28c31104dc\"\n \"checksum log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n \"checksum log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2599,7 +2581,6 @@ dependencies = [\n \"checksum memoffset 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ce6075db033bbbb7ee5a0bbd3a3186bbae616f57fb001c485c7ff77955f8177f\"\n \"checksum mime 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd1d63acd1b78403cc0c325605908475dd9b9a3acbf65ed8bcab97e27014afcf\"\n \"checksum mime_guess 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1a0ed03949aef72dbdf3116a383d7b38b4768e6f960528cd6a6044aa9ed68599\"\n-\"checksum miniz-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e9e3ae51cea1576ceba0dde3d484d30e6e5b86dee0b2d412fe3a16a15c98202\"\n \"checksum miniz_oxide 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7108aff85b876d06f22503dcce091e29f76733b2bfdd91eebce81f5e68203a10\"\n \"checksum mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"83f51996a3ed004ef184e16818edc51fadffe8e7ca68be67f9dee67d84d0ff23\"\n \"checksum mio-extras 2.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46e73a04c2fa6250b8d802134d56d554a9ec2922bf977777c805ea5def61ce40\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2619,10 +2600,7 @@ dependencies = [\n \"checksum openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\n \"checksum openssl-src 111.6.0+1.1.1d (registry+https://github.com/rust-lang/crates.io-index)\" = \"b9c2da1de8a7a3f860919c01540b03a6db16de042405a8a07a5e9d0b4b825d9c\"\n \"checksum openssl-sys 0.9.49 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f4fad9e54bd23bd4cbbe48fdc08a1b8091707ac869ef8508edea2fec77dcc884\"\n-\"checksum owning_ref 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49a4b8ea2179e6a2e27411d3bca09ca6dd630821cf6894c6c7c8467a8ee7ef13\"\n-\"checksum parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab41b4aed082705d1056416ae4468b6ea99d52599ecf3169b00088d43113e337\"\n \"checksum parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f842b1982eb6c2fe34036a4fbfb06dd185a3f5c8edfaacdf7d1ea10b07de6252\"\n-\"checksum parking_lot_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94c8c7923936b28d546dfd14d4472eaf34c99b14e1c973a32b3e6d4eb04298c9\"\n \"checksum parking_lot_core 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b876b1b9e7ac6e1a74a6da34d25c42e17e8862aa409cbbbdcfc8d86c6f3bc62b\"\n \"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \"checksum percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2634,13 +2612,13 @@ dependencies = [\n \"checksum predicates-tree 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8e63c4859013b38a76eca2414c64911fba30def9e3202ac461a2d22831220124\"\n \"checksum prettytable-rs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0fd04b170004fa2daccf418a7f8253aaf033c27760b5f225889024cf66d7ac2e\"\n \"checksum proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf3d2011ab5c909338f7887f4fc896d35932e29146c12c8d01da6b22a80ba759\"\n-\"checksum proc-macro2 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e98a83a9f9b331f54b924e68a66acb1bb35cb01fb0a23645139967abefb697e8\"\n+\"checksum proc-macro2 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afdc77cc74ec70ed262262942ebb7dac3d479e9e5cfa2da1841c0806f6cdabcc\"\n \"checksum publicsuffix 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9bf259a81de2b2eb9850ec990ec78e6a25319715584fd7652b9b26f96fcb1510\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ce23b6b870e8f94f81fb0a363d65d86675884b34a09043c81e5562f11c1f8e1\"\n \"checksum quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n \"checksum rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n-\"checksum rand 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59cea0d944b32347a1863e95942fd6ebdb486afb4f038119494f2860380c1d51\"\n+\"checksum rand 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ae1b169243eaf61759b8475a998f0a385e42042370f3a7dbaf35246eacc8412\"\n \"checksum rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\"\n \"checksum rand_chacha 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03a2a90da8c7523f554344f921aa97283eadf6ac484a6d2a7d0212fa7f8d6853\"\n \"checksum rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2699,7 +2676,6 @@ dependencies = [\n \"checksum sloggers 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1ea94386f073b0951c68678f0043e3646855f85e9deffefbb68784e6486cb35f\"\n \"checksum smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab606a9c5e214920bb66c458cd7be8ef094f813f20fe77a54cc7dbfff220d4b7\"\n \"checksum socket2 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8b74de517221a2cb01a53349cf54182acdc31a074727d3079068448c0676d85\"\n-\"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n \"checksum string 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d24114bfcceb867ca7f71a0d3fe45d45619ec47a6fbfa98cb14e14250bfa5d6d\"\n \"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n \"checksum syn 0.15.44 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ca4b3b69a77cbe1ffc9e198781b7acb0c7365a883670e8f1c1bc66fba79a5c5\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -40,12 +40,12 @@ prettytable-rs = \"0.8.0\"\n notify = \"4.0.12\"\n ws = \"0.9.0\"\n url = \"2.1.0\"\n-walkdir = \"2.2.9\"\n percent-encoding = \"1.0.1\"\n http = \"0.1.1\"\n regex = \"1\"\n sha2 = \"0.8.0\"\n data-encoding = \"2.1.2\"\n+ignore = \"0.4.10\"\n \n [dev-dependencies]\n assert_cmd = \"0.11.1\"\ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -24,7 +24,7 @@ pub fn generate(\n     } else {\n         None\n     };\n-    Manifest::generate(name.to_string(), target_type, config_path, generated_site)?;\n+    Manifest::generate(name.to_string(), target_type, &config_path, generated_site)?;\n \n     Ok(())\n }\ndiff --git a/src/commands/init.rs b/src/commands/init.rs\n--- a/src/commands/init.rs\n+++ b/src/commands/init.rs\n@@ -20,8 +20,12 @@ pub fn init(\n     let target_type = target_type.unwrap_or_default();\n     let config_path = PathBuf::from(\"./\");\n     let initialized_site = if site { Some(Site::default()) } else { None };\n-    let manifest =\n-        Manifest::generate(name.to_string(), target_type, config_path, initialized_site)?;\n+    let manifest = Manifest::generate(\n+        name.to_string(),\n+        target_type,\n+        &config_path,\n+        initialized_site,\n+    )?;\n     message::success(\"Succesfully created a `wrangler.toml`\");\n \n     if site {\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -15,22 +15,24 @@ use std::path::Path;\n \n use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n \n-use walkdir::{DirEntry, WalkDir};\n+use ignore::overrides::{Override, OverrideBuilder};\n+use ignore::{Walk, WalkBuilder};\n \n+use crate::settings::target::Target;\n use crate::terminal::message;\n \n // Returns the hashed key and value pair for all files in a directory.\n pub fn directory_keys_values(\n+    target: &Target,\n     directory: &Path,\n     verbose: bool,\n ) -> Result<(Vec<KeyValuePair>, AssetManifest), failure::Error> {\n     let mut upload_vec: Vec<KeyValuePair> = Vec::new();\n     let mut asset_manifest: AssetManifest = AssetManifest::new();\n \n-    for entry in WalkDir::new(directory)\n-        .into_iter()\n-        .filter_entry(|e| !is_ignored(e))\n-    {\n+    let dir_walker = get_dir_iterator(target, directory)?;\n+\n+    for entry in dir_walker {\n         let entry = entry.unwrap();\n         let path = entry.path();\n         if path.is_file() {\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -60,9 +62,12 @@ pub fn directory_keys_values(\n }\n \n // Returns only the hashed keys for a directory's files.\n-fn directory_keys_only(directory: &Path) -> Result<Vec<String>, failure::Error> {\n+fn directory_keys_only(target: &Target, directory: &Path) -> Result<Vec<String>, failure::Error> {\n     let mut upload_vec: Vec<String> = Vec::new();\n-    for entry in WalkDir::new(directory) {\n+\n+    let dir_walker = get_dir_iterator(target, directory)?;\n+\n+    for entry in dir_walker {\n         let entry = entry.unwrap();\n         let path = entry.path();\n         if path.is_file() {\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -79,34 +84,39 @@ fn directory_keys_only(directory: &Path) -> Result<Vec<String>, failure::Error>\n     Ok(upload_vec)\n }\n \n-// todo(gabbi): Replace all the logic below with a proper .wignore implementation\n-// when possible.\n-const KNOWN_UNNECESSARY_DIRS: &[&str] = &[\n-    \"node_modules\", // npm vendoring\n-];\n-const KNOWN_UNNECESSARY_FILE_PREFIXES: &[&str] = &[\n-    \".\", // hidden files\n-];\n-fn is_ignored(entry: &DirEntry) -> bool {\n-    let stem = entry.file_name().to_str().unwrap();\n-    // First, ensure that files with specified prefixes are ignored\n-    for prefix in KNOWN_UNNECESSARY_FILE_PREFIXES {\n-        if stem.starts_with(prefix) {\n-            // Just need to check prefix\n-            message::info(&format!(\"ignoring file {}\", stem));\n-            return true;\n-        }\n+fn get_dir_iterator(target: &Target, directory: &Path) -> Result<Walk, failure::Error> {\n+    let ignore = build_ignore(target, directory)?;\n+    Ok(WalkBuilder::new(directory).overrides(ignore).build())\n+}\n+\n+const REQUIRED_IGNORE_FILES: &[&str] = &[\"node_modules\"];\n+\n+fn build_ignore(target: &Target, directory: &Path) -> Result<Override, failure::Error> {\n+    let mut required_override = OverrideBuilder::new(directory);\n+    // First include files that must be ignored.\n+    for ignored in REQUIRED_IGNORE_FILES {\n+        required_override.add(&format!(\"!{}\", ignored))?;\n+        log::info!(\"Ignoring {}\", ignored);\n     }\n \n-    // Then, ensure files in ignored directories are also ignored.\n-    for dir in KNOWN_UNNECESSARY_DIRS {\n-        if stem == *dir {\n-            // Need to check for full equality here\n-            message::info(&format!(\"ignoring directory {}\", dir));\n-            return true;\n+    if let Some(site) = &target.site {\n+        // If `include` present, use it and don't touch the `exclude` field\n+        if let Some(included) = &site.include {\n+            for i in included {\n+                required_override.add(&i)?;\n+                log::info!(\"Including {}\", i);\n+            }\n+        // If `exclude` only present, ignore anything in it.\n+        } else if let Some(excluded) = &site.exclude {\n+            for e in excluded {\n+                required_override.add(&format!(\"!{}\", e))?;\n+                log::info!(\"Ignoring {}\", e);\n+            }\n         }\n     }\n-    false\n+\n+    let exclude = required_override.build()?;\n+    Ok(exclude)\n }\n \n // Courtesy of Steve Klabnik's PoC :) Used for bulk operations (write, delete)\ndiff --git a/src/commands/kv/bucket/sync.rs b/src/commands/kv/bucket/sync.rs\n--- a/src/commands/kv/bucket/sync.rs\n+++ b/src/commands/kv/bucket/sync.rs\n@@ -55,7 +55,7 @@ pub fn sync(\n     // Now delete files from Workers KV that exist in remote but no longer exist locally.\n     // Get local keys\n     let local_keys_vec: Vec<String> = match &metadata(path) {\n-        Ok(file_type) if file_type.is_dir() => directory_keys_only(path),\n+        Ok(file_type) if file_type.is_dir() => directory_keys_only(target, path),\n         Ok(_) => failure::bail!(\"{} should be a directory\", path.display()),\n         Err(e) => failure::bail!(\"{}\", e),\n     }?;\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -31,7 +31,7 @@ pub fn upload_files(\n ) -> Result<AssetManifest, failure::Error> {\n     let (mut pairs, asset_manifest): (Vec<KeyValuePair>, AssetManifest) = match &metadata(path) {\n         Ok(file_type) if file_type.is_dir() => {\n-            let (pairs, asset_manifest) = directory_keys_values(path, verbose)?;\n+            let (pairs, asset_manifest) = directory_keys_values(target, path, verbose)?;\n             Ok((pairs, asset_manifest))\n         }\n \ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -73,7 +73,7 @@ fn build_and_publish_script(\n         target.account_id, target.name,\n     );\n \n-    let client = if let Some(_) = &target.site {\n+    let client = if target.site.is_some() {\n         http::auth_client(Some(\"site\"), user)\n     } else {\n         http::auth_client(None, user)\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -22,6 +22,8 @@ pub struct Site {\n     pub bucket: String,\n     #[serde(rename = \"entry-point\")]\n     pub entry_point: Option<String>,\n+    pub include: Option<Vec<String>>,\n+    pub exclude: Option<Vec<String>>,\n }\n \n impl Site {\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -38,6 +40,8 @@ impl Default for Site {\n         Site {\n             bucket: String::new(),\n             entry_point: Some(String::from(SITE_ENTRY_POINT)),\n+            include: None,\n+            exclude: None,\n         }\n     }\n }\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -141,7 +145,7 @@ impl Manifest {\n     pub fn generate(\n         name: String,\n         target_type: TargetType,\n-        config_path: PathBuf,\n+        config_path: &PathBuf,\n         site: Option<Site>,\n     ) -> Result<Manifest, failure::Error> {\n         let manifest = Manifest {\n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2494,11 +2474,11 @@ dependencies = [\n \"checksum assert_cmd 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2dc477793bd82ec39799b6f6b3df64938532fdf2ab0d49ef817eac65856a5a1e\"\n \"checksum atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1803c647a3ec87095e7ae7acfca019e98de5ec9a7d01343f611cf3152ed71a90\"\n \"checksum autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b671c8fb71b457dd4ae18c4ba1e59aa81793daacc361d82fcd410cef0d491875\"\n-\"checksum backtrace 0.3.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5180c5a20655b14a819b652fd2378fa5f1697b6c9ddad3e695c2f9cedf6df4e2\"\n+\"checksum backtrace 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\" = \"690a62be8920ccf773ee00ef0968649b0e724cda8bd5b12286302b4ae955fdf5\"\n \"checksum backtrace-sys 0.1.31 (registry+https://github.com/rust-lang/crates.io-index)\" = \"82a830b4ef2d1124a711c71d263c5abdc710ef8e907bd508c88be475cebc422b\"\n \"checksum base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e\"\n \"checksum binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\" = \"a81dda17f2dbba8271cf61f2ea3e48e3da8aef31665731bce48818cc07863f06\"\n-\"checksum bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d155346769a6855b86399e9bc3814ab343cd3d62c7e985113d46a0ec3c281fd\"\n+\"checksum bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8a606a02debe2813760609f57a64a2ffd27d9fdf5b2f133eaca0b248dd92cdd2\"\n \"checksum blake2b_simd 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5850aeee1552f495dd0250014cf64b82b7c8879a89d83b33bbdace2cc4f63182\"\n \"checksum block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b\"\n \"checksum block-padding 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d4dc3af3ee2e12f3e5d224e5e1e3d73668abbeb69e566d361f7d5563a4fdf09\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2668,17 +2646,16 @@ dependencies = [\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n \"checksum ryu 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c92464b447c0ee8c4fb3824ecc8383b81717b9f1e74ba2e72540aef7b9f82997\"\n \"checksum same-file 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"585e8ddcedc187886a30fa705c47985c3fa88d06624095856b36ca0b82ff4421\"\n-\"checksum schannel 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f6abf258d99c3c1c5c2131d99d064e94b7b3dd5f416483057f308fea253339\"\n-\"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n+\"checksum schannel 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87f550b06b6cba9c8b8be3ee73f391990116bf527450d2556e9b9ce263b9a021\"\n \"checksum scopeguard 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b42e15e59b18a828bbf5c58ea01debb36b9b096346de35d941dcb89009f24a0d\"\n \"checksum security-framework 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eee63d0f4a9ec776eeb30e220f0bc1e092c3ad744b2a379e3993070364d3adc2\"\n \"checksum security-framework-sys 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9636f8989cbf61385ae4824b98c1aaa54c994d7d8b41f11c601ed799f0549a56\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \"checksum serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9dad3f759919b92c3068c696c15c3d17238234498bbdcc80f2c469606f948ac8\"\n-\"checksum serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f4473e8506b213730ff2061073b48fa51dcc66349219e2e7c5608f0296a1d95a\"\n+\"checksum serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9796c9b7ba2ffe7a9ce53c2287dfc48080f4b2b362fcc245a259b3a7201119dd\"\n \"checksum serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b833c5ad67d52ced5f5938b2980f32a9c1c5ef047f0b4fb3127e7a423c76153\"\n-\"checksum serde_derive 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11e410fde43e157d789fc290d26bc940778ad0fdd47836426fbac36573710dbb\"\n+\"checksum serde_derive 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b133a43a1ecd55d4086bd5b4dc6c1751c68b1bfbeba7a5040442022c7e7c02e\"\n \"checksum serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"051c49229f282f7c6f3813f8286cc1e3323e8051823fce42c7ea80fe13521704\"\n \"checksum serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35965fa1d2413717053d67c2df1f5c3e1763fbf77200ea7e767523707bd5a0af\"\n \"checksum serde_test 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"110b3dbdf8607ec493c22d5d947753282f3bae73c0f56d322af1e8c78e4c23d5\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2720,10 +2696,10 @@ dependencies = [\n \"checksum tokio-current-thread 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d16217cad7f1b840c5a97dfb3c43b0c871fef423a6e8d2118c604e843662a443\"\n \"checksum tokio-executor 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f27ee0e6db01c5f0b2973824547ce7e637b2ed79b891a9677b0de9bd532b6ac\"\n \"checksum tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5090db468dad16e1a7a54c8c67280c5e4b544f3d3e018f0b913b400261f85926\"\n-\"checksum tokio-reactor 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6af16bfac7e112bea8b0442542161bfc41cbfa4466b580bdda7d18cb88b911ce\"\n+\"checksum tokio-reactor 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c56391be9805bc80163151c0b9e5164ee64f4b0200962c346fea12773158f22d\"\n \"checksum tokio-sync 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2162248ff317e2bc713b261f242b69dbb838b85248ed20bb21df56d60ea4cae7\"\n \"checksum tokio-tcp 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d14b10654be682ac43efee27401d792507e30fd8d26389e1da3b185de2e4119\"\n-\"checksum tokio-threadpool 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90ca01319dea1e376a001e8dc192d42ebde6dd532532a5bad988ac37db365b19\"\n+\"checksum tokio-threadpool 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2bd2c6a3885302581f4401c82af70d792bb9df1700e7437b0aeb4ada94d5388c\"\n \"checksum tokio-timer 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2106812d500ed25a4f38235b9cae8f78a09edf43203e16e59c3b769a342a60e\"\n \"checksum toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"758664fc71a3a69038656bee8b6be6477d2a6c315a6b81f7081f591bffa4111f\"\n \"checksum toml 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c7aabe75941d914b72bf3e5d3932ed92ce0664d49d8432305a8b547c37227724\"\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -194,82 +204,196 @@ mod tests {\n     use regex::Regex;\n     use std::fs;\n     use std::path::{Path, PathBuf};\n-    use walkdir::WalkDir;\n+\n+    use crate::settings::target::{Site, Target, TargetType};\n+\n+    fn make_target(site: Site) -> Target {\n+        Target {\n+            account_id: \"\".to_string(),\n+            kv_namespaces: None,\n+            name: \"\".to_string(),\n+            target_type: TargetType::JavaScript,\n+            route: None,\n+            routes: None,\n+            webpack_config: None,\n+            workers_dev: true,\n+            zone_id: None,\n+            site: Some(site),\n+        }\n+    }\n \n     #[test]\n-    fn it_can_ignore_dir() {\n-        let dir_name = \"node_modules\";\n+    fn it_can_ignore_node_modules() {\n+        let target = make_target(Site {\n+            bucket: \"fake\".to_string(),\n+            entry_point: None,\n+            include: None,\n+            exclude: None,\n+        });\n+\n+        let test_dir = \"test1\";\n         // If test dir already exists, delete it.\n-        if fs::metadata(dir_name).is_ok() {\n-            fs::remove_dir_all(dir_name).unwrap();\n+        if fs::metadata(test_dir).is_ok() {\n+            fs::remove_dir_all(test_dir).unwrap();\n         }\n \n-        fs::create_dir(dir_name).unwrap();\n-        fs::File::create(format!(\"{}/ignore_me.txt\", dir_name)).unwrap();\n+        fs::create_dir_all(format!(\"{}/node_modules\", test_dir)).unwrap();\n+        let test_pathname = format!(\"{}/node_modules/ignore_me.txt\", test_dir);\n+        let test_path = PathBuf::from(&test_pathname);\n+        fs::File::create(&test_path).unwrap();\n+\n+        let files: Vec<_> = get_dir_iterator(&target, Path::new(test_dir))\n+            .unwrap()\n+            .map(|entry| entry.unwrap().path().to_owned())\n+            .collect();\n+\n+        assert!(!files.contains(&test_path));\n \n-        let mut actual_count = 0;\n-        for _ in WalkDir::new(dir_name)\n-            .into_iter()\n-            .filter_entry(|e| !is_ignored(e))\n-        {\n-            actual_count = actual_count + 1;\n+        fs::remove_dir_all(test_dir).unwrap();\n+    }\n+\n+    #[test]\n+    fn it_can_ignore_hidden() {\n+        let target = make_target(Site {\n+            bucket: \"fake\".to_string(),\n+            entry_point: None,\n+            include: None,\n+            exclude: None,\n+        });\n+\n+        let test_dir = \"test2\";\n+        // If test dir already exists, delete it.\n+        if fs::metadata(test_dir).is_ok() {\n+            fs::remove_dir_all(test_dir).unwrap();\n         }\n \n-        fs::remove_dir_all(dir_name).unwrap();\n+        fs::create_dir(test_dir).unwrap();\n+        let test_pathname = format!(\"{}/.ignore_me.txt\", test_dir);\n+        let test_path = PathBuf::from(&test_pathname);\n+        fs::File::create(&test_path).unwrap();\n \n-        // No iterations should happen above because \"node_modules\" and its contents are ignored.\n-        let expected_count = 0;\n-        assert!(actual_count == expected_count);\n+        let files: Vec<_> = get_dir_iterator(&target, Path::new(test_dir))\n+            .unwrap()\n+            .map(|entry| entry.unwrap().path().to_owned())\n+            .collect();\n+\n+        assert!(!files.contains(&test_path));\n+\n+        fs::remove_dir_all(test_dir).unwrap();\n     }\n \n     #[test]\n-    fn it_can_ignore_prefix() {\n-        let file_name = \".dotfile\";\n-        // If test file already exists, delete it.\n-        if fs::metadata(file_name).is_ok() {\n-            fs::remove_file(file_name).unwrap();\n+    fn it_can_allow_unfiltered_files() {\n+        let target = make_target(Site {\n+            bucket: \"fake\".to_string(),\n+            entry_point: None,\n+            include: None,\n+            exclude: None,\n+        });\n+\n+        let test_dir = \"test3\";\n+        // If test dir already exists, delete it.\n+        if fs::metadata(test_dir).is_ok() {\n+            fs::remove_dir_all(test_dir).unwrap();\n         }\n \n-        fs::File::create(file_name).unwrap();\n+        fs::create_dir(test_dir).unwrap();\n+        let test_pathname = format!(\"{}/notice_me.txt\", test_dir);\n+        let test_path = PathBuf::from(&test_pathname);\n+        fs::File::create(&test_path).unwrap();\n+\n+        let files: Vec<_> = get_dir_iterator(&target, Path::new(test_dir))\n+            .unwrap()\n+            .map(|entry| entry.unwrap().path().to_owned())\n+            .collect();\n \n-        let mut actual_count = 0;\n-        for _ in WalkDir::new(file_name)\n-            .into_iter()\n-            .filter_entry(|e| !is_ignored(e))\n-        {\n-            actual_count = actual_count + 1;\n+        assert!(files.contains(&test_path));\n+\n+        fs::remove_dir_all(test_dir).unwrap();\n+    }\n+\n+    #[test]\n+    fn it_can_filter_by_include() {\n+        let target = make_target(Site {\n+            bucket: \"fake\".to_string(),\n+            entry_point: None,\n+            include: Some(vec![\"this_isnt_here.txt\".to_string()]),\n+            exclude: None,\n+        });\n+\n+        let test_dir = \"test4\";\n+        // If test dir already exists, delete it.\n+        if fs::metadata(test_dir).is_ok() {\n+            fs::remove_dir_all(test_dir).unwrap();\n         }\n \n-        fs::remove_file(file_name).unwrap();\n+        fs::create_dir(test_dir).unwrap();\n+        let test_pathname = format!(\"{}/ignore_me.txt\", test_dir);\n+        let test_path = PathBuf::from(&test_pathname);\n+        fs::File::create(&test_path).unwrap();\n \n-        // No iterations should happen above because dotfiles are ignored.\n-        let expected_count = 0;\n-        assert!(actual_count == expected_count);\n+        let files: Vec<_> = get_dir_iterator(&target, Path::new(test_dir))\n+            .unwrap()\n+            .map(|entry| entry.unwrap().path().to_owned())\n+            .collect();\n+\n+        assert!(!files.contains(&test_path));\n     }\n \n     #[test]\n-    fn it_can_allow_unfiltered_files() {\n-        let file_name = \"my_file\";\n-        // If test file already exists, delete it.\n-        if fs::metadata(file_name).is_ok() {\n-            fs::remove_file(file_name).unwrap();\n+    fn it_can_filter_by_exclude() {\n+        let target = make_target(Site {\n+            bucket: \"fake\".to_string(),\n+            entry_point: None,\n+            include: None,\n+            exclude: Some(vec![\"ignore_me.txt\".to_string()]),\n+        });\n+\n+        let test_dir = \"test5\";\n+        // If test dir already exists, delete it.\n+        if fs::metadata(test_dir).is_ok() {\n+            fs::remove_dir_all(test_dir).unwrap();\n         }\n \n-        fs::File::create(file_name).unwrap();\n+        fs::create_dir(test_dir).unwrap();\n+        let test_pathname = format!(\"{}/ignore_me.txt\", test_dir);\n+        let test_path = PathBuf::from(&test_pathname);\n+        fs::File::create(&test_path).unwrap();\n \n-        let mut actual_count = 0;\n-        for _ in WalkDir::new(file_name)\n-            .into_iter()\n-            .filter_entry(|e| !is_ignored(e))\n-        {\n-            actual_count = actual_count + 1;\n+        let files: Vec<_> = get_dir_iterator(&target, Path::new(test_dir))\n+            .unwrap()\n+            .map(|entry| entry.unwrap().path().to_owned())\n+            .collect();\n+\n+        assert!(!files.contains(&test_path));\n+    }\n+\n+    #[test]\n+    fn it_can_prioritize_include_over_exclude() {\n+        let target = make_target(Site {\n+            bucket: \"fake\".to_string(),\n+            entry_point: None,\n+            include: Some(vec![\"notice_me.txt\".to_string()]),\n+            exclude: Some(vec![\"notice_me.txt\".to_string()]),\n+        });\n+\n+        let test_dir = \"test6\";\n+        // If test dir already exists, delete it.\n+        if fs::metadata(test_dir).is_ok() {\n+            fs::remove_dir_all(test_dir).unwrap();\n         }\n \n-        fs::remove_file(file_name).unwrap();\n+        fs::create_dir(test_dir).unwrap();\n+        let test_pathname = format!(\"{}/notice_me.txt\", test_dir);\n+        let test_path = PathBuf::from(&test_pathname);\n+        fs::File::create(&test_path).unwrap();\n+\n+        let files: Vec<_> = get_dir_iterator(&target, Path::new(test_dir))\n+            .unwrap()\n+            .map(|entry| entry.unwrap().path().to_owned())\n+            .collect();\n \n-        // No iterations should happen above because dotfiles are ignored.\n-        let expected_count = 1;\n-        assert!(actual_count == expected_count);\n+        assert!(files.contains(&test_path));\n     }\n \n     #[test]\n",
        "problem_statement": "RFC: .wranglerignore\n### The Problem\r\nThere are static assets directories that may contain lots of content that doesn't need to be uploaded to KV (and likely will trigger KV value size limits). This includes, but is not limited to, things like `node_modules/` and hidden files/directories. Users should be able to specify paths (in the vein of `.gitignore`) that do not get uploaded to KV.\r\n\r\n### Option 1: .wranglerignore\r\nWe will introduce support for `.wranglerignore` files. These files will be automatically generated with `wrangler init` and `wrangler generate` and placed in the same directory (pwd) as `wrangler.toml`. By default Wrangler will ignore `node_modules` and hidden files (they don't need to be specified in `.wranglerignore`).\r\n\r\nThese files will be parsed and used exactly like `.gitignore` whenever bucket `upload_files()` is called. The https://docs.rs/ignore/0.4.10/ignore crate will help us a lot here.\r\n\r\n### Option 2: include/exclude in wrangler.toml\r\nA more rust-idomatic include/exclude approach is the one used by cargo: https://doc.rust-lang.org/cargo/reference/manifest.html#the-exclude-and-include-fields-optional\r\n\r\nThis approach would become part of the `[site]` section of `wrangler.toml`, which would have two new fields, exclude and include. If both are present, wrangler will use include only (same as cargo). The exclude and include fields are used to filter file uploads from whatever directory is specified in the bucket field in wrangler.toml.\r\n\r\nThe benefits of this approach are that\r\n- Wrangler users will have one fewer file to deal with (no .wranglerignore)\r\n- We can constrain this ignore functionality to just Workers Sites, the only workers application that would use this ignore functionality\r\n- The coupling between Workers sites and include/exclude would neatly be represented in wrangler.toml.\r\n\r\nThis implementation should be readily doable with https://docs.rs/ignore/0.4.10/ignore/overrides/struct.OverrideBuilder.html.\r\n\r\nThis approach makes it easier, code-wise, to always ignore node_modules (no messiness about expecting it in the .wranglerignore, we can just always put this logic in the OverrideBuilder).\r\n\r\nI advocate for approach number 2. It's fairly easy for me to make implementations of both approaches above, so I can go ahead and the team can play around with the options and tell me which one they like best.\r\n\r\n### Proofs of concept\r\nOur two candidates:\r\n1. `.wranglerignore` #720 \r\n1. `include/exclude` in `wrangler.toml` #760 \n",
        "hints_text": "",
        "created_at": "2019-10-03T23:06:33Z",
        "version": "1.4"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 757,
        "instance_id": "cloudflare__wrangler-legacy-757",
        "issue_numbers": [
            "746"
        ],
        "base_commit": "cc9d118c951b820a1ae998556c6309837d01819c",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -256,6 +256,30 @@ dependencies = [\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"cloudflare\"\n+version = \"0.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"http 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"maplit 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"reqwest 0.9.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_with 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_yaml 0.8.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-term 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"sloggers 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"config\"\n version = \"0.9.3\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -466,29 +490,6 @@ name = \"dtoa\"\n version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"dubs-cloudflare\"\n-version = \"0.3.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"maplit 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"reqwest 0.9.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_with 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_yaml 0.8.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-term 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"sloggers 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"either\"\n version = \"1.5.3\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2395,11 +2396,11 @@ dependencies = [\n  \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cloudflare 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"console 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"dubs-cloudflare 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"exitfailure 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2514,6 +2515,7 @@ dependencies = [\n \"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n \"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n+\"checksum cloudflare 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd5a60a61015ab6e3d7ad185b6050a29e4b0bf27353109f739731eda31a6bc40\"\n \"checksum config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9107d78ed62b3fa5a86e7d18e647abed48cfd8f8fab6c72f4cdb982d196f7e6\"\n \"checksum console 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ca57c2c14b8a2bf3105bc9d15574aad80babf6a9c44b1058034cdf8bd169628\"\n \"checksum constant_time_eq 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"995a44c877f9212528ccc74b21a232f66ad69001e40ede5bcee2ac9ef2657120\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2536,7 +2538,6 @@ dependencies = [\n \"checksum digest 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\n \"checksum dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\n \"checksum dtoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea57b42383d091c85abcc2706240b94ab2a8fa1fc81c10ff23c4de06e2a90b5e\"\n-\"checksum dubs-cloudflare 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4246bd5bdc5bd81b92fcb1f361ac515ad8af408e93f9ff362d50545ea83056a6\"\n \"checksum either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb1f6b1ce1c140482ea30ddd3335fc0024ac7ee112895426e0a629a6c20adfe3\"\n \"checksum encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n \"checksum encoding_rs 0.8.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"79906e1ad1f7f8bc48864fcc6ffd58336fb5992e627bf61928099cb25fdf4314\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -17,7 +17,7 @@ clap = \"2.32.0\"\n config = \"0.9.2\"\n console = \"0.7.5\"\n dirs = \"1.0.5\"\n-dubs-cloudflare = \"0.3.1\"\n+cloudflare = \"0.3.2\"\n env_logger = \"0.6.1\"\n failure = \"0.1.5\"\n log = \"0.4.6\"\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -4,12 +4,13 @@ use std::collections::HashSet;\n use std::fs::metadata;\n use std::path::Path;\n \n+use crate::commands::kv;\n use crate::commands::kv::bucket::directory_keys_values;\n-use crate::commands::kv::bulk::put::put_bulk;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::target::Target;\n use crate::terminal::message;\n use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n+use cloudflare::framework::apiclient::ApiClient;\n use failure::format_err;\n \n const KEY_MAX_SIZE: usize = 512;\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -50,6 +51,7 @@ pub fn upload_files(\n \n     validate_file_uploads(pairs.clone())?;\n \n+    let client = kv::api_client(user)?;\n     // Iterate over all key-value pairs and create batches of uploads, each of which are\n     // maximum 10K key-value pairs in size OR maximum ~50MB in size. Upload each batch\n     // as it is created.\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -60,14 +62,14 @@ pub fn upload_files(\n     while !(pairs.is_empty() && key_value_batch.is_empty()) {\n         if pairs.is_empty() {\n             // Last batch to upload\n-            upload_batch(target, &user, namespace_id, &mut key_value_batch)?;\n+            upload_batch(&client, target, namespace_id, &mut key_value_batch)?;\n         } else {\n             let pair = pairs.pop().unwrap();\n             if key_count + 1 > PAIRS_MAX_COUNT\n             // Keep upload size small to keep KV bulk API happy\n             || key_pair_bytes + pair.key.len() + pair.value.len() > UPLOAD_MAX_SIZE\n             {\n-                upload_batch(target, &user, namespace_id, &mut key_value_batch)?;\n+                upload_batch(&client, target, namespace_id, &mut key_value_batch)?;\n \n                 // If upload successful, reset counters\n                 key_count = 0;\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -85,18 +87,21 @@ pub fn upload_files(\n }\n \n fn upload_batch(\n+    client: &impl ApiClient,\n     target: &Target,\n-    user: &GlobalUser,\n     namespace_id: &str,\n     key_value_batch: &mut Vec<KeyValuePair>,\n ) -> Result<(), failure::Error> {\n     message::info(\"Uploading...\");\n     // If partial upload fails (e.g. server error), return that error message\n-    put_bulk(target, &user, namespace_id, key_value_batch.clone())?;\n-\n-    // Can clear batch now that we've uploaded it\n-    key_value_batch.clear();\n-    Ok(())\n+    match kv::bulk::put::call_api(client, target, namespace_id, &key_value_batch) {\n+        Ok(_) => {\n+            // Can clear batch now that we've uploaded it\n+            key_value_batch.clear();\n+            Ok(())\n+        }\n+        Err(e) => failure::bail!(\"Failed to upload file batch. {}\", kv::format_error(e)),\n+    }\n }\n \n fn filter_files(pairs: Vec<KeyValuePair>, already_uploaded: &HashSet<String>) -> Vec<KeyValuePair> {\ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -63,7 +63,7 @@ pub fn delete_bulk(\n     namespace_id: &str,\n     keys: Vec<String>,\n ) -> Result<(), failure::Error> {\n-    let client = kv::api_client(user);\n+    let client = kv::api_client(user)?;\n \n     // Check number of pairs is under limit\n     if keys.len() > MAX_PAIRS {\ndiff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -7,6 +7,7 @@ use std::path::Path;\n use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n use cloudflare::endpoints::workerskv::write_bulk::WriteBulk;\n use cloudflare::framework::apiclient::ApiClient;\n+use cloudflare::framework::response::{ApiFailure, ApiSuccess};\n \n use crate::commands::kv;\n use crate::commands::kv::bulk::MAX_PAIRS;\ndiff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -60,14 +50,23 @@ pub fn put_bulk(\n         );\n     }\n \n-    let response = client.request(&WriteBulk {\n-        account_identifier: &target.account_id,\n-        namespace_identifier: namespace_id,\n-        bulk_key_value_pairs: pairs,\n-    });\n-\n-    match response {\n-        Ok(_) => Ok(()),\n+    let client = kv::api_client(user)?;\n+    match call_api(&client, target, namespace_id, &pairs) {\n+        Ok(_) => message::success(\"Success\"),\n         Err(e) => failure::bail!(\"{}\", kv::format_error(e)),\n     }\n+    Ok(())\n+}\n+\n+pub fn call_api(\n+    client: &impl ApiClient,\n+    target: &Target,\n+    namespace_id: &str,\n+    pairs: &Vec<KeyValuePair>,\n+) -> Result<ApiSuccess<()>, ApiFailure> {\n+    client.request(&WriteBulk {\n+        account_identifier: &target.account_id,\n+        namespace_identifier: namespace_id,\n+        bulk_key_value_pairs: pairs.to_owned(),\n+    })\n }\ndiff --git a/src/commands/kv/key/delete.rs b/src/commands/kv/key/delete.rs\n--- a/src/commands/kv/key/delete.rs\n+++ b/src/commands/kv/key/delete.rs\n@@ -13,7 +13,7 @@ pub fn delete(\n     key: &str,\n ) -> Result<(), failure::Error> {\n     kv::validate_target(target)?;\n-    let client = kv::api_client(user);\n+    let client = kv::api_client(user)?;\n \n     match kv::interactive_delete(&format!(\"Are you sure you want to delete key \\\"{}\\\"?\", key)) {\n         Ok(true) => (),\ndiff --git a/src/commands/kv/key/key_list.rs b/src/commands/kv/key/key_list.rs\n--- a/src/commands/kv/key/key_list.rs\n+++ b/src/commands/kv/key/key_list.rs\n@@ -32,7 +32,7 @@ impl KeyList {\n         let iter = KeyList {\n             keys_result: None,\n             prefix: prefix.map(str::to_string),\n-            client: kv::api_client(user),\n+            client: kv::api_client(user)?,\n             account_id: target.account_id.to_owned(),\n             namespace_id: namespace_id.to_string(),\n             cursor: None,\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -1,8 +1,9 @@\n use std::collections::HashSet;\n+use std::time::Duration;\n \n use cloudflare::framework::auth::Credentials;\n use cloudflare::framework::response::ApiFailure;\n-use cloudflare::framework::HttpApiClient;\n+use cloudflare::framework::{HttpApiClient, HttpApiClientConfig};\n \n use http::status::StatusCode;\n use percent_encoding::{percent_encode, PATH_SEGMENT_ENCODE_SET};\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -63,14 +64,21 @@ pub fn get_namespace_id(target: &Target, binding: &str) -> Result<String, failur\n     )\n }\n \n-fn api_client(user: &GlobalUser) -> HttpApiClient {\n-    HttpApiClient::new(Credentials::from(user.to_owned()))\n+fn api_client(user: &GlobalUser) -> Result<HttpApiClient, failure::Error> {\n+    HttpApiClient::new(\n+        Credentials::from(user.to_owned()),\n+        HttpApiClientConfig {\n+            // Use 5 minute timeout instead of default 30-second one.\n+            // This is useful for bulk upload operations.\n+            http_timeout: Duration::from_secs(5 * 60),\n+        },\n+    )\n }\n \n fn format_error(e: ApiFailure) -> String {\n     match e {\n         ApiFailure::Error(status, api_errors) => {\n-            give_status_code_context(status);\n+            print_status_code_context(status);\n             let mut complete_err = \"\".to_string();\n             for error in api_errors.errors {\n                 let error_msg =\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -112,9 +120,15 @@ fn url_encode_key(key: &str) -> String {\n \n // For handling cases where the API gateway returns errors via HTTP status codes\n // (no KV error code is given).\n-fn give_status_code_context(status_code: StatusCode) {\n-    if let StatusCode::PAYLOAD_TOO_LARGE = status_code {\n-        message::warn(\"Returned status code 413, Payload Too Large. Make sure your upload is less than 100MB in size\")\n+fn print_status_code_context(status_code: StatusCode) {\n+    match status_code {\n+        // Folks should never hit PAYLOAD_TOO_LARGE, given that Wrangler ensures that bulk file uploads\n+        // are max ~50 MB in size. This case is handled anyways out of an abundance of caution.\n+        StatusCode::PAYLOAD_TOO_LARGE =>\n+            message::warn(\"Returned status code 413, Payload Too Large. Please make sure your upload is less than 100MB in size\"),\n+        StatusCode::GATEWAY_TIMEOUT =>\n+            message::warn(\"Returned status code 504, Gateway Timeout. Please try again in a few seconds\"),\n+        _ => (),\n     }\n }\n \ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -23,7 +23,8 @@ pub fn create(\n     let msg = format!(\"Creating namespace with title \\\"{}\\\"\", title);\n     message::working(&msg);\n \n-    let result = call_api(target, user, &title);\n+    let client = kv::api_client(user)?;\n+    let result = call_api(&client, target, &title);\n \n     match result {\n         Ok(success) => {\ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -64,11 +65,10 @@ pub fn create(\n }\n \n pub fn call_api(\n+    client: &impl ApiClient,\n     target: &Target,\n-    user: &GlobalUser,\n     title: &str,\n ) -> Result<ApiSuccess<WorkersKvNamespace>, ApiFailure> {\n-    let client = kv::api_client(user);\n     client.request(&CreateNamespace {\n         account_identifier: &target.account_id,\n         params: CreateNamespaceParams {\ndiff --git a/src/commands/kv/namespace/delete.rs b/src/commands/kv/namespace/delete.rs\n--- a/src/commands/kv/namespace/delete.rs\n+++ b/src/commands/kv/namespace/delete.rs\n@@ -8,7 +8,7 @@ use crate::terminal::message;\n \n pub fn delete(target: &Target, user: &GlobalUser, id: &str) -> Result<(), failure::Error> {\n     kv::validate_target(target)?;\n-    let client = kv::api_client(user);\n+    let client = kv::api_client(user)?;\n \n     match kv::interactive_delete(&format!(\n         \"Are you sure you want to delete namespace {}?\",\ndiff --git a/src/commands/kv/namespace/list.rs b/src/commands/kv/namespace/list.rs\n--- a/src/commands/kv/namespace/list.rs\n+++ b/src/commands/kv/namespace/list.rs\n@@ -15,7 +15,9 @@ const PAGE_NUMBER: u32 = 1;\n \n pub fn list(target: &Target, user: &GlobalUser) -> Result<(), failure::Error> {\n     kv::validate_target(target)?;\n-    let result = call_api(target, user);\n+\n+    let client = kv::api_client(user)?;\n+    let result = call_api(&client, target);\n     match result {\n         Ok(success) => {\n             let namespaces = success.result;\ndiff --git a/src/commands/kv/namespace/list.rs b/src/commands/kv/namespace/list.rs\n--- a/src/commands/kv/namespace/list.rs\n+++ b/src/commands/kv/namespace/list.rs\n@@ -27,11 +29,9 @@ pub fn list(target: &Target, user: &GlobalUser) -> Result<(), failure::Error> {\n }\n \n pub fn call_api(\n+    client: &impl ApiClient,\n     target: &Target,\n-    user: &GlobalUser,\n ) -> Result<ApiSuccess<Vec<WorkersKvNamespace>>, ApiFailure> {\n-    let client = kv::api_client(user);\n-\n     let params = ListNamespacesParams {\n         page: Some(PAGE_NUMBER),\n         per_page: Some(MAX_NAMESPACES_PER_PAGE),\ndiff --git a/src/commands/kv/namespace/site.rs b/src/commands/kv/namespace/site.rs\n--- a/src/commands/kv/namespace/site.rs\n+++ b/src/commands/kv/namespace/site.rs\n@@ -1,4 +1,5 @@\n use cloudflare::endpoints::workerskv::WorkersKvNamespace;\n+use cloudflare::framework::apiclient::ApiClient;\n use cloudflare::framework::response::ApiFailure;\n \n use crate::commands::kv;\ndiff --git a/src/commands/kv/namespace/site.rs b/src/commands/kv/namespace/site.rs\n--- a/src/commands/kv/namespace/site.rs\n+++ b/src/commands/kv/namespace/site.rs\n@@ -19,7 +20,8 @@ pub fn site(\n         format!(\"__{}-{}\", target.name, \"workers_sites_assets\")\n     };\n \n-    let response = kv::namespace::create::call_api(target, user, &title);\n+    let client = kv::api_client(user)?;\n+    let response = kv::namespace::create::call_api(&client, target, &title);\n \n     match response {\n         Ok(success) => {\ndiff --git a/src/commands/kv/namespace/site.rs b/src/commands/kv/namespace/site.rs\n--- a/src/commands/kv/namespace/site.rs\n+++ b/src/commands/kv/namespace/site.rs\n@@ -37,7 +39,7 @@ pub fn site(\n                     let msg = format!(\"Using namespace for Workers Site \\\"{}\\\"\", title);\n                     message::working(&msg);\n \n-                    get_id_from_namespace_list(target, user, &title)\n+                    get_id_from_namespace_list(&client, target, &title)\n                 } else {\n                     failure::bail!(\"{:?}\", api_errors.errors)\n                 }\ndiff --git a/src/commands/kv/namespace/site.rs b/src/commands/kv/namespace/site.rs\n--- a/src/commands/kv/namespace/site.rs\n+++ b/src/commands/kv/namespace/site.rs\n@@ -48,11 +50,11 @@ pub fn site(\n }\n \n fn get_id_from_namespace_list(\n+    client: &impl ApiClient,\n     target: &Target,\n-    user: &GlobalUser,\n     title: &str,\n ) -> Result<WorkersKvNamespace, failure::Error> {\n-    let result = kv::namespace::list::call_api(target, user);\n+    let result = kv::namespace::list::call_api(client, target);\n \n     match result {\n         Ok(success) => Ok(success\n",
        "test_patch": "diff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -22,34 +23,23 @@ pub fn put(\n ) -> Result<(), failure::Error> {\n     kv::validate_target(target)?;\n \n-    let pairs: Result<Vec<KeyValuePair>, failure::Error> = match &metadata(filename) {\n+    let pairs: Vec<KeyValuePair> = match &metadata(filename) {\n         Ok(file_type) if file_type.is_file() => {\n             let data = fs::read_to_string(filename)?;\n             let data_vec = serde_json::from_str(&data);\n             if data_vec.is_err() {\n-                failure::bail!(\"Failed to decode JSON. Please make sure to follow the format, [{\\\"key\\\": \\\"test_key\\\", \\\"value\\\": \\\"test_value\\\"}, ...]\")\n+                Err(failure::format_err!(\"Failed to decode JSON. Please make sure to follow the format, [{{\\\"key\\\": \\\"test_key\\\", \\\"value\\\": \\\"test_value\\\"}}, ...]\"))\n             } else {\n-                Ok(data_vec.unwrap())\n+                let data_vec: Vec<KeyValuePair> = data_vec.unwrap();\n+                Ok(data_vec)\n             }\n         }\n-        Ok(_) => failure::bail!(\"{} should be a JSON file, but is not\", filename.display()),\n-        Err(e) => failure::bail!(\"{}\", e),\n-    };\n-\n-    match put_bulk(target, user, namespace_id, pairs?) {\n-        Ok(_) => message::success(\"Success\"),\n-        Err(e) => print!(\"{}\", e),\n-    }\n-    Ok(())\n-}\n-\n-pub fn put_bulk(\n-    target: &Target,\n-    user: &GlobalUser,\n-    namespace_id: &str,\n-    pairs: Vec<KeyValuePair>,\n-) -> Result<(), failure::Error> {\n-    let client = kv::api_client(user);\n+        Ok(_) => Err(failure::format_err!(\n+            \"{} should be a JSON file, but is not\",\n+            filename.display()\n+        )),\n+        Err(e) => Err(failure::format_err!(\"{}\", e)),\n+    }?;\n \n     // Validate that bulk upload is within size constraints\n     if pairs.len() > MAX_PAIRS {\n",
        "problem_statement": "Wrangler timeout too short for bulk uploads\n### \ud83d\udc1b Bug Report\r\n\r\n#### Environment\r\n\r\n* operating system:\r\n* output of `rustc -V`:\r\n* output of `node -v`:\r\nv10.16.2\r\n* output of `wrangler -V`:\r\n\ud83d\udc77 \u2728  wrangler 1.4.0\r\n\r\n#### Steps to reproduce\r\n\r\nI've been trying the newly added Workers Sites as it looked awesome. I tried it first with a simple site with about 10 assets. Worked perfectly, first time. Dev, Prod, all fine. Yay. So I then tried it with _another_ site with more pages and many more assets (mainly images). This time, the publish failed :(\r\n\r\nIt seems to be at the point where it uploads all the site's static files to KV. The time out seems too short ... can it be increased? I guess this is outside of wrangler but maybe that request could be passed on. Since I can see it using the /bulk operation which makes sense. However I'd think someone would only be using the /bulk API if they were uploading a lot and so would need a generous timeout, even _outside_ of Workers Sites.\r\n\r\nIt's not clear from the error if it is a timeout with one file (like too big, and so timing out) or the entire operation (too many files within its allowed time)\r\n\r\nI'd guess there are maybe 500 files.\r\n\r\n#### What did you expect to see?\r\n\r\nThe publish to successfully complete\r\n\r\n#### What did you see instead?\r\n\r\n$ wrangler publish --env dev\r\n\ud83c\udf00  Using namespace for Workers Site \"__name-dev-workers_sites_assets\"\r\n\ud83d\udc81  ignoring file .DS_Store\r\n\ud83d\udc81  ignoring file .DS_Store\r\n\ud83d\udc81  Uploading...\r\nError: \u26a0\ufe0f  Error: https://api.cloudflare.com/client/v4/accounts/longidhere/storage/kv/namespaces/longidhere/bulk: timed out\r\n\n",
        "hints_text": "thanks @gregmsanderson for the bug report! we've notified the team that works on the KV API and are working out a solution with them. That team is internal to Cloudflare so I can't necessarily link you to an issue to track, but I'll update here when we have a fix.\n@gregmsanderson I'm curious approximately how long it's taking before it times out. If this is repeatable I wonder if you could prefix your command with `time` (if you're on Mac/Linux).\r\n\r\nIt would be awesome for `wrangler` to print the time taken and the Ray ID (if there is one).\nit looks like we need to increase the default timeout on the client that Wrangler uses for these requests; we use reqwest (via cloudflare-rs) with no increase to the default timeout of 30s. I'm going to update the name of this ticket and we'll triage ASAP.\nHey @ashleymichal @bretthoerner \r\n\r\nYes, It _seemed_ to give up after about a minute. May well have been even less, like 30s, since as you say there is no time report on the output, and I didn't run a stopwatch or anything to see exactly when. I just assumed it had some timeout-after-X rule that it was hitting.\r\n\r\nI wasn't aware of that _time_ command. That would indeed have helped.\r\n\r\nUnfortunately I'm currently unable to do that for you. Earlier on today I had an idea to bypass the problem. Since the upload was timing out, I needed a faster way to upload to your server. Since there's nothing I can do about the connection from here, I figured I would instead run _wrangler publish_ from a server I assume is near yours, using the CircleCI service. If not, at least with a faster network. And indeed I was right: _their_ connection to you is super-fast. Watching the output of _wrangler publish_ in their system, the bulk upload operation sails by. Hundreds of files upload in seconds. And so the bulk operation does not time out when run from there. And the operation completes.\r\n\r\nSo if I were to _now_ publish myself, that will confuse things. But it sounds like Ashley is on the case and so that won't be needed. And it's less of an issue for me now since I might as well stick with CircleCI. But I'm sure it will be useful for others to increase that timeout a little.\r\n\r\nThanks.",
        "created_at": "2019-10-02T22:40:39Z",
        "version": "1.4"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 751,
        "instance_id": "cloudflare__wrangler-legacy-751",
        "issue_numbers": [
            "538"
        ],
        "base_commit": "753d8f31168077207dc01bcc42fee4d74622dc66",
        "patch": "diff --git a/docs/content/environments.md b/docs/content/environments.md\n--- a/docs/content/environments.md\n+++ b/docs/content/environments.md\n@@ -16,7 +16,6 @@ name = \"my-worker-dev\"\n account_id = \"12345678901234567890\"\n zone_id = \"09876543210987654321\"\n route = \"dev.example.com/*\"\n-workers_dev = false\n \n # environment configuration\n [env.staging]\ndiff --git a/docs/content/environments.md b/docs/content/environments.md\n--- a/docs/content/environments.md\n+++ b/docs/content/environments.md\n@@ -33,9 +32,9 @@ route = \"example.com/*\"\n \n The most common use case for environments is deploying to a staging subdomain before your production environment. `wrangler publish` will look at your top level configuration, and you can specify other environments beneath it. Each of these environments will inherit the values from the top level configuration if they are not specified, with the following caveats.\n \n-* `type` will always be inherited from the top-level configuration; you cannot specify different types for different environments.\n-* Fields that can be inherited from the top level are `account_id`, `zone_id`, `workers_dev`, and `webpack_config`. `kv_namespaces` and `route` must be defined for each environment and will not be inherited.\n-* `name` is inherited. If left out of the environment configuration, a Worker project named `my-worker` with an environment `[env.dev]` would become `my-worker-dev`.\n+- `type` will always be inherited from the top-level configuration; you cannot specify different types for different environments.\n+- Fields that can be inherited from the top level are `account_id`, `zone_id`, `workers_dev`, and `webpack_config`. `kv_namespaces` and `route` must be defined for each environment and will not be inherited.\n+- `name` is inherited. If left out of the environment configuration, a Worker project named `my-worker` with an environment `[env.dev]` would become `my-worker-dev`.\n \n ### Examples\n \ndiff --git a/docs/content/environments.md b/docs/content/environments.md\n--- a/docs/content/environments.md\n+++ b/docs/content/environments.md\n@@ -51,7 +50,6 @@ name = \"my-worker\"\n account_id = \"12345678901234567890\"\n zone_id = \"09876543210987654321\"\n route = \"example.com/*\"\n-workers_dev = false # this field specifies that the worker should not be deployed to workers.dev\n ```\n \n ```console\ndiff --git a/docs/content/environments.md b/docs/content/environments.md\n--- a/docs/content/environments.md\n+++ b/docs/content/environments.md\n@@ -87,7 +85,6 @@ name = \"my-worker-dev\"\n account_id = \"12345678901234567890\"\n zone_id = \"09876543210987654321\"\n route = \"dev.example.com/*\"\n-workers_dev = false\n \n [env.staging]\n name = \"my-worker-staging\"\ndiff --git a/docs/content/environments.md b/docs/content/environments.md\n--- a/docs/content/environments.md\n+++ b/docs/content/environments.md\n@@ -130,7 +127,6 @@ type = \"webpack\"\n account_id = \"12345678901234567890\"\n zone_id = \"09876543210987654321\"\n route = \"example.com/*\"\n-workers_dev = false\n \n [env.staging]\n workers_dev = true\ndiff --git a/docs/content/environments.md b/docs/content/environments.md\n--- a/docs/content/environments.md\n+++ b/docs/content/environments.md\n@@ -257,7 +253,6 @@ type = \"webpack\"\n account_id = \"12345678901234567890\"\n zone_id = \"09876543210987654321\"\n route = \"example.com/*\"\n-workers_dev = false\n \n [env.staging]\n name = \"my-worker\"\ndiff --git a/docs/content/environments.md b/docs/content/environments.md\n--- a/docs/content/environments.md\n+++ b/docs/content/environments.md\n@@ -274,27 +269,6 @@ $ wrangler publish --env staging\n Error: \u26a0\ufe0f  Each name in your `wrangler.toml` must be unique, this name is duplicated: my-worker\n ```\n \n-### Ambiguous top level configuration\n-\n-```toml\n-name = \"my-worker\"\n-type = \"webpack\"\n-account_id = \"12345678901234567890\"\n-zone_id = \"09876543210987654321\"\n-route = \"example.com/*\n-```\n-\n-You will be warned if `workers_dev` is left out of the top level configuration because if it is not specified, it is unclear what the behavior of `wrangler publish` should be. See [the section on backwards compatibility](#Backwards-compatibility) for more information.\n-\n-```console\n-$ wrangler publish\n-\u26a0\ufe0f  Please specify the workers_dev boolean in the top level of your wrangler.toml.\n-\u26a0\ufe0f  If you do not add workers_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md for more information.\n-\u2728  Built successfully, built project size is 517 bytes.\n-\u2728  Successfully published your script.\n-\u2728  Success! Your worker was successfully published. You can view it at https://my-worker.<your-subdomain>.workers.dev\n-```\n-\n ### Defining workers_dev and route\n \n ```toml\ndiff --git a/src/commands/init.rs b/src/commands/init.rs\n--- a/src/commands/init.rs\n+++ b/src/commands/init.rs\n@@ -30,8 +30,7 @@ pub fn init(\n \n     if site {\n         let env = None;\n-        let release = false;\n-        let target = manifest.get_target(env, release)?;\n+        let target = manifest.get_target(env)?;\n         commands::build::wranglerjs::scaffold_site_worker(&target)?;\n     }\n     Ok(())\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -24,7 +24,12 @@ use crate::settings::target::{Site, Target};\n use crate::terminal::{emoji, message};\n \n pub fn publish(user: &GlobalUser, target: &mut Target) -> Result<(), failure::Error> {\n-    log::info!(\"workers_dev = {}\", target.workers_dev);\n+    let msg = match &target.route {\n+        Some(route) => &route,\n+        None => \"workers_dev\",\n+    };\n+\n+    log::info!(\"{}\", msg);\n \n     validate_target_required_fields_present(target)?;\n     validate_worker_name(&target.name)?;\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -94,7 +99,7 @@ fn build_and_publish_script(\n         )\n     }\n \n-    let pattern = if !target.workers_dev {\n+    let pattern = if target.route.is_some() {\n         let route = Route::new(&target)?;\n         Route::publish(&user, &target, &route)?;\n         log::info!(\"publishing to route\");\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -212,8 +217,8 @@ fn validate_target_required_fields_present(target: &Target) -> Result<(), failur\n         None => {}\n     }\n \n-    let destination = if !target.workers_dev {\n-        // check required fields for release\n+    let destination = if target.route.is_some() {\n+        // check required fields for publishing to a route\n         if target\n             .zone_id\n             .as_ref()\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -343,12 +343,6 @@ fn run() -> Result<(), failure::Error> {\n                     \"{} Publish your worker to the orange cloud\",\n                     emoji::UP\n                 ))\n-                .arg(\n-                    Arg::with_name(\"release\")\n-                        .long(\"release\")\n-                        .takes_value(false)\n-                        .help(\"[planned deprecation in v1.5.0, use --env instead. see https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md for more information]\\nshould this be published to a workers.dev subdomain or a domain name you have registered\"),\n-                )\n                 .arg(\n                     Arg::with_name(\"env\")\n                         .help(\"environments to publish to\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -444,12 +438,14 @@ fn run() -> Result<(), failure::Error> {\n     } else if let Some(matches) = matches.subcommand_matches(\"build\") {\n         info!(\"Getting project settings\");\n         let manifest = settings::target::Manifest::new(config_path)?;\n-        let target = &manifest.get_target(matches.value_of(\"env\"), false)?;\n+        let env = matches.value_of(\"env\");\n+        let target = &manifest.get_target(env)?;\n         commands::build(&target)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"preview\") {\n         info!(\"Getting project settings\");\n         let manifest = settings::target::Manifest::new(config_path)?;\n-        let target = manifest.get_target(matches.value_of(\"env\"), false)?;\n+        let env = matches.value_of(\"env\");\n+        let target = manifest.get_target(env)?;\n \n         // the preview command can be called with or without a Global User having been config'd\n         // so we convert this Result into an Option\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -475,24 +471,16 @@ fn run() -> Result<(), failure::Error> {\n         let user = settings::global_user::GlobalUser::new()?;\n \n         info!(\"Getting project settings\");\n-        if matches.is_present(\"env\") && matches.is_present(\"release\") {\n-            failure::bail!(\"You can only pass --env or --release, not both\")\n-        }\n         let manifest = settings::target::Manifest::new(config_path)?;\n-        let mut target;\n-        if matches.is_present(\"env\") {\n-            target = manifest.get_target(matches.value_of(\"env\"), false)?;\n-        } else if matches.is_present(\"release\") {\n-            target = manifest.get_target(None, true)?;\n-        } else {\n-            target = manifest.get_target(None, false)?;\n-        }\n+        let env = matches.value_of(\"env\");\n+        let mut target = manifest.get_target(env)?;\n \n         commands::publish(&user, &mut target)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"subdomain\") {\n         info!(\"Getting project settings\");\n         let manifest = settings::target::Manifest::new(config_path)?;\n-        let target = manifest.get_target(matches.value_of(\"env\"), false)?;\n+        let env = matches.value_of(\"env\");\n+        let target = manifest.get_target(env)?;\n \n         info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -511,12 +499,13 @@ fn run() -> Result<(), failure::Error> {\n         match kv_matches.subcommand() {\n             (\"create\", Some(create_matches)) => {\n                 let env = create_matches.value_of(\"env\");\n-                let target = manifest.get_target(env, false)?;\n+                let target = manifest.get_target(env)?;\n                 let binding = create_matches.value_of(\"binding\").unwrap();\n                 commands::kv::namespace::create(&target, env, &user, binding)?;\n             }\n             (\"delete\", Some(delete_matches)) => {\n-                let target = manifest.get_target(delete_matches.value_of(\"env\"), false)?;\n+                let env = delete_matches.value_of(\"env\");\n+                let target = manifest.get_target(env)?;\n                 let namespace_id = match delete_matches.value_of(\"binding\") {\n                     Some(namespace_binding) => {\n                         commands::kv::get_namespace_id(&target, namespace_binding)?\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -529,7 +518,8 @@ fn run() -> Result<(), failure::Error> {\n                 commands::kv::namespace::delete(&target, &user, &namespace_id)?;\n             }\n             (\"list\", Some(list_matches)) => {\n-                let target = manifest.get_target(list_matches.value_of(\"env\"), false)?;\n+                let env = list_matches.value_of(\"env\");\n+                let target = manifest.get_target(env)?;\n                 commands::kv::namespace::list(&target, &user)?;\n             }\n             (\"\", None) => message::warn(\"kv:namespace expects a subcommand\"),\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -543,7 +533,8 @@ fn run() -> Result<(), failure::Error> {\n         let (subcommand, subcommand_matches) = kv_matches.subcommand();\n         let (target, namespace_id) = match subcommand_matches {\n             Some(subcommand_matches) => {\n-                let target = manifest.get_target(subcommand_matches.value_of(\"env\"), false)?;\n+                let env = subcommand_matches.value_of(\"env\");\n+                let target = manifest.get_target(env)?;\n                 let namespace_id = match subcommand_matches.value_of(\"binding\") {\n                     Some(namespace_binding) => {\n                         commands::kv::get_namespace_id(&target, namespace_binding)?\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -601,7 +592,8 @@ fn run() -> Result<(), failure::Error> {\n         let (subcommand, subcommand_matches) = kv_matches.subcommand();\n         let (target, namespace_id) = match subcommand_matches {\n             Some(subcommand_matches) => {\n-                let target = manifest.get_target(subcommand_matches.value_of(\"env\"), false)?;\n+                let env = subcommand_matches.value_of(\"env\");\n+                let target = manifest.get_target(env)?;\n                 let namespace_id = match subcommand_matches.value_of(\"binding\") {\n                     Some(namespace_binding) => {\n                         commands::kv::get_namespace_id(&target, namespace_binding)?\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -57,7 +57,6 @@ pub struct Target {\n     pub route: Option<String>,\n     pub routes: Option<HashMap<String, String>>,\n     pub webpack_config: Option<String>,\n-    pub workers_dev: bool,\n     pub zone_id: Option<String>,\n     pub site: Option<Site>,\n }\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -171,22 +170,7 @@ impl Manifest {\n         Ok(manifest)\n     }\n \n-    pub fn get_target(\n-        &self,\n-        environment_name: Option<&str>,\n-        release: bool,\n-    ) -> Result<Target, failure::Error> {\n-        if release && self.workers_dev.is_some() {\n-            failure::bail!(format!(\n-                \"{} The --release flag is not compatible with use of the workers_dev field.\",\n-                emoji::WARN\n-            ))\n-        }\n-\n-        if release {\n-            message::warn(\"--release will be deprecated.\");\n-        }\n-\n+    pub fn get_target(&self, environment_name: Option<&str>) -> Result<Target, failure::Error> {\n         // Site projects are always Webpack for now; don't let toml override this.\n         let target_type = match self.site {\n             Some(_) => TargetType::Webpack,\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -198,23 +182,20 @@ impl Manifest {\n             account_id: self.account_id.clone(),         // MAY inherit\n             webpack_config: self.webpack_config.clone(), // MAY inherit\n             zone_id: self.zone_id.clone(),               // MAY inherit\n-            workers_dev: true,                           // MAY inherit\n             // importantly, the top level name will be modified\n             // to include the name of the environment\n             name: self.name.clone(),                   // MAY inherit\n             kv_namespaces: self.kv_namespaces.clone(), // MUST NOT inherit\n-            route: None,                               // MUST NOT inherit\n-            routes: self.routes.clone(),               // MUST NOT inherit\n-            site: self.site.clone(),                   // MUST NOT inherit\n+            route: None, // can inherit None, but not Some (see negotiate_zoneless)\n+            routes: self.routes.clone(), // MUST NOT inherit\n+            site: self.site.clone(), // MUST NOT inherit\n         };\n \n         let environment = self.get_environment(environment_name)?;\n \n         self.check_private(environment);\n \n-        let (route, workers_dev) = self.negotiate_zoneless(environment, release)?;\n-        target.route = route;\n-        target.workers_dev = workers_dev;\n+        target.route = self.negotiate_zoneless(environment)?;\n         if let Some(environment) = environment {\n             target.name = if let Some(name) = &environment.name {\n                 name.clone()\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -270,88 +251,105 @@ impl Manifest {\n         }\n     }\n \n-    // TODO: when --release is deprecated, this will be much easier\n+    // this function takes the workers_dev booleans and the routes in a manifest\n+    // and then returns an Option<String> representing the deploy target\n+    // if it is None, it means deploy to workers.dev, otherwise deploy to the route\n+\n+    // no environments:\n+    // +-------------+---------------------+------------------------------+\n+    // | workers_dev |        route        |            result            |\n+    // +-------------+---------------------+------------------------------+\n+    // | None        | None                | failure: pick target         |\n+    // | None        | Some(\"\")            | failure: pick target         |\n+    // | None        | Some(\"example.com\") | Some(\"example.com\")          |\n+    // | false       | None                | failure: pick target         |\n+    // | false       | Some(\"\")            | failure: pick target         |\n+    // | false       | Some(\"example.com\") | Some(\"example.com\")          |\n+    // | true        | None                | None                         |\n+    // | true        | Some(\"\")            | None                         |\n+    // | true        | Some(\"example.com\") | failure: conflicting targets |\n+    // +-------------+---------------------+------------------------------+\n+    //\n+    // When environments are introduced, this truth table holds true with workers_dev being inherited\n+    // and route being ignored.\n+    // if top level workers_dev is true, it is inherited but can be overridden by an env route\n+    //\n+    // this will fail with empty_route_failure\n+    // workers_dev = true\n+    // [env.foo]\n+    // route = \"\"\n+    //\n+    // this will return Some(\"example.com\")\n+    // workers_dev = true\n+    // [env.foo]\n+    // route = \"example.com\"\n     fn negotiate_zoneless(\n         &self,\n         environment: Option<&Environment>,\n-        release: bool,\n-    ) -> Result<(Option<String>, bool), failure::Error> {\n-        let use_dot_dev_failure =\n-            \"Please specify the workers_dev boolean in the top level of your wrangler.toml.\";\n-        let use_dot_dev_warning =\n-            format!(\"{}\\n{} If you do not add workers_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md for more information.\", use_dot_dev_failure, emoji::WARN);\n-        let wdd_failure = format!(\n-            \"{} Your environment should only include `workers_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dev`.\",\n-            emoji::WARN\n-        );\n-\n-        // TODO: deprecate --release, remove warnings and parsing\n-        // switch wrangler publish behavior to act the same at top level\n-        // and environments\n-        // brace yourself, this is hairy\n-        let workers_dev = match environment {\n-            // top level configuration\n-            None => {\n-                if release {\n-                    match self.workers_dev {\n-                        Some(_) => {\n-                            failure::bail!(format!(\"{} {}\", emoji::WARN, use_dot_dev_failure))\n-                        }\n-                        None => {\n-                            message::warn(&use_dot_dev_warning);\n-                            false // wrangler publish --release w/o workers_dev is zoned deploy\n-                        }\n-                    }\n-                } else if let Some(wdd) = self.workers_dev {\n-                    if wdd {\n-                        if let Some(route) = &self.route {\n-                            if !route.is_empty() {\n-                                failure::bail!(wdd_failure)\n-                            }\n-                        }\n-                    }\n-                    wdd\n-                } else {\n-                    message::warn(&use_dot_dev_warning);\n-                    true // wrangler publish w/o workers_dev is zoneless deploy\n-                }\n-            }\n+    ) -> Result<Option<String>, failure::Error> {\n+        let conflicting_targets_failure = \"Your environment should only include `workers_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dev`.\";\n+        let pick_target_failure =\n+            \"You must specify either `workers_dev` or `route` and `zone_id` in order to publish.\";\n+        let empty_route_failure =\n+            \"If you want to deploy to workers.dev, remove `route` from your environment config.\";\n+\n+        log::debug!(\"top level workers_dev: {:?}\", self.workers_dev);\n+        log::debug!(\"top level route: {:?}\", self.route);\n+\n+        // start with top level configuration\n+        let (top_workers_dev, top_route) = match (self.workers_dev, self.route.clone()) {\n+            (None, Some(route)) => (false, Some(route)),\n+            (Some(workers_dev), None) => (workers_dev, None),\n+            (Some(workers_dev), Some(route)) => (workers_dev, Some(route)),\n+            (None, None) => (false, None),\n+        };\n \n-            // environment configuration\n-            Some(environment) => {\n-                if let Some(wdd) = environment.workers_dev {\n-                    if wdd && environment.route.is_some() {\n-                        failure::bail!(wdd_failure)\n-                    }\n-                    wdd\n-                } else if let Some(wdd) = self.workers_dev {\n-                    if wdd && environment.route.is_some() {\n-                        false // allow route to override workers_dev = true if wdd is inherited\n+        // override top level with environment\n+        let (workers_dev, route) = if let Some(env) = &environment {\n+            log::debug!(\"env workers_dev: {:?}\", env.workers_dev);\n+            log::debug!(\"env route: {:?}\", env.route);\n+            match (env.workers_dev, env.route.clone()) {\n+                (None, Some(route)) => {\n+                    if top_workers_dev && route.is_empty() {\n+                        failure::bail!(empty_route_failure)\n                     } else {\n-                        wdd // inherit from top level\n+                        (false, Some(route))\n                     }\n-                } else {\n-                    false // if absent -> false\n                 }\n-            }\n-        };\n-\n-        let route = if let Some(environment) = environment {\n-            if let Some(route) = &environment.route {\n-                if let Some(wdd) = environment.workers_dev {\n-                    if wdd {\n-                        failure::bail!(wdd_failure);\n+                (Some(workers_dev), None) => (workers_dev, None),\n+                (Some(workers_dev), Some(route)) => {\n+                    if route.is_empty() && workers_dev {\n+                        failure::bail!(empty_route_failure)\n                     }\n+                    (workers_dev, Some(route))\n                 }\n-                Some(route.clone())\n-            } else {\n-                None\n+                (None, None) => (top_workers_dev, top_route),\n             }\n         } else {\n-            self.route.clone()\n+            (top_workers_dev, top_route)\n         };\n \n-        Ok((route, workers_dev))\n+        log::debug!(\"negotiated workers_dev: {}\", workers_dev);\n+        log::debug!(\"negotiated route: {:?}\", route);\n+\n+        match (workers_dev, route) {\n+            (true, None) => Ok(None),\n+            (true, Some(route)) => {\n+                if route.is_empty() {\n+                    Ok(None)\n+                } else {\n+                    failure::bail!(conflicting_targets_failure)\n+                }\n+            }\n+            (false, Some(route)) => {\n+                if route.is_empty() {\n+                    failure::bail!(pick_target_failure)\n+                } else {\n+                    Ok(Some(route))\n+                }\n+            }\n+            (false, None) => failure::bail!(pick_target_failure),\n+        }\n     }\n \n     fn check_private(&self, environment: Option<&Environment>) {\n",
        "test_patch": "diff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -216,7 +216,6 @@ mod tests {\n             route: None,\n             routes: None,\n             webpack_config: None,\n-            workers_dev: true,\n             zone_id: None,\n             site: Some(site),\n         }\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -198,7 +198,6 @@ mod tests {\n             route: None,\n             routes: None,\n             webpack_config: None,\n-            workers_dev: false,\n             zone_id: None,\n             site: None,\n         };\ndiff --git a/src/settings/target/tests/mod.rs b/src/settings/target/tests/mod.rs\n--- a/src/settings/target/tests/mod.rs\n+++ b/src/settings/target/tests/mod.rs\n@@ -9,7 +9,7 @@ fn it_builds_from_config() {\n \n     let manifest = Manifest::new(&toml_path).unwrap();\n \n-    let target = manifest.get_target(None, false).unwrap();\n+    let target = manifest.get_target(None).unwrap();\n     assert!(target.kv_namespaces.is_none());\n }\n \ndiff --git a/src/settings/target/tests/mod.rs b/src/settings/target/tests/mod.rs\n--- a/src/settings/target/tests/mod.rs\n+++ b/src/settings/target/tests/mod.rs\n@@ -18,10 +18,10 @@ fn it_builds_from_environments_config() {\n     let toml_path = toml_fixture_path(\"environments\");\n     let manifest = Manifest::new(&toml_path).unwrap();\n \n-    let target = manifest.get_target(None, false).unwrap();\n+    let target = manifest.get_target(None).unwrap();\n     assert!(target.kv_namespaces.is_none());\n \n-    let target = manifest.get_target(Some(\"production\"), false).unwrap();\n+    let target = manifest.get_target(Some(\"production\")).unwrap();\n     assert!(target.kv_namespaces.is_none());\n }\n \ndiff --git a/src/settings/target/tests/mod.rs b/src/settings/target/tests/mod.rs\n--- a/src/settings/target/tests/mod.rs\n+++ b/src/settings/target/tests/mod.rs\n@@ -31,10 +31,10 @@ fn it_builds_from_environments_config_with_kv() {\n \n     let manifest = Manifest::new(&toml_path).unwrap();\n \n-    let target = manifest.get_target(None, false).unwrap();\n+    let target = manifest.get_target(None).unwrap();\n     assert!(target.kv_namespaces.is_none());\n \n-    let target = manifest.get_target(Some(\"production\"), false).unwrap();\n+    let target = manifest.get_target(Some(\"production\")).unwrap();\n     let kv_1 = KvNamespace {\n         id: \"somecrazylongidentifierstring\".to_string(),\n         binding: \"prodKV-1\".to_string(),\ndiff --git a/src/settings/target/tests/mod.rs b/src/settings/target/tests/mod.rs\n--- a/src/settings/target/tests/mod.rs\n+++ b/src/settings/target/tests/mod.rs\n@@ -55,7 +55,7 @@ fn it_builds_from_environments_config_with_kv() {\n         None => assert!(false),\n     }\n \n-    let target = manifest.get_target(Some(\"staging\"), false).unwrap();\n+    let target = manifest.get_target(Some(\"staging\")).unwrap();\n     let kv_1 = KvNamespace {\n         id: \"somecrazylongidentifierstring\".to_string(),\n         binding: \"stagingKV-1\".to_string(),\ndiff --git a/src/settings/target/tests/mod.rs b/src/settings/target/tests/mod.rs\n--- a/src/settings/target/tests/mod.rs\n+++ b/src/settings/target/tests/mod.rs\n@@ -76,44 +76,6 @@ fn it_builds_from_environments_config_with_kv() {\n     }\n }\n \n-#[test]\n-fn it_builds_from_legacy_config() {\n-    let toml_path = legacy_toml_fixture_path(\"default\");\n-\n-    let manifest = Manifest::new(&toml_path).unwrap();\n-    let target = manifest.get_target(None, false).unwrap();\n-\n-    assert!(target.kv_namespaces.is_none());\n-}\n-\n-#[test]\n-fn it_builds_from_legacy_config_with_kv() {\n-    let toml_path = legacy_toml_fixture_path(\"kv_namespaces\");\n-\n-    let manifest = Manifest::new(&toml_path).unwrap();\n-    let target = manifest.get_target(None, false).unwrap();\n-\n-    let kv_1 = KvNamespace {\n-        id: \"somecrazylongidentifierstring\".to_string(),\n-        binding: \"prodKV\".to_string(),\n-        bucket: None,\n-    };\n-    let kv_2 = KvNamespace {\n-        id: \"anotherwaytoolongidstring\".to_string(),\n-        binding: \"stagingKV\".to_string(),\n-        bucket: None,\n-    };\n-\n-    match target.kv_namespaces {\n-        Some(kv_namespaces) => {\n-            assert!(kv_namespaces.len() == 2);\n-            assert!(kv_namespaces.contains(&kv_1));\n-            assert!(kv_namespaces.contains(&kv_2));\n-        }\n-        None => assert!(false),\n-    }\n-}\n-\n fn base_fixture_path() -> PathBuf {\n     let current_dir = env::current_dir().unwrap();\n \ndiff --git a/src/settings/target/tests/mod.rs b/src/settings/target/tests/mod.rs\n--- a/src/settings/target/tests/mod.rs\n+++ b/src/settings/target/tests/mod.rs\n@@ -125,10 +87,6 @@ fn base_fixture_path() -> PathBuf {\n         .join(\"tomls\")\n }\n \n-fn legacy_toml_fixture_path(fixture: &str) -> PathBuf {\n-    base_fixture_path().join(\"legacy\").join(fixture)\n-}\n-\n fn toml_fixture_path(fixture: &str) -> PathBuf {\n     base_fixture_path().join(fixture)\n }\ndiff --git a/src/settings/target/tests/tomls/default.toml b/src/settings/target/tests/tomls/default.toml\n--- a/src/settings/target/tests/tomls/default.toml\n+++ b/src/settings/target/tests/tomls/default.toml\n@@ -1,6 +1,5 @@\n type = \"webpack\"\n name = \"worker\"\n zone_id = \"\"\n-private = false\n account_id = \"\"\n-route = \"\"\n+route = \"example.com/*\"\ndiff --git a/src/settings/target/tests/tomls/environments.toml b/src/settings/target/tests/tomls/environments.toml\n--- a/src/settings/target/tests/tomls/environments.toml\n+++ b/src/settings/target/tests/tomls/environments.toml\n@@ -2,12 +2,11 @@ type = \"webpack\"\n name = \"worker\"\n zone_id = \"\"\n account_id = \"\"\n-route = \"\"\n+route = \"staging.example.com/*\"\n \n [env.production]\n type = \"webpack\"\n name = \"staging-worker\"\n zone_id = \"\"\n-private = false\n account_id = \"\"\n-route = \"\"\n\\ No newline at end of file\n+route = \"example.com/*\"\n\\ No newline at end of file\ndiff --git a/src/settings/target/tests/tomls/invalid_environments.toml b/src/settings/target/tests/tomls/invalid_environments.toml\n--- a/src/settings/target/tests/tomls/invalid_environments.toml\n+++ b/src/settings/target/tests/tomls/invalid_environments.toml\n@@ -1,14 +1,12 @@\n type = \"webpack\"\n name = \"worker\"\n zone_id = \"\"\n-private = false\n account_id = \"\"\n route = \"\"\n \n [env.name_conflict]\n name = \"worker\"\n zone_id = \"\"\n-private = false\n account_id = \"\"\n route = \"\"\n \ndiff --git a/src/settings/target/tests/tomls/invalid_environments.toml b/src/settings/target/tests/tomls/invalid_environments.toml\n--- a/src/settings/target/tests/tomls/invalid_environments.toml\n+++ b/src/settings/target/tests/tomls/invalid_environments.toml\n@@ -23,14 +21,12 @@ route = \"\"\n type = \"webpack\"\n name = \"worker\"\n zone_id = \"\"\n-private = false\n account_id = \"\"\n route = \"\"\n \n [env.route_and_dot_dev]\n name = \"worker\"\n zone_id = \"\"\n-private = false\n account_id = \"\"\n route = \"example.com/*\"\n workersdotdev = true\n\\ No newline at end of file\ndiff --git a/src/settings/target/tests/tomls/kv_namespaces.toml b/src/settings/target/tests/tomls/kv_namespaces.toml\n--- a/src/settings/target/tests/tomls/kv_namespaces.toml\n+++ b/src/settings/target/tests/tomls/kv_namespaces.toml\n@@ -2,13 +2,13 @@ type = \"webpack\"\n name = \"worker\"\n zone_id = \"\"\n account_id = \"\"\n-route = \"\"\n+route = \"dev.example.com/*\"\n \n [env.production]\n name = \"production-worker\"\n zone_id = \"\"\n account_id = \"\"\n-route = \"\"\n+route = \"example.com/*\"\n \n [[env.production.kv-namespaces]]\n id = \"somecrazylongidentifierstring\"\ndiff --git a/src/settings/target/tests/tomls/kv_namespaces.toml b/src/settings/target/tests/tomls/kv_namespaces.toml\n--- a/src/settings/target/tests/tomls/kv_namespaces.toml\n+++ b/src/settings/target/tests/tomls/kv_namespaces.toml\n@@ -22,7 +22,7 @@ binding = \"prodKV-2\"\n name = \"staging-worker\"\n zone_id = \"\"\n account_id = \"\"\n-route = \"\"\n+route = \"staging.example.com/*\"\n \n [[env.staging.kv-namespaces]]\n id = \"somecrazylongidentifierstring\"\ndiff --git a/src/settings/target/tests/tomls/legacy/default.toml /dev/null\n--- a/src/settings/target/tests/tomls/legacy/default.toml\n+++ /dev/null\n@@ -1,6 +0,0 @@\n-type = \"webpack\"\n-name = \"worker\"\n-zone_id = \"\"\n-private = false\n-account_id = \"\"\n-route = \"\"\ndiff --git a/src/settings/target/tests/tomls/legacy/kv_namespaces.toml /dev/null\n--- a/src/settings/target/tests/tomls/legacy/kv_namespaces.toml\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-name = \"worker\"\n-type = \"webpack\"\n-zone_id = \"\"\n-private = false\n-account_id = \"\"\n-route = \"\"\n-\n-[[kv-namespaces]]\n-id = \"somecrazylongidentifierstring\"\n-binding = \"prodKV\"\n-\n-[[kv-namespaces]]\n-id = \"anotherwaytoolongidstring\"\n-binding = \"stagingKV\"\ndiff --git a/src/settings/target/tests/tomls/no_default.toml b/src/settings/target/tests/tomls/no_default.toml\n--- a/src/settings/target/tests/tomls/no_default.toml\n+++ b/src/settings/target/tests/tomls/no_default.toml\n@@ -2,7 +2,6 @@\n type = \"webpack\"\n name = \"staging-worker\"\n zone_id = \"\"\n-private = false\n account_id = \"\"\n route = \"\"\n \ndiff --git a/src/settings/target/tests/tomls/no_default.toml b/src/settings/target/tests/tomls/no_default.toml\n--- a/src/settings/target/tests/tomls/no_default.toml\n+++ b/src/settings/target/tests/tomls/no_default.toml\n@@ -10,6 +9,5 @@ route = \"\"\n type = \"webpack\"\n name = \"staging-worker\"\n zone_id = \"\"\n-private = false\n account_id = \"\"\n route = \"\"\n\\ No newline at end of file\n",
        "problem_statement": "Deprecate --release\nRelated to changes from #386  - This should be done in version 1.5.0\n",
        "hints_text": "",
        "created_at": "2019-09-30T22:09:27Z",
        "version": "1.4"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 726,
        "instance_id": "cloudflare__wrangler-legacy-726",
        "issue_numbers": [
            "666"
        ],
        "base_commit": "4a7b3223c4988c4758b8e460e742aed3b629ec82",
        "patch": "diff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -10,6 +10,7 @@ use which::which;\n \n use std::env;\n use std::path::Path;\n+use std::process::Command;\n \n use lazy_static::lazy_static;\n \ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -18,7 +19,7 @@ lazy_static! {\n }\n \n pub fn install(tool_name: &str, owner: &str) -> Result<Download, failure::Error> {\n-    if let Some(download) = tool_exists(tool_name) {\n+    if let Some(download) = tool_exists(tool_name)? {\n         return Ok(download);\n     }\n \ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -38,7 +39,7 @@ pub fn install_artifact(\n     owner: &str,\n     version: &str,\n ) -> Result<Download, failure::Error> {\n-    if let Some(download) = tool_exists(tool_name) {\n+    if let Some(download) = tool_exists(tool_name)? {\n         return Ok(download);\n     }\n \n",
        "test_patch": "diff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -51,14 +52,53 @@ pub fn install_artifact(\n     }\n }\n \n-fn tool_exists(tool_name: &str) -> Option<Download> {\n+fn tool_exists(tool_name: &str) -> Result<Option<Download>, failure::Error> {\n     if let Ok(path) = which(tool_name) {\n-        log::debug!(\"found global {} binary at: {}\", tool_name, path.display());\n         let no_parent_msg = format!(\"{} There is no path parent\", emoji::WARN);\n-        Some(Download::at(path.parent().expect(&no_parent_msg)))\n-    } else {\n-        None\n+        log::debug!(\"found global {} binary at: {}\", tool_name, path.display());\n+        if !tool_needs_update(tool_name, &path)? {\n+            return Ok(Some(Download::at(path.parent().expect(&no_parent_msg))));\n+        }\n+    }\n+\n+    Ok(None)\n+}\n+\n+fn tool_needs_update(tool_name: &str, path: &Path) -> Result<bool, failure::Error> {\n+    let no_version_msg = format!(\"failed to find version for {}\", tool_name);\n+\n+    let tool_version_output = Command::new(path.as_os_str())\n+        .arg(\"--version\")\n+        .output()\n+        .expect(&no_version_msg);\n+\n+    if !tool_version_output.status.success() {\n+        let error = String::from_utf8_lossy(&tool_version_output.stderr);\n+        log::debug!(\"could not find version for {}\\n{}\", tool_name, error);\n+        return Ok(true);\n+    }\n+\n+    let installed_tool_version = String::from_utf8_lossy(&tool_version_output.stdout);\n+    let installed_tool_version = match installed_tool_version.split_whitespace().last() {\n+        None => return Ok(true),\n+        Some(v) => v,\n+    };\n+    let latest_tool_version = get_latest_version(tool_name)?;\n+    if installed_tool_version == latest_tool_version {\n+        log::debug!(\n+            \"installed {} version {} is up to date\",\n+            tool_name,\n+            installed_tool_version\n+        );\n+        return Ok(false);\n     }\n+    log::info!(\n+        \"installed {} version {} is out of date with latest version {}\",\n+        tool_name,\n+        installed_tool_version,\n+        latest_tool_version\n+    );\n+    Ok(true)\n }\n \n fn download_prebuilt(\n",
        "problem_statement": "may need to update our cargo generate version in generate\n\n",
        "hints_text": "",
        "created_at": "2019-09-26T17:43:47Z"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 710,
        "instance_id": "cloudflare__wrangler-legacy-710",
        "issue_numbers": [
            "667"
        ],
        "base_commit": "1018510b3ae1927aa5aea9327daccc03f54e3986",
        "patch": "diff --git /dev/null b/src/commands/kv/bucket/manifest.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/bucket/manifest.rs\n@@ -0,0 +1,3 @@\n+use std::collections::HashMap;\n+\n+pub type AssetManifest = HashMap<String, String>;\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -1,20 +1,21 @@\n extern crate base64;\n \n+mod manifest;\n mod sync;\n mod upload;\n \n use data_encoding::HEXLOWER;\n use sha2::{Digest, Sha256};\n \n+pub use manifest::AssetManifest;\n pub use sync::sync;\n \n-use std::collections::HashMap;\n use std::ffi::OsString;\n use std::path::Path;\n \n use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n \n-use walkdir::WalkDir;\n+use walkdir::{DirEntry, WalkDir};\n \n use crate::terminal::message;\n \ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -22,11 +23,14 @@ use crate::terminal::message;\n pub fn directory_keys_values(\n     directory: &Path,\n     verbose: bool,\n-) -> Result<(Vec<KeyValuePair>, HashMap<String, String>), failure::Error> {\n+) -> Result<(Vec<KeyValuePair>, AssetManifest), failure::Error> {\n     let mut upload_vec: Vec<KeyValuePair> = Vec::new();\n-    let mut key_manifest: HashMap<String, String> = HashMap::new();\n+    let mut asset_manifest: AssetManifest = AssetManifest::new();\n \n-    for entry in WalkDir::new(directory) {\n+    for entry in WalkDir::new(directory)\n+        .into_iter()\n+        .filter_entry(|e| !is_ignored(e))\n+    {\n         let entry = entry.unwrap();\n         let path = entry.path();\n         if path.is_file() {\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -48,10 +52,11 @@ pub fn directory_keys_values(\n                 expiration_ttl: None,\n                 base64: Some(true),\n             });\n-            key_manifest.insert(url_safe_path, key);\n+\n+            asset_manifest.insert(url_safe_path, key);\n         }\n     }\n-    Ok((upload_vec, key_manifest))\n+    Ok((upload_vec, asset_manifest))\n }\n \n // Returns only the hashed keys for a directory's files.\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -74,6 +79,36 @@ fn directory_keys_only(directory: &Path) -> Result<Vec<String>, failure::Error>\n     Ok(upload_vec)\n }\n \n+// todo(gabbi): Replace all the logic below with a proper .wignore implementation\n+// when possible.\n+const KNOWN_UNNECESSARY_DIRS: &[&str] = &[\n+    \"node_modules\", // npm vendoring\n+];\n+const KNOWN_UNNECESSARY_FILE_PREFIXES: &[&str] = &[\n+    \".\", // hidden files\n+];\n+fn is_ignored(entry: &DirEntry) -> bool {\n+    let stem = entry.file_name().to_str().unwrap();\n+    // First, ensure that files with specified prefixes are ignored\n+    for prefix in KNOWN_UNNECESSARY_FILE_PREFIXES {\n+        if stem.starts_with(prefix) {\n+            // Just need to check prefix\n+            message::info(&format!(\"ignoring file {}\", stem));\n+            return true;\n+        }\n+    }\n+\n+    // Then, ensure files in ignored directories are also ignored.\n+    for dir in KNOWN_UNNECESSARY_DIRS {\n+        if stem == *dir {\n+            // Need to check for full equality here\n+            message::info(&format!(\"ignoring directory {}\", dir));\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n // Courtesy of Steve Klabnik's PoC :) Used for bulk operations (write, delete)\n fn generate_url_safe_path(path: &Path) -> Result<String, failure::Error> {\n     // first, we have to re-build the paths: if we're on Windows, we have paths with\ndiff --git a/src/commands/kv/bucket/sync.rs b/src/commands/kv/bucket/sync.rs\n--- a/src/commands/kv/bucket/sync.rs\n+++ b/src/commands/kv/bucket/sync.rs\n@@ -3,6 +3,8 @@ use std::fs::metadata;\n use std::iter::FromIterator;\n use std::path::Path;\n \n+use super::manifest::AssetManifest;\n+\n use crate::commands::kv;\n use crate::commands::kv::bucket::directory_keys_only;\n use crate::commands::kv::bucket::upload::upload_files;\ndiff --git a/src/commands/kv/bucket/sync.rs b/src/commands/kv/bucket/sync.rs\n--- a/src/commands/kv/bucket/sync.rs\n+++ b/src/commands/kv/bucket/sync.rs\n@@ -18,7 +20,7 @@ pub fn sync(\n     namespace_id: &str,\n     path: &Path,\n     verbose: bool,\n-) -> Result<(), failure::Error> {\n+) -> Result<AssetManifest, failure::Error> {\n     kv::validate_target(target)?;\n     // First, upload all changed files in given local directory (aka replace files\n     // in Workers KV that are now stale).\ndiff --git a/src/commands/kv/bucket/sync.rs b/src/commands/kv/bucket/sync.rs\n--- a/src/commands/kv/bucket/sync.rs\n+++ b/src/commands/kv/bucket/sync.rs\n@@ -41,7 +43,7 @@ pub fn sync(\n     if verbose {\n         message::info(\"Preparing to upload updated files...\");\n     }\n-    upload_files(\n+    let asset_manifest = upload_files(\n         target,\n         user.clone(),\n         namespace_id,\ndiff --git a/src/commands/kv/bucket/sync.rs b/src/commands/kv/bucket/sync.rs\n--- a/src/commands/kv/bucket/sync.rs\n+++ b/src/commands/kv/bucket/sync.rs\n@@ -74,5 +76,5 @@ pub fn sync(\n     }\n \n     message::success(\"Success\");\n-    Ok(())\n+    Ok(asset_manifest)\n }\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -1,3 +1,5 @@\n+use super::manifest::AssetManifest;\n+\n use std::collections::HashSet;\n use std::fs::metadata;\n use std::path::Path;\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -25,11 +27,11 @@ pub fn upload_files(\n     path: &Path,\n     exclude_keys: Option<&HashSet<String>>,\n     verbose: bool,\n-) -> Result<(), failure::Error> {\n-    let mut pairs: Vec<KeyValuePair> = match &metadata(path) {\n+) -> Result<AssetManifest, failure::Error> {\n+    let (mut pairs, asset_manifest): (Vec<KeyValuePair>, AssetManifest) = match &metadata(path) {\n         Ok(file_type) if file_type.is_dir() => {\n-            let (upload_vec, _) = directory_keys_values(path, verbose)?;\n-            Ok(upload_vec)\n+            let (pairs, asset_manifest) = directory_keys_values(path, verbose)?;\n+            Ok((pairs, asset_manifest))\n         }\n \n         Ok(_file_type) => {\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -39,11 +41,13 @@ pub fn upload_files(\n         Err(e) => Err(format_err!(\"{}\", e)),\n     }?;\n \n-    // If a list of files to skip uploading is provided, filter the filename/file key pairs\n-    if let Some(excluded_keys) = exclude_keys {\n-        pairs = filter_unchanged_remote_files(pairs, excluded_keys);\n+    let mut ignore = &HashSet::new();\n+    if let Some(exclude) = exclude_keys {\n+        ignore = exclude;\n     }\n \n+    pairs = filter_files(pairs, ignore);\n+\n     validate_file_uploads(pairs.clone())?;\n \n     // Iterate over all key-value pairs and create batches of uploads, each of which are\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -77,7 +81,7 @@ pub fn upload_files(\n         }\n     }\n \n-    Ok(())\n+    Ok(asset_manifest)\n }\n \n fn call_put_bulk_api(\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -95,13 +99,10 @@ fn call_put_bulk_api(\n     Ok(())\n }\n \n-fn filter_unchanged_remote_files(\n-    pairs: Vec<KeyValuePair>,\n-    exclude_keys: &HashSet<String>,\n-) -> Vec<KeyValuePair> {\n+fn filter_files(pairs: Vec<KeyValuePair>, already_uploaded: &HashSet<String>) -> Vec<KeyValuePair> {\n     let mut filtered_pairs: Vec<KeyValuePair> = Vec::new();\n     for pair in pairs {\n-        if !exclude_keys.contains(&pair.key) {\n+        if !already_uploaded.contains(&pair.key) {\n             filtered_pairs.push(pair);\n         }\n     }\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -14,6 +14,7 @@ use upload_form::build_script_and_upload_form;\n use std::path::Path;\n \n use crate::commands::kv;\n+use crate::commands::kv::bucket::AssetManifest;\n use crate::commands::subdomain::Subdomain;\n use crate::commands::validate_worker_name;\n use crate::http;\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -32,8 +33,8 @@ pub fn publish(user: &GlobalUser, target: &mut Target) -> Result<(), failure::Er\n         bind_static_site_contents(user, target, &site_config, false)?;\n     }\n \n-    upload_buckets(target, user)?;\n-    build_and_publish_script(&user, &target)?;\n+    let asset_manifest = upload_buckets(target, user)?;\n+    build_and_publish_script(&user, &target, asset_manifest)?;\n \n     Ok(())\n }\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -55,7 +56,11 @@ pub fn bind_static_site_contents(\n     Ok(())\n }\n \n-fn build_and_publish_script(user: &GlobalUser, target: &Target) -> Result<(), failure::Error> {\n+fn build_and_publish_script(\n+    user: &GlobalUser,\n+    target: &Target,\n+    asset_manifest: Option<AssetManifest>,\n+) -> Result<(), failure::Error> {\n     let worker_addr = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}\",\n         target.account_id, target.name,\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -63,7 +68,7 @@ fn build_and_publish_script(user: &GlobalUser, target: &Target) -> Result<(), fa\n \n     let client = http::auth_client(user);\n \n-    let script_upload_form = build_script_and_upload_form(target)?;\n+    let script_upload_form = build_script_and_upload_form(target, asset_manifest)?;\n \n     let mut res = client\n         .put(&worker_addr)\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -97,7 +102,11 @@ fn build_and_publish_script(user: &GlobalUser, target: &Target) -> Result<(), fa\n     Ok(())\n }\n \n-pub fn upload_buckets(target: &Target, user: &GlobalUser) -> Result<(), failure::Error> {\n+pub fn upload_buckets(\n+    target: &Target,\n+    user: &GlobalUser,\n+) -> Result<Option<AssetManifest>, failure::Error> {\n+    let mut asset_manifest = None;\n     for namespace in &target.kv_namespaces() {\n         if let Some(bucket) = &namespace.bucket {\n             if bucket.is_empty() {\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -120,11 +129,20 @@ pub fn upload_buckets(target: &Target, user: &GlobalUser) -> Result<(), failure:\n                     path.display()\n                 )\n             }\n-            kv::bucket::sync(target, user.to_owned(), &namespace.id, path, false)?;\n+            let manifest_result =\n+                kv::bucket::sync(target, user.to_owned(), &namespace.id, path, false)?;\n+            if target.site.is_some() {\n+                if asset_manifest.is_none() {\n+                    asset_manifest = Some(manifest_result)\n+                } else {\n+                    // only site manifest should be returned\n+                    unreachable!()\n+                }\n+            }\n         }\n     }\n \n-    Ok(())\n+    Ok(asset_manifest)\n }\n \n fn build_subdomain_request() -> String {\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -1,3 +1,4 @@\n+use crate::commands::kv::bucket::AssetManifest;\n use crate::commands::publish;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -52,8 +53,8 @@ pub fn build_and_upload(\n                     publish::bind_static_site_contents(user, target, &site_config, true)?;\n                 }\n \n-                publish::upload_buckets(target, user)?;\n-                authenticated_upload(&client, &target)?\n+                let asset_manifest = publish::upload_buckets(target, user)?;\n+                authenticated_upload(&client, &target, asset_manifest)?\n             } else {\n                 message::warn(&format!(\n                     \"Your wrangler.toml is missing the following fields: {:?}\",\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -119,14 +120,18 @@ fn validate(target: &Target) -> Vec<&str> {\n     missing_fields\n }\n \n-fn authenticated_upload(client: &Client, target: &Target) -> Result<Preview, failure::Error> {\n+fn authenticated_upload(\n+    client: &Client,\n+    target: &Target,\n+    asset_manifest: Option<AssetManifest>,\n+) -> Result<Preview, failure::Error> {\n     let create_address = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}/preview\",\n         target.account_id, target.name\n     );\n     log::info!(\"address: {}\", create_address);\n \n-    let script_upload_form = publish::build_script_and_upload_form(target)?;\n+    let script_upload_form = publish::build_script_and_upload_form(target, asset_manifest)?;\n \n     let mut res = client\n         .post(&create_address)\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -156,9 +161,9 @@ fn unauthenticated_upload(client: &Client, target: &Target) -> Result<Preview, f\n         );\n         let mut target = target.clone();\n         target.kv_namespaces = None;\n-        publish::build_script_and_upload_form(&target)?\n+        publish::build_script_and_upload_form(&target, None)?\n     } else {\n-        publish::build_script_and_upload_form(&target)?\n+        publish::build_script_and_upload_form(&target, None)?\n     };\n \n     let mut res = client\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -8,7 +8,7 @@ use std::path::Path;\n \n use crate::commands;\n use crate::commands::build::wranglerjs;\n-use crate::commands::kv::bucket::directory_keys_values;\n+use crate::commands::kv::bucket::AssetManifest;\n use crate::settings::binding;\n use crate::settings::metadata::Metadata;\n use crate::settings::target::kv_namespace;\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -20,7 +20,10 @@ use wasm_module::WasmModule;\n \n use super::{krate, Package};\n \n-pub fn build_script_and_upload_form(target: &Target) -> Result<Form, failure::Error> {\n+pub fn build_script_and_upload_form(\n+    target: &Target,\n+    asset_manifest: Option<AssetManifest>,\n+) -> Result<Form, failure::Error> {\n     // Build the script before uploading.\n     commands::build(&target)?;\n \ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -75,11 +78,11 @@ pub fn build_script_and_upload_form(target: &Target) -> Result<Form, failure::Er\n \n             let mut text_blobs = Vec::new();\n \n-            if let Some(site) = &target.site {\n+            if let Some(asset_manifest) = asset_manifest {\n                 log::info!(\"adding __STATIC_CONTENT_MANIFEST\");\n                 let binding = \"__STATIC_CONTENT_MANIFEST\".to_string();\n-                let asset_manifest = get_asset_manifest(&site.bucket)?;\n-                let text_blob = TextBlob::new(asset_manifest, binding)?;\n+                let asset_manifest_blob = get_asset_manifest_blob(asset_manifest)?;\n+                let text_blob = TextBlob::new(asset_manifest_blob, binding)?;\n                 text_blobs.push(text_blob);\n             }\n \ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -90,11 +93,9 @@ pub fn build_script_and_upload_form(target: &Target) -> Result<Form, failure::Er\n     }\n }\n \n-fn get_asset_manifest(directory: &str) -> Result<String, failure::Error> {\n-    let directory = Path::new(&directory);\n-    let (_, manifest) = directory_keys_values(directory, false)?;\n-    let manifest = serde_json::to_string(&manifest)?;\n-    Ok(manifest)\n+fn get_asset_manifest_blob(asset_manifest: AssetManifest) -> Result<String, failure::Error> {\n+    let asset_manifest = serde_json::to_string(&asset_manifest)?;\n+    Ok(asset_manifest)\n }\n \n fn build_form(assets: &ProjectAssets) -> Result<Form, failure::Error> {\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -105,7 +106,8 @@ fn build_form(assets: &ProjectAssets) -> Result<Form, failure::Error> {\n     form = add_metadata(form, assets)?;\n     form = add_files(form, assets)?;\n \n-    log::info!(\"{:#?}\", &form);\n+    log::info!(\"building form\");\n+    log::info!(\"{:?}\", &form);\n \n     Ok(form)\n }\n",
        "test_patch": "diff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -157,7 +192,85 @@ fn generate_path_with_hash(path: &Path, hashed_value: String) -> Result<String,\n mod tests {\n     use super::*;\n     use regex::Regex;\n+    use std::fs;\n     use std::path::{Path, PathBuf};\n+    use walkdir::WalkDir;\n+\n+    #[test]\n+    fn it_can_ignore_dir() {\n+        let dir_name = \"node_modules\";\n+        // If test dir already exists, delete it.\n+        if fs::metadata(dir_name).is_ok() {\n+            fs::remove_dir_all(dir_name).unwrap();\n+        }\n+\n+        fs::create_dir(dir_name).unwrap();\n+        fs::File::create(format!(\"{}/ignore_me.txt\", dir_name)).unwrap();\n+\n+        let mut actual_count = 0;\n+        for _ in WalkDir::new(dir_name)\n+            .into_iter()\n+            .filter_entry(|e| !is_ignored(e))\n+        {\n+            actual_count = actual_count + 1;\n+        }\n+\n+        fs::remove_dir_all(dir_name).unwrap();\n+\n+        // No iterations should happen above because \"node_modules\" and its contents are ignored.\n+        let expected_count = 0;\n+        assert!(actual_count == expected_count);\n+    }\n+\n+    #[test]\n+    fn it_can_ignore_prefix() {\n+        let file_name = \".dotfile\";\n+        // If test file already exists, delete it.\n+        if fs::metadata(file_name).is_ok() {\n+            fs::remove_file(file_name).unwrap();\n+        }\n+\n+        fs::File::create(file_name).unwrap();\n+\n+        let mut actual_count = 0;\n+        for _ in WalkDir::new(file_name)\n+            .into_iter()\n+            .filter_entry(|e| !is_ignored(e))\n+        {\n+            actual_count = actual_count + 1;\n+        }\n+\n+        fs::remove_file(file_name).unwrap();\n+\n+        // No iterations should happen above because dotfiles are ignored.\n+        let expected_count = 0;\n+        assert!(actual_count == expected_count);\n+    }\n+\n+    #[test]\n+    fn it_can_allow_unfiltered_files() {\n+        let file_name = \"my_file\";\n+        // If test file already exists, delete it.\n+        if fs::metadata(file_name).is_ok() {\n+            fs::remove_file(file_name).unwrap();\n+        }\n+\n+        fs::File::create(file_name).unwrap();\n+\n+        let mut actual_count = 0;\n+        for _ in WalkDir::new(file_name)\n+            .into_iter()\n+            .filter_entry(|e| !is_ignored(e))\n+        {\n+            actual_count = actual_count + 1;\n+        }\n+\n+        fs::remove_file(file_name).unwrap();\n+\n+        // No iterations should happen above because dotfiles are ignored.\n+        let expected_count = 1;\n+        assert!(actual_count == expected_count);\n+    }\n \n     #[test]\n     fn it_inserts_hash_before_extension() {\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -136,13 +137,12 @@ pub fn validate_file_uploads(pairs: Vec<KeyValuePair>) -> Result<(), failure::Er\n \n #[cfg(test)]\n mod tests {\n+    use super::*;\n     use std::collections::HashSet;\n     use std::path::Path;\n \n-    use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n-\n     use crate::commands::kv::bucket::generate_path_and_key;\n-    use crate::commands::kv::bucket::upload::filter_unchanged_remote_files;\n+    use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n \n     #[test]\n     fn it_can_filter_preexisting_files() {\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -187,7 +187,7 @@ mod tests {\n             expiration: None,\n             base64: None,\n         }];\n-        let actual = filter_unchanged_remote_files(pairs_to_upload, &exclude_keys);\n+        let actual = filter_files(pairs_to_upload, &exclude_keys);\n         check_kv_pairs_equality(expected, actual);\n     }\n \n",
        "problem_statement": "Sourcemaps are unable to be uploaded when publishing a site with Wrangler\n### \ud83d\udc1b Bug Report\r\n\r\nWhen trying to publish a Gatsby site, the sourcemaps generated for each page are large enough that they make the `publish` step fail. IMO we should ignore the sourcemap files (maybe via a config) or warn on this instead of throwing an error.\r\n\r\n```\r\n\u276f ~/.cargo/bin/wrangler publish\r\n\ud83c\udf00  Creating namespace for Workers Site \"__frontendjobs-closedsource-workers_sites_assets\"\r\nError: File `component---src-pages-post-js-c6d1c3aab5c008b72fa8.js.map-b3fd6703031f027b11dd2dc7e3448fe3838efa53e5c6436c4aa3dd9c721cc7e4` of 3252144 bytes exceeds the maximum value size limit of 2097152 bytes\r\n```\r\n\r\n#### Environment\r\n\r\n`wrangler` built from master this AM \r\n\r\n#### Steps to reproduce\r\n\r\nRun `wrangler publish` on a Workers site with large sourcemaps. Sorry, my project is closed-source, but happy to give access to Wrangler team if needed!\n",
        "hints_text": "@signalnerve can you say more about what you'd like to see here?\r\n\r\ni could imagine that we could fail on publish with a warning that files are too big and then encourage you to run the command again... skipping the too large files\r\n\r\nOR\r\n\r\nyou could drop a .wranglerignore in the route of your project to ignore files that are too large? ",
        "created_at": "2019-09-24T22:48:00Z"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 708,
        "instance_id": "cloudflare__wrangler-legacy-708",
        "issue_numbers": [
            "697"
        ],
        "base_commit": "7a46daadd3fc69d593cfd7f3c4f69eabc65f1ab0",
        "patch": "diff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -36,7 +36,7 @@ pub fn directory_keys_values(\n             let b64_value = base64::encode(&value);\n \n             let (url_safe_path, key) =\n-                generate_url_safe_key_and_hash(path, directory, Some(b64_value.clone()))?;\n+                generate_path_and_key(path, directory, Some(b64_value.clone()))?;\n \n             if verbose {\n                 message::working(&format!(\"Parsing {}...\", key.clone()));\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -66,7 +66,7 @@ fn directory_keys_only(directory: &Path) -> Result<Vec<String>, failure::Error>\n             // Need to base64 encode value\n             let b64_value = base64::encode(&value);\n \n-            let (_, key) = generate_url_safe_key_and_hash(path, directory, Some(b64_value))?;\n+            let (_, key) = generate_path_and_key(path, directory, Some(b64_value))?;\n \n             upload_vec.push(key);\n         }\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -75,10 +75,8 @@ fn directory_keys_only(directory: &Path) -> Result<Vec<String>, failure::Error>\n }\n \n // Courtesy of Steve Klabnik's PoC :) Used for bulk operations (write, delete)\n-fn generate_url_safe_path(path: &Path, directory: &Path) -> Result<String, failure::Error> {\n-    let path = path.strip_prefix(directory).unwrap();\n-\n-    // next, we have to re-build the paths: if we're on Windows, we have paths with\n+fn generate_url_safe_path(path: &Path) -> Result<String, failure::Error> {\n+    // first, we have to re-build the paths: if we're on Windows, we have paths with\n     // `\\` as separators. But we want to use `/` as separators. Because that's how URLs\n     // work.\n     let mut path_with_forward_slash = OsString::new();\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -100,22 +98,26 @@ fn generate_url_safe_path(path: &Path, directory: &Path) -> Result<String, failu\n     Ok(path.to_string())\n }\n \n-// Appends the SHA-256 hash of the path's file contents to the url-safe path of a file to\n+// Adds the SHA-256 hash of the path's file contents to the url-safe path of a file to\n // generate a versioned key for the file and its contents. Returns the url-safe path prefix\n // for the key, as well as the key with hash appended.\n-// e.g (sitemap.xml, sitemap.xml-ec717eb2131fdd4fff803b851d2aa5b1dc3e0af36bc3c8c40f2095c747e80d1e)\n-pub fn generate_url_safe_key_and_hash(\n+// e.g (sitemap.xml, sitemap.ec717eb2131fdd4fff803b851d2aa5b1dc3e0af36bc3c8c40f2095c747e80d1e.xml)\n+pub fn generate_path_and_key(\n     path: &Path,\n     directory: &Path,\n     value: Option<String>,\n ) -> Result<(String, String), failure::Error> {\n-    let url_safe_path = generate_url_safe_path(path, directory)?;\n+    // strip the bucket directory from both paths for ease of reference.\n+    let relative_path = path.strip_prefix(directory).unwrap();\n+\n+    let url_safe_path = generate_url_safe_path(relative_path)?;\n \n     let path_with_hash = if let Some(value) = value {\n         let digest = get_digest(value)?;\n-        format!(\"{}-{}\", url_safe_path, digest)\n+\n+        generate_path_with_hash(relative_path, digest)?\n     } else {\n-        url_safe_path.to_string()\n+        url_safe_path.to_owned()\n     };\n \n     Ok((url_safe_path, path_with_hash))\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -28,9 +28,10 @@ pub fn upload_files(\n ) -> Result<(), failure::Error> {\n     let mut pairs: Vec<KeyValuePair> = match &metadata(path) {\n         Ok(file_type) if file_type.is_dir() => {\n-            let (p, _) = directory_keys_values(path, verbose)?;\n-            Ok(p)\n+            let (upload_vec, _) = directory_keys_values(path, verbose)?;\n+            Ok(upload_vec)\n         }\n+\n         Ok(_file_type) => {\n             // any other file types (files, symlinks)\n             Err(format_err!(\"wrangler kv:bucket upload takes a directory\"))\ndiff --git a/src/commands/kv/namespace/site.rs b/src/commands/kv/namespace/site.rs\n--- a/src/commands/kv/namespace/site.rs\n+++ b/src/commands/kv/namespace/site.rs\n@@ -18,10 +18,12 @@ pub fn site(\n     kv::validate_target(target)?;\n     let client = kv::api_client(user.to_owned())?;\n \n-    let title = match preview {\n-        false => format!(\"__{}-{}\", target.name, \"workers_sites_assets\"),\n-        true => format!(\"__{}-{}\", target.name, \"workers_sites_assets_preview\"),\n+    let title = if preview {\n+        format!(\"__{}-{}\", target.name, \"workers_sites_assets_preview\")\n+    } else {\n+        format!(\"__{}-{}\", target.name, \"workers_sites_assets\")\n     };\n+\n     let msg = format!(\"Creating namespace for Workers Site \\\"{}\\\"\", title);\n     message::working(&msg);\n \ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -77,11 +77,10 @@ pub fn preview(\n             HTTPMethod::Get => get(cookie, &client)?,\n             HTTPMethod::Post => post(cookie, &client, body)?,\n         };\n-        let msg = match sites_preview {\n-            false => format!(\"Your Worker responded with: {}\", worker_res),\n-            true => {\n-                \"Your Worker is a Workers Site, please preview it in browser window.\".to_string()\n-            }\n+        let msg = if sites_preview {\n+            \"Your Worker is a Workers Site, please preview it in browser window.\".to_string()\n+        } else {\n+            format!(\"Your Worker responded with: {}\", worker_res)\n         };\n         message::preview(&msg);\n     }\n",
        "test_patch": "diff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -128,3 +130,95 @@ fn get_digest(value: String) -> Result<String, failure::Error> {\n     let hex_digest = HEXLOWER.encode(digest.as_ref());\n     Ok(hex_digest)\n }\n+\n+// Assumes that `path` is a file (called from a match branch for path.is_file())\n+// Assumes that `hashed_value` is a String, not an Option<String> (called from a match branch for value.is_some())\n+fn generate_path_with_hash(path: &Path, hashed_value: String) -> Result<String, failure::Error> {\n+    if let Some(file_stem) = path.file_stem() {\n+        let mut file_name = file_stem.to_os_string();\n+        let extension = path.extension();\n+\n+        file_name.push(\".\");\n+        file_name.push(hashed_value);\n+        if let Some(ext) = extension {\n+            file_name.push(\".\");\n+            file_name.push(ext);\n+        }\n+\n+        let new_path = path.with_file_name(file_name);\n+\n+        Ok(generate_url_safe_path(&new_path)?)\n+    } else {\n+        failure::bail!(\"no file_stem for path {}\", path.display())\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use regex::Regex;\n+    use std::path::{Path, PathBuf};\n+\n+    #[test]\n+    fn it_inserts_hash_before_extension() {\n+        let value = \"<h1>Hello World!</h1>\";\n+        let hashed_value = get_digest(String::from(value)).unwrap();\n+\n+        let path = PathBuf::from(\"path\").join(\"to\").join(\"asset.html\");\n+        let actual_path_with_hash =\n+            generate_path_with_hash(&path, hashed_value.to_owned()).unwrap();\n+\n+        let expected_path_with_hash = format!(\"path/to/asset.{}.html\", hashed_value);\n+\n+        assert_eq!(actual_path_with_hash, expected_path_with_hash);\n+    }\n+\n+    #[test]\n+    fn it_inserts_hash_without_extension() {\n+        let value = \"<h1>Hello World!</h1>\";\n+        let hashed_value = get_digest(String::from(value)).unwrap();\n+\n+        let path = PathBuf::from(\"path\").join(\"to\").join(\"asset\");\n+        let actual_path_with_hash =\n+            generate_path_with_hash(&path, hashed_value.to_owned()).unwrap();\n+\n+        let expected_path_with_hash = format!(\"path/to/asset.{}\", hashed_value);;\n+\n+        assert_eq!(actual_path_with_hash, expected_path_with_hash);\n+    }\n+\n+    #[test]\n+    fn it_generates_a_url_safe_hash() {\n+        let os_path = Path::new(\"some_stuff/invalid file&name.chars\");\n+        let actual_url_safe_path = generate_url_safe_path(os_path).unwrap();\n+        // TODO: url-encode paths\n+        let expected_url_safe_path = \"some_stuff/invalid file&name.chars\";\n+\n+        assert_eq!(actual_url_safe_path, expected_url_safe_path);\n+    }\n+\n+    #[test]\n+    fn it_removes_bucket_dir_prefix() {\n+        let path = Path::new(\"./build/path/to/asset.ext\");\n+        let directory = Path::new(\"./build\");\n+        let value = Some(\"<h1>Hello World!</h1>\".to_string());\n+        let (path, key) = generate_path_and_key(path, directory, value).unwrap();\n+\n+        assert!(!path.contains(\"directory\"));\n+        assert!(!key.contains(\"directory\"));\n+    }\n+\n+    #[test]\n+    fn it_combines_url_safe_and_hash_properly() {\n+        let path = Path::new(\"./build/path/to/asset.ext\");\n+        let directory = Path::new(\"./build\");\n+        let value = Some(\"<h1>Hello World!</h1>\".to_string());\n+        let (path, key) = generate_path_and_key(path, directory, value).unwrap();\n+\n+        let expected_path = \"path/to/asset.ext\".to_string();\n+        let expected_key_regex = Regex::new(r\"^path/to/asset\\.[0-9a-f]{64}\\.ext\").unwrap();\n+\n+        assert_eq!(path, expected_path);\n+        assert!(expected_key_regex.is_match(&key));\n+    }\n+}\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -140,30 +141,21 @@ mod tests {\n \n     use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n \n-    use crate::commands::kv::bucket::generate_url_safe_key_and_hash;\n+    use crate::commands::kv::bucket::generate_path_and_key;\n     use crate::commands::kv::bucket::upload::filter_unchanged_remote_files;\n \n     #[test]\n     fn it_can_filter_preexisting_files() {\n-        let (_, key_a_old) = generate_url_safe_key_and_hash(\n-            Path::new(\"/a\"),\n-            Path::new(\"/\"),\n-            Some(\"old\".to_string()),\n-        )\n-        .unwrap();\n-        let (_, key_b_old) = generate_url_safe_key_and_hash(\n-            Path::new(\"/b\"),\n-            Path::new(\"/\"),\n-            Some(\"old\".to_string()),\n-        )\n-        .unwrap();\n+        let (_, key_a_old) =\n+            generate_path_and_key(Path::new(\"/a\"), Path::new(\"/\"), Some(\"old\".to_string()))\n+                .unwrap();\n+        let (_, key_b_old) =\n+            generate_path_and_key(Path::new(\"/b\"), Path::new(\"/\"), Some(\"old\".to_string()))\n+                .unwrap();\n         // Generate new key (using hash of new value) for b when to simulate its value being updated.\n-        let (_, key_b_new) = generate_url_safe_key_and_hash(\n-            Path::new(\"/b\"),\n-            Path::new(\"/\"),\n-            Some(\"new\".to_string()),\n-        )\n-        .unwrap();\n+        let (_, key_b_new) =\n+            generate_path_and_key(Path::new(\"/b\"), Path::new(\"/\"), Some(\"new\".to_string()))\n+                .unwrap();\n \n         // Old values found on remote\n         let mut exclude_keys = HashSet::new();\n",
        "problem_statement": "insert hash before extension instead of appending to key\nwe use mime to find out what content type to respond with in the worker, and by appending a hash to the end of the key, we confuse it and come up with null content type. there are two options here:\r\n\r\n1. we can snip the hash off the end of the key in the worker when we got to check the content-type. this is possibly the easiest approach, and would be an issue in the package.\r\n2. we can insert the hash between the file name and its extension the way that other static site generators do (format `path/to/filename.<hash>.ext`).\n",
        "hints_text": "",
        "created_at": "2019-09-24T22:27:37Z"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1992,
        "instance_id": "cloudflare__wrangler-legacy-1992",
        "issue_numbers": [
            "1950"
        ],
        "base_commit": "c097240e1449e5ebf41f017014460bca21feb19d",
        "patch": "diff --git a/src/cli/mod.rs b/src/cli/mod.rs\n--- a/src/cli/mod.rs\n+++ b/src/cli/mod.rs\n@@ -38,7 +38,7 @@ use crate::commands::dev::Protocol;\n use crate::commands::tail::websocket::TailFormat;\n use crate::preview::HttpMethod;\n use crate::settings::toml::migrations::{\n-    DurableObjectsMigration, Migration, MigrationConfig, Migrations, RenameClass, TransferClass,\n+    DurableObjectsMigration, Migration, MigrationTag, Migrations, RenameClass, TransferClass,\n };\n use crate::settings::toml::TargetType;\n \ndiff --git a/src/cli/mod.rs b/src/cli/mod.rs\n--- a/src/cli/mod.rs\n+++ b/src/cli/mod.rs\n@@ -293,17 +293,25 @@ pub struct AdhocMigration {\n     delete_class: Vec<String>,\n \n     /// Rename a durable object class\n-    #[structopt(name = \"rename-class\", long, number_of_values = 2)]\n+    #[structopt(name = \"rename-class\", long, number_of_values = 2, value_names(&[\"from class\", \"to class\"]))]\n     rename_class: Vec<String>,\n \n     /// Transfer all durable objects associated with a class in another script to a class in\n     /// this script\n-    #[structopt(name = \"transfer-class\", long, number_of_values = 3)]\n+    #[structopt(name = \"transfer-class\", long, number_of_values = 3, value_names(&[\"from script\", \"from class\", \"to class\"]))]\n     transfer_class: Vec<String>,\n+\n+    /// Specify the existing migration tag for the script.\n+    #[structopt(name = \"old-tag\", long)]\n+    old_tag: Option<String>,\n+\n+    /// Specify the new migration tag for the script\n+    #[structopt(name = \"new-tag\", long)]\n+    new_tag: Option<String>,\n }\n \n impl AdhocMigration {\n-    pub fn into_migration_config(self) -> Option<MigrationConfig> {\n+    pub fn into_migrations(self) -> Option<Migrations> {\n         let migration = DurableObjectsMigration {\n             new_classes: self.new_class,\n             deleted_classes: self.delete_class,\ndiff --git a/src/cli/mod.rs b/src/cli/mod.rs\n--- a/src/cli/mod.rs\n+++ b/src/cli/mod.rs\n@@ -343,12 +351,20 @@ impl AdhocMigration {\n             && migration.renamed_classes.is_empty()\n             && migration.transferred_classes.is_empty();\n \n-        if !is_migration_empty {\n-            Some(MigrationConfig {\n-                tag: None,\n-                migration: Migration {\n+        if !is_migration_empty || self.old_tag.is_some() || self.new_tag.is_some() {\n+            let migration = if !is_migration_empty {\n+                Some(Migration {\n                     durable_objects: migration,\n-                },\n+                })\n+            } else {\n+                None\n+            };\n+\n+            Some(Migrations::Adhoc {\n+                script_tag: MigrationTag::Unknown,\n+                provided_old_tag: self.old_tag,\n+                new_tag: self.new_tag,\n+                migration,\n             })\n         } else {\n             None\ndiff --git a/src/cli/publish.rs b/src/cli/publish.rs\n--- a/src/cli/publish.rs\n+++ b/src/cli/publish.rs\n@@ -1,5 +1,5 @@\n+use super::AdhocMigration;\n use super::Cli;\n-use super::{AdhocMigration, Migrations};\n use crate::commands;\n use crate::settings::{global_user::GlobalUser, toml::Manifest};\n use crate::terminal::message::{Message, Output, StdOut};\ndiff --git a/src/cli/publish.rs b/src/cli/publish.rs\n--- a/src/cli/publish.rs\n+++ b/src/cli/publish.rs\n@@ -30,10 +30,8 @@ pub fn publish(\n     let manifest = Manifest::new(&cli_params.config)?;\n     let mut target = manifest.get_target(cli_params.environment.as_deref(), false)?;\n \n-    if let Some(migration) = migration.into_migration_config() {\n-        target.migrations = Some(Migrations {\n-            migrations: vec![migration],\n-        });\n+    if let Some(migration) = migration.into_migrations() {\n+        target.migrations = Some(migration);\n     }\n \n     let output = if output.as_deref() == Some(\"json\") {\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -3,6 +3,7 @@ use std::path::Path;\n \n use anyhow::Result;\n use indicatif::{ProgressBar, ProgressStyle};\n+use reqwest::blocking::Client;\n use serde::{Deserialize, Serialize};\n \n use crate::build::build_target;\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -10,6 +11,7 @@ use crate::deploy::{self, DeploymentSet};\n use crate::http::{self, Feature};\n use crate::kv::bulk;\n use crate::settings::global_user::GlobalUser;\n+use crate::settings::toml::migrations::{MigrationTag, Migrations};\n use crate::settings::toml::Target;\n use crate::sites;\n use crate::terminal::emoji;\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -50,11 +52,21 @@ pub fn publish(\n         Err(e) => Err(e),\n     }?;\n \n-    // We verify early here, so we don't perform pre-upload tasks if the upload will fail\n     if let Some(build_config) = &target.build {\n         build_config.verify_upload_dir()?;\n     }\n \n+    if target.migrations.is_some() {\n+        // Can't do this in the if below, since that one takes a mutable borrow on target\n+        let client = http::legacy_auth_client(user);\n+        let script_migration_tag = get_migration_tag(&client, target)?;\n+\n+        match target.migrations.as_mut().unwrap() {\n+            Migrations::Adhoc { script_tag, .. } => *script_tag = script_migration_tag,\n+            Migrations::List { script_tag, .. } => *script_tag = script_migration_tag,\n+        };\n+    }\n+\n     if let Some(site_config) = &target.site {\n         let path = &site_config.bucket.clone();\n         validate_bucket_location(path)?;\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -216,3 +228,45 @@ fn validate_target_required_fields_present(target: &Target) -> Result<()> {\n \n     Ok(())\n }\n+\n+fn get_migration_tag(client: &Client, target: &Target) -> Result<MigrationTag, anyhow::Error> {\n+    // Today, the easiest way to get metadata about a script (including the migration tag)\n+    // is the list endpoint, as the individual script endpoint just returns the source code for a\n+    // given script (and doesn't work at all for DOs). Once we add an individual script metadata\n+    // endpoint, we could use that here instead of listing all of the scripts. Listing isn't too bad\n+    // today though, as most accounts are limited to 30 scripts anyways.\n+\n+    let addr = format!(\n+        \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts\",\n+        target.account_id.load()?\n+    );\n+\n+    let res: ListScriptsV4ApiResponse = client.get(&addr).send()?.json()?;\n+\n+    let tag = match res.result.into_iter().find(|s| s.id == target.name) {\n+        Some(ScriptResponse {\n+            migration_tag: Some(tag),\n+            ..\n+        }) => MigrationTag::HasTag(tag),\n+        Some(ScriptResponse {\n+            migration_tag: None,\n+            ..\n+        }) => MigrationTag::NoTag,\n+        None => MigrationTag::NoScript,\n+    };\n+\n+    log::info!(\"Current MigrationTag: {:#?}\", tag);\n+\n+    Ok(tag)\n+}\n+\n+#[derive(Debug, Deserialize)]\n+struct ListScriptsV4ApiResponse {\n+    pub result: Vec<ScriptResponse>,\n+}\n+\n+#[derive(Debug, Deserialize)]\n+struct ScriptResponse {\n+    pub id: String,\n+    pub migration_tag: Option<String>,\n+}\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -11,6 +11,7 @@ use once_cell::sync::OnceCell;\n use serde::{Deserialize, Serialize};\n use serde_with::rust::string_empty_as_none;\n \n+use super::migrations::{MigrationConfig, MigrationTag, Migrations};\n use super::UsageModel;\n use crate::commands::whoami::fetch_accounts;\n use crate::commands::{validate_worker_name, whoami, DEFAULT_CONFIG_PATH};\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -57,6 +58,7 @@ pub struct Manifest {\n     pub kv_namespaces: Option<Vec<ConfigKvNamespace>>,\n     pub triggers: Option<Triggers>,\n     pub durable_objects: Option<DurableObjects>,\n+    pub migrations: Option<Vec<MigrationConfig>>,\n     #[serde(default, with = \"string_empty_as_none\")]\n     pub usage_model: Option<UsageModel>,\n     pub compatibility_date: Option<String>,\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -369,7 +371,10 @@ impl Manifest {\n             name: self.name.clone(), // Inherited\n             kv_namespaces: get_namespaces(self.kv_namespaces.clone(), preview)?, // Not inherited\n             durable_objects: self.durable_objects.clone(), // Not inherited\n-            migrations: None,        // TODO(soon) Allow migrations in wrangler.toml\n+            migrations: self.migrations.as_ref().map(|migrations| Migrations::List {\n+                script_tag: MigrationTag::Unknown,\n+                migrations: migrations.clone(),\n+            }), // Top Level\n             site: self.site.clone(), // Inherited\n             vars: self.vars.clone(), // Not inherited\n             text_blobs: self.text_blobs.clone(), // Inherited\ndiff --git a/src/settings/toml/migrations.rs b/src/settings/toml/migrations.rs\n--- a/src/settings/toml/migrations.rs\n+++ b/src/settings/toml/migrations.rs\n@@ -1,44 +1,175 @@\n+use std::collections::HashSet;\n+\n use serde::{Deserialize, Serialize};\n \n-#[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]\n-pub struct Migrations {\n-    pub migrations: Vec<MigrationConfig>,\n+#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]\n+pub enum MigrationTag {\n+    HasTag(String),\n+    NoTag,\n+    NoScript,\n+    Unknown,\n+}\n+\n+#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]\n+pub enum Migrations {\n+    Adhoc {\n+        // The actual existing migration tag for the script, filled in by\n+        // the publish command before form building. Used to validate provided_old_tag\n+        script_tag: MigrationTag,\n+        // The expected migration tag for the script if provided on the command line using --old-tag.\n+        provided_old_tag: Option<String>,\n+        // The new migration tag for the script if provided on the command line using --new-tag.\n+        new_tag: Option<String>,\n+        // The actual migration, if any directives are provided\n+        migration: Option<Migration>,\n+    },\n+    List {\n+        // The actual existing migration tag for the script, filled in by\n+        // the publish command before form building\n+        script_tag: MigrationTag,\n+        migrations: Vec<MigrationConfig>,\n+    },\n }\n \n impl Migrations {\n-    pub fn api_migration(&self) -> Result<ApiMigration, anyhow::Error> {\n-        // TODO: make api call to get most recent tag, and coalesce tags afterwards.\n-        // For now, migrations will only ever have a single adhoc migration in it.\n-        match &self.migrations {\n-            migrations if migrations.len() == 1 => Ok(ApiMigration {\n-                old_tag: None,\n+    fn validate(&self) -> Result<(), anyhow::Error> {\n+        // validate migration tags\n+        match &self {\n+            Migrations::Adhoc {\n+                script_tag: MigrationTag::HasTag(script_tag),\n+                provided_old_tag: Some(provided_tag),\n+                ..\n+            } if provided_tag != script_tag => anyhow::bail!(\n+                \"The migration tag provided with your migration (\\\"{}\\\") does not match the script's current migration tag of \\\"{}\\\", \\\n+                please check that you are applying the correct migration\", provided_tag, script_tag\n+            ),\n+            Migrations::Adhoc {\n+                script_tag: MigrationTag::NoTag,\n+                provided_old_tag: Some(_),\n+                ..\n+            } => anyhow::bail!(\"You provided an existing migration tag with your migration but the script does not have a migration tag set.\"),\n+            Migrations::Adhoc {\n+                script_tag: MigrationTag::NoScript,\n+                provided_old_tag: Some(_),\n+                ..\n+            } => anyhow::bail!(\"You provided an existing migration tag with your migration but the script does not exist.\"),\n+            Migrations::Adhoc {\n+                script_tag: MigrationTag::HasTag(existing_tag),\n+                provided_old_tag: None,\n+                ..\n+            } => anyhow::bail!(\"You didn't provide an existing tag with your migration, but the script currently has a migration tag set to \\\"{}\\\"\", existing_tag),\n+            Migrations::Adhoc {\n+                provided_old_tag: Some(_),\n                 new_tag: None,\n-                migration: migrations[0].migration.clone(),\n-            }),\n-            migrations => Self::coalesce_migrations(migrations),\n-        }\n+                ..\n+            } => anyhow::bail!(\"You must provide a --new-tag when --old-tag is set.\"),\n+            Migrations::Adhoc {\n+                script_tag: MigrationTag::Unknown, ..\n+            } => anyhow::bail!(\"The migration tag for the script was never fetched. This is a bug in wrangler, and we'd appreciate an issue report!\"),\n+            Migrations::List {\n+                script_tag: MigrationTag::Unknown, ..\n+            } => anyhow::bail!(\"The migration tag for the script was never fetched. This is a bug in wrangler, and we'd appreciate an issue report!\"),\n+            _ => ()\n+        };\n+\n+        // validate migration list\n+        if let Migrations::List { migrations, .. } = &self {\n+            let mut seen = HashSet::new();\n+            for migration in migrations {\n+                if seen.contains(&migration.tag) {\n+                    anyhow::bail!(\"The migration tag \\\"{}\\\" appears multiple times in the list of migrations in your wrangler.toml\", migration.tag);\n+                }\n+                seen.insert(&migration.tag);\n+            }\n+        };\n+\n+        Ok(())\n     }\n \n-    fn coalesce_migrations(_migrations: &[MigrationConfig]) -> Result<ApiMigration, anyhow::Error> {\n-        unimplemented!()\n+    pub fn api_migration(&self) -> Result<Option<ApiMigration>, anyhow::Error> {\n+        self.validate()?;\n+        match &self {\n+            Migrations::Adhoc {\n+                provided_old_tag,\n+                new_tag,\n+                migration,\n+                ..\n+            } => {\n+                let api_migration = ApiMigration {\n+                    old_tag: provided_old_tag.to_owned(),\n+                    new_tag: new_tag.to_owned(),\n+                    steps: migration\n+                        .as_ref()\n+                        .map_or_else(Vec::new, |m| vec![m.clone()]),\n+                };\n+\n+                log::info!(\"API Migration: {:#?}\", api_migration);\n+\n+                Ok(Some(api_migration))\n+            }\n+            Migrations::List {\n+                script_tag,\n+                migrations,\n+            } => {\n+                let mut migrations = migrations.clone();\n+                let migrations = match script_tag {\n+                    MigrationTag::HasTag(tag) => {\n+                        let position =\n+                            migrations\n+                                .iter()\n+                                .position(|m| &m.tag == tag)\n+                                .ok_or_else(|| {\n+                                    anyhow::format_err!(\n+                                        \"The script's current migration tag of \\\"{}\\\" was not \\\n+                                found in the list of migrations in wrangler.toml\",\n+                                        tag\n+                                    )\n+                                })?;\n+                        migrations.drain(0..=position);\n+                        migrations\n+                    }\n+                    _ => migrations,\n+                };\n+\n+                if migrations.is_empty() {\n+                    return Ok(None);\n+                }\n+\n+                let old_tag = match script_tag {\n+                    MigrationTag::HasTag(old_tag) => Some(old_tag.clone()),\n+                    _ => None,\n+                };\n+                let new_tag = migrations.last().map(|m| m.tag.clone());\n+                let steps = migrations.into_iter().map(|m| m.migration).collect();\n+\n+                let api_migration = ApiMigration {\n+                    old_tag,\n+                    new_tag,\n+                    steps,\n+                };\n+\n+                log::info!(\"API Migration: {:#?}\", api_migration);\n+\n+                Ok(Some(api_migration))\n+            }\n+        }\n     }\n }\n \n #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]\n pub struct MigrationConfig {\n-    pub tag: Option<String>,\n+    pub tag: String,\n     #[serde(flatten)]\n     pub migration: Migration,\n }\n \n-#[derive(Clone, Debug, Default, PartialEq, Serialize)]\n+#[derive(Clone, Debug, PartialEq, Serialize)]\n pub struct ApiMigration {\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n-    pub old_tag: Option<String>,\n+    old_tag: Option<String>,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n-    pub new_tag: Option<String>,\n-    #[serde(flatten)]\n-    pub migration: Migration,\n+    new_tag: Option<String>,\n+    steps: Vec<Migration>,\n }\n \n #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]\ndiff --git a/src/settings/toml/migrations.rs b/src/settings/toml/migrations.rs\n--- a/src/settings/toml/migrations.rs\n+++ b/src/settings/toml/migrations.rs\n@@ -49,9 +180,13 @@ pub struct Migration {\n \n #[derive(Clone, Debug, Default, Deserialize, PartialEq, Serialize)]\n pub struct DurableObjectsMigration {\n+    #[serde(default)]\n     pub new_classes: Vec<String>,\n+    #[serde(default)]\n     pub deleted_classes: Vec<String>,\n+    #[serde(default)]\n     pub renamed_classes: Vec<RenameClass>,\n+    #[serde(default)]\n     pub transferred_classes: Vec<TransferClass>,\n }\n \ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -123,7 +123,7 @@ pub fn build(\n                 }\n                 UploadFormat::Modules { main, dir, rules } => {\n                     let migration = match &target.migrations {\n-                        Some(migrations) => Some(migrations.api_migration()?),\n+                        Some(migrations) => migrations.api_migration()?,\n                         None => None,\n                     };\n \n",
        "test_patch": "diff --git a/src/cli/mod.rs b/src/cli/mod.rs\n--- a/src/cli/mod.rs\n+++ b/src/cli/mod.rs\n@@ -390,6 +406,10 @@ mod tests {\n         let command = Cli::from_iter(&[\n             \"wrangler\",\n             \"publish\",\n+            \"--old-tag\",\n+            \"oldTag\",\n+            \"--new-tag\",\n+            \"newTag\",\n             \"--new-class\",\n             \"newA\",\n             \"--new-class\",\ndiff --git a/src/cli/mod.rs b/src/cli/mod.rs\n--- a/src/cli/mod.rs\n+++ b/src/cli/mod.rs\n@@ -417,17 +437,19 @@ mod tests {\n \n         if let Command::Publish { migration, .. } = command {\n             assert_eq!(\n-                migration.into_migration_config(),\n-                Some(MigrationConfig {\n-                    tag: None,\n-                    migration: Migration {\n+                migration.into_migrations(),\n+                Some(Migrations::Adhoc {\n+                    script_tag: MigrationTag::Unknown,\n+                    provided_old_tag: Some(String::from(\"oldTag\")),\n+                    new_tag: Some(String::from(\"newTag\")),\n+                    migration: Some(Migration {\n                         durable_objects: DurableObjectsMigration {\n                             new_classes: vec![String::from(\"newA\"), String::from(\"newB\")],\n                             deleted_classes: vec![String::from(\"deleteA\"), String::from(\"deleteB\")],\n                             renamed_classes: vec![rename_class(\"A\"), rename_class(\"B\")],\n                             transferred_classes: vec![transfer_class(\"A\"), transfer_class(\"B\")],\n                         }\n-                    }\n+                    })\n                 })\n             );\n         } else {\ndiff --git a/src/settings/toml/migrations.rs b/src/settings/toml/migrations.rs\n--- a/src/settings/toml/migrations.rs\n+++ b/src/settings/toml/migrations.rs\n@@ -67,3 +202,178 @@ pub struct TransferClass {\n     pub from_script: String,\n     pub to: String,\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn adhoc_only_change_tag() -> Result<(), anyhow::Error> {\n+        let migrations = Migrations::Adhoc {\n+            script_tag: MigrationTag::HasTag(String::from(\"v1\")),\n+            provided_old_tag: Some(String::from(\"v1\")),\n+            new_tag: Some(String::from(\"v2\")),\n+            migration: None,\n+        };\n+\n+        let api_migration = migrations.api_migration()?;\n+\n+        assert_eq!(\n+            api_migration,\n+            Some(ApiMigration {\n+                old_tag: Some(String::from(\"v1\")),\n+                new_tag: Some(String::from(\"v2\")),\n+                steps: vec![]\n+            })\n+        );\n+\n+        Ok(())\n+    }\n+\n+    #[test]\n+    fn adhoc_full() -> Result<(), anyhow::Error> {\n+        let migrations = Migrations::Adhoc {\n+            script_tag: MigrationTag::HasTag(String::from(\"v1\")),\n+            provided_old_tag: Some(String::from(\"v1\")),\n+            new_tag: Some(String::from(\"v2\")),\n+            migration: Some(Migration {\n+                durable_objects: DurableObjectsMigration {\n+                    new_classes: vec![String::from(\"A\")],\n+                    deleted_classes: vec![],\n+                    renamed_classes: vec![],\n+                    transferred_classes: vec![],\n+                },\n+            }),\n+        };\n+\n+        let api_migration = migrations.api_migration()?;\n+\n+        assert_eq!(\n+            api_migration,\n+            Some(ApiMigration {\n+                old_tag: Some(String::from(\"v1\")),\n+                new_tag: Some(String::from(\"v2\")),\n+                steps: vec![Migration {\n+                    durable_objects: DurableObjectsMigration {\n+                        new_classes: vec![String::from(\"A\")],\n+                        deleted_classes: vec![],\n+                        renamed_classes: vec![],\n+                        transferred_classes: vec![],\n+                    }\n+                }]\n+            })\n+        );\n+\n+        Ok(())\n+    }\n+\n+    #[test]\n+    fn migration_list_fresh() -> Result<(), anyhow::Error> {\n+        let migrations = Migrations::List {\n+            script_tag: MigrationTag::NoScript,\n+            migrations: vec![MigrationConfig {\n+                tag: String::from(\"v1\"),\n+                migration: Migration {\n+                    durable_objects: DurableObjectsMigration {\n+                        new_classes: vec![String::from(\"A\")],\n+                        deleted_classes: vec![],\n+                        renamed_classes: vec![],\n+                        transferred_classes: vec![],\n+                    },\n+                },\n+            }],\n+        };\n+        let api_migration = migrations.api_migration()?;\n+\n+        assert_eq!(\n+            api_migration,\n+            Some(ApiMigration {\n+                old_tag: None,\n+                new_tag: Some(String::from(\"v1\")),\n+                steps: vec![Migration {\n+                    durable_objects: DurableObjectsMigration {\n+                        new_classes: vec![String::from(\"A\")],\n+                        deleted_classes: vec![],\n+                        renamed_classes: vec![],\n+                        transferred_classes: vec![],\n+                    }\n+                }]\n+            })\n+        );\n+\n+        Ok(())\n+    }\n+\n+    #[test]\n+    fn migration_list_hastag_noop() -> Result<(), anyhow::Error> {\n+        let migrations = Migrations::List {\n+            script_tag: MigrationTag::HasTag(String::from(\"v1\")),\n+            migrations: vec![MigrationConfig {\n+                tag: String::from(\"v1\"),\n+                migration: Migration {\n+                    durable_objects: DurableObjectsMigration {\n+                        new_classes: vec![String::from(\"A\")],\n+                        deleted_classes: vec![],\n+                        renamed_classes: vec![],\n+                        transferred_classes: vec![],\n+                    },\n+                },\n+            }],\n+        };\n+        let api_migration = migrations.api_migration()?;\n+\n+        assert_eq!(api_migration, None);\n+\n+        Ok(())\n+    }\n+\n+    #[test]\n+    fn migration_list_hastag() -> Result<(), anyhow::Error> {\n+        let migrations = Migrations::List {\n+            script_tag: MigrationTag::HasTag(String::from(\"v1\")),\n+            migrations: vec![\n+                MigrationConfig {\n+                    tag: String::from(\"v1\"),\n+                    migration: Migration {\n+                        durable_objects: DurableObjectsMigration {\n+                            new_classes: vec![String::from(\"A\")],\n+                            deleted_classes: vec![],\n+                            renamed_classes: vec![],\n+                            transferred_classes: vec![],\n+                        },\n+                    },\n+                },\n+                MigrationConfig {\n+                    tag: String::from(\"v2\"),\n+                    migration: Migration {\n+                        durable_objects: DurableObjectsMigration {\n+                            new_classes: vec![String::from(\"B\")],\n+                            deleted_classes: vec![],\n+                            renamed_classes: vec![],\n+                            transferred_classes: vec![],\n+                        },\n+                    },\n+                },\n+            ],\n+        };\n+        let api_migration = migrations.api_migration()?;\n+\n+        assert_eq!(\n+            api_migration,\n+            Some(ApiMigration {\n+                old_tag: Some(String::from(\"v1\")),\n+                new_tag: Some(String::from(\"v2\")),\n+                steps: vec![Migration {\n+                    durable_objects: DurableObjectsMigration {\n+                        new_classes: vec![String::from(\"B\")],\n+                        deleted_classes: vec![],\n+                        renamed_classes: vec![],\n+                        transferred_classes: vec![],\n+                    }\n+                }]\n+            })\n+        );\n+\n+        Ok(())\n+    }\n+}\n",
        "problem_statement": "wrangler publish --rename-class and --transfer-class arguments help is insufficient\n### \ud83d\udc1b Bug report\r\n\r\n#### Describe the bug\r\n\r\nThis is the help being displayed:\r\n\r\n        --rename-class <rename-class> <rename-class>                           Rename a durable object class\r\n        --transfer-class <transfer-class> <transfer-class> <transfer-class>\r\n            Transfer all durable objects associated with a class in another script to a class in this script\r\n\r\n#### Reproduce the bug\r\n\r\n```\r\nwrangler publish -h\r\n```\r\n\r\n#### Expected behavior\r\n\r\nShould display something like\r\n\r\n        --rename-class <OldClassName> <NewClassName>                     Rename a durable object class\r\n        --transfer-class <old-script> <ClassNameInOldScript> <ClassNameInThisScript>\r\n            Transfer all durable objects associated with a class in old-script to a class in this script\r\n\r\n#### Environment and versions\r\n\r\n* output of `wrangler -V`:\r\n\r\n        wrangler 1.17.0\r\n\n",
        "hints_text": "@a-robinson @xortive might want to change the verbiage here?\nYeah, thanks for raising this.\nYeah, looks like this got lost in the transition to structopt.\r\n\r\nPretty sure all that's needed here is adding back in the [`value_names` method call](https://github.com/cloudflare/wrangler/pull/1824/files#diff-0fe902b7cd3f239d8f9accf1fe68898dde0dcc2b2789896ad82fa49aaf09853bR73) as a [raw method](https://docs.rs/structopt/0.3.21/structopt/#raw-methods).\r\n\r\nI'll handle it when I implement tagged migrations in `wrangler.toml` which is next up on my plate.",
        "created_at": "2021-07-12T22:26:50Z",
        "version": "1.19"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1988,
        "instance_id": "cloudflare__wrangler-legacy-1988",
        "issue_numbers": [
            "1960"
        ],
        "base_commit": "ecf636ae8a6bb78844b1fb463ac0c09c7f77aaad",
        "patch": "diff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -140,7 +140,7 @@ impl Manifest {\n             config_template_doc[\"workers_dev\"] = toml_edit::value(default_workers_dev);\n         }\n         if let Some(target_type) = &target_type {\n-            config_template_doc[\"target_type\"] = toml_edit::value(target_type.to_string());\n+            config_template_doc[\"type\"] = toml_edit::value(target_type.to_string());\n         }\n         if let Some(site) = site {\n             if config_template.site.is_none() {\ndiff --git a/src/settings/toml/target_type.rs b/src/settings/toml/target_type.rs\n--- a/src/settings/toml/target_type.rs\n+++ b/src/settings/toml/target_type.rs\n@@ -21,7 +21,7 @@ impl Default for TargetType {\n impl fmt::Display for TargetType {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let printable = match *self {\n-            TargetType::JavaScript => \"js\",\n+            TargetType::JavaScript => \"javascript\",\n             TargetType::Rust => \"rust\",\n             TargetType::Webpack => \"webpack\",\n         };\n",
        "test_patch": "diff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -685,3 +685,29 @@ fn get_namespaces(\n         Ok(Vec::new())\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn generate() -> Result<()> {\n+        let toml_path = Path::new(\".\");\n+\n+        let toml = Manifest::generate(\n+            \"test\".to_string(),\n+            Some(TargetType::JavaScript),\n+            toml_path,\n+            None,\n+        )?;\n+        assert_eq!(toml.name.to_string(), \"test\".to_string());\n+        assert_eq!(toml.target_type.to_string(), \"javascript\".to_string());\n+        fs::remove_file(toml_path.with_file_name(\"wrangler.toml\"))?;\n+\n+        let toml = Manifest::generate(\"test\".to_string(), None, toml_path, None)?;\n+        assert_eq!(toml.target_type.to_string(), \"webpack\".to_string());\n+        fs::remove_file(toml_path.with_file_name(\"wrangler.toml\"))?;\n+\n+        Ok(())\n+    }\n+}\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -359,7 +359,8 @@ fn it_builds_with_webpack_name_output_warn() {\n \n     assert!(\n         stderr.contains(\"webpack's output filename is being renamed\"),\n-        format!(\"given: {}\", stderr)\n+        \"given: {}\",\n+        stderr\n     );\n }\n \ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -415,11 +416,9 @@ fn build_fails_with(fixture: &Fixture, expected_message: &str) {\n         str::from_utf8(&output.stderr)\n             .unwrap()\n             .contains(expected_message),\n-        format!(\n-            \"expected {:?} not found, given: {:?}\",\n-            expected_message,\n-            str::from_utf8(&output.stderr)\n-        )\n+        \"expected {:?} not found, given: {:?}\",\n+        expected_message,\n+        str::from_utf8(&output.stderr)\n     );\n }\n \n",
        "problem_statement": "wrangler init --type=\"javascript\" doesn\u2019t work as expected\n### \ud83d\udc1b Bug report\r\n\r\n<!-- \r\n  Did you remember to update wrangler?\r\n  https://developers.cloudflare.com/workers/cli-wrangler/install-update#update\r\n\r\n  Did you search for related issues?\r\n  https://github.com/cloudflare/wrangler/issues\r\n-->\r\n\r\n#### Describe the bug\r\n\r\n`wrangler init` doesn\u2019t work as expected when `--type=\"javascript\"`.\r\n\r\nRunning `wrangler init --type=\"javascript\"` outputs a `wrangler.toml` file where, unexpectedly, `type = 'webpack'` and `target_type = \"js\"`.\r\n\r\nIt is accompanied by a warning in the console:\r\n\r\n```text\r\n\u26a0\ufe0f  The template recommends the \"webpack\" type. Using type \"js\" may cause errors, we recommend changing the type field in wrangler.toml to \"webpack\"\r\n```\r\n\r\n#### Reproduce the bug\r\n\r\nRun `wrangler init --type=\"javascript\"`\r\n\r\n#### Expected behavior\r\n\r\nRunning `wrangler init --type=\"javascript\"` should produce a `wrangler.toml` similar to the following:\r\n\r\n```toml\r\n# ... truncated\r\ntype = \"javascript\"\r\nbuild.command = \"npm install && npm run build\"\r\n```\r\n\r\n#### Environment and versions\r\n\r\nFill out the following information about your environment.\r\n\r\n* operating system: MacOS 10.15.7 \r\n* output of `wrangler -V`: wrangler 1.17.0\r\n* output of `node -v`: v14.16.1\r\n* content of `wrangler.toml`: N/A\r\n\n",
        "hints_text": "Thanks for your report! Looking into this :)",
        "created_at": "2021-07-02T18:50:26Z",
        "version": "0.3"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1846,
        "instance_id": "cloudflare__wrangler-legacy-1846",
        "issue_numbers": [
            "1843"
        ],
        "base_commit": "e0fe368c3ed91725731bb84dd80613077cb6bc1e",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -3293,6 +3293,7 @@ dependencies = [\n  \"fs2\",\n  \"fs_extra\",\n  \"futures-util\",\n+ \"globset\",\n  \"http\",\n  \"hyper\",\n  \"hyper-rustls\",\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -29,6 +29,7 @@ failure = \"0.1.8\"\n flate2 = \"1.0.18\"\n fs2 = \"0.4.3\"\n futures-util = \"0.3\"\n+globset = \"0.4.6\"\n http = \"0.2.1\"\n hyper = \"0.13.9\"\n hyper-rustls = \"0.21.0\"\ndiff --git a/src/preview/mod.rs b/src/preview/mod.rs\n--- a/src/preview/mod.rs\n+++ b/src/preview/mod.rs\n@@ -17,13 +17,13 @@ use log::info;\n use url::Url;\n use ws::{Sender, WebSocket};\n \n+use crate::build::build_target;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::toml::Target;\n+use crate::settings::toml::{Target, UploadFormat};\n use crate::terminal::message::{Message, StdOut};\n use crate::terminal::open_browser;\n use crate::watch::watch_and_build;\n-use crate::{build::build_target, settings::toml::ScriptFormat};\n \n pub fn preview(\n     mut target: Target,\ndiff --git a/src/preview/mod.rs b/src/preview/mod.rs\n--- a/src/preview/mod.rs\n+++ b/src/preview/mod.rs\n@@ -32,7 +32,7 @@ pub fn preview(\n     verbose: bool,\n ) -> Result<(), failure::Error> {\n     if let Some(build) = &target.build {\n-        if matches!(build.upload_format, ScriptFormat::Modules) {\n+        if matches!(build.upload, UploadFormat::Modules { .. }) {\n             failure::bail!(\"wrangler preview does not support previewing modules scripts. Please use wrangler dev instead.\");\n         }\n     }\ndiff --git a/src/settings/toml/builder.rs b/src/settings/toml/builder.rs\n--- a/src/settings/toml/builder.rs\n+++ b/src/settings/toml/builder.rs\n@@ -4,10 +4,10 @@ use std::process::Command;\n \n use serde::{Deserialize, Serialize};\n \n-use super::ScriptFormat;\n+use crate::upload::form::ModuleType;\n \n-const UPLOAD_DIR: &str = \"dist\";\n const WATCH_DIR: &str = \"src\";\n+const UPLOAD_DIR: &str = \"dist\";\n \n #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]\n #[serde(deny_unknown_fields)]\ndiff --git a/src/settings/toml/builder.rs b/src/settings/toml/builder.rs\n--- a/src/settings/toml/builder.rs\n+++ b/src/settings/toml/builder.rs\n@@ -15,27 +15,48 @@ pub struct Builder {\n     pub command: Option<String>,\n     #[serde(default = \"project_root\")]\n     pub cwd: PathBuf,\n-    #[serde(default = \"upload_dir\")]\n-    pub upload_dir: PathBuf,\n-    pub upload_format: ScriptFormat,\n-    pub upload_include: Option<Vec<String>>,\n-    pub upload_exclude: Option<Vec<String>>,\n     #[serde(default = \"watch_dir\")]\n     pub watch_dir: PathBuf,\n+    pub upload: UploadFormat,\n }\n \n-fn project_root() -> PathBuf {\n-    env::current_dir().unwrap()\n+#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]\n+#[serde(tag = \"format\")]\n+#[serde(deny_unknown_fields)]\n+pub enum UploadFormat {\n+    #[serde(rename = \"service-worker\")]\n+    ServiceWorker {},\n+    #[serde(rename = \"modules\")]\n+    Modules {\n+        main: String, // String since this is a module name, not a path.\n+        #[serde(default = \"upload_dir\")]\n+        dir: PathBuf,\n+        rules: Option<Vec<ModuleRule>>,\n+    },\n }\n \n-fn upload_dir() -> PathBuf {\n-    project_root().join(UPLOAD_DIR)\n+#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]\n+#[serde(deny_unknown_fields)]\n+pub struct ModuleRule {\n+    pub globs: Vec<String>,\n+    #[serde(rename = \"type\")]\n+    pub module_type: ModuleType,\n+    #[serde(default)] // false is default\n+    pub fallthrough: bool,\n+}\n+\n+fn project_root() -> PathBuf {\n+    env::current_dir().unwrap()\n }\n \n fn watch_dir() -> PathBuf {\n     project_root().join(WATCH_DIR)\n }\n \n+fn upload_dir() -> PathBuf {\n+    std::env::current_dir().unwrap().join(UPLOAD_DIR)\n+}\n+\n impl Builder {\n     pub fn verify_watch_dir(&self) -> Result<(), failure::Error> {\n         let watch_canonical = match self.watch_dir.canonicalize() {\ndiff --git a/src/settings/toml/builder.rs b/src/settings/toml/builder.rs\n--- a/src/settings/toml/builder.rs\n+++ b/src/settings/toml/builder.rs\n@@ -64,26 +85,30 @@ impl Builder {\n     }\n \n     pub fn verify_upload_dir(&self) -> Result<(), failure::Error> {\n-        let upload_canonical = match self.upload_dir.canonicalize() {\n+        let dir = match &self.upload {\n+            UploadFormat::Modules { dir, .. } => dir,\n+            UploadFormat::ServiceWorker {} => return Ok(()),\n+        };\n+\n+        let upload_canonical = match dir.canonicalize() {\n             Ok(path) => path,\n-            Err(e) if matches!(e.kind(), std::io::ErrorKind::NotFound) => failure::bail!(\n-                \"Your provided upload_dir {} does not exist.\",\n-                self.upload_dir.display()\n-            ),\n+            Err(e) if matches!(e.kind(), std::io::ErrorKind::NotFound) => {\n+                failure::bail!(\"Your provided upload_dir {} does not exist.\", dir.display())\n+            }\n             Err(e) => failure::bail!(\n                 \"Error encountered when verifying upload_dir: {}, provided path: {}\",\n                 e,\n-                self.upload_dir.display()\n+                dir.display()\n             ),\n         };\n         let root_canonical = project_root().canonicalize()?;\n         if upload_canonical == root_canonical {\n             failure::bail!(\"Wrangler doesn't support using the project root as the upload_dir.\");\n         }\n-        if !self.upload_dir.is_dir() {\n+        if !dir.is_dir() {\n             failure::bail!(format!(\n                 \"A path was provided for upload_dir that is not a directory: {}\",\n-                self.upload_dir.display()\n+                dir.display()\n             ));\n         }\n         Ok(())\ndiff --git a/src/settings/toml/mod.rs b/src/settings/toml/mod.rs\n--- a/src/settings/toml/mod.rs\n+++ b/src/settings/toml/mod.rs\n@@ -6,19 +6,17 @@ mod kv_namespace;\n mod manifest;\n pub mod migrations;\n mod route;\n-mod script_format;\n mod site;\n mod target;\n mod target_type;\n mod triggers;\n \n-pub use builder::Builder;\n+pub use builder::{Builder, ModuleRule, UploadFormat};\n pub use durable_objects::{DurableObjects, DurableObjectsClass};\n pub use environment::Environment;\n pub use kv_namespace::{ConfigKvNamespace, KvNamespace};\n pub use manifest::Manifest;\n pub use route::{Route, RouteConfig};\n-pub use script_format::ScriptFormat;\n pub use site::Site;\n pub use target::Target;\n pub use target_type::TargetType;\ndiff --git a/src/settings/toml/script_format.rs /dev/null\n--- a/src/settings/toml/script_format.rs\n+++ /dev/null\n@@ -1,34 +0,0 @@\n-use std::fmt;\n-use std::str::FromStr;\n-\n-use serde::{Deserialize, Serialize};\n-\n-#[derive(Clone, Debug, Deserialize, Serialize, PartialEq)]\n-pub enum ScriptFormat {\n-    #[serde(rename = \"service-worker\")]\n-    ServiceWorker,\n-    #[serde(rename = \"modules\")]\n-    Modules,\n-}\n-\n-impl fmt::Display for ScriptFormat {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let printable = match *self {\n-            Self::ServiceWorker => \"service-worker\",\n-            Self::Modules => \"modules\",\n-        };\n-        write!(f, \"{}\", printable)\n-    }\n-}\n-\n-impl FromStr for ScriptFormat {\n-    type Err = failure::Error;\n-\n-    fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        match s {\n-            \"service-worker\" => Ok(Self::ServiceWorker),\n-            \"modules\" => Ok(Self::Modules),\n-            _ => failure::bail!(\"{} is not a valid script format!\", s),\n-        }\n-    }\n-}\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -5,21 +5,18 @@ mod service_worker;\n mod text_blob;\n mod wasm_module;\n \n-use path_slash::PathExt; // Path::to_slash()\n use reqwest::blocking::multipart::Form;\n use std::fs;\n use std::path::Path;\n use std::path::PathBuf;\n \n-use ignore::overrides::{Override, OverrideBuilder};\n-use ignore::WalkBuilder;\n-\n use crate::settings::binding;\n-use crate::settings::toml::{Builder, ScriptFormat, Target, TargetType};\n+use crate::settings::toml::{Target, TargetType, UploadFormat};\n use crate::sites::AssetManifest;\n use crate::wranglerjs;\n \n use plain_text::PlainText;\n+pub use project_assets::{ModuleConfig, ModuleType};\n use project_assets::{ModulesAssets, ServiceWorkerAssets};\n use text_blob::TextBlob;\n use wasm_module::WasmModule;\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -27,8 +24,6 @@ use wasm_module::WasmModule;\n // TODO: https://github.com/cloudflare/wrangler/issues/1083\n use super::{krate, Package};\n \n-use self::project_assets::Module;\n-\n pub fn build(\n     target: &Target,\n     asset_manifest: Option<AssetManifest>,\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -92,8 +87,8 @@ pub fn build(\n             service_worker::build_form(&assets, session_config)\n         }\n         TargetType::JavaScript => match &target.build {\n-            Some(config) => match &config.upload_format {\n-                ScriptFormat::ServiceWorker => {\n+            Some(config) => match &config.upload {\n+                UploadFormat::ServiceWorker {} => {\n                     log::info!(\"Plain JavaScript project detected. Publishing...\");\n                     let package_dir = target.package_dir()?;\n                     let package = Package::new(&package_dir)?;\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -110,47 +105,15 @@ pub fn build(\n \n                     service_worker::build_form(&assets, session_config)\n                 }\n-                ScriptFormat::Modules => {\n-                    let package_dir = target.package_dir()?;\n-                    let package = Package::new(&package_dir)?;\n-                    let main_module = package.module(&package_dir)?;\n-                    let main_module_name = filename_from_path(&main_module)\n-                        .ok_or_else(|| failure::err_msg(\"filename required for main module\"))?;\n-\n-                    let ignore = build_ignore(config, &package_dir)?;\n-                    let modules_iter = WalkBuilder::new(config.upload_dir.clone())\n-                        .standard_filters(false)\n-                        .hidden(true)\n-                        .overrides(ignore)\n-                        .build();\n-\n-                    let mut modules: Vec<Module> = vec![];\n-\n-                    for entry in modules_iter {\n-                        let entry = entry?;\n-                        let path = entry.path();\n-                        if path.is_file() {\n-                            let name = modulename_from_path(&config.upload_dir, path).ok_or_else(\n-                                || {\n-                                    failure::err_msg(format!(\n-                                        \"failed to create module name for {}\",\n-                                        path.display()\n-                                    ))\n-                                },\n-                            )?;\n-                            log::info!(\"Adding module {} at path {}\", name, path.display());\n-                            modules.push(Module::new(name, path.to_owned())?);\n-                        }\n-                    }\n-\n+                UploadFormat::Modules { main, dir, rules } => {\n                     let migration = match &target.migrations {\n                         Some(migrations) => Some(migrations.api_migration()?),\n                         None => None,\n                     };\n \n+                    let module_config = ModuleConfig::new(main, dir, rules);\n                     let assets = ModulesAssets::new(\n-                        main_module_name,\n-                        modules,\n+                        module_config.get_modules()?,\n                         kv_namespaces.to_vec(),\n                         durable_object_classes,\n                         migration,\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -216,23 +179,6 @@ fn filestem_from_path(path: &PathBuf) -> Option<String> {\n     path.file_stem()?.to_str().map(|s| s.to_string())\n }\n \n-fn filename_from_path(path: &PathBuf) -> Option<String> {\n-    path.file_name()\n-        .map(|filename| filename.to_string_lossy().into_owned())\n-}\n-\n-/// Converts a system path into a Unix-style path, relative to some root.\n-///\n-/// # Example\n-/// let root_path = Path::new(\"/Users/alice/Desktop/myproject\");\n-/// let path = Path::new(\"/Users/alice/Desktop/myproject/src/resources/file.txt\");\n-/// let result = modulename_from_path(&root_path, &path);\n-///\n-/// assert_eq!(result, Some(String::new(\"src/resources/file.txt\")));\n-fn modulename_from_path(root_path: &Path, path: &Path) -> Option<String> {\n-    path.strip_prefix(root_path).ok()?.to_owned().to_slash()\n-}\n-\n fn build_generated_dir() -> Result<(), failure::Error> {\n     let dir = \"./worker/generated\";\n     if !Path::new(dir).is_dir() {\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -252,21 +198,3 @@ fn concat_js(name: &str) -> Result<(), failure::Error> {\n     fs::write(\"./worker/generated/script.js\", js.as_bytes())?;\n     Ok(())\n }\n-\n-fn build_ignore(config: &Builder, directory: &Path) -> Result<Override, failure::Error> {\n-    let mut overrides = OverrideBuilder::new(directory);\n-    // If `include` present, use it and don't touch the `exclude` field\n-    if let Some(included) = &config.upload_include {\n-        for i in included {\n-            overrides.add(&i)?;\n-            log::info!(\"Including {}\", i);\n-        }\n-    } else if let Some(excluded) = &config.upload_exclude {\n-        for e in excluded {\n-            overrides.add(&format!(\"!{}\", e))?;\n-            log::info!(\"Ignoring {}\", e);\n-        }\n-    }\n-\n-    Ok(overrides.build()?)\n-}\ndiff --git a/src/upload/form/modules_worker.rs b/src/upload/form/modules_worker.rs\n--- a/src/upload/form/modules_worker.rs\n+++ b/src/upload/form/modules_worker.rs\n@@ -36,18 +36,18 @@ pub fn build_form(\n }\n \n fn add_files(mut form: Form, assets: &ModulesAssets) -> Result<Form, failure::Error> {\n-    for module in &assets.modules {\n+    for (name, module) in &assets.manifest.modules {\n         let part = Part::reader(File::open(module.path.clone())?)\n             .mime_str(module.module_type.content_type())?\n-            .file_name(module.name.clone());\n-        form = form.part(module.name.clone(), part);\n+            .file_name(name.clone());\n+        form = form.part(name.clone(), part);\n     }\n     Ok(form)\n }\n \n fn add_metadata(mut form: Form, assets: &ModulesAssets) -> Result<Form, failure::Error> {\n     let metadata_json = serde_json::json!(&Metadata {\n-        main_module: assets.main_module.clone(),\n+        main_module: assets.manifest.main.clone(),\n         bindings: assets.bindings(),\n         migrations: assets.migration.clone()\n     });\ndiff --git a/src/upload/form/project_assets.rs b/src/upload/form/project_assets.rs\n--- a/src/upload/form/project_assets.rs\n+++ b/src/upload/form/project_assets.rs\n@@ -1,6 +1,10 @@\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n \n use failure::format_err;\n+use globset::{Candidate, Glob, GlobBuilder, GlobSet, GlobSetBuilder};\n+use ignore::WalkBuilder;\n+use path_slash::PathExt; // Path::to_slash()\n+use serde::{Deserialize, Serialize};\n \n use super::binding::Binding;\n use super::filestem_from_path;\ndiff --git a/src/upload/form/project_assets.rs b/src/upload/form/project_assets.rs\n--- a/src/upload/form/project_assets.rs\n+++ b/src/upload/form/project_assets.rs\n@@ -8,7 +12,10 @@ use super::plain_text::PlainText;\n use super::text_blob::TextBlob;\n use super::wasm_module::WasmModule;\n \n-use crate::settings::toml::{migrations::ApiMigration, DurableObjectsClass, KvNamespace};\n+use crate::settings::toml::{\n+    migrations::ApiMigration, DurableObjectsClass, KvNamespace, ModuleRule,\n+};\n+use std::collections::{HashMap, HashSet};\n \n #[derive(Debug)]\n pub struct ServiceWorkerAssets {\ndiff --git a/src/upload/form/project_assets.rs b/src/upload/form/project_assets.rs\n--- a/src/upload/form/project_assets.rs\n+++ b/src/upload/form/project_assets.rs\n@@ -81,67 +88,246 @@ impl ServiceWorkerAssets {\n     }\n }\n \n+#[derive(Debug, PartialEq, PartialOrd, Eq, Ord)]\n pub struct Module {\n-    pub name: String,\n     pub path: PathBuf,\n     pub module_type: ModuleType,\n }\n \n-impl Module {\n-    pub fn new(name: String, path: PathBuf) -> Result<Module, failure::Error> {\n-        let extension = path\n-            .extension()\n-            .ok_or_else(|| {\n-                failure::err_msg(format!(\n-                    \"File {} lacks an extension. An extension is required to determine module type\",\n-                    path.display()\n-                ))\n-            })?\n-            .to_string_lossy();\n-\n-        let module_type = match extension.as_ref() {\n-            \"mjs\" => ModuleType::ES6,\n-            \"js\" => ModuleType::CommonJS,\n-            \"wasm\" => ModuleType::Wasm,\n-            \"txt\" => ModuleType::Text,\n-            \"bin\" => ModuleType::Data,\n-            unknown => failure::bail!(format!(\n-                \"unknown extension {}, cannot determine module type\",\n-                unknown\n-            )),\n-        };\n+// All this macro does is generate some associated methods that return a value for each enum variant.\n+// as well as a .iter() associated function that lets you iterate over each module type\n+// This would be significantly longer without the macro, and makes adding new module types very easy.\n+// The format is [slice of globs (can be empty)] => VariantName(\"mime-type\")\n+macro_rules! module_type {\n+    (pub enum $name:ident {\n+        $($globs:tt => $variant:ident($content_type:expr)),+,\n+    }) => {\n+        #[derive(Clone, Copy, Debug, Deserialize, Hash, Serialize, PartialEq, PartialOrd, Eq, Ord)]\n+        pub enum $name {\n+            $($variant),+\n+        }\n \n-        Ok(Module {\n-            name,\n-            path,\n-            module_type,\n-        })\n+        impl $name {\n+            pub fn name(&self) -> &'static str {\n+                match self {\n+                    $($name::$variant => stringify!($variant)),+\n+                }\n+            }\n+\n+            pub fn content_type(&self) -> &'static str {\n+                match self {\n+                    $($name::$variant => $content_type),+\n+                }\n+            }\n+\n+            pub fn default_globs(&self) -> &'static[&'static str] {\n+                match self {\n+                    $($name::$variant => &$globs),+\n+                }\n+            }\n+\n+            pub fn iter() -> std::slice::Iter<'static, $name> {\n+                [$($name::$variant),+].iter()\n+            }\n+        }\n+    };\n+}\n+\n+module_type! {\n+    pub enum ModuleType {\n+        [\"**/*.mjs\"] => ESModule(\"application/javascript+module\"),\n+        [\"**/*.js\", \"**/*.cjs\"] => CommonJS(\"application/javascript\"),\n+        [] => CompiledWasm(\"application/wasm\"),\n+        [] => Text(\"text/plain\"),\n+        [] => Data(\"application/octet-stream\"),\n     }\n }\n \n-pub enum ModuleType {\n-    ES6,\n-    CommonJS,\n-    Wasm,\n-    Text,\n-    Data,\n+#[derive(Clone, Debug, PartialEq)]\n+pub struct ModuleConfig {\n+    pub main: String, // String since this is a module name, not a path.\n+    pub dir: PathBuf,\n+    rules: Vec<ModuleRule>,\n+}\n+\n+pub struct ModuleManifest {\n+    pub main: String,\n+    pub modules: HashMap<String, Module>,\n }\n \n-impl ModuleType {\n-    pub fn content_type(&self) -> &str {\n-        match &self {\n-            Self::ES6 => \"application/javascript+module\",\n-            Self::CommonJS => \"application/javascript\",\n-            Self::Wasm => \"application/wasm\",\n-            Self::Text => \"text/plain\",\n-            Self::Data => \"application/octet-stream\",\n+impl ModuleConfig {\n+    pub fn new(main: &str, dir: &Path, rules: &Option<Vec<ModuleRule>>) -> ModuleConfig {\n+        ModuleConfig {\n+            main: main.to_string(),\n+            dir: dir.to_path_buf(),\n+            rules: rules.clone().unwrap_or_default(),\n         }\n     }\n+\n+    pub fn get_modules(self) -> Result<ModuleManifest, failure::Error> {\n+        let matchers = build_type_matchers(self.rules)?;\n+\n+        let candidates_vec = WalkBuilder::new(&self.dir)\n+            .standard_filters(false)\n+            .follow_links(true)\n+            .build()\n+            .collect::<Result<Vec<_>, _>>()?;\n+        let candidates = candidates_vec\n+            .iter()\n+            .filter(|e| e.path().is_file())\n+            .map(|e| e.path());\n+\n+        Ok(ModuleManifest {\n+            main: self.main.to_owned(),\n+            modules: Self::make_module_manifest(candidates, &self.dir, &matchers)?,\n+        })\n+    }\n+\n+    fn make_module_manifest<'a, P>(\n+        paths: impl Iterator<Item = &'a P>,\n+        upload_dir: &'a Path,\n+        matchers: &'a [ModuleMatcher],\n+    ) -> Result<HashMap<String, Module>, failure::Error>\n+    where\n+        P: AsRef<Path> + ?Sized + 'a,\n+    {\n+        let processed_paths = paths\n+            .map(|p| {\n+                let p = p.as_ref();\n+                p.strip_prefix(upload_dir).map(|p_stripped_prefix| {\n+                    let p_stripped_prefix: PathBuf = p_stripped_prefix.to_slash_lossy().into();\n+                    // we convert the path used for matching and names to a slash path\n+                    // so globs are the same on all platforms\n+                    // to_slash_lossy() strips non-unicode characters in the path on windows\n+                    // which couldn't be represented in JS anyways\n+                    (p, p_stripped_prefix)\n+                })\n+            })\n+            .collect::<Result<Vec<(&Path, PathBuf)>, _>>()?;\n+\n+        let mut final_types: HashSet<ModuleType> = HashSet::new();\n+        let modules: HashMap<_, _> = processed_paths\n+            .iter()\n+            .filter_map(|(prefixed_path, path)| {\n+                final_types.clear();\n+                let candidate = Candidate::new(&path);\n+\n+                let mut match_result = None;\n+                for ModuleMatcher {\n+                    globs,\n+                    matcher,\n+                    module_type,\n+                    fallthrough,\n+                } in matchers\n+                {\n+                    if final_types.contains(module_type) {\n+                        continue;\n+                    }\n+                    if !fallthrough {\n+                        // this rule had fallthrough disabled, so we shouldn't consider\n+                        // rules for this module type\n+                        final_types.insert(*module_type);\n+                    }\n+                    let matches = matcher.matches_candidate(&candidate);\n+                    match matches.len() {\n+                        0 => log::info!(\n+                            \"{} skipped by rule {:?} => {}\",\n+                            path.display(),\n+                            globs,\n+                            module_type.name(),\n+                        ),\n+                        _ => {\n+                            let matched_globs = globs\n+                                .iter()\n+                                .enumerate()\n+                                .filter_map(\n+                                    |(i, g)| if matches.contains(&i) { Some(g) } else { None },\n+                                )\n+                                .collect::<Vec<_>>();\n+                            log::info!(\n+                                \"{} matched by these globs {:?} => {}\",\n+                                path.display(),\n+                                matched_globs,\n+                                module_type.name(),\n+                            );\n+                            let module_name = format!(\"./{}\", path.display());\n+                            match_result = Some((\n+                                module_name,\n+                                Module {\n+                                    path: prefixed_path.to_path_buf(),\n+                                    module_type: *module_type,\n+                                },\n+                            ));\n+                            break;\n+                        }\n+                    }\n+                }\n+\n+                match_result\n+            })\n+            .collect();\n+\n+        Ok(modules)\n+    }\n+}\n+\n+struct ModuleMatcher {\n+    globs: Vec<String>,\n+    matcher: GlobSet,\n+    module_type: ModuleType,\n+    fallthrough: bool,\n+}\n+\n+fn new_glob(glob: &str) -> Result<Glob, globset::Error> {\n+    // we want to configure some defaults for all glob matches we make\n+    GlobBuilder::new(glob)\n+        .literal_separator(true)\n+        // we convert windows \\ paths to / before matching\n+        // so glob rules work on all platforms,\n+        // so we need to force-enable backslash_escape as on windows it's disabled by default\n+        .backslash_escape(true)\n+        .build()\n+}\n+\n+fn build_type_matchers(rules: Vec<ModuleRule>) -> Result<Vec<ModuleMatcher>, failure::Error> {\n+    let mut matchers = rules\n+        .into_iter()\n+        .map(|r| {\n+            let mut builder = GlobSetBuilder::new();\n+\n+            for glob in &r.globs {\n+                let glob = new_glob(&glob)?;\n+                builder.add(glob);\n+            }\n+\n+            Ok(ModuleMatcher {\n+                globs: r.globs,\n+                matcher: builder.build()?,\n+                module_type: r.module_type,\n+                fallthrough: r.fallthrough,\n+            })\n+        })\n+        .collect::<Result<Vec<_>, failure::Error>>()?;\n+\n+    ModuleType::iter().try_for_each::<_, Result<(), globset::Error>>(|t| {\n+        let mut builder = GlobSetBuilder::new();\n+        for glob in t.default_globs() {\n+            builder.add(new_glob(glob)?);\n+        }\n+        matchers.push(ModuleMatcher {\n+            globs: t.default_globs().iter().map(|&g| g.to_owned()).collect(),\n+            matcher: builder.build().expect(\"default glob to be valid\"),\n+            module_type: *t,\n+            fallthrough: false,\n+        });\n+        Ok(())\n+    })?;\n+\n+    Ok(matchers)\n }\n \n pub struct ModulesAssets {\n-    pub main_module: String,\n-    pub modules: Vec<Module>,\n+    pub manifest: ModuleManifest,\n     pub kv_namespaces: Vec<KvNamespace>,\n     pub durable_object_classes: Vec<DurableObjectsClass>,\n     pub migration: Option<ApiMigration>,\ndiff --git a/src/upload/form/project_assets.rs b/src/upload/form/project_assets.rs\n--- a/src/upload/form/project_assets.rs\n+++ b/src/upload/form/project_assets.rs\n@@ -150,16 +336,14 @@ pub struct ModulesAssets {\n \n impl ModulesAssets {\n     pub fn new(\n-        main_module: String,\n-        modules: Vec<Module>,\n+        manifest: ModuleManifest,\n         kv_namespaces: Vec<KvNamespace>,\n         durable_object_classes: Vec<DurableObjectsClass>,\n         migration: Option<ApiMigration>,\n         plain_texts: Vec<PlainText>,\n     ) -> Result<Self, failure::Error> {\n         Ok(Self {\n-            main_module,\n-            modules,\n+            manifest,\n             kv_namespaces,\n             durable_object_classes,\n             migration,\n",
        "test_patch": "diff --git a/src/upload/form/project_assets.rs b/src/upload/form/project_assets.rs\n--- a/src/upload/form/project_assets.rs\n+++ b/src/upload/form/project_assets.rs\n@@ -189,3 +373,149 @@ impl ModulesAssets {\n         bindings\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use std::path::Path;\n+\n+    fn init() {\n+        // enable INFO logging in tests\n+        let _ = env_logger::builder()\n+            .filter_level(log::LevelFilter::Info)\n+            .is_test(true)\n+            .try_init();\n+    }\n+\n+    // The below macros implement a simple DSL for specifying successful test results\n+    // the first entry should be an expression that evaluates to a ModuleConfig\n+    // the rest follow the following two patterns:\n+    // (full path on disk) => None\n+    //   -> indicates the path wasn't included in the upload\n+    // (full path on disk) => (module name, module type)\n+    //   -> indicates the path was included in the upload with a given module name and type\n+\n+    macro_rules! test_success {\n+        (\n+            $config:expr;\n+            $($path:literal => $result:tt),+\n+        ) => {\n+            let mut expected_output: HashMap<String, Module> = HashMap::new();\n+            let mut paths: Vec<&Path> = Vec::new();\n+\n+            macro_rules! test_data {\n+                ($path2:literal => None) => {\n+                    paths.push(Path::new($path2));\n+                };\n+                ($path2:expr => ($name:expr, $variant:ident)) => {{\n+                    paths.push(Path::new($path2));\n+                    expected_output.insert(\n+                        $name.to_string(),\n+                        Module {\n+                            path: $path2.into(),\n+                            module_type: ModuleType::$variant,\n+                        },\n+                    );\n+                }};\n+            }\n+\n+            $(test_data!($path => $result));+;\n+\n+            let matchers = build_type_matchers($config.rules)?;\n+            let modules = ModuleConfig::make_module_manifest(paths.into_iter(), &$config.dir, &matchers)?;\n+\n+            assert_eq!(modules, expected_output);\n+            Ok(())\n+        }\n+    }\n+\n+    #[test]\n+    fn default_globs() -> Result<(), failure::Error> {\n+        init();\n+        test_success! {\n+            ModuleConfig {\n+                main: r\"./foo/bar/index.mjs\".to_string(),\n+                dir: r\"/worker/dist\".into(),\n+                rules: Vec::new(),\n+            };\n+            r\"/worker/dist/foo/bar/index.mjs\" => (r\"./foo/bar/index.mjs\", ESModule),\n+            r\"/worker/dist/bar.js\" => (r\"./bar.js\", CommonJS),\n+            r\"/worker/dist/foo/baz.cjs\" => (r\"./foo/baz.cjs\", CommonJS),\n+            r\"/worker/dist/wat.txt\" => None,\n+            r\"/worker/dist/wat.bin\" => None,\n+            r\"/worker/dist/code.wasm\" => None,\n+            r\"/worker/dist/sourcemap.map\" => None\n+        }\n+    }\n+\n+    // The following two macros implement a simple DSL for specifying Vec<ModuleRule>\n+    // The first matches individual rules, and the second calls the first for each rule\n+    // The formats are:\n+    // [slice of globs (can be empty)] => (<ModuleType variant name>) -> rule with fallthrough = false\n+    // [slice of globs (can be empty)] => (<ModuleType variant name>, fallthrough) -> rule with fallthrough = true\n+\n+    macro_rules! rule {\n+        ([$($glob:literal),*]) => { vec![$($glob.to_owned()),*] };\n+        ($globs:tt => ($variant:ident, fallthrough)) => {\n+            ModuleRule {\n+                globs: rule!($globs),\n+                module_type: ModuleType::$variant,\n+                fallthrough: true\n+            }\n+        };\n+        ($globs:tt => ($variant:ident)) => {\n+            ModuleRule {\n+                globs: rule!($globs),\n+                module_type: ModuleType::$variant,\n+                fallthrough: false\n+            }\n+        };\n+    }\n+\n+    macro_rules! rules {\n+        [$($globs:tt => $rule:tt),+] => {\n+            vec![$(rule!($globs => $rule)),+]\n+        };\n+    }\n+\n+    #[test]\n+    fn custom_globs() -> Result<(), failure::Error> {\n+        init();\n+        test_success! {\n+            ModuleConfig {\n+                main: r\"./foo/bar/index.mjs\".to_string(),\n+                dir: r\"/worker/dist\".into(),\n+                rules: rules![\n+                    [\"js-is-module/**/*.js\"] => (ESModule, fallthrough),\n+                    [\"**/*.js\"] => (CommonJS),\n+                    [] => (Data),\n+                    [\"**/*.wasm\"] => (CompiledWasm)\n+                ],\n+            };\n+            r\"/worker/dist/foo/bar/index.mjs\" => (r\"./foo/bar/index.mjs\", ESModule),\n+            r\"/worker/dist/foo.js\" => (r\"./foo.js\", CommonJS),\n+            r\"/worker/dist/js-is-module/bar.js\" => (r\"./js-is-module/bar.js\", ESModule),\n+            r\"/worker/dist/js-is-module/inner/bat.js\" => (r\"./js-is-module/inner/bat.js\", ESModule),\n+            r\"/worker/dist/wont-match/js-is-module/inner/bat.js\" => (r\"./wont-match/js-is-module/inner/bat.js\", CommonJS),\n+            r\"/worker/dist/wat.txt\" => None,\n+            r\"/worker/dist/code.wasm\" => (r\"./code.wasm\", CompiledWasm),\n+            r\"/worker/dist/baz.cjs\" => None,\n+            r\"/worker/dist/wat.bin\" => None,\n+            r\"/worker/dist/sourcemap.map\" => None\n+        }\n+    }\n+\n+    #[test]\n+    fn invalid_globs_fail() {\n+        let rules = rules![\n+            [\"[z-a].mjs\"] => (ESModule)\n+        ];\n+\n+        println!(\n+            \"{:?}\",\n+            build_type_matchers(rules)\n+                .err()\n+                .expect(\"error on invalid globs\")\n+        );\n+    }\n+}\n",
        "problem_statement": "[custom-builds-rc] module paths should include `./` at the beginning\nWe should include `./` at the beginning of module names generated by wrangler, which will make modules meant for consumption by the Workers Runtime, also resolve their imports when executed elsewhere, if they are compatible otherwise.\r\n\r\nalternatively, we could make this configurable, and keep our current default.\n",
        "hints_text": "",
        "created_at": "2021-04-12T23:19:05Z",
        "version": "0.10"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1798,
        "instance_id": "cloudflare__wrangler-legacy-1798",
        "issue_numbers": [
            "1796"
        ],
        "base_commit": "441b847c6f398a107f4e528c1a0b897e44bb0f2b",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -1,5 +1,19 @@\n # Changelog\n \n+## 1.14.1\n+\n+- ### Fixes\n+\n+  - **revert default install location change - [xortive], [pull/1798]**\n+\n+    In 1.14.0, we changed the default install location from `~/.wrangler` to `node_modules`,\n+    to allow `npx wrangler` to use the pinned version in a project's dependencies. It seems that\n+    this is causing issues, so we're rolling it back in favor of having folks who want this behavior,\n+    to specify a the install location in the `config` section of package.json. We'll document this soon.\n+\n+    [xortive]: https://github.com/xortive\n+    [pull/1798]: https://github.com/cloudflare/wrangler/pull/1798\n+\n ## 1.14.0\n \n - ### Features\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -73,9 +73,9 @@ dependencies = [\n \n [[package]]\n name = \"async-trait\"\n-version = \"0.1.42\"\n+version = \"0.1.45\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8d3a45e77e34375a7923b1e8febb049bb011f064714a8e17a1a616fef01da13d\"\n+checksum = \"d3340571769500ddef1e94b45055fabed6b08a881269b7570c830b8f32ef84ef\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2507,9 +2507,9 @@ checksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.60\"\n+version = \"1.0.61\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c700597eca8a5a762beb35753ef6b94df201c81cca676604f547495a0d7f0081\"\n+checksum = \"ed22b90a0e734a23a7610f4283ac9e5acfb96cbb30dfefa540d66f866f1c09c5\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -3205,7 +3205,7 @@ dependencies = [\n \n [[package]]\n name = \"wrangler\"\n-version = \"1.14.0\"\n+version = \"1.14.1\"\n dependencies = [\n  \"assert_cmd\",\n  \"atty\",\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -1,6 +1,6 @@\n [package]\n name = \"wrangler\"\n-version = \"1.14.0\"\n+version = \"1.14.1\"\n authors = [\"The Wrangler Team <wrangler@cloudflare.com>\", \"Avery Harnish <averyharnish@gmail.com>\", \"Ashley Lewis <ashleymichal@gmail.com>\", \"Ashley Williams <ashley666ashley@gmail.com>\", \"Nat Davidson <davidson@cloudflare.com>\", \"Steve Manuel <nilslice@gmail.com>\"]\n edition = \"2018\"\n license = \"MIT/Apache-2.0\"\ndiff --git a/RELEASE_CHECKLIST.md b/RELEASE_CHECKLIST.md\n--- a/RELEASE_CHECKLIST.md\n+++ b/RELEASE_CHECKLIST.md\n@@ -43,14 +43,21 @@ Most of your comments will be about the changelog. Once the PR is finalized and\n \n 1. If you made changes, squash or fixup all changes into a single commit.\n 1. Run `git push` and wait for CI to pass.\n+## Merge\n+\n+1. Hit the big green Merge button on the release PR.\n+1. `git checkout master` and `git pull --rebase origin master`\n \n ### Tag and build release\n \n This part of the release process is handled by GitHub Actions, and our binaries are distributed as GitHub Releases. When you push a version tag, it kicks off an action that creates a new GitHub release for that tag, builds release binaries and attaches them to the release.\n \n-1. Once ready to merge, tag the commit by running either `git tag -a v#.#.# -m #.#.#` (release), or `git tag -a v#.#.#-rc.# -m #.#.#` (release candidate)\n+1. After pulling `master` in the step above, tag the commit by running either `git tag -a v#.#.# -m #.#.#` (release), or `git tag -a v#.#.#-rc.# -m #.#.#` (release candidate)\n 1. Run `git push --tags`.\n 1. Wait for CI to pass.\n+1. If CI fails, delete the tag locally and remotely\n+1. Fix whatever caused the CI failure\n+1. Re-tag the healthy commit, and wait for CI to pass again.\n \n ### Edit the release\n \ndiff --git a/npm/binary.js b/npm/binary.js\n--- a/npm/binary.js\n+++ b/npm/binary.js\n@@ -38,7 +38,7 @@ const getBinary = () => {\n   const customPath =\n     process.env.WRANGLER_INSTALL_PATH ||\n     process.env.npm_config_wrangler_install_path;\n-  const installDirectory = join(customPath || __dirname, \"wrangler\");\n+  const installDirectory = join(customPath || os.homedir(), \".wrangler\");\n   return new Binary(url, { name: \"wrangler\", installDirectory });\n };\n \ndiff --git a/npm/npm-shrinkwrap.json b/npm/npm-shrinkwrap.json\n--- a/npm/npm-shrinkwrap.json\n+++ b/npm/npm-shrinkwrap.json\n@@ -1,12 +1,12 @@\n {\n   \"name\": \"@cloudflare/wrangler\",\n-  \"version\": \"1.14.0\",\n+  \"version\": \"1.14.1\",\n   \"lockfileVersion\": 2,\n   \"requires\": true,\n   \"packages\": {\n     \"\": {\n       \"name\": \"@cloudflare/wrangler\",\n-      \"version\": \"1.14.0\",\n+      \"version\": \"1.14.1\",\n       \"hasInstallScript\": true,\n       \"license\": \"MIT OR Apache-2.0\",\n       \"dependencies\": {\ndiff --git a/npm/package.json b/npm/package.json\n--- a/npm/package.json\n+++ b/npm/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"@cloudflare/wrangler\",\n-  \"version\": \"1.14.0\",\n+  \"version\": \"1.14.1\",\n   \"description\": \"Command-line interface for all things Cloudflare Workers\",\n   \"main\": \"binary.js\",\n   \"scripts\": {\n",
        "test_patch": "diff --git a/RELEASE_CHECKLIST.md b/RELEASE_CHECKLIST.md\n--- a/RELEASE_CHECKLIST.md\n+++ b/RELEASE_CHECKLIST.md\n@@ -74,11 +81,6 @@ After CI builds the release binaries and they appear on the [releases page](http\n \n    The new release candidate should then include updated testing instructions with a small changelog at the top to get folks who installed the old release candidate up to speed.\n \n-## Publish\n-\n-1. Hit the big green Merge button on the release PR.\n-1. `git checkout master` and `git pull --rebase origin master`\n-\n ### Publish to crates.io (full release only)\n \n **IMPORTANT: This step is the hardest to fix if you mess it up. Do not run this step for Release Candidates**.\n",
        "problem_statement": "Unable to install wrangler\n### \ud83d\udc1b Bug report\r\n\r\nI'm unable to install wrangler. Most probably reason is the binary-install stuff in 1.14\r\n\r\n#### Describe the bug\r\n\r\nI try to install wrangler. It fails :D\r\n\r\n```\r\nnpm ERR! code 1\r\nnpm ERR! path /usr/local/lib/node_modules/@cloudflare/wrangler\r\nnpm ERR! command failed\r\nnpm ERR! command sh -c node ./install-wrangler.js\r\nnpm ERR! internal/modules/cjs/loader.js:883\r\nnpm ERR!   throw err;\r\nnpm ERR!   ^\r\nnpm ERR!\r\nnpm ERR! Error: Cannot find module '@cloudflare/binary-install'\r\nnpm ERR! Require stack:\r\nnpm ERR! - /usr/local/lib/node_modules/@cloudflare/wrangler/binary.js\r\nnpm ERR! - /usr/local/lib/node_modules/@cloudflare/wrangler/install-wrangler.js\r\nnpm ERR!     at Function.Module._resolveFilename (internal/modules/cjs/loader.js:880:15)\r\nnpm ERR!     at Function.Module._load (internal/modules/cjs/loader.js:725:27)\r\nnpm ERR!     at Module.require (internal/modules/cjs/loader.js:952:19)\r\nnpm ERR!     at require (internal/modules/cjs/helpers.js:88:18)\r\nnpm ERR!     at Object.<anonymous> (/usr/local/lib/node_modules/@cloudflare/wrangler/binary.js:1:20)\r\nnpm ERR!     at Module._compile (internal/modules/cjs/loader.js:1063:30)\r\nnpm ERR!     at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\r\nnpm ERR!     at Module.load (internal/modules/cjs/loader.js:928:32)\r\nnpm ERR!     at Function.Module._load (internal/modules/cjs/loader.js:769:14)\r\nnpm ERR!     at Module.require (internal/modules/cjs/loader.js:952:19) {\r\nnpm ERR!   code: 'MODULE_NOT_FOUND',\r\nnpm ERR!   requireStack: [\r\nnpm ERR!     '/usr/local/lib/node_modules/@cloudflare/wrangler/binary.js',\r\nnpm ERR!     '/usr/local/lib/node_modules/@cloudflare/wrangler/install-wrangler.js'\r\nnpm ERR!   ]\r\nnpm ERR! }\r\n```\r\n#### Reproduce the bug\r\n\r\n`npm i -g @cloudflare/wrangler`\r\n\r\n#### Expected behavior\r\n\r\nIt installs wrangler\r\n\r\n#### Environment and versions\r\n\r\nFill out the following information about your environment.\r\n\r\n* operating system: macOS Big Sur 11.1\r\n* output of `wrangler -V`: \ud83d\udc77 \u2728  wrangler 1.13.0\r\n* output of `node -v`: v14.16.0\r\n* content of `wrangler.toml`: N/A\r\n\n",
        "hints_text": "if you `npm install -g @cloudflare/binary-install` before, does that fix it?\r\n\r\nI managed to replicate this when testing potential solutions I was going to offer. When I did `npm cache clean --force` (note, do not run this), I was unable to install *any* version of wrangler globally, even when using `nvm`. I fixed it with the workaround above, but I'm still investigating why this is the case.\nThis update also created another issue for me, with worker dependencies but I'll probably post another issue about that.\r\n\r\nRunning `npm install -g @cloudflare/binary-install` before did fix it, but that seems _very_ sketch?\n@kokarn yeah, I need to figure out what's going on there.\r\n\r\nIf you uninstall completely (`npm uninstall -g @cloudflare/wrangler` and delete the @cloudflare folder from your global node_modules directory), and use `WRANGLER_INSTALL_PATH=~/.wrangler npm install -g @cloudflare/wrangler` then `WRANGLER_INSTALL_PATH=~/.wrangler wrangler --version`, does that fix it? I want to isolate the change in install location from any other issues you might be having here\r\n\nCorrect. After removing the Cloudflare folder and running with a  set install path it works as expected\nAnd if you uninstall wrangler *again*, and try installing without the set path this time, it breaks again?\r\n\r\nThis is quite unfortunate. Installing to `node_modules` is a prerequesite for making wrangler work as a devDependency and actually pin the version used for running your commands to the version used as a devDependency.\r\n\r\nWe'll have to rollback this change if it's causing problems, and have folks specify the install path to be project-local when installing as a dev-dependency instead.\nYeah, it's back when I do that.\r\n\r\nBut isn't the solution to just set binary-install as a dependency to wrangler?\r\n\r\n```\r\n$\u00a0rm -rf ~/.wrangler\r\n$ npm i -g @cloudflare/wrangler\r\nnpm ERR! code 1\r\nnpm ERR! path /usr/local/lib/node_modules/@cloudflare/wrangler\r\nnpm ERR! command failed\r\nnpm ERR! command sh -c node ./install-wrangler.js\r\nnpm ERR! internal/modules/cjs/loader.js:883\r\nnpm ERR!   throw err;\r\nnpm ERR!   ^\r\nnpm ERR!\r\nnpm ERR! Error: Cannot find module '@cloudflare/binary-install'\r\nnpm ERR! Require stack:\r\nnpm ERR! - /usr/local/lib/node_modules/@cloudflare/wrangler/binary.js\r\nnpm ERR! - /usr/local/lib/node_modules/@cloudflare/wrangler/install-wrangler.js\r\nnpm ERR!     at Function.Module._resolveFilename (internal/modules/cjs/loader.js:880:15)\r\nnpm ERR!     at Function.Module._load (internal/modules/cjs/loader.js:725:27)\r\nnpm ERR!     at Module.require (internal/modules/cjs/loader.js:952:19)\r\nnpm ERR!     at require (internal/modules/cjs/helpers.js:88:18)\r\nnpm ERR!     at Object.<anonymous> (/usr/local/lib/node_modules/@cloudflare/wrangler/binary.js:1:20)\r\nnpm ERR!     at Module._compile (internal/modules/cjs/loader.js:1063:30)\r\nnpm ERR!     at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\r\nnpm ERR!     at Module.load (internal/modules/cjs/loader.js:928:32)\r\nnpm ERR!     at Function.Module._load (internal/modules/cjs/loader.js:769:14)\r\nnpm ERR!     at Module.require (internal/modules/cjs/loader.js:952:19) {\r\nnpm ERR!   code: 'MODULE_NOT_FOUND',\r\nnpm ERR!   requireStack: [\r\nnpm ERR!     '/usr/local/lib/node_modules/@cloudflare/wrangler/binary.js',\r\nnpm ERR!     '/usr/local/lib/node_modules/@cloudflare/wrangler/install-wrangler.js'\r\nnpm ERR!   ]\r\nnpm ERR! }\r\n```\nhttps://github.com/cloudflare/wrangler/blob/master/npm/package.json#L45 it is a dependency. I'm not sure why changing the install location (which is read by the post-install script, not npm itself) changes whether or not it's able to resolve the dependency.\nAh, I looked in the wrong folder, my bad.\r\n\r\nIt's indeed very strange. I'm surprised there's a difference with adding a `-g` or not\nEither way, we'll roll back this change in 1.14.1\nLooking at the verbose logs, doesn't it look like it's running postinstall before it's running install for binary?\r\n```\r\nnpm i -g --verbose @cloudflare/wrangler                                     \ue0b2 \u2714 \ue0b2 10196 \ue0b2 15:22:35\r\nnpm verb cli [\r\nnpm verb cli   '/usr/local/bin/node',\r\nnpm verb cli   '/usr/local/bin/npm',\r\nnpm verb cli   'i',\r\nnpm verb cli   '-g',\r\nnpm verb cli   '--verbose',\r\nnpm verb cli   '@cloudflare/wrangler'\r\nnpm verb cli ]\r\nnpm info using npm@7.6.0\r\nnpm info using node@v14.16.0\r\nnpm timing config:load:defaults Completed in 1ms\r\nnpm timing config:load:file:/usr/local/lib/node_modules/npm/npmrc Completed in 1ms\r\nnpm timing config:load:builtin Completed in 1ms\r\nnpm timing config:load:cli Completed in 1ms\r\nnpm timing config:load:env Completed in 1ms\r\nnpm timing config:load:file:/Users/oskar.risberg/repos/test/.npmrc Completed in 0ms\r\nnpm timing config:load:project Completed in 0ms\r\nnpm timing config:load:file:/Users/oskar.risberg/.npmrc Completed in 1ms\r\nnpm timing config:load:user Completed in 1ms\r\nnpm timing config:load:file:/usr/local/etc/npmrc Completed in 0ms\r\nnpm timing config:load:global Completed in 0ms\r\nnpm timing config:load:cafile Completed in 0ms\r\nnpm timing config:load:validate Completed in 0ms\r\nnpm timing config:load:setUserAgent Completed in 1ms\r\nnpm timing config:load:setEnvs Completed in 0ms\r\nnpm timing config:load Completed in 6ms\r\nnpm verb npm-session d1c49cc91c6a9001\r\nnpm timing npm:load Completed in 15ms\r\nnpm timing arborist:ctor Completed in 1ms\r\nnpm timing idealTree:init Completed in 6ms\r\nnpm timing idealTree:userRequests Completed in 2ms\r\nnpm http fetch GET 304 https://registry.npmjs.org/@cloudflare%2fwrangler 304ms (from cache)\r\nnpm http fetch GET 304 https://registry.npmjs.org/@cloudflare%2fbinary-install 224ms (from cache)\r\nnpm timing idealTree:#root Completed in 539ms\r\nnpm timing idealTree:buildDeps Completed in 541ms\r\nnpm timing idealTree:fixDepFlags Completed in 1ms\r\nnpm timing idealTree Completed in 551ms\r\nnpm timing reify:loadTrees Completed in 575ms\r\nnpm timing reify:diffTrees Completed in 3ms\r\nnpm timing reify:retireShallow Completed in 4ms\r\nnpm timing reify:createSparse Completed in 0ms\r\nnpm timing reify:loadBundles Completed in 0ms\r\nnpm timing reifyNode:node_modules/@cloudflare/wrangler Completed in 19ms\r\nnpm timing reify:unpack Completed in 19ms\r\nnpm timing reify:unretire Completed in 1ms\r\nnpm timing build:queue Completed in 1ms\r\nnpm timing build:link:node_modules/@cloudflare/wrangler Completed in 2ms\r\nnpm timing build:link Completed in 2ms\r\nnpm info run @cloudflare/wrangler@1.14.0 postinstall node_modules/@cloudflare/wrangler node ./install-wrangler.js\r\nnpm info run @cloudflare/wrangler@1.14.0 postinstall { code: 1, signal: null }\r\nnpm timing reify:rollback:createSparse Completed in 3ms\r\nnpm timing reify:rollback:retireShallow Completed in 1ms\r\nnpm timing command:install Completed in 702ms\r\nnpm verb stack Error: command failed\r\nnpm verb stack     at ChildProcess.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/@npmcli/promise-spawn/index.js:64:27)\r\nnpm verb stack     at ChildProcess.emit (events.js:315:20)\r\nnpm verb stack     at maybeClose (internal/child_process.js:1048:16)\r\nnpm verb stack     at Socket.<anonymous> (internal/child_process.js:439:11)\r\nnpm verb stack     at Socket.emit (events.js:315:20)\r\nnpm verb stack     at Pipe.<anonymous> (net.js:673:12)\r\nnpm verb pkgid @cloudflare/wrangler@1.14.0\r\nnpm verb cwd /Users/oskar.risberg/repos/test\r\nnpm verb Darwin 20.2.0\r\nnpm verb argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"i\" \"-g\" \"--verbose\" \"@cloudflare/wrangler\"\r\nnpm verb node v14.16.0\r\nnpm verb npm  v7.6.0\r\nnpm ERR! code 1\r\nnpm ERR! path /usr/local/lib/node_modules/@cloudflare/wrangler\r\nnpm ERR! command failed\r\nnpm ERR! command sh -c node ./install-wrangler.js\r\nnpm ERR! internal/modules/cjs/loader.js:883\r\nnpm ERR!   throw err;\r\nnpm ERR!   ^\r\nnpm ERR!\r\nnpm ERR! Error: Cannot find module '@cloudflare/binary-install'\r\nnpm ERR! Require stack:\r\nnpm ERR! - /usr/local/lib/node_modules/@cloudflare/wrangler/binary.js\r\nnpm ERR! - /usr/local/lib/node_modules/@cloudflare/wrangler/install-wrangler.js\r\nnpm ERR!     at Function.Module._resolveFilename (internal/modules/cjs/loader.js:880:15)\r\nnpm ERR!     at Function.Module._load (internal/modules/cjs/loader.js:725:27)\r\nnpm ERR!     at Module.require (internal/modules/cjs/loader.js:952:19)\r\nnpm ERR!     at require (internal/modules/cjs/helpers.js:88:18)\r\nnpm ERR!     at Object.<anonymous> (/usr/local/lib/node_modules/@cloudflare/wrangler/binary.js:1:20)\r\nnpm ERR!     at Module._compile (internal/modules/cjs/loader.js:1063:30)\r\nnpm ERR!     at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\r\nnpm ERR!     at Module.load (internal/modules/cjs/loader.js:928:32)\r\nnpm ERR!     at Function.Module._load (internal/modules/cjs/loader.js:769:14)\r\nnpm ERR!     at Module.require (internal/modules/cjs/loader.js:952:19) {\r\nnpm ERR!   code: 'MODULE_NOT_FOUND',\r\nnpm ERR!   requireStack: [\r\nnpm ERR!     '/usr/local/lib/node_modules/@cloudflare/wrangler/binary.js',\r\nnpm ERR!     '/usr/local/lib/node_modules/@cloudflare/wrangler/install-wrangler.js'\r\nnpm ERR!   ]\r\nnpm ERR! }\r\nnpm verb exit 1\r\nnpm timing npm Completed in 898ms\r\nnpm verb code 1\r\n```\n```\r\nnpm info run @cloudflare/wrangler@1.14.0 postinstall node_modules/@cloudflare/wrangler node ./install-wrangler.js\r\nnpm info run @cloudflare/wrangler@1.14.0 postinstall { code: 1, signal: null }\r\n```\r\n\r\nIt looks like it's running but its failing. You're on npm 7 right? what's your `npm -v` output?\r\n\r\nI think npm 7 is silencing the output of postinstall scripts now, because even old versions of wrangler print nothing when installing using npm 7.\nAh, yeah might be. I'm on npm 7.6.0 ",
        "created_at": "2021-03-05T14:46:11Z",
        "version": "1.14"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1740,
        "instance_id": "cloudflare__wrangler-legacy-1740",
        "issue_numbers": [
            "1734"
        ],
        "base_commit": "660bd207e6920a0a25f67560ed23bcafe18b9b25",
        "patch": "diff --git a/src/commands/kv/key/mod.rs b/src/commands/kv/key/mod.rs\n--- a/src/commands/kv/key/mod.rs\n+++ b/src/commands/kv/key/mod.rs\n@@ -6,4 +6,4 @@ mod put;\n pub use delete::delete;\n pub use get::get;\n pub use list::list;\n-pub use put::{put, KVMetaData};\n+pub use put::{parse_metadata, put, KVMetaData};\ndiff --git a/src/commands/kv/key/put.rs b/src/commands/kv/key/put.rs\n--- a/src/commands/kv/key/put.rs\n+++ b/src/commands/kv/key/put.rs\n@@ -13,6 +13,9 @@ use crate::http;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n use crate::terminal::message::{Message, StdOut};\n+use regex::Regex;\n+use reqwest::blocking::multipart;\n+\n pub struct KVMetaData {\n     pub namespace_id: String,\n     pub key: String,\ndiff --git a/src/commands/kv/key/put.rs b/src/commands/kv/key/put.rs\n--- a/src/commands/kv/key/put.rs\n+++ b/src/commands/kv/key/put.rs\n@@ -20,6 +23,28 @@ pub struct KVMetaData {\n     pub is_file: bool,\n     pub expiration: Option<String>,\n     pub expiration_ttl: Option<String>,\n+    pub metadata: Option<serde_json::Value>,\n+}\n+\n+pub fn parse_metadata(arg: Option<&str>) -> Result<Option<serde_json::Value>, failure::Error> {\n+    match arg {\n+        None => Ok(None),\n+        Some(s) => {\n+            match serde_json::from_str(s) {\n+                Ok(v) => Ok(Some(v)),\n+                Err(e) => {\n+                    // try to help users that forget to double-quote a JSON string\n+                    let re = Regex::new(r#\"^['\"]?[^\"'{}\\[\\]]*['\"]?$\"#)?;\n+                    if re.is_match(s) {\n+                        failure::bail!(\n+                            \"did you remember to double quote strings, like --metadata '\\\"made with \ud83e\udd20 wrangler\\\"'\"\n+                        )\n+                    }\n+                    failure::bail!(e.to_string())\n+                }\n+            }\n+        }\n+    }\n }\n \n pub fn put(target: &Target, user: &GlobalUser, data: KVMetaData) -> Result<(), failure::Error> {\ndiff --git a/src/commands/kv/key/put.rs b/src/commands/kv/key/put.rs\n--- a/src/commands/kv/key/put.rs\n+++ b/src/commands/kv/key/put.rs\n@@ -41,30 +66,9 @@ pub fn put(target: &Target, user: &GlobalUser, data: KVMetaData) -> Result<(), f\n     if let Some(ttl) = &data.expiration_ttl {\n         query_params.push((\"expiration_ttl\", ttl))\n     };\n-    let url = Url::parse_with_params(&api_endpoint, query_params);\n+    let url = Url::parse_with_params(&api_endpoint, query_params)?;\n \n-    let client = http::legacy_auth_client(&user);\n-\n-    let url_into_str = url?.into_string();\n-\n-    // If is_file is true, overwrite value to be the contents of the given\n-    // filename in the 'value' arg.\n-    let res = if data.is_file {\n-        match &metadata(&data.value) {\n-            Ok(file_type) if file_type.is_file() => {\n-                let file = fs::File::open(&data.value)?;\n-                client.put(&url_into_str).body(file).send()?\n-            }\n-            Ok(file_type) if file_type.is_dir() => failure::bail!(\n-                \"--path argument takes a file, {} is a directory\",\n-                data.value\n-            ),\n-            Ok(_) => failure::bail!(\"--path argument takes a file, {} is a symlink\", data.value), // last remaining value is symlink\n-            Err(e) => failure::bail!(\"{}\", e),\n-        }\n-    } else {\n-        client.put(&url_into_str).body(data.value).send()?\n-    };\n+    let res = get_response(data, user, &url)?;\n \n     let response_status = res.status();\n     if response_status.is_success() {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -13,7 +13,7 @@ use exitfailure::ExitFailure;\n use url::Url;\n \n use wrangler::commands;\n-use wrangler::commands::kv::key::KVMetaData;\n+use wrangler::commands::kv::key::{parse_metadata, KVMetaData};\n use wrangler::installer;\n use wrangler::preview::{HttpMethod, PreviewOpt};\n use wrangler::settings;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -202,6 +202,14 @@ fn run() -> Result<(), failure::Error> {\n                             .takes_value(true)\n                             .value_name(\"SECONDS\")\n                         )\n+                        .arg(\n+                            Arg::with_name(\"metadata\")\n+                            .help(\"Arbitrary JSON to associate with a key-value pair. Must be no more than 1024 bytes.\")\n+                            .short(\"m\")\n+                            .long(\"metadata\")\n+                            .takes_value(true)\n+                            .value_name(\"JSON\")\n+                        )\n                         .arg(\n                             Arg::with_name(\"path\")\n                             .help(\"The value passed in is a path to a file; open and upload its contents\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -1045,6 +1053,10 @@ fn run() -> Result<(), failure::Error> {\n                 let expiration_ttl = put_key_matches\n                     .value_of(\"expiration-ttl\")\n                     .map(|t| t.to_string());\n+                let metadata =\n+                    parse_metadata(put_key_matches.value_of(\"metadata\")).map_err(|e| {\n+                        failure::format_err!(\"--metadata is not valid JSON: {}\", e.to_string())\n+                    })?;\n                 let kv_metadata = KVMetaData {\n                     namespace_id,\n                     key,\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -1052,6 +1064,7 @@ fn run() -> Result<(), failure::Error> {\n                     is_file,\n                     expiration,\n                     expiration_ttl,\n+                    metadata,\n                 };\n                 commands::kv::key::put(&target, &user, kv_metadata)?\n             }\n",
        "test_patch": "diff --git a/src/commands/kv/key/put.rs b/src/commands/kv/key/put.rs\n--- a/src/commands/kv/key/put.rs\n+++ b/src/commands/kv/key/put.rs\n@@ -82,3 +86,85 @@ pub fn put(target: &Target, user: &GlobalUser, data: KVMetaData) -> Result<(), f\n \n     Ok(())\n }\n+\n+fn get_response(\n+    data: KVMetaData,\n+    user: &GlobalUser,\n+    url: &Url,\n+) -> Result<reqwest::blocking::Response, failure::Error> {\n+    let url_into_str = url.to_string();\n+    let client = http::legacy_auth_client(user);\n+    let value_body = get_request_body(&data)?;\n+    let res = match &data.metadata {\n+        Some(metadata) => {\n+            let value_part = multipart::Part::bytes(value_body);\n+            let form = multipart::Form::new()\n+                .part(\"value\", value_part)\n+                .text(\"metadata\", metadata.to_string());\n+            client.put(&url_into_str).multipart(form).send()?\n+        }\n+        None => client.put(&url_into_str).body(value_body).send()?,\n+    };\n+    Ok(res)\n+}\n+\n+// If is_file is true, overwrite value to be the contents of the given\n+// filename in the 'value' arg.\n+fn get_request_body(data: &KVMetaData) -> Result<Vec<u8>, failure::Error> {\n+    if data.is_file {\n+        match &metadata(&data.value) {\n+            Ok(file_type) if file_type.is_file() => Ok(fs::read(&data.value)?),\n+            Ok(file_type) if file_type.is_dir() => failure::bail!(\n+                \"--path argument takes a file, {} is a directory\",\n+                data.value\n+            ),\n+            Ok(_) => failure::bail!(\n+                \"--path argument points to an entity that is not a file or a directory: {}\",\n+                data.value\n+            ),\n+            Err(e) => failure::bail!(\"{}\", e),\n+        }\n+    } else {\n+        Ok(data.value.clone().into())\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn metadata_parser_legal() {\n+        for input in vec![\n+            \"true\",\n+            \"false\",\n+            \"123.456\",\n+            r#\"\"some string\"\"#,\n+            \"[1, 2]\",\n+            \"{\\\"key\\\": \\\"value\\\"}\",\n+        ] {\n+            assert!(parse_metadata(Some(input)).is_ok());\n+        }\n+    }\n+\n+    #[test]\n+    fn metadata_parser_illegal() {\n+        for input in vec![\"something\", \"{key: 123}\", \"[1, 2\"] {\n+            assert!(parse_metadata(Some(input)).is_err());\n+        }\n+    }\n+\n+    #[test]\n+    fn metadata_parser_error_message_unquoted_string_error_message() -> Result<(), &'static str> {\n+        for input in vec![\"abc\", \"'abc'\", \"'abc\", \"abc'\", \"\\\"abc\", \"abc\\\"\"] {\n+            match parse_metadata(Some(input)) {\n+                Ok(_) => return Err(\"illegal value was parsed successfully\"),\n+                Err(e) => {\n+                    let expected_message = \"did you remember to double quote strings, like --metadata '\\\"made with \ud83e\udd20 wrangler\\\"'\";\n+                    assert_eq!(expected_message, e.to_string());\n+                }\n+            }\n+        }\n+        Ok(())\n+    }\n+}\n",
        "problem_statement": "RFC: KV put with metadata\n### \ud83d\udca1 Feature request\r\n\r\nPerform a [KV put with metadata](https://developers.cloudflare.com/workers/runtime-apis/kv#metadata) from Wrangler:\r\n```\r\nwrangler kv:key put my-key my-value --metadata '{\"some\": \"json\"}'\r\n```\r\nAny kind of JSON works:\r\n* boolean\r\n* number\r\n* object\r\n* array\r\n* strings\n",
        "hints_text": "> accept almost any kind of JSON [...] not strings though\r\n\r\ndoes it mean\r\n```\r\nwrangler kv:key put my-key my-value --metadata '1'\r\n```\r\nis supported but not\r\n```\r\nwrangler kv:key put my-key my-value --metadata '\"json\"'\r\n```\nYes.\n\nOn Mon, Jan 18, 2021 at 4:05 AM Sven Sauleau <notifications@github.com>\nwrote:\n\n> accept almost any kind of JSON [...] not strings though\n>\n> does it mean\n>\n> wrangler kv:key put my-key my-value --metadata '1'\n>\n> is supported but not\n>\n> wrangler kv:key put my-key my-value --metadata '\"json\"'\n>\n> \u2014\n> You are receiving this because you were assigned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/cloudflare/wrangler/issues/1734#issuecomment-762136890>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAWSCDLSKRKQXCDPWHPJ4DDS2QBV3ANCNFSM4WEPLAPQ>\n> .\n>\n\nWhy?  Doing e.g. the following from a worker is fine:\r\n\r\n        await NS.put(key, value, {metadata: \"some_string\"})\r\n\nI was asking if we disallow a string insisde an object or a string instead an object, so we would disallow:\r\n```sh\r\n    await NS.put(key, value, \"some_string\")\r\n```\r\n\r\nbut not\r\n```js\r\n    await NS.put(key, value, 1)\r\n```\r\n?\nthe third argument isn't metadata, it's an options object that may contain a metadata key.  See   https://developers.cloudflare.com/workers/runtime-apis/kv#metadata  and https://github.com/cloudflare/workers-types/blob/master/index.d.ts#L610\r\n\r\n  My example above would result in \r\n\r\n        const { value, metadata } = await NS.getWithMetadata(key);\r\n\r\nbinding metadata to \"some_string\", not {metadata: \"some_string\"}\nIndeed, thanks for clarify. I hidden my comment since it's not relevant\n> Why? Doing e.g. the following from a worker is fine:\r\n> \r\n> ```\r\n>     await NS.put(key, value, {metadata: \"some_string\"})\r\n> ```\r\n\r\nNever mind, I wasn't escaping quotes correctly in my curl command. The API will accept strings just fine.",
        "created_at": "2021-01-20T01:51:29Z",
        "version": "1.13"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1677,
        "instance_id": "cloudflare__wrangler-legacy-1677",
        "issue_numbers": [
            "1558"
        ],
        "base_commit": "ad39228dda3440b0933810fc63f24342dfb6cc8b",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -57,6 +57,12 @@ version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"\n \n+[[package]]\n+name = \"ascii\"\n+version = \"0.9.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eab1c04a571841102f5345a8fc0f6bb3d31c315dec879b5c6e42e40ce7ffa34e\"\n+\n [[package]]\n name = \"assert_cmd\"\n version = \"1.0.2\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -367,6 +373,19 @@ dependencies = [\n  \"url\",\n ]\n \n+[[package]]\n+name = \"combine\"\n+version = \"3.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"da3da6baa321ec19e1cc41d31bf599f00c783d0517095cdaf0332e3fe8d20680\"\n+dependencies = [\n+ \"ascii\",\n+ \"byteorder\",\n+ \"either\",\n+ \"memchr\",\n+ \"unreachable\",\n+]\n+\n [[package]]\n name = \"config\"\n version = \"0.10.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -700,6 +719,12 @@ version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"fea41bba32d969b513997752735605054bc0dfa92b4c56bf1189f2e174be7a10\"\n \n+[[package]]\n+name = \"either\"\n+version = \"1.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n+\n [[package]]\n name = \"encode_unicode\"\n version = \"0.3.6\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2769,6 +2794,17 @@ dependencies = [\n  \"serde 1.0.119\",\n ]\n \n+[[package]]\n+name = \"toml_edit\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"09391a441b373597cf0888d2b052dcf82c5be4fee05da3636ae30fb57aad8484\"\n+dependencies = [\n+ \"chrono\",\n+ \"combine\",\n+ \"linked-hash-map 0.5.4\",\n+]\n+\n [[package]]\n name = \"tower-service\"\n version = \"0.3.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2925,6 +2961,15 @@ version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f7fe0bb3479651439c9112f72b6c505038574c9fbb575ed1bf3b797fa39dd564\"\n \n+[[package]]\n+name = \"unreachable\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\n+dependencies = [\n+ \"void\",\n+]\n+\n [[package]]\n name = \"untrusted\"\n version = \"0.7.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2976,6 +3021,12 @@ version = \"0.9.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"b5a972e5669d67ba988ce3dc826706fb0a8b01471c088cb0b6110b805cc36aed\"\n \n+[[package]]\n+name = \"void\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n+\n [[package]]\n name = \"wait-timeout\"\n version = \"0.2.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -3221,6 +3272,7 @@ dependencies = [\n  \"tokio-rustls\",\n  \"tokio-tungstenite\",\n  \"toml\",\n+ \"toml_edit\",\n  \"twox-hash\",\n  \"url\",\n  \"uuid\",\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -58,6 +58,7 @@ tokio-native-tls = \"0.1.0\"\n tokio-rustls = \"0.14.1\"\n tokio-tungstenite = { version = \"0.11.0\", features = [\"tls\"] }\n toml = \"0.5.8\"\n+toml_edit = \"0.2.0\"\n twox-hash = \"1.6.0\"\n url = \"2.2.0\"\n uuid = { version = \"0.8\", features = [\"v4\"] }\ndiff --git a/src/build/mod.rs b/src/build/mod.rs\n--- a/src/build/mod.rs\n+++ b/src/build/mod.rs\n@@ -12,10 +12,30 @@ use std::process::Command;\n pub fn build_target(target: &Target) -> Result<String, failure::Error> {\n     let target_type = &target.target_type;\n     match target_type {\n-        TargetType::JavaScript => {\n-            let msg = \"JavaScript project found. Skipping unnecessary build!\".to_string();\n-            Ok(msg)\n-        }\n+        TargetType::JavaScript => match &target.build {\n+            None => {\n+                let msg = \"Basic JavaScript project found. Skipping unnecessary build!\".to_string();\n+                Ok(msg)\n+            }\n+            Some(config) => {\n+                if let Some((cmd_str, mut cmd)) = config.build_command() {\n+                    StdErr::working(format!(\"Running {}\", cmd_str).as_ref());\n+                    let build_result = cmd.spawn()?.wait()?;\n+                    if build_result.success() {\n+                        Ok(String::from(\"Build completed successfully!\"))\n+                    } else if let Some(code) = build_result.code() {\n+                        Err(failure::err_msg(format!(\n+                            \"Build failed! Status Code: {}\",\n+                            code\n+                        )))\n+                    } else {\n+                        Err(failure::err_msg(\"Build failed.\"))\n+                    }\n+                } else {\n+                    Ok(String::from(\"No build command specified, skipping build.\"))\n+                }\n+            }\n+        },\n         TargetType::Rust => {\n             let _ = which::which(\"rustc\").map_err(|e| {\n                 failure::format_err!(\ndiff --git a/src/build/mod.rs b/src/build/mod.rs\n--- a/src/build/mod.rs\n+++ b/src/build/mod.rs\n@@ -31,6 +51,7 @@ pub fn build_target(target: &Target) -> Result<String, failure::Error> {\n             let command = command(&args, &binary_path);\n             let command_name = format!(\"{:?}\", command);\n \n+            StdErr::working(\"Compiling your project to WebAssembly...\");\n             commands::run(command, &command_name)?;\n             let msg = \"Build succeeded\".to_string();\n             Ok(msg)\ndiff --git a/src/build/mod.rs b/src/build/mod.rs\n--- a/src/build/mod.rs\n+++ b/src/build/mod.rs\n@@ -49,8 +70,6 @@ pub fn build_target(target: &Target) -> Result<String, failure::Error> {\n }\n \n pub fn command(args: &[&str], binary_path: &PathBuf) -> Command {\n-    StdErr::working(\"Compiling your project to WebAssembly...\");\n-\n     let mut c = if cfg!(target_os = \"windows\") {\n         let mut c = Command::new(\"cmd\");\n         c.arg(\"/C\");\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -72,6 +72,12 @@ pub fn publish(\n         }\n         Err(e) => Err(e),\n     }?;\n+\n+    // We verify early here, so we don't perform pre-upload tasks if the upload will fail\n+    if let Some(build_config) = &target.build {\n+        build_config.verify_upload_dir()?;\n+    }\n+\n     if let Some(site_config) = &target.site {\n         let path = &site_config.bucket.clone();\n         validate_bucket_location(path)?;\ndiff --git a/src/preview/mod.rs b/src/preview/mod.rs\n--- a/src/preview/mod.rs\n+++ b/src/preview/mod.rs\n@@ -17,13 +17,13 @@ use log::info;\n use url::Url;\n use ws::{Sender, WebSocket};\n \n-use crate::build::build_target;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n use crate::terminal::message::{Message, StdOut};\n use crate::terminal::open_browser;\n use crate::watch::watch_and_build;\n+use crate::{build::build_target, settings::toml::ScriptFormat};\n \n pub fn preview(\n     mut target: Target,\ndiff --git a/src/preview/mod.rs b/src/preview/mod.rs\n--- a/src/preview/mod.rs\n+++ b/src/preview/mod.rs\n@@ -31,6 +31,11 @@ pub fn preview(\n     options: PreviewOpt,\n     verbose: bool,\n ) -> Result<(), failure::Error> {\n+    if let Some(build) = &target.build {\n+        if matches!(build.upload_format, ScriptFormat::Modules) {\n+            failure::bail!(\"wrangler preview does not support previewing modules scripts. Please use wrangler dev instead.\");\n+        }\n+    }\n     build_target(&target)?;\n \n     let sites_preview: bool = target.site.is_some();\ndiff --git a/src/settings/metadata.rs /dev/null\n--- a/src/settings/metadata.rs\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-use serde::Serialize;\n-\n-use crate::settings::binding::Binding;\n-\n-#[derive(Serialize, Debug)]\n-pub struct Metadata {\n-    pub body_part: String,\n-    pub bindings: Vec<Binding>,\n-}\ndiff --git a/src/settings/mod.rs b/src/settings/mod.rs\n--- a/src/settings/mod.rs\n+++ b/src/settings/mod.rs\n@@ -2,7 +2,6 @@ pub mod binding;\n mod environment;\n mod global_config;\n pub mod global_user;\n-pub mod metadata;\n pub mod toml;\n \n pub use environment::{Environment, QueryEnvironment};\ndiff --git /dev/null b/src/settings/toml/builder.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/toml/builder.rs\n@@ -0,0 +1,115 @@\n+use std::env;\n+use std::path::PathBuf;\n+use std::process::Command;\n+\n+use serde::{Deserialize, Serialize};\n+\n+use super::ScriptFormat;\n+\n+const UPLOAD_DIR: &str = \"dist\";\n+const WATCH_DIR: &str = \"src\";\n+\n+#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]\n+#[serde(deny_unknown_fields)]\n+pub struct Builder {\n+    command: Option<String>,\n+    #[serde(default = \"project_root\")]\n+    pub cwd: PathBuf,\n+    #[serde(default = \"upload_dir\")]\n+    pub upload_dir: PathBuf,\n+    pub upload_format: ScriptFormat,\n+    pub upload_include: Option<Vec<String>>,\n+    pub upload_exclude: Option<Vec<String>>,\n+    #[serde(default = \"watch_dir\")]\n+    pub watch_dir: PathBuf,\n+}\n+\n+fn project_root() -> PathBuf {\n+    env::current_dir().unwrap()\n+}\n+\n+fn upload_dir() -> PathBuf {\n+    project_root().join(UPLOAD_DIR)\n+}\n+\n+fn watch_dir() -> PathBuf {\n+    project_root().join(WATCH_DIR)\n+}\n+\n+impl Builder {\n+    pub fn verify_watch_dir(&self) -> Result<(), failure::Error> {\n+        let watch_canonical = match self.watch_dir.canonicalize() {\n+            Ok(path) => path,\n+            Err(e) if matches!(e.kind(), std::io::ErrorKind::NotFound) => failure::bail!(\n+                \"Your provided watch_dir {} does not exist.\",\n+                self.watch_dir.display()\n+            ),\n+            Err(e) => failure::bail!(\n+                \"Error encountered when verifying watch_dir: {}, provided path: {}\",\n+                e,\n+                self.watch_dir.display()\n+            ),\n+        };\n+        let root_canonical = project_root().canonicalize()?;\n+        if watch_canonical == root_canonical {\n+            failure::bail!(\"Wrangler doesn't support using the project root as the watch_dir.\");\n+        }\n+        if !self.watch_dir.is_dir() {\n+            failure::bail!(format!(\n+                \"A path was provided for watch_dir that is not a directory: {}\",\n+                self.watch_dir.display()\n+            ));\n+        }\n+        Ok(())\n+    }\n+\n+    pub fn verify_upload_dir(&self) -> Result<(), failure::Error> {\n+        let upload_canonical = match self.upload_dir.canonicalize() {\n+            Ok(path) => path,\n+            Err(e) if matches!(e.kind(), std::io::ErrorKind::NotFound) => failure::bail!(\n+                \"Your provided upload_dir {} does not exist.\",\n+                self.upload_dir.display()\n+            ),\n+            Err(e) => failure::bail!(\n+                \"Error encountered when verifying upload_dir: {}, provided path: {}\",\n+                e,\n+                self.upload_dir.display()\n+            ),\n+        };\n+        let root_canonical = project_root().canonicalize()?;\n+        if upload_canonical == root_canonical {\n+            failure::bail!(\"Wrangler doesn't support using the project root as the upload_dir.\");\n+        }\n+        if !self.upload_dir.is_dir() {\n+            failure::bail!(format!(\n+                \"A path was provided for upload_dir that is not a directory: {}\",\n+                self.upload_dir.display()\n+            ));\n+        }\n+        Ok(())\n+    }\n+\n+    pub fn build_command(&self) -> Option<(&str, Command)> {\n+        match &self.command {\n+            Some(cmd) => {\n+                let mut c = if cfg!(target_os = \"windows\") {\n+                    let args: Vec<&str> = cmd.split_whitespace().collect();\n+                    let mut c = Command::new(\"cmd\");\n+                    c.arg(\"/C\");\n+                    c.args(args.as_slice());\n+                    c\n+                } else {\n+                    let mut c = Command::new(\"sh\");\n+                    c.arg(\"-c\");\n+                    c.arg(cmd);\n+                    c\n+                };\n+\n+                c.current_dir(&self.cwd);\n+\n+                Some((cmd, c))\n+            }\n+            None => None,\n+        }\n+    }\n+}\ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -4,6 +4,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n use serde_with::rust::string_empty_as_none;\n \n+use crate::settings::toml::builder::Builder;\n use crate::settings::toml::kv_namespace::ConfigKvNamespace;\n use crate::settings::toml::route::RouteConfig;\n use crate::settings::toml::site::Site;\ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -21,6 +22,7 @@ pub struct Environment {\n     #[serde(default, with = \"string_empty_as_none\")]\n     pub zone_id: Option<String>,\n     pub webpack_config: Option<String>,\n+    pub build: Option<Builder>,\n     pub private: Option<bool>,\n     pub site: Option<Site>,\n     #[serde(alias = \"kv-namespaces\")]\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -11,6 +11,7 @@ use serde_with::rust::string_empty_as_none;\n \n use crate::commands::{validate_worker_name, DEFAULT_CONFIG_PATH};\n use crate::deploy::{self, DeployTarget, DeploymentSet};\n+use crate::settings::toml::builder::Builder;\n use crate::settings::toml::dev::Dev;\n use crate::settings::toml::environment::Environment;\n use crate::settings::toml::kv_namespace::{ConfigKvNamespace, KvNamespace};\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -40,6 +41,7 @@ pub struct Manifest {\n     #[serde(default, with = \"string_empty_as_none\")]\n     pub zone_id: Option<String>,\n     pub webpack_config: Option<String>,\n+    pub build: Option<Builder>,\n     pub private: Option<bool>,\n     // TODO: maybe one day, serde toml support will allow us to serialize sites\n     // as a TOML inline table (this would prevent confusion with environments too!)\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -85,60 +87,91 @@ impl Manifest {\n         config_path: &PathBuf,\n         site: Option<Site>,\n     ) -> Result<Manifest, failure::Error> {\n-        let config_file = config_path.join(\"wrangler.toml\");\n-        let template_config_content = fs::read_to_string(&config_file);\n-        let template_config = match &template_config_content {\n-            Ok(content) => {\n-                let config: Manifest = toml::from_str(content)?;\n-                config.warn_on_account_info();\n-                if let Some(target_type) = &target_type {\n-                    if config.target_type != *target_type {\n-                        StdOut::warn(&format!(\"The template recommends the \\\"{}\\\" type. Using type \\\"{}\\\" may cause errors, we recommend changing the type field in wrangler.toml to \\\"{}\\\"\", config.target_type, target_type, config.target_type));\n-                    }\n-                }\n-                Ok(config)\n-            }\n-            Err(err) => Err(err),\n-        };\n-        let mut template_config = match template_config {\n-            Ok(config) => config,\n-            Err(err) => {\n-                log::info!(\"Error parsing template {}\", err);\n-                log::debug!(\"template content {:?}\", template_config_content);\n+        let config_file = &config_path.join(\"wrangler.toml\");\n+        let config_template_str = fs::read_to_string(config_file).unwrap_or_else(|err| {\n+            log::info!(\"Error reading config template: {}\", err);\n+            log::info!(\"Using default instead\");\n+            toml::to_string_pretty(&Manifest::default())\n+                .expect(\"serializing the default toml should never fail\")\n+        });\n+\n+        let config_template =\n+            toml::from_str::<Manifest>(&config_template_str).unwrap_or_else(|err| {\n+                log::info!(\"Error parsing config template: {}\", err);\n+                log::info!(\"Using default instead\");\n                 Manifest::default()\n-            }\n-        };\n+            });\n \n-        let default_workers_dev = match &template_config.route {\n-            Some(route) => {\n-                if route.is_empty() {\n-                    Some(true)\n-                } else {\n-                    None\n-                }\n+        config_template.warn_on_account_info();\n+        if let Some(target_type) = &target_type {\n+            if config_template.target_type != *target_type {\n+                StdOut::warn(&format!(\"The template recommends the \\\"{}\\\" type. Using type \\\"{}\\\" may cause errors, we recommend changing the type field in wrangler.toml to \\\"{}\\\"\", config_template.target_type, target_type, config_template.target_type));\n             }\n+        }\n+\n+        let default_workers_dev = match &config_template.route {\n+            Some(route) if route.is_empty() => Some(true),\n             None => Some(true),\n+            _ => None,\n         };\n \n-        template_config.name = name;\n-        template_config.workers_dev = default_workers_dev;\n+        /*\n+         * We use toml-edit for actually changing the template provided wrangler.toml,\n+         * since toml-edit is a format-preserving parser. Elsewhere, we use only toml-rs,\n+         * as only toml-rs supports serde.\n+         */\n+\n+        let mut config_template_doc =\n+            config_template_str\n+                .parse::<toml_edit::Document>()\n+                .map_err(|err| {\n+                    failure::err_msg(format!(\n+                        \"toml_edit failed to parse config template. {}\",\n+                        err\n+                    ))\n+                })?;\n+\n+        config_template_doc[\"name\"] = toml_edit::value(name);\n+        if let Some(default_workers_dev) = default_workers_dev {\n+            config_template_doc[\"workers_dev\"] = toml_edit::value(default_workers_dev);\n+        }\n         if let Some(target_type) = &target_type {\n-            template_config.target_type = target_type.clone();\n+            config_template_doc[\"target_type\"] = toml_edit::value(target_type.to_string());\n         }\n-\n-        if let Some(arg_site) = site {\n-            if template_config.site.is_none() {\n-                template_config.site = Some(arg_site);\n+        if let Some(site) = site {\n+            if config_template.site.is_none() {\n+                config_template_doc[\"site\"][\"bucket\"] =\n+                    toml_edit::value(site.bucket.to_string_lossy().as_ref());\n+\n+                if let Some(entry_point) = &site.entry_point {\n+                    config_template_doc[\"site\"][\"entry_point\"] =\n+                        toml_edit::value(entry_point.to_string_lossy().as_ref());\n+                }\n+                if let Some(include) = &site.include {\n+                    let mut arr = toml_edit::Array::default();\n+                    include.iter().for_each(|i| {\n+                        arr.push(i.as_ref()).unwrap();\n+                    });\n+                    config_template_doc[\"site\"][\"include\"] = toml_edit::value(arr);\n+                }\n+                if let Some(exclude) = &site.exclude {\n+                    let mut arr = toml_edit::Array::default();\n+                    exclude.iter().for_each(|i| {\n+                        arr.push(i.as_ref()).unwrap();\n+                    });\n+                    config_template_doc[\"site\"][\"exclude\"] = toml_edit::value(arr);\n+                }\n             }\n         }\n \n         // TODO: https://github.com/cloudflare/wrangler/issues/773\n \n-        let toml = toml::to_string(&template_config)?;\n+        let toml = config_template_doc.to_string_in_original_order();\n+        let manifest = toml::from_str::<Manifest>(&toml)?;\n \n         log::info!(\"Writing a wrangler.toml file at {}\", config_file.display());\n         fs::write(&config_file, &toml)?;\n-        Ok(template_config)\n+        Ok(manifest)\n     }\n \n     pub fn worker_name(&self, env_arg: Option<&str>) -> String {\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -290,6 +323,7 @@ impl Manifest {\n             target_type,                                 // Top level\n             account_id: self.account_id.clone(),         // Inherited\n             webpack_config: self.webpack_config.clone(), // Inherited\n+            build: self.build.clone(),                   // Inherited\n             // importantly, the top level name will be modified\n             // to include the name of the environment\n             name: self.name.clone(), // Inherited\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -309,6 +343,9 @@ impl Manifest {\n             if let Some(webpack_config) = &environment.webpack_config {\n                 target.webpack_config = Some(webpack_config.clone());\n             }\n+            if let Some(build) = &environment.build {\n+                target.build = Some(build.clone());\n+            }\n \n             // don't inherit kv namespaces because it is an anti-pattern to use the same namespaces across multiple environments\n             target.kv_namespaces = get_namespaces(environment.kv_namespaces.clone(), preview)?;\ndiff --git a/src/settings/toml/mod.rs b/src/settings/toml/mod.rs\n--- a/src/settings/toml/mod.rs\n+++ b/src/settings/toml/mod.rs\n@@ -1,17 +1,21 @@\n+mod builder;\n mod dev;\n mod environment;\n mod kv_namespace;\n mod manifest;\n mod route;\n+mod script_format;\n mod site;\n mod target;\n mod target_type;\n mod triggers;\n \n+pub use builder::Builder;\n pub use environment::Environment;\n pub use kv_namespace::{ConfigKvNamespace, KvNamespace};\n pub use manifest::Manifest;\n pub use route::{Route, RouteConfig};\n+pub use script_format::ScriptFormat;\n pub use site::Site;\n pub use target::Target;\n pub use target_type::TargetType;\ndiff --git /dev/null b/src/settings/toml/script_format.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/toml/script_format.rs\n@@ -0,0 +1,34 @@\n+use std::fmt;\n+use std::str::FromStr;\n+\n+use serde::{Deserialize, Serialize};\n+\n+#[derive(Clone, Debug, Deserialize, Serialize, PartialEq)]\n+pub enum ScriptFormat {\n+    #[serde(rename = \"service-worker\")]\n+    ServiceWorker,\n+    #[serde(rename = \"modules\")]\n+    Modules,\n+}\n+\n+impl fmt::Display for ScriptFormat {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let printable = match *self {\n+            Self::ServiceWorker => \"service-worker\",\n+            Self::Modules => \"modules\",\n+        };\n+        write!(f, \"{}\", printable)\n+    }\n+}\n+\n+impl FromStr for ScriptFormat {\n+    type Err = failure::Error;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"service-worker\" => Ok(Self::ServiceWorker),\n+            \"modules\" => Ok(Self::Modules),\n+            _ => failure::bail!(\"{} is not a valid script format!\", s),\n+        }\n+    }\n+}\ndiff --git a/src/settings/toml/site.rs b/src/settings/toml/site.rs\n--- a/src/settings/toml/site.rs\n+++ b/src/settings/toml/site.rs\n@@ -13,7 +13,7 @@ const SITE_ENTRY_POINT: &str = \"workers-site\";\n pub struct Site {\n     pub bucket: PathBuf,\n     #[serde(rename = \"entry-point\")]\n-    entry_point: Option<PathBuf>,\n+    pub entry_point: Option<PathBuf>,\n     pub include: Option<Vec<String>>,\n     pub exclude: Option<Vec<String>>,\n }\ndiff --git a/src/settings/toml/target.rs b/src/settings/toml/target.rs\n--- a/src/settings/toml/target.rs\n+++ b/src/settings/toml/target.rs\n@@ -1,3 +1,4 @@\n+use super::builder::Builder;\n use super::kv_namespace::KvNamespace;\n use super::site::Site;\n use super::target_type::TargetType;\ndiff --git a/src/settings/toml/target.rs b/src/settings/toml/target.rs\n--- a/src/settings/toml/target.rs\n+++ b/src/settings/toml/target.rs\n@@ -14,6 +15,7 @@ pub struct Target {\n     pub name: String,\n     pub target_type: TargetType,\n     pub webpack_config: Option<String>,\n+    pub build: Option<Builder>,\n     pub site: Option<Site>,\n     pub vars: Option<HashMap<String, String>>,\n     pub text_blobs: Option<HashMap<String, PathBuf>>,\ndiff --git a/src/settings/toml/target.rs b/src/settings/toml/target.rs\n--- a/src/settings/toml/target.rs\n+++ b/src/settings/toml/target.rs\n@@ -24,7 +26,7 @@ impl Target {\n         self.kv_namespaces.push(kv_namespace);\n     }\n \n-    pub fn build_dir(&self) -> Result<PathBuf, std::io::Error> {\n+    pub fn package_dir(&self) -> Result<PathBuf, std::io::Error> {\n         // if `site` is configured, we want to isolate worker code\n         // and build artifacts away from static site application code.\n         match &self.site {\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -1,27 +1,33 @@\n+mod modules_worker;\n mod plain_text;\n mod project_assets;\n+mod service_worker;\n mod text_blob;\n mod wasm_module;\n \n-use reqwest::blocking::multipart::{Form, Part};\n+use reqwest::blocking::multipart::Form;\n use std::fs;\n use std::path::Path;\n use std::path::PathBuf;\n \n+use ignore::overrides::{Override, OverrideBuilder};\n+use ignore::WalkBuilder;\n+\n use crate::settings::binding;\n-use crate::settings::metadata::Metadata;\n-use crate::settings::toml::{Target, TargetType};\n+use crate::settings::toml::{Builder, ScriptFormat, Target, TargetType};\n use crate::sites::AssetManifest;\n use crate::wranglerjs;\n \n use plain_text::PlainText;\n-use project_assets::ProjectAssets;\n+use project_assets::{ModulesAssets, ServiceWorkerAssets};\n use text_blob::TextBlob;\n use wasm_module::WasmModule;\n \n // TODO: https://github.com/cloudflare/wrangler/issues/1083\n use super::{krate, Package};\n \n+use self::project_assets::Module;\n+\n pub fn build(\n     target: &Target,\n     asset_manifest: Option<AssetManifest>,\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -60,24 +66,7 @@ pub fn build(\n             wasm_modules.push(wasm_module);\n             let script_path = PathBuf::from(\"./worker/generated/script.js\");\n \n-            let assets = ProjectAssets::new(\n-                script_path,\n-                wasm_modules,\n-                kv_namespaces.to_vec(),\n-                text_blobs,\n-                plain_texts,\n-            )?;\n-\n-            build_form(&assets, session_config)\n-        }\n-        TargetType::JavaScript => {\n-            log::info!(\"JavaScript project detected. Publishing...\");\n-            let build_dir = target.build_dir()?;\n-            let package = Package::new(&build_dir)?;\n-\n-            let script_path = package.main(&build_dir)?;\n-\n-            let assets = ProjectAssets::new(\n+            let assets = ServiceWorkerAssets::new(\n                 script_path,\n                 wasm_modules,\n                 kv_namespaces.to_vec(),\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -85,13 +74,83 @@ pub fn build(\n                 plain_texts,\n             )?;\n \n-            build_form(&assets, session_config)\n+            service_worker::build_form(&assets, session_config)\n         }\n+        TargetType::JavaScript => match &target.build {\n+            Some(config) => match &config.upload_format {\n+                ScriptFormat::ServiceWorker => {\n+                    log::info!(\"Plain JavaScript project detected. Publishing...\");\n+                    let package_dir = target.package_dir()?;\n+                    let package = Package::new(&package_dir)?;\n+                    let script_path = package.main(&package_dir)?;\n+\n+                    let assets = ServiceWorkerAssets::new(\n+                        script_path,\n+                        wasm_modules,\n+                        kv_namespaces.to_vec(),\n+                        text_blobs,\n+                        plain_texts,\n+                    )?;\n+\n+                    service_worker::build_form(&assets, session_config)\n+                }\n+                ScriptFormat::Modules => {\n+                    let package_dir = target.package_dir()?;\n+                    let package = Package::new(&package_dir)?;\n+                    let main_module = package.module(&package_dir)?;\n+                    let main_module_name = filename_from_path(&main_module)\n+                        .ok_or_else(|| failure::err_msg(\"filename required for main module\"))?;\n+\n+                    let ignore = build_ignore(config, &package_dir)?;\n+                    let modules_iter = WalkBuilder::new(config.upload_dir.clone())\n+                        .standard_filters(false)\n+                        .hidden(true)\n+                        .overrides(ignore)\n+                        .build();\n+\n+                    let mut modules: Vec<Module> = vec![];\n+\n+                    for entry in modules_iter {\n+                        let entry = entry?;\n+                        let path = entry.path();\n+                        if path.is_file() {\n+                            log::info!(\"Adding module {}\", path.display());\n+                            modules.push(Module::new(path.to_owned())?);\n+                        }\n+                    }\n+\n+                    let assets = ModulesAssets::new(\n+                        main_module_name,\n+                        modules,\n+                        kv_namespaces.to_vec(),\n+                        plain_texts,\n+                    )?;\n+\n+                    modules_worker::build_form(&assets, session_config)\n+                }\n+            },\n+            None => {\n+                log::info!(\"Plain JavaScript project detected. Publishing...\");\n+                let package_dir = target.package_dir()?;\n+                let package = Package::new(&package_dir)?;\n+                let script_path = package.main(&package_dir)?;\n+\n+                let assets = ServiceWorkerAssets::new(\n+                    script_path,\n+                    wasm_modules,\n+                    kv_namespaces.to_vec(),\n+                    text_blobs,\n+                    plain_texts,\n+                )?;\n+\n+                service_worker::build_form(&assets, session_config)\n+            }\n+        },\n         TargetType::Webpack => {\n             log::info!(\"webpack project detected. Publishing...\");\n             // TODO: https://github.com/cloudflare/wrangler/issues/850\n-            let build_dir = target.build_dir()?;\n-            let bundle = wranglerjs::Bundle::new(&build_dir);\n+            let package_dir = target.package_dir()?;\n+            let bundle = wranglerjs::Bundle::new(&package_dir);\n \n             let script_path = bundle.script_path();\n \ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -110,7 +169,7 @@ pub fn build(\n                 text_blobs.push(text_blob);\n             }\n \n-            let assets = ProjectAssets::new(\n+            let assets = ServiceWorkerAssets::new(\n                 script_path,\n                 wasm_modules,\n                 kv_namespaces.to_vec(),\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -118,7 +177,7 @@ pub fn build(\n                 plain_texts,\n             )?;\n \n-            build_form(&assets, session_config)\n+            service_worker::build_form(&assets, session_config)\n         }\n     }\n }\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -128,74 +187,13 @@ fn get_asset_manifest_blob(asset_manifest: AssetManifest) -> Result<String, fail\n     Ok(asset_manifest)\n }\n \n-fn build_form(\n-    assets: &ProjectAssets,\n-    session_config: Option<serde_json::Value>,\n-) -> Result<Form, failure::Error> {\n-    let mut form = Form::new();\n-\n-    // The preview service in particular streams the request form, and requires that the\n-    // \"metadata\" part be set first, so this order is important.\n-    form = add_metadata(form, assets)?;\n-    form = add_files(form, assets)?;\n-    if let Some(session_config) = session_config {\n-        form = add_session_config(form, session_config)?\n-    }\n-\n-    log::info!(\"building form\");\n-    log::info!(\"{:?}\", &form);\n-\n-    Ok(form)\n-}\n-\n-fn add_files(mut form: Form, assets: &ProjectAssets) -> Result<Form, failure::Error> {\n-    form = form.file(assets.script_name(), assets.script_path())?;\n-\n-    for wasm_module in &assets.wasm_modules {\n-        form = form.file(wasm_module.filename(), wasm_module.path())?;\n-    }\n-\n-    for text_blob in &assets.text_blobs {\n-        let part = Part::text(text_blob.data.clone())\n-            .file_name(text_blob.binding.clone())\n-            .mime_str(\"text/plain\")?;\n-\n-        form = form.part(text_blob.binding.clone(), part);\n-    }\n-\n-    Ok(form)\n-}\n-\n-fn add_metadata(mut form: Form, assets: &ProjectAssets) -> Result<Form, failure::Error> {\n-    let metadata_json = serde_json::json!(&Metadata {\n-        body_part: assets.script_name(),\n-        bindings: assets.bindings(),\n-    });\n-\n-    let metadata = Part::text((metadata_json).to_string())\n-        .file_name(\"metadata.json\")\n-        .mime_str(\"application/json\")?;\n-\n-    form = form.part(\"metadata\", metadata);\n-\n-    Ok(form)\n-}\n-\n-fn add_session_config(\n-    mut form: Form,\n-    session_config: serde_json::Value,\n-) -> Result<Form, failure::Error> {\n-    let wrangler_session_config = Part::text((session_config).to_string())\n-        .file_name(\"\")\n-        .mime_str(\"application/json\")?;\n-\n-    form = form.part(\"wrangler-session-config\", wrangler_session_config);\n-\n-    Ok(form)\n+fn filestem_from_path(path: &PathBuf) -> Option<String> {\n+    path.file_stem()?.to_str().map(|s| s.to_string())\n }\n \n fn filename_from_path(path: &PathBuf) -> Option<String> {\n-    path.file_stem()?.to_str().map(|s| s.to_string())\n+    path.file_name()\n+        .map(|filename| filename.to_string_lossy().into_owned())\n }\n \n fn build_generated_dir() -> Result<(), failure::Error> {\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -217,3 +215,21 @@ fn concat_js(name: &str) -> Result<(), failure::Error> {\n     fs::write(\"./worker/generated/script.js\", js.as_bytes())?;\n     Ok(())\n }\n+\n+fn build_ignore(config: &Builder, directory: &Path) -> Result<Override, failure::Error> {\n+    let mut overrides = OverrideBuilder::new(directory);\n+    // If `include` present, use it and don't touch the `exclude` field\n+    if let Some(included) = &config.upload_include {\n+        for i in included {\n+            overrides.add(&i)?;\n+            log::info!(\"Including {}\", i);\n+        }\n+    } else if let Some(excluded) = &config.upload_exclude {\n+        for e in excluded {\n+            overrides.add(&format!(\"!{}\", e))?;\n+            log::info!(\"Ignoring {}\", e);\n+        }\n+    }\n+\n+    Ok(overrides.build()?)\n+}\ndiff --git /dev/null b/src/upload/form/modules_worker.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/upload/form/modules_worker.rs\n@@ -0,0 +1,75 @@\n+use std::fs::File;\n+\n+use reqwest::blocking::multipart::{Form, Part};\n+use serde::Serialize;\n+\n+use crate::settings::binding::Binding;\n+\n+use super::ModulesAssets;\n+\n+#[derive(Serialize, Debug)]\n+struct Metadata {\n+    pub main_module: String,\n+    pub bindings: Vec<Binding>,\n+}\n+\n+pub fn build_form(\n+    assets: &ModulesAssets,\n+    session_config: Option<serde_json::Value>,\n+) -> Result<Form, failure::Error> {\n+    let mut form = Form::new();\n+\n+    // The preview service in particular streams the request form, and requires that the\n+    // \"metadata\" part be set first, so this order is important.\n+    form = add_metadata(form, assets)?;\n+    form = add_files(form, assets)?;\n+    if let Some(session_config) = session_config {\n+        form = add_session_config(form, session_config)?\n+    }\n+\n+    log::info!(\"building form\");\n+    log::info!(\"{:#?}\", &form);\n+\n+    Ok(form)\n+}\n+\n+fn add_files(mut form: Form, assets: &ModulesAssets) -> Result<Form, failure::Error> {\n+    for module in &assets.modules {\n+        let file_name = module\n+            .filename()\n+            .ok_or_else(|| failure::err_msg(\"a filename is required for each module\"))?;\n+        let part = Part::reader(File::open(module.path.clone())?)\n+            .mime_str(module.module_type.content_type())?\n+            .file_name(file_name.clone());\n+        form = form.part(file_name.clone(), part);\n+    }\n+    Ok(form)\n+}\n+\n+fn add_metadata(mut form: Form, assets: &ModulesAssets) -> Result<Form, failure::Error> {\n+    let metadata_json = serde_json::json!(&Metadata {\n+        main_module: assets.main_module.clone(),\n+        bindings: assets.bindings(),\n+    });\n+\n+    let metadata = Part::text(metadata_json.to_string())\n+        .file_name(\"metadata.json\")\n+        .mime_str(\"application/json\")?;\n+\n+    form = form.part(\"metadata\", metadata);\n+\n+    Ok(form)\n+}\n+\n+fn add_session_config(\n+    mut form: Form,\n+    session_config: serde_json::Value,\n+) -> Result<Form, failure::Error> {\n+    let wrangler_session_config = Part::text(session_config.to_string())\n+        .file_name(\"\")\n+        .mime_str(\"application/json\")?;\n+\n+    form = form.part(\"wrangler-session-config\", wrangler_session_config);\n+\n+    Ok(form)\n+}\ndiff --git a/src/upload/form/project_assets.rs b/src/upload/form/project_assets.rs\n--- a/src/upload/form/project_assets.rs\n+++ b/src/upload/form/project_assets.rs\n@@ -3,15 +3,15 @@ use std::path::PathBuf;\n use failure::format_err;\n \n use super::binding::Binding;\n-use super::filename_from_path;\n use super::plain_text::PlainText;\n use super::text_blob::TextBlob;\n use super::wasm_module::WasmModule;\n+use super::{filename_from_path, filestem_from_path};\n \n use crate::settings::toml::KvNamespace;\n \n #[derive(Debug)]\n-pub struct ProjectAssets {\n+pub struct ServiceWorkerAssets {\n     script_name: String,\n     script_path: PathBuf,\n     pub wasm_modules: Vec<WasmModule>,\ndiff --git a/src/upload/form/project_assets.rs b/src/upload/form/project_assets.rs\n--- a/src/upload/form/project_assets.rs\n+++ b/src/upload/form/project_assets.rs\n@@ -20,7 +20,7 @@ pub struct ProjectAssets {\n     pub plain_texts: Vec<PlainText>,\n }\n \n-impl ProjectAssets {\n+impl ServiceWorkerAssets {\n     pub fn new(\n         script_path: PathBuf,\n         wasm_modules: Vec<WasmModule>,\ndiff --git a/src/upload/form/project_assets.rs b/src/upload/form/project_assets.rs\n--- a/src/upload/form/project_assets.rs\n+++ b/src/upload/form/project_assets.rs\n@@ -28,7 +28,7 @@ impl ProjectAssets {\n         text_blobs: Vec<TextBlob>,\n         plain_texts: Vec<PlainText>,\n     ) -> Result<Self, failure::Error> {\n-        let script_name = filename_from_path(&script_path).ok_or_else(|| {\n+        let script_name = filestem_from_path(&script_path).ok_or_else(|| {\n             format_err!(\"filename should not be empty: {}\", script_path.display())\n         })?;\n \ndiff --git a/src/upload/form/project_assets.rs b/src/upload/form/project_assets.rs\n--- a/src/upload/form/project_assets.rs\n+++ b/src/upload/form/project_assets.rs\n@@ -73,3 +73,97 @@ impl ProjectAssets {\n         self.script_path.clone()\n     }\n }\n+\n+pub struct Module {\n+    pub path: PathBuf,\n+    pub module_type: ModuleType,\n+}\n+\n+impl Module {\n+    pub fn new(path: PathBuf) -> Result<Module, failure::Error> {\n+        let extension = path\n+            .extension()\n+            .ok_or_else(|| {\n+                failure::err_msg(format!(\n+                    \"File {} lacks an extension. An extension is required to determine module type\",\n+                    path.display()\n+                ))\n+            })?\n+            .to_string_lossy();\n+\n+        let module_type = match extension.as_ref() {\n+            \"mjs\" => ModuleType::ES6,\n+            \"js\" => ModuleType::CommonJS,\n+            \"wasm\" => ModuleType::Wasm,\n+            \"txt\" => ModuleType::Text,\n+            _ => ModuleType::Data,\n+        };\n+\n+        Ok(Module { path, module_type })\n+    }\n+\n+    pub fn filename(&self) -> Option<String> {\n+        filename_from_path(&self.path)\n+    }\n+}\n+\n+pub enum ModuleType {\n+    ES6,\n+    CommonJS,\n+    Wasm,\n+    Text,\n+    Data,\n+}\n+\n+impl ModuleType {\n+    pub fn content_type(&self) -> &str {\n+        match &self {\n+            Self::ES6 => \"application/javascript+module\",\n+            Self::CommonJS => \"application/javascript\",\n+            Self::Wasm => \"application/wasm\",\n+            Self::Text => \"text/plain\",\n+            Self::Data => \"application/octet-stream\",\n+        }\n+    }\n+}\n+\n+pub struct ModulesAssets {\n+    pub main_module: String,\n+    pub modules: Vec<Module>,\n+    pub kv_namespaces: Vec<KvNamespace>,\n+    pub plain_texts: Vec<PlainText>,\n+}\n+\n+impl ModulesAssets {\n+    pub fn new(\n+        main_module: String,\n+        modules: Vec<Module>,\n+        kv_namespaces: Vec<KvNamespace>,\n+        plain_texts: Vec<PlainText>,\n+    ) -> Result<Self, failure::Error> {\n+        Ok(Self {\n+            main_module,\n+            modules,\n+            kv_namespaces,\n+            plain_texts,\n+        })\n+    }\n+\n+    pub fn bindings(&self) -> Vec<Binding> {\n+        let mut bindings = Vec::new();\n+\n+        // Bindings that refer to a `part` of the uploaded files\n+        // in the service-worker format, are now modules.\n+\n+        for kv in &self.kv_namespaces {\n+            let binding = kv.binding();\n+            bindings.push(binding);\n+        }\n+        for plain_text in &self.plain_texts {\n+            let binding = plain_text.binding();\n+            bindings.push(binding);\n+        }\n+\n+        bindings\n+    }\n+}\ndiff --git /dev/null b/src/upload/form/service_worker.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/upload/form/service_worker.rs\n@@ -0,0 +1,78 @@\n+use reqwest::blocking::multipart::{Form, Part};\n+use serde::Serialize;\n+\n+use crate::settings::binding::Binding;\n+\n+use super::ServiceWorkerAssets;\n+\n+#[derive(Serialize, Debug)]\n+struct Metadata {\n+    pub body_part: String,\n+    pub bindings: Vec<Binding>,\n+}\n+\n+pub fn build_form(\n+    assets: &ServiceWorkerAssets,\n+    session_config: Option<serde_json::Value>,\n+) -> Result<Form, failure::Error> {\n+    let mut form = Form::new();\n+\n+    // The preview service in particular streams the request form, and requires that the\n+    // \"metadata\" part be set first, so this order is important.\n+    form = add_metadata(form, assets)?;\n+    form = add_files(form, assets)?;\n+    if let Some(session_config) = session_config {\n+        form = add_session_config(form, session_config)?\n+    }\n+\n+    log::info!(\"building form\");\n+    log::info!(\"{:#?}\", &form);\n+\n+    Ok(form)\n+}\n+\n+fn add_files(mut form: Form, assets: &ServiceWorkerAssets) -> Result<Form, failure::Error> {\n+    form = form.file(assets.script_name(), assets.script_path())?;\n+\n+    for wasm_module in &assets.wasm_modules {\n+        form = form.file(wasm_module.filename(), wasm_module.path())?;\n+    }\n+\n+    for text_blob in &assets.text_blobs {\n+        let part = Part::text(text_blob.data.clone())\n+            .file_name(text_blob.binding.clone())\n+            .mime_str(\"text/plain\")?;\n+\n+        form = form.part(text_blob.binding.clone(), part);\n+    }\n+\n+    Ok(form)\n+}\n+\n+fn add_metadata(mut form: Form, assets: &ServiceWorkerAssets) -> Result<Form, failure::Error> {\n+    let metadata_json = serde_json::json!(&Metadata {\n+        body_part: assets.script_name(),\n+        bindings: assets.bindings(),\n+    });\n+\n+    let metadata = Part::text(metadata_json.to_string())\n+        .file_name(\"metadata.json\")\n+        .mime_str(\"application/json\")?;\n+\n+    form = form.part(\"metadata\", metadata);\n+\n+    Ok(form)\n+}\n+\n+fn add_session_config(\n+    mut form: Form,\n+    session_config: serde_json::Value,\n+) -> Result<Form, failure::Error> {\n+    let wrangler_session_config = Part::text(session_config.to_string())\n+        .file_name(\"\")\n+        .mime_str(\"application/json\")?;\n+\n+    form = form.part(\"wrangler-session-config\", wrangler_session_config);\n+\n+    Ok(form)\n+}\ndiff --git a/src/upload/form/text_blob.rs b/src/upload/form/text_blob.rs\n--- a/src/upload/form/text_blob.rs\n+++ b/src/upload/form/text_blob.rs\n@@ -1,6 +1,9 @@\n use super::binding::Binding;\n use serde::{Deserialize, Serialize};\n \n+// Note: This is only used for service-worker scripts.\n+// modules scripts use the universal Module class instead of this.\n+\n #[derive(Debug, Deserialize, Serialize)]\n pub struct TextBlob {\n     pub data: String,\ndiff --git a/src/upload/form/wasm_module.rs b/src/upload/form/wasm_module.rs\n--- a/src/upload/form/wasm_module.rs\n+++ b/src/upload/form/wasm_module.rs\n@@ -3,7 +3,10 @@ use std::path::PathBuf;\n use failure::format_err;\n \n use super::binding::Binding;\n-use super::filename_from_path;\n+use super::filestem_from_path;\n+\n+// Note: This is only used for service-worker scripts.\n+// modules scripts use the universal Module class instead of this.\n \n #[derive(Debug)]\n pub struct WasmModule {\ndiff --git a/src/upload/form/wasm_module.rs b/src/upload/form/wasm_module.rs\n--- a/src/upload/form/wasm_module.rs\n+++ b/src/upload/form/wasm_module.rs\n@@ -14,7 +17,7 @@ pub struct WasmModule {\n \n impl WasmModule {\n     pub fn new(path: PathBuf, binding: String) -> Result<Self, failure::Error> {\n-        let filename = filename_from_path(&path)\n+        let filename = filestem_from_path(&path)\n             .ok_or_else(|| format_err!(\"filename should not be empty: {}\", path.display()))?;\n \n         Ok(Self {\ndiff --git a/src/upload/package.rs b/src/upload/package.rs\n--- a/src/upload/package.rs\n+++ b/src/upload/package.rs\n@@ -7,14 +7,16 @@ use serde::{self, Deserialize};\n pub struct Package {\n     #[serde(default)]\n     main: PathBuf,\n+    #[serde(default)]\n+    module: PathBuf,\n }\n impl Package {\n-    pub fn main(&self, build_dir: &PathBuf) -> Result<PathBuf, failure::Error> {\n+    pub fn main(&self, package_dir: &PathBuf) -> Result<PathBuf, failure::Error> {\n         if self.main == PathBuf::from(\"\") {\n             failure::bail!(\n                 \"The `main` key in your `package.json` file is required; please specify the entry point of your Worker.\",\n             )\n-        } else if !build_dir.join(&self.main).exists() {\n+        } else if !package_dir.join(&self.main).exists() {\n             failure::bail!(\n                 \"The entrypoint of your Worker ({}) could not be found.\",\n                 self.main.display()\ndiff --git a/src/upload/package.rs b/src/upload/package.rs\n--- a/src/upload/package.rs\n+++ b/src/upload/package.rs\n@@ -23,16 +25,30 @@ impl Package {\n             Ok(self.main.clone())\n         }\n     }\n+    pub fn module(&self, package_dir: &PathBuf) -> Result<PathBuf, failure::Error> {\n+        if self.module == PathBuf::from(\"\") {\n+            failure::bail!(\n+                \"The `module` key in your `package.json` file is required when using the module script format; please specify the entry point of your Worker.\",\n+            )\n+        } else if !package_dir.join(&self.module).exists() {\n+            failure::bail!(\n+                \"The entrypoint of your Worker ({}) could not be found.\",\n+                self.module.display()\n+            )\n+        } else {\n+            Ok(self.module.clone())\n+        }\n+    }\n }\n \n impl Package {\n-    pub fn new(pkg_path: &PathBuf) -> Result<Package, failure::Error> {\n-        let manifest_path = pkg_path.join(\"package.json\");\n+    pub fn new(package_dir: &PathBuf) -> Result<Package, failure::Error> {\n+        let manifest_path = package_dir.join(\"package.json\");\n         if !manifest_path.is_file() {\n             failure::bail!(\n                 \"Your JavaScript project is missing a `package.json` file; is `{}` the \\\n                  wrong directory?\",\n-                pkg_path.display()\n+                package_dir.display()\n             )\n         }\n \ndiff --git a/src/watch/mod.rs b/src/watch/mod.rs\n--- a/src/watch/mod.rs\n+++ b/src/watch/mod.rs\n@@ -3,10 +3,10 @@ use ignore::overrides::OverrideBuilder;\n use ignore::WalkBuilder;\n pub use watcher::wait_for_changes;\n \n-use crate::build::command;\n use crate::settings::toml::{Target, TargetType};\n use crate::terminal::message::{Message, StdOut};\n use crate::wranglerjs;\n+use crate::{build::command, build_target};\n use crate::{commands, install};\n \n use notify::{self, RecursiveMode, Watcher};\ndiff --git a/src/watch/mod.rs b/src/watch/mod.rs\n--- a/src/watch/mod.rs\n+++ b/src/watch/mod.rs\n@@ -28,27 +28,54 @@ pub fn watch_and_build(\n     tx: Option<mpsc::Sender<()>>,\n ) -> Result<(), failure::Error> {\n     let target_type = &target.target_type;\n+    let build = target.build.clone();\n     match target_type {\n         TargetType::JavaScript => {\n-            thread::spawn(move || {\n+            let target = target.clone();\n+            thread::spawn::<_, Result<(), failure::Error>>(move || {\n                 let (watcher_tx, watcher_rx) = mpsc::channel();\n-                let mut watcher = notify::watcher(watcher_tx, Duration::from_secs(1)).unwrap();\n+                let mut watcher = notify::watcher(watcher_tx, Duration::from_secs(1))?;\n \n-                watcher\n-                    .watch(JAVASCRIPT_PATH, RecursiveMode::Recursive)\n-                    .unwrap();\n-                StdOut::info(&format!(\"watching {:?}\", &JAVASCRIPT_PATH));\n+                match build {\n+                    None => {\n+                        watcher.watch(JAVASCRIPT_PATH, RecursiveMode::Recursive)?;\n+                        StdOut::info(&format!(\"watching {:?}\", &JAVASCRIPT_PATH));\n \n-                loop {\n-                    match wait_for_changes(&watcher_rx, COOLDOWN_PERIOD) {\n-                        Ok(_path) => {\n-                            if let Some(tx) = tx.clone() {\n-                                tx.send(()).expect(\"--watch change message failed to send\");\n+                        loop {\n+                            match wait_for_changes(&watcher_rx, COOLDOWN_PERIOD) {\n+                                Ok(_path) => {\n+                                    if let Some(tx) = tx.clone() {\n+                                        tx.send(()).expect(\"--watch change message failed to send\");\n+                                    }\n+                                }\n+                                Err(e) => {\n+                                    log::debug!(\"{:?}\", e);\n+                                    StdOut::user_error(\"Something went wrong while watching.\")\n+                                }\n                             }\n                         }\n-                        Err(e) => {\n-                            log::debug!(\"{:?}\", e);\n-                            StdOut::user_error(\"Something went wrong while watching.\")\n+                    }\n+                    Some(config) => {\n+                        config.verify_watch_dir()?;\n+                        watcher.watch(config.watch_dir, notify::RecursiveMode::Recursive)?;\n+\n+                        loop {\n+                            match wait_for_changes(&watcher_rx, COOLDOWN_PERIOD) {\n+                                Ok(_path) => match build_target(&target) {\n+                                    Ok(output) => {\n+                                        StdOut::success(&output);\n+                                        if let Some(tx) = tx.clone() {\n+                                            tx.send(())\n+                                                .expect(\"--watch change message failed to send\");\n+                                        }\n+                                    }\n+                                    Err(e) => StdOut::user_error(&e.to_string()),\n+                                },\n+                                Err(e) => {\n+                                    log::debug!(\"{:?}\", e);\n+                                    StdOut::user_error(\"Something went wrong while watching.\")\n+                                }\n+                            }\n                         }\n                     }\n                 }\ndiff --git a/src/wranglerjs/bundle.rs b/src/wranglerjs/bundle.rs\n--- a/src/wranglerjs/bundle.rs\n+++ b/src/wranglerjs/bundle.rs\n@@ -18,9 +18,9 @@ pub struct Bundle {\n // We call a {Bundle} the output of a {Bundler}; representing what {Webpack}\n // produces.\n impl Bundle {\n-    pub fn new(build_dir: &PathBuf) -> Bundle {\n+    pub fn new(package_dir: &PathBuf) -> Bundle {\n         Bundle {\n-            out: build_dir.join(BUNDLE_OUT),\n+            out: package_dir.join(BUNDLE_OUT),\n         }\n     }\n \ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -153,13 +153,13 @@ fn setup_build(target: &Target) -> Result<(Command, PathBuf, Bundle), failure::E\n         env_dep_installed(tool)?;\n     }\n \n-    let build_dir = target.build_dir()?;\n+    let package_dir = target.package_dir()?;\n \n     if let Some(site) = &target.site {\n         site.scaffold_worker()?;\n     }\n \n-    run_npm_install(&build_dir).expect(\"could not run `npm install`\");\n+    run_npm_install(&package_dir).expect(\"could not run `npm install`\");\n \n     let node = which::which(\"node\").unwrap();\n     let mut command = Command::new(node);\ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -176,7 +176,7 @@ fn setup_build(target: &Target) -> Result<(Command, PathBuf, Bundle), failure::E\n         temp_file.to_str().unwrap().to_string()\n     ));\n \n-    let bundle = Bundle::new(&build_dir);\n+    let bundle = Bundle::new(&package_dir);\n \n     command.arg(format!(\"--wasm-binding={}\", bundle.get_wasm_binding()));\n \ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -196,7 +196,7 @@ fn setup_build(target: &Target) -> Result<(Command, PathBuf, Bundle), failure::E\n     if let Some(webpack_config_path) = custom_webpack_config_path {\n         build_with_custom_webpack(&mut command, &webpack_config_path);\n     } else {\n-        build_with_default_webpack(&mut command, &build_dir)?;\n+        build_with_default_webpack(&mut command, &package_dir)?;\n     }\n \n     Ok((command, temp_file, bundle))\ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -211,11 +211,11 @@ fn build_with_custom_webpack(command: &mut Command, webpack_config_path: &PathBu\n \n fn build_with_default_webpack(\n     command: &mut Command,\n-    build_dir: &PathBuf,\n+    package_dir: &PathBuf,\n ) -> Result<(), failure::Error> {\n-    let package = Package::new(&build_dir)?;\n-    let package_main = build_dir\n-        .join(package.main(&build_dir)?)\n+    let package = Package::new(&package_dir)?;\n+    let package_main = package_dir\n+        .join(package.main(&package_dir)?)\n         .to_str()\n         .unwrap()\n         .to_string();\n",
        "test_patch": "diff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -125,6 +125,7 @@ mod tests {\n             site: None,\n             vars: None,\n             text_blobs: None,\n+            build: None,\n         };\n         assert!(kv::get_namespace_id(&target_with_dup_kv_bindings, \"\").is_err());\n     }\ndiff --git a/src/sites/mod.rs b/src/sites/mod.rs\n--- a/src/sites/mod.rs\n+++ b/src/sites/mod.rs\n@@ -318,6 +318,7 @@ mod tests {\n             target_type: TargetType::JavaScript,\n             webpack_config: None,\n             site: Some(site),\n+            build: None,\n             vars: None,\n             text_blobs: None,\n         }\n",
        "problem_statement": "wranglerjs is too rigid in what version of webpack it uses to build projects\nfrom @1000hz : the parser webpack 4 uses (acorn) doesn't support optional chaining / nullish coalescing operators. wranglerjs uses its own version of webpack (4.x). TypeScript target `ES2020`/`ESNext` doesn't transpile these operators\r\nwebpack 5 (which has been in beta forever) uses a newer version of acorn with support for these operators\r\nbut there's no way to override what version of webpack wrangler will use\r\n\n",
        "hints_text": "I think the long-term solution to this problem is to have wrangler defer building to project scripts, i.e.\r\nif there's a package.json file\r\n```\r\nnpm run wrangler:build\r\nnpm run build    # if above doesn't exist\r\n```\r\nor if there's a cargo.toml file\r\n```\r\ncargo run wrangler:build\r\ncargo build    # if above doesn't exist\r\n```\r\nand only fallback to using a bundled version of webpack if none of these exist.\nSupporting arbitrary scripts seems like a really good idea actually, and would allow people to choose their own JS bundling tools (e.g. rollup, etc).\nIt turns out that wrangler installation comes with `wrangler-js` which has `webpack 4.33.0` built-in. \r\n\r\nI can build my project successfully with `webpack 5.x`. But `wrangler dev` or `wrangler build` invokes its internal old version regardless. Is there any way to let `wrangler` use my manually built output?\nOnce https://github.com/cloudflare/wrangler/pull/1677 is merged, we plan to support any version of webpack",
        "created_at": "2020-12-11T19:22:18Z",
        "version": "1.13"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 966,
        "instance_id": "cloudflare__wrangler-legacy-966",
        "issue_numbers": [
            "769"
        ],
        "base_commit": "140ae8fe0aa3626454c05eb3a1dd17a5146c8090",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2429,6 +2429,7 @@ dependencies = [\n  \"reqwest 0.9.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_with 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"sha2 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"text_io 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -48,6 +48,7 @@ data-encoding = \"2.1.2\"\n ignore = \"0.4.10\"\n tempfile = \"3.1.0\"\n indicatif = \"0.13.0\"\n+serde_with = \"1.3.1\"\n \n [dev-dependencies]\n assert_cmd = \"0.11.1\"\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -13,26 +13,22 @@ use crate::commands;\n use crate::commands::kv;\n use crate::commands::kv::bucket::AssetManifest;\n use crate::commands::subdomain::Subdomain;\n-use crate::commands::validate_worker_name;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::toml::{KvNamespace, Site, Target};\n+use crate::settings::toml::{DeployTarget, KvNamespace, Site, Target, Zoneless};\n use crate::terminal::{emoji, message};\n \n pub fn publish(\n     user: &GlobalUser,\n     target: &mut Target,\n+    deploy_target: DeployTarget,\n     verbose: bool,\n ) -> Result<(), failure::Error> {\n     validate_target_required_fields_present(target)?;\n-    validate_worker_name(&target.name)?;\n \n-    if let Some(site_config) = target.site.clone() {\n-        if let Some(route) = &target.route {\n-            if !route.ends_with('*') {\n-                message::warn(&format!(\"The route in your wrangler.toml should have a trailing * to apply the Worker on every path, otherwise your site will not behave as expected.\\nroute = {}*\", route));\n-            }\n-        }\n+    // TODO: write a separate function for publishing a site\n+    if let Some(site_config) = &target.site.clone() {\n+        warn_site_incompatible_route(&deploy_target);\n         bind_static_site_contents(user, target, &site_config, false)?;\n     }\n \ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -43,11 +39,31 @@ pub fn publish(\n \n     upload_script(&user, &target, asset_manifest)?;\n \n-    deploy(&user, &target)?;\n+    deploy(&user, &deploy_target)?;\n \n     Ok(())\n }\n \n+// This checks all of the configured routes for the wildcard ending and warns\n+// the user that their site may not work as expected without it.\n+fn warn_site_incompatible_route(deploy_target: &DeployTarget) {\n+    if let DeployTarget::Zoned(zoned) = &deploy_target {\n+        let mut no_star_routes = Vec::new();\n+        for route in &zoned.routes {\n+            if !route.pattern.ends_with('*') {\n+                no_star_routes.push(route.pattern.to_string());\n+            }\n+        }\n+\n+        if !no_star_routes.is_empty() {\n+            message::warn(&format!(\n+                \"The following routes in your wrangler.toml should have a trailing * to apply the Worker on every path, otherwise your site will not behave as expected.\\n{}\",\n+                no_star_routes.join(\"\\n\"))\n+            );\n+        }\n+    }\n+}\n+\n // Updates given Target with kv_namespace binding for a static site assets KV namespace.\n pub fn bind_static_site_contents(\n     user: &GlobalUser,\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -105,47 +121,35 @@ fn upload_script(\n     Ok(())\n }\n \n-fn deploy(user: &GlobalUser, target: &Target) -> Result<(), failure::Error> {\n-    let routes = target.routes()?;\n-    log::info!(\"routes: {:#?}\", &routes);\n+fn deploy(user: &GlobalUser, deploy_target: &DeployTarget) -> Result<(), failure::Error> {\n+    match deploy_target {\n+        DeployTarget::Zoneless(zoneless_config) => {\n+            // this is a zoneless deploy\n+            log::info!(\"publishing to workers.dev subdomain\");\n+            let deploy_address = publish_zoneless(user, zoneless_config)?;\n \n-    if routes.is_empty() {\n-        // this is a zoneless deploy\n-        log::info!(\"publishing to subdomain\");\n-        let deploy_address = publish_to_subdomain(target, user)?;\n-\n-        message::success(&format!(\n-            \"Successfully published your script to {}\",\n-            deploy_address\n-        ));\n+            message::success(&format!(\n+                \"Successfully published your script to {}\",\n+                deploy_address\n+            ));\n \n-        Ok(())\n-    } else {\n-        // this is a zoned deploy\n-        log::info!(\"publishing to zone\");\n-        // Most users of Workers Sites will be confused by our route patterns; this warning\n-        // informs them of the best configuration for their project, but does not block them\n-        // from deploying to a non-wildcard route.\n-        if target.site.is_some() && routes.len() == 1 {\n-            let route_pattern = &routes[0].pattern;\n-            if !route_pattern.ends_with(\"*\") {\n-                message::warn(&format!(\"The route in your wrangler.toml should have a trailing * to apply the Worker on every path, otherwise your site will not behave as expected.\\nroute = {}*\", route_pattern));\n-            }\n+            Ok(())\n         }\n+        DeployTarget::Zoned(zoned_config) => {\n+            // this is a zoned deploy\n+            log::info!(\"publishing to zone {}\", zoned_config.zone_id);\n+\n+            let published_routes = publish_routes(&user, zoned_config)?;\n \n-        if let Some(zone_id) = &target.zone_id {\n-            let published_routes = publish_routes(&user, routes, zone_id)?;\n+            let display_results: Vec<String> =\n+                published_routes.iter().map(|r| format!(\"{}\", r)).collect();\n \n             message::success(&format!(\n                 \"Deployed to the following routes:\\n{}\",\n-                serde_json::to_string(&published_routes)?\n+                display_results.join(\"\\n\")\n             ));\n \n             Ok(())\n-        } else {\n-            failure::bail!(\n-                \"You must provide a zone_id in your wrangler.toml before publishing to a route!\"\n-            )\n         }\n     }\n }\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -210,17 +214,19 @@ fn build_subdomain_request() -> String {\n     serde_json::json!({ \"enabled\": true }).to_string()\n }\n \n-fn publish_to_subdomain(target: &Target, user: &GlobalUser) -> Result<String, failure::Error> {\n+fn publish_zoneless(\n+    user: &GlobalUser,\n+    zoneless_config: &Zoneless,\n+) -> Result<String, failure::Error> {\n     log::info!(\"checking that subdomain is registered\");\n-    let subdomain = Subdomain::get(&target.account_id, user)?;\n-    let subdomain = match subdomain {\n+    let subdomain = match Subdomain::get(&zoneless_config.account_id, user)? {\n         Some(subdomain) => subdomain,\n         None => failure::bail!(\"Before publishing to workers.dev, you must register a subdomain. Please choose a name for your subdomain and run `wrangler subdomain <name>`.\")\n     };\n \n     let sd_worker_addr = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}/subdomain\",\n-        target.account_id, target.name,\n+        zoneless_config.account_id, zoneless_config.script_name,\n     );\n \n     let client = http::auth_client(None, user);\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -239,7 +245,11 @@ fn publish_to_subdomain(target: &Target, user: &GlobalUser) -> Result<String, fa\n             res.text()?\n         )\n     }\n-    Ok(format!(\"https://{}.{}.workers.dev\", target.name, subdomain))\n+\n+    Ok(format!(\n+        \"https://{}.{}.workers.dev\",\n+        zoneless_config.script_name, subdomain\n+    ))\n }\n \n fn validate_target_required_fields_present(target: &Target) -> Result<(), failure::Error> {\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -267,26 +277,6 @@ fn validate_target_required_fields_present(target: &Target) -> Result<(), failur\n         None => {}\n     }\n \n-    let destination = if let Some(route) = &target.route {\n-        // check required fields for publishing to a route\n-        if target\n-            .zone_id\n-            .as_ref()\n-            .unwrap_or(&\"\".to_string())\n-            .is_empty()\n-        {\n-            missing_fields.push(\"zone_id\")\n-        };\n-        if route.is_empty() {\n-            missing_fields.push(\"route\")\n-        };\n-        // zoned deploy destination\n-        \"a route\"\n-    } else {\n-        // zoneless deploy destination\n-        \"your subdomain\"\n-    };\n-\n     let (field_pluralization, is_are) = match missing_fields.len() {\n         n if n >= 2 => (\"fields\", \"are\"),\n         1 => (\"field\", \"is\"),\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -295,12 +285,11 @@ fn validate_target_required_fields_present(target: &Target) -> Result<(), failur\n \n     if !missing_fields.is_empty() {\n         failure::bail!(\n-            \"{} Your wrangler.toml is missing the {} {:?} which {} required to publish to {}!\",\n+            \"{} Your wrangler.toml is missing the {} {:?} which {} required to publish your worker!\",\n             emoji::WARN,\n             field_pluralization,\n             missing_fields,\n             is_are,\n-            destination\n         );\n     };\n \ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -1,3 +1,5 @@\n+use std::fmt;\n+\n use serde::Serialize;\n \n use cloudflare::endpoints::workers::{CreateRoute, CreateRouteParams, ListRoutes};\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -6,31 +8,31 @@ use cloudflare::framework::HttpApiClientConfig;\n \n use crate::http::{cf_v4_api_client, format_error};\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::toml::Route;\n+use crate::settings::toml::{Route, Zoned};\n \n pub fn publish_routes(\n     user: &GlobalUser,\n-    routes: Vec<Route>,\n-    zone_id: &String,\n+    zoned_config: &Zoned,\n ) -> Result<Vec<RouteUploadResult>, failure::Error> {\n     // For the moment, we'll just make this call once and make all our decisions based on the response.\n     // There is a possibility of race conditions, but we just report back the results and allow the\n     // user to decide how to procede.\n-    let existing_routes = fetch_all(user, zone_id)?;\n+    let existing_routes = fetch_all(user, &zoned_config.zone_id)?;\n \n-    let deployed_routes = routes\n+    let deployed_routes = zoned_config\n+        .routes\n         .iter()\n-        .map(|route| deploy_route(user, zone_id, route, &existing_routes))\n+        .map(|route| deploy_route(user, &zoned_config.zone_id, route, &existing_routes))\n         .collect();\n \n     Ok(deployed_routes)\n }\n \n-fn fetch_all(user: &GlobalUser, zone_identifier: &String) -> Result<Vec<Route>, failure::Error> {\n+fn fetch_all(user: &GlobalUser, zone_identifier: &str) -> Result<Vec<Route>, failure::Error> {\n     let client = cf_v4_api_client(user, HttpApiClientConfig::default())?;\n \n     let routes: Vec<Route> = match client.request(&ListRoutes { zone_identifier }) {\n-        Ok(success) => success.result.iter().map(|r| Route::from(r)).collect(),\n+        Ok(success) => success.result.iter().map(Route::from).collect(),\n         Err(e) => failure::bail!(\"{}\", format_error(e, None)), // TODO: add suggestion fn\n     };\n \ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -39,7 +41,7 @@ fn fetch_all(user: &GlobalUser, zone_identifier: &String) -> Result<Vec<Route>,\n \n fn create(\n     user: &GlobalUser,\n-    zone_identifier: &String,\n+    zone_identifier: &str,\n     route: &Route,\n ) -> Result<Route, failure::Error> {\n     let client = cf_v4_api_client(user, HttpApiClientConfig::default())?;\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -83,11 +85,29 @@ pub enum RouteUploadResult {\n     Error((Route, String)),\n }\n \n+impl fmt::Display for RouteUploadResult {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            RouteUploadResult::Same(route) => write!(f, \"{} => stayed the same\", route.pattern),\n+            RouteUploadResult::Conflict(route) => write!(\n+                f,\n+                \"{} => is already pointing to {}\",\n+                route.pattern,\n+                route.script.as_ref().unwrap_or(&\"null worker\".to_string())\n+            ),\n+            RouteUploadResult::New(route) => write!(f, \"{} => created\", route.pattern),\n+            RouteUploadResult::Error((route, message)) => {\n+                write!(f, \"{} => creation failed: {}\", route.pattern, message)\n+            }\n+        }\n+    }\n+}\n+\n fn deploy_route(\n     user: &GlobalUser,\n-    zone_id: &String,\n+    zone_id: &str,\n     route: &Route,\n-    existing_routes: &Vec<Route>,\n+    existing_routes: &[Route],\n ) -> RouteUploadResult {\n     for existing_route in existing_routes {\n         if route.pattern == existing_route.pattern {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -556,10 +556,11 @@ fn run() -> Result<(), failure::Error> {\n         let manifest = settings::toml::Manifest::new(config_path)?;\n         let env = matches.value_of(\"env\");\n         let mut target = manifest.get_target(env)?;\n+        let deploy_target = manifest.deploy_target(env)?;\n \n         let verbose = matches.is_present(\"verbose\");\n \n-        commands::publish(&user, &mut target, verbose)?;\n+        commands::publish(&user, &mut target, deploy_target, verbose)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"subdomain\") {\n         log::info!(\"Getting project settings\");\n         let manifest = settings::toml::Manifest::new(config_path)?;\ndiff --git /dev/null b/src/settings/toml/deploy_target.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/toml/deploy_target.rs\n@@ -0,0 +1,159 @@\n+use crate::settings::toml::Route;\n+use crate::terminal::message;\n+\n+impl DeployTarget {\n+    pub fn build(\n+        script_name: &str,\n+        route_config: &RouteConfig,\n+    ) -> Result<DeployTarget, failure::Error> {\n+        if route_config.is_valid() {\n+            failure::bail!(\"you must set workers_dev = true OR provide a zone_id and route/routes.\")\n+        }\n+\n+        if route_config.is_zoneless() {\n+            DeployTarget::build_zoneless(script_name, route_config)\n+        } else if route_config.is_zoned() {\n+            DeployTarget::build_zoned(script_name, route_config)\n+        } else {\n+            failure::bail!(\"No deploy target specified\");\n+        }\n+    }\n+\n+    fn build_zoneless(\n+        script_name: &str,\n+        route_config: &RouteConfig,\n+    ) -> Result<DeployTarget, failure::Error> {\n+        if let Some(account_id) = &route_config.account_id {\n+            // TODO: Deserialize empty strings to None; cannot do this for account id\n+            // yet without a large refactor.\n+            if account_id.is_empty() {\n+                failure::bail!(\"field `account_id` is required to deploy to workers.dev\");\n+            }\n+            let zoneless = Zoneless {\n+                script_name: script_name.to_string(),\n+                account_id: account_id.to_string(),\n+            };\n+\n+            Ok(DeployTarget::Zoneless(zoneless))\n+        } else {\n+            failure::bail!(\"field `account_id` is required to deploy to workers.dev\");\n+        }\n+    }\n+\n+    fn build_zoned(\n+        script_name: &str,\n+        route_config: &RouteConfig,\n+    ) -> Result<DeployTarget, failure::Error> {\n+        if let Some(zone_id) = &route_config.zone_id {\n+            if zone_id.is_empty() {\n+                failure::bail!(\"field `zone_id` is required to deploy to routes\");\n+            }\n+\n+            if route_config.has_conflicting_targets() {\n+                failure::bail!(\"specify either `route` or `routes`\");\n+            }\n+\n+            let mut zoned = Zoned {\n+                zone_id: zone_id.to_owned(),\n+                routes: Vec::new(),\n+            };\n+\n+            if let Some(route) = &route_config.route {\n+                zoned.routes.push(Route {\n+                    id: None,\n+                    script: Some(script_name.to_string()),\n+                    pattern: route.to_string(),\n+                });\n+            } else if let Some(routes) = &route_config.routes {\n+                for route in routes {\n+                    if route.is_empty() {\n+                        message::warn(\"your wrangler.toml contains an empty route\")\n+                    } else {\n+                        zoned.routes.push(Route {\n+                            id: None,\n+                            script: Some(script_name.to_string()),\n+                            pattern: route.to_string(),\n+                        })\n+                    }\n+                }\n+            }\n+\n+            if zoned.routes.is_empty() {\n+                failure::bail!(\"No routes specified\");\n+            }\n+\n+            Ok(DeployTarget::Zoned(zoned))\n+        } else {\n+            failure::bail!(\"field `zone_id` is required to deploy to routes\");\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Debug, PartialEq)]\n+pub enum DeployTarget {\n+    Zoneless(Zoneless),\n+    Zoned(Zoned),\n+}\n+\n+#[derive(Clone, Debug, PartialEq)]\n+pub struct Zoneless {\n+    pub account_id: String,\n+    pub script_name: String,\n+}\n+\n+#[derive(Clone, Debug, PartialEq)]\n+pub struct Zoned {\n+    pub zone_id: String,\n+    pub routes: Vec<Route>,\n+}\n+\n+#[derive(Debug)]\n+pub struct RouteConfig {\n+    pub workers_dev: Option<bool>,\n+    pub route: Option<String>,\n+    pub routes: Option<Vec<String>>,\n+    pub zone_id: Option<String>,\n+    pub account_id: Option<String>,\n+}\n+\n+impl RouteConfig {\n+    fn is_valid(&self) -> bool {\n+        self.workers_dev_false_by_itself() || self.has_conflicting_targets()\n+    }\n+\n+    fn has_conflicting_targets(&self) -> bool {\n+        if self.is_zoneless() {\n+            self.has_routes_defined()\n+        } else if let Some(routes) = &self.routes {\n+            !routes.is_empty() && self.route.is_some()\n+        } else {\n+            false\n+        }\n+    }\n+\n+    fn has_routes_defined(&self) -> bool {\n+        if self.route.is_some() {\n+            true\n+        } else if let Some(routes) = &self.routes {\n+            !routes.is_empty()\n+        } else {\n+            false\n+        }\n+    }\n+\n+    fn is_zoneless(&self) -> bool {\n+        self.workers_dev.unwrap_or_default()\n+    }\n+\n+    fn is_zoned(&self) -> bool {\n+        self.has_routes_defined() || self.zone_id.is_some()\n+    }\n+\n+    fn workers_dev_false_by_itself(&self) -> bool {\n+        if let Some(workers_dev) = self.workers_dev {\n+            !workers_dev && !self.has_routes_defined()\n+        } else {\n+            false\n+        }\n+    }\n+}\ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -1,15 +1,20 @@\n-use super::kv_namespace::KvNamespace;\n-use super::site::Site;\n-\n use serde::{Deserialize, Serialize};\n+use serde_with::rust::string_empty_as_none;\n+\n+use crate::settings::toml::deploy_target::RouteConfig;\n+use crate::settings::toml::kv_namespace::KvNamespace;\n+use crate::settings::toml::site::Site;\n \n #[derive(Clone, Debug, Deserialize, Serialize)]\n pub struct Environment {\n     pub name: Option<String>,\n+    #[serde(default, with = \"string_empty_as_none\")]\n     pub account_id: Option<String>,\n     pub workers_dev: Option<bool>,\n+    #[serde(default, with = \"string_empty_as_none\")]\n     pub route: Option<String>,\n     pub routes: Option<Vec<String>>,\n+    #[serde(default, with = \"string_empty_as_none\")]\n     pub zone_id: Option<String>,\n     pub webpack_config: Option<String>,\n     pub private: Option<bool>,\ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -17,3 +22,35 @@ pub struct Environment {\n     #[serde(rename = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<KvNamespace>>,\n }\n+\n+impl Environment {\n+    pub fn route_config(\n+        &self,\n+        top_level_account_id: String,\n+        top_level_zone_id: Option<String>,\n+    ) -> Option<RouteConfig> {\n+        let account_id = if self.account_id.is_none() {\n+            Some(top_level_account_id)\n+        } else {\n+            self.account_id.clone()\n+        };\n+\n+        let zone_id = if self.zone_id.is_none() {\n+            top_level_zone_id\n+        } else {\n+            self.zone_id.clone()\n+        };\n+\n+        if self.workers_dev.is_none() && self.route.is_none() && self.routes.is_none() {\n+            None\n+        } else {\n+            Some(RouteConfig {\n+                account_id,\n+                workers_dev: self.workers_dev,\n+                route: self.route.clone(),\n+                routes: self.routes.clone(),\n+                zone_id,\n+            })\n+        }\n+    }\n+}\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -1,9 +1,3 @@\n-use super::environment::Environment;\n-use super::kv_namespace::KvNamespace;\n-use super::site::Site;\n-use super::target_type::TargetType;\n-use crate::settings::toml::Target;\n-\n use std::collections::{HashMap, HashSet};\n use std::env;\n \ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -11,15 +5,20 @@ use std::fs;\n use std::path::{Path, PathBuf};\n \n use config::{Config, File};\n-use serde::{Deserialize, Serialize};\n \n+use serde::{Deserialize, Serialize};\n+use serde_with::rust::string_empty_as_none;\n+\n+use crate::commands::validate_worker_name;\n+use crate::settings::toml::deploy_target::{DeployTarget, RouteConfig};\n+use crate::settings::toml::environment::Environment;\n+use crate::settings::toml::kv_namespace::KvNamespace;\n+use crate::settings::toml::site::Site;\n+use crate::settings::toml::target_type::TargetType;\n+use crate::settings::toml::Target;\n use crate::terminal::emoji;\n use crate::terminal::message;\n \n-fn some_string() -> Option<String> {\n-    Some(\"\".to_string())\n-}\n-\n #[derive(Clone, Debug, Default, Deserialize, Serialize)]\n pub struct Manifest {\n     #[serde(default)]\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -29,10 +28,10 @@ pub struct Manifest {\n     #[serde(default)]\n     pub account_id: String,\n     pub workers_dev: Option<bool>,\n-    #[serde(default = \"some_string\")]\n+    #[serde(default, with = \"string_empty_as_none\")]\n     pub route: Option<String>,\n     pub routes: Option<Vec<String>>,\n-    #[serde(default = \"some_string\")]\n+    #[serde(default, with = \"string_empty_as_none\")]\n     pub zone_id: Option<String>,\n     pub webpack_config: Option<String>,\n     pub private: Option<bool>,\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -126,6 +125,54 @@ impl Manifest {\n         Ok(template_config)\n     }\n \n+    pub fn worker_name(&self, env_arg: Option<&str>) -> String {\n+        if let Some(environment) = self.get_environment(env_arg).unwrap_or_default() {\n+            if let Some(name) = &environment.name {\n+                return name.clone();\n+            }\n+            if let Some(env) = env_arg {\n+                return format!(\"{}-{}\", self.name, env);\n+            }\n+        }\n+\n+        self.name.clone()\n+    }\n+\n+    fn route_config(&self) -> RouteConfig {\n+        RouteConfig {\n+            account_id: Some(self.account_id.clone()),\n+            workers_dev: self.workers_dev,\n+            route: self.route.clone(),\n+            routes: self.routes.clone(),\n+            zone_id: self.zone_id.clone(),\n+        }\n+    }\n+\n+    pub fn deploy_target(&self, env: Option<&str>) -> Result<DeployTarget, failure::Error> {\n+        let script = self.worker_name(env);\n+        validate_worker_name(&script)?;\n+\n+        if let Some(environment) = self.get_environment(env)? {\n+            // if there is an environment level deploy target, try to return that\n+            if let Some(env_route_config) =\n+                environment.route_config(self.account_id.clone(), self.zone_id.clone())\n+            {\n+                return DeployTarget::build(&script, &env_route_config);\n+            } else {\n+                // If the top level config is Zoned, the user needs to specify new route config\n+                let top_level_config = DeployTarget::build(&script, &self.route_config())?;\n+                match top_level_config {\n+                    DeployTarget::Zoned(_) => failure::bail!(\n+                        \"you must specify route(s) per environment for zoned deploys.\"\n+                    ),\n+                    DeployTarget::Zoneless(_) => return Ok(top_level_config),\n+                }\n+            }\n+        } else {\n+            DeployTarget::build(&script, &self.route_config())\n+        }\n+    }\n+\n     pub fn get_target(&self, environment_name: Option<&str>) -> Result<Target, failure::Error> {\n         // Site projects are always webpack for now; don't let toml override this.\n         let target_type = match self.site {\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -137,40 +184,23 @@ impl Manifest {\n             target_type,                                 // MUST inherit\n             account_id: self.account_id.clone(),         // MAY inherit\n             webpack_config: self.webpack_config.clone(), // MAY inherit\n-            zone_id: self.zone_id.clone(),               // MAY inherit\n             // importantly, the top level name will be modified\n             // to include the name of the environment\n             name: self.name.clone(),                   // MAY inherit\n             kv_namespaces: self.kv_namespaces.clone(), // MUST NOT inherit\n-            route: None, // can inherit None, but not Some (see negotiate_zoneless)\n-            routes: self.routes.clone(), // MUST NOT inherit\n-            site: self.site.clone(), // MUST NOT inherit\n+            site: self.site.clone(),                   // MUST NOT inherit\n         };\n \n         let environment = self.get_environment(environment_name)?;\n \n-        target.route = self.negotiate_zoneless(environment)?;\n         if let Some(environment) = environment {\n-            target.name = if let Some(name) = &environment.name {\n-                name.clone()\n-            } else {\n-                match environment_name {\n-                    Some(environment_name) => format!(\"{}-{}\", self.name, environment_name),\n-                    None => failure::bail!(\"You must specify `name` in your wrangler.toml\"),\n-                }\n-            };\n+            target.name = self.worker_name(environment_name);\n             if let Some(account_id) = &environment.account_id {\n                 target.account_id = account_id.clone();\n             }\n-            if environment.routes.is_some() {\n-                target.routes = environment.routes.clone();\n-            }\n             if environment.webpack_config.is_some() {\n                 target.webpack_config = environment.webpack_config.clone();\n             }\n-            if environment.zone_id.is_some() {\n-                target.zone_id = environment.zone_id.clone();\n-            }\n             // don't inherit kv namespaces because it is an anti-pattern to use the same namespaces across multiple environments\n             target.kv_namespaces = environment.kv_namespaces.clone();\n         }\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -205,107 +235,6 @@ impl Manifest {\n         }\n     }\n \n-    // this function takes the workers_dev booleans and the routes in a manifest\n-    // and then returns an Option<String> representing the deploy target\n-    // if it is None, it means deploy to workers.dev, otherwise deploy to the route\n-\n-    // no environments:\n-    // +-------------+---------------------+------------------------------+\n-    // | workers_dev |        route        |            result            |\n-    // +-------------+---------------------+------------------------------+\n-    // | None        | None                | failure: pick target         |\n-    // | None        | Some(\"\")            | failure: pick target         |\n-    // | None        | Some(\"example.com\") | Some(\"example.com\")          |\n-    // | false       | None                | failure: pick target         |\n-    // | false       | Some(\"\")            | failure: pick target         |\n-    // | false       | Some(\"example.com\") | Some(\"example.com\")          |\n-    // | true        | None                | None                         |\n-    // | true        | Some(\"\")            | None                         |\n-    // | true        | Some(\"example.com\") | failure: conflicting targets |\n-    // +-------------+---------------------+------------------------------+\n-    //\n-    // When environments are introduced, this truth table holds true with workers_dev being inherited\n-    // and route being ignored.\n-    // if top level workers_dev is true, it is inherited but can be overridden by an env route\n-    //\n-    // this will fail with empty_route_failure\n-    // workers_dev = true\n-    // [env.foo]\n-    // route = \"\"\n-    //\n-    // this will return Some(\"example.com\")\n-    // workers_dev = true\n-    // [env.foo]\n-    // route = \"example.com\"\n-    fn negotiate_zoneless(\n-        &self,\n-        environment: Option<&Environment>,\n-    ) -> Result<Option<String>, failure::Error> {\n-        let conflicting_targets_failure = \"Your environment should only include `workers_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dev`.\";\n-        let pick_target_failure =\n-            \"You must specify either `workers_dev` or `route` and `zone_id` in order to publish.\";\n-        let empty_route_failure =\n-            \"If you want to deploy to workers.dev, remove `route` from your environment config.\";\n-\n-        log::debug!(\"top level workers_dev: {:?}\", self.workers_dev);\n-        log::debug!(\"top level route: {:?}\", self.route);\n-\n-        // start with top level configuration\n-        let (top_workers_dev, top_route) = match (self.workers_dev, self.route.clone()) {\n-            (None, Some(route)) => (false, Some(route)),\n-            (Some(workers_dev), None) => (workers_dev, None),\n-            (Some(workers_dev), Some(route)) => (workers_dev, Some(route)),\n-            (None, None) => (false, None),\n-        };\n-\n-        // override top level with environment\n-        let (workers_dev, route) = if let Some(env) = &environment {\n-            log::debug!(\"env workers_dev: {:?}\", env.workers_dev);\n-            log::debug!(\"env route: {:?}\", env.route);\n-            match (env.workers_dev, env.route.clone()) {\n-                (None, Some(route)) => {\n-                    if top_workers_dev && route.is_empty() {\n-                        failure::bail!(empty_route_failure)\n-                    } else {\n-                        (false, Some(route))\n-                    }\n-                }\n-                (Some(workers_dev), None) => (workers_dev, None),\n-                (Some(workers_dev), Some(route)) => {\n-                    if route.is_empty() && workers_dev {\n-                        failure::bail!(empty_route_failure)\n-                    }\n-                    (workers_dev, Some(route))\n-                }\n-                (None, None) => (top_workers_dev, top_route),\n-            }\n-        } else {\n-            (top_workers_dev, top_route)\n-        };\n-\n-        log::debug!(\"negotiated workers_dev: {}\", workers_dev);\n-        log::debug!(\"negotiated route: {:?}\", route);\n-\n-        match (workers_dev, route) {\n-            (true, None) => Ok(None),\n-            (true, Some(route)) => {\n-                if route.is_empty() {\n-                    Ok(None)\n-                } else {\n-                    failure::bail!(conflicting_targets_failure)\n-                }\n-            }\n-            (false, Some(route)) => {\n-                if route.is_empty() {\n-                    failure::bail!(pick_target_failure)\n-                } else {\n-                    Ok(Some(route))\n-                }\n-            }\n-            (false, None) => failure::bail!(pick_target_failure),\n-        }\n-    }\n-\n     fn warn_on_account_info(&self) {\n         let account_id_env = env::var(\"CF_ACCOUNT_ID\").is_ok();\n         let zone_id_env = env::var(\"CF_ZONE_ID\").is_ok();\ndiff --git a/src/settings/toml/mod.rs b/src/settings/toml/mod.rs\n--- a/src/settings/toml/mod.rs\n+++ b/src/settings/toml/mod.rs\n@@ -1,3 +1,4 @@\n+mod deploy_target;\n mod environment;\n mod kv_namespace;\n mod manifest;\ndiff --git a/src/settings/toml/mod.rs b/src/settings/toml/mod.rs\n--- a/src/settings/toml/mod.rs\n+++ b/src/settings/toml/mod.rs\n@@ -6,6 +7,7 @@ mod site;\n mod target;\n mod target_type;\n \n+pub use deploy_target::{DeployTarget, Zoned, Zoneless};\n pub use environment::Environment;\n pub use kv_namespace::KvNamespace;\n pub use manifest::Manifest;\ndiff --git a/src/settings/toml/route.rs b/src/settings/toml/route.rs\n--- a/src/settings/toml/route.rs\n+++ b/src/settings/toml/route.rs\n@@ -2,7 +2,7 @@ use serde::{Deserialize, Serialize};\n \n use cloudflare::endpoints::workers::WorkersRoute;\n \n-#[derive(Debug, Deserialize, PartialEq, Serialize)]\n+#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]\n pub struct Route {\n     pub id: Option<String>,\n     pub script: Option<String>,\ndiff --git a/src/settings/toml/target.rs b/src/settings/toml/target.rs\n--- a/src/settings/toml/target.rs\n+++ b/src/settings/toml/target.rs\n@@ -1,7 +1,6 @@\n use super::kv_namespace::KvNamespace;\n use super::site::Site;\n use super::target_type::TargetType;\n-use super::Route;\n \n use std::env;\n \ndiff --git a/src/settings/toml/target.rs b/src/settings/toml/target.rs\n--- a/src/settings/toml/target.rs\n+++ b/src/settings/toml/target.rs\n@@ -17,10 +16,7 @@ pub struct Target {\n     pub name: String,\n     #[serde(rename = \"type\")]\n     pub target_type: TargetType,\n-    pub route: Option<String>,\n-    pub routes: Option<Vec<String>>,\n     pub webpack_config: Option<String>,\n-    pub zone_id: Option<String>,\n     pub site: Option<Site>,\n }\n \ndiff --git a/src/settings/toml/target.rs b/src/settings/toml/target.rs\n--- a/src/settings/toml/target.rs\n+++ b/src/settings/toml/target.rs\n@@ -46,33 +42,4 @@ impl Target {\n             }\n         }\n     }\n-\n-    pub fn routes(&self) -> Result<Vec<Route>, failure::Error> {\n-        let mut routes = Vec::new();\n-\n-        // we should assert that only one of the two keys is specified in the user's toml.\n-        if self.route.is_some() && self.routes.is_some() {\n-            failure::bail!(\"You can specify EITHER `route` or `routes` in your wrangler.toml\");\n-        }\n-\n-        // everything outside of this module should consider `target.routes()` to be a Vec;\n-        // the fact that you can specify singular or plural is a detail of the wrangler.toml contract.\n-        if let Some(single_route) = &self.route {\n-            routes.push(Route {\n-                id: None,\n-                script: Some(self.name.to_owned()),\n-                pattern: single_route.to_string(),\n-            });\n-        } else if let Some(multi_route) = &self.routes {\n-            for pattern in multi_route {\n-                routes.push(Route {\n-                    id: None,\n-                    script: Some(self.name.to_owned()),\n-                    pattern: pattern.to_string(),\n-                });\n-            }\n-        }\n-\n-        Ok(routes)\n-    }\n }\n",
        "test_patch": "diff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -265,10 +265,7 @@ mod tests {\n             kv_namespaces: None,\n             name: \"\".to_string(),\n             target_type: TargetType::JavaScript,\n-            route: None,\n-            routes: None,\n             webpack_config: None,\n-            zone_id: None,\n             site: Some(site),\n         }\n     }\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -163,10 +163,7 @@ mod tests {\n             ]),\n             name: \"test-target\".to_string(),\n             target_type: TargetType::Webpack,\n-            route: None,\n-            routes: None,\n             webpack_config: None,\n-            zone_id: None,\n             site: None,\n         };\n         assert!(kv::get_namespace_id(&target_with_dup_kv_bindings, \"\").is_err());\n",
        "problem_statement": "Refactor and simplify truth table logic for wrangler publish\n#751 has some complicated truth table logic I'd like to simplify. This ticket is to remind me to do that.\n",
        "hints_text": "I BEAT YOU TO IT <3",
        "created_at": "2019-12-17T02:53:11Z",
        "version": "1.6"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 957,
        "instance_id": "cloudflare__wrangler-legacy-957",
        "issue_numbers": [
            "905"
        ],
        "base_commit": "3773bfa3a098dc5363fd5d4155fa81bacc235237",
        "patch": "diff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -46,7 +46,8 @@ pub fn run_build(target: &Target) -> Result<(), failure::Error> {\n         let wranglerjs_output: WranglerjsOutput =\n             serde_json::from_str(&output).expect(\"could not parse wranglerjs output\");\n \n-        write_wranglerjs_output(&bundle, &wranglerjs_output)\n+        let custom_webpack = target.webpack_config.is_some();\n+        write_wranglerjs_output(&bundle, &wranglerjs_output, custom_webpack)\n     } else {\n         failure::bail!(\"failed to execute `{:?}`: exited with {}\", command, status)\n     }\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -57,6 +58,7 @@ pub fn run_build_and_watch(target: &Target, tx: Option<Sender<()>>) -> Result<()\n     command.arg(\"--watch=1\");\n \n     let is_site = target.site.clone();\n+    let custom_webpack = target.webpack_config.is_some();\n \n     log::info!(\"Running {:?} in watch mode\", command);\n \ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -100,7 +102,8 @@ pub fn run_build_and_watch(target: &Target, tx: Option<Sender<()>>) -> Result<()\n                     let wranglerjs_output: WranglerjsOutput =\n                         serde_json::from_str(&output).expect(\"could not parse wranglerjs output\");\n \n-                    if write_wranglerjs_output(&bundle, &wranglerjs_output).is_ok() {\n+                    if write_wranglerjs_output(&bundle, &wranglerjs_output, custom_webpack).is_ok()\n+                    {\n                         if let Some(tx) = tx.clone() {\n                             tx.send(()).expect(\"--watch change message failed to send\");\n                         }\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -117,12 +120,19 @@ pub fn run_build_and_watch(target: &Target, tx: Option<Sender<()>>) -> Result<()\n fn write_wranglerjs_output(\n     bundle: &Bundle,\n     output: &WranglerjsOutput,\n+    custom_webpack: bool,\n ) -> Result<(), failure::Error> {\n     if output.has_errors() {\n         message::user_error(output.get_errors().as_str());\n-        failure::bail!(\n+        if custom_webpack {\n+            failure::bail!(\n+            \"webpack returned an error. Try configuring `entry` in your webpack config relative to the current working directory, or setting `context = __dirname` in your webpack config.\"\n+        );\n+        } else {\n+            failure::bail!(\n             \"webpack returned an error. You may be able to resolve this issue by running npm install.\"\n         );\n+        }\n     }\n \n     bundle.write(output)?;\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -175,19 +185,11 @@ fn setup_build(target: &Target) -> Result<(Command, PathBuf, Bundle), failure::E\n     command.arg(format!(\"--wasm-binding={}\", bundle.get_wasm_binding()));\n \n     let custom_webpack_config_path = match &target.webpack_config {\n-        Some(webpack_config) => match &target.site {\n-            None => Some(PathBuf::from(&webpack_config)),\n-            Some(_) => {\n-                message::warn(\"Workers Sites does not support custom webpack configuration files\");\n-                None\n-            }\n-        },\n+        Some(webpack_config) => Some(PathBuf::from(&webpack_config)),\n         None => {\n-            if target.site.is_none() {\n-                let config_path = PathBuf::from(\"webpack.config.js\".to_string());\n-                if config_path.exists() {\n-                    message::warn(\"If you would like to use your own custom webpack configuration, you will need to add this to your wrangler.toml:\\nwebpack_config = \\\"webpack.config.js\\\"\");\n-                }\n+            let config_path = PathBuf::from(\"webpack.config.js\".to_string());\n+            if config_path.exists() {\n+                message::warn(\"If you would like to use your own custom webpack configuration, you will need to add this to your wrangler.toml:\\nwebpack_config = \\\"webpack.config.js\\\"\");\n             }\n             None\n         }\n",
        "test_patch": "diff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -14,7 +14,35 @@ fn it_builds_webpack() {\n     let fixture = Fixture::new();\n     fixture.scaffold_webpack();\n \n-    let wrangler_toml = WranglerToml::webpack_no_config(\"test-build-webpack\");\n+    let wrangler_toml = WranglerToml::webpack_build(\"test-build-webpack\");\n+    fixture.create_wrangler_toml(wrangler_toml);\n+\n+    build_creates_assets(&fixture, vec![\"script.js\"]);\n+}\n+\n+#[test]\n+fn it_builds_webpack_site() {\n+    let fixture = Fixture::new_site();\n+\n+    let wrangler_toml = WranglerToml::site(\"test-build-site\");\n+    fixture.create_wrangler_toml(wrangler_toml);\n+\n+    build_creates_assets(&fixture, vec![\"script.js\"]);\n+}\n+\n+#[test]\n+fn it_builds_webpack_site_with_custom_webpack() {\n+    let fixture = Fixture::new_site();\n+\n+    fixture.create_file(\n+        \"workers-site/webpack.worker.js\",\n+        r#\"\n+        module.exports = { entry: \"./workers-site/index.js\" };\n+    \"#,\n+    );\n+\n+    let mut wrangler_toml = WranglerToml::site(\"test-build-site-specify-config\");\n+    wrangler_toml.webpack_config = Some(\"workers-site/webpack.worker.js\");\n     fixture.create_wrangler_toml(wrangler_toml);\n \n     build_creates_assets(&fixture, vec![\"script.js\"]);\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -41,7 +69,7 @@ fn it_builds_with_webpack_single_js() {\n     );\n     fixture.create_default_package_json();\n \n-    let wrangler_toml = WranglerToml::webpack_no_config(\"test-build-webpack-single-js\");\n+    let wrangler_toml = WranglerToml::webpack_build(\"test-build-webpack-single-js\");\n     fixture.create_wrangler_toml(wrangler_toml);\n \n     build_creates_assets(&fixture, vec![\"script.js\"]);\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -137,7 +165,7 @@ fn it_builds_with_webpack_single_js_missing_package_main() {\n     );\n \n     let wrangler_toml =\n-        WranglerToml::webpack_no_config(\"test-build-webpack-single-js-missing-package-main\");\n+        WranglerToml::webpack_build(\"test-build-webpack-single-js-missing-package-main\");\n     fixture.create_wrangler_toml(wrangler_toml);\n \n     build_fails_with(\ndiff --git a/tests/fixture/mod.rs b/tests/fixture/mod.rs\n--- a/tests/fixture/mod.rs\n+++ b/tests/fixture/mod.rs\n@@ -14,28 +14,39 @@ use toml;\n \n const BUNDLE_OUT: &str = \"worker\";\n \n-pub struct Fixture {\n+pub struct Fixture<'a> {\n     // we wrap the fixture's tempdir in a `ManuallyDrop` so that if a test\n     // fails, its directory isn't deleted, and we have a chance to manually\n     // inspect its state and figure out what is going on.\n     dir: ManuallyDrop<TempDir>,\n+    output_path: &'a str,\n }\n \n-impl Default for Fixture {\n+impl Default for Fixture<'_> {\n     fn default() -> Self {\n         Self::new()\n     }\n }\n \n-impl Fixture {\n-    pub fn new() -> Fixture {\n+impl Fixture<'_> {\n+    pub fn new() -> Fixture<'static> {\n         let dir = TempDir::new().unwrap();\n         eprintln!(\"Created fixture at {}\", dir.path().display());\n         Fixture {\n             dir: ManuallyDrop::new(dir),\n+            output_path: BUNDLE_OUT,\n         }\n     }\n \n+    pub fn new_site() -> Fixture<'static> {\n+        let mut fixture = Fixture::new();\n+        fixture.output_path = \"workers-site/worker\";\n+\n+        fixture.scaffold_site();\n+\n+        fixture\n+    }\n+\n     pub fn get_path(&self) -> PathBuf {\n         self.dir.path().to_path_buf()\n     }\ndiff --git a/tests/fixture/mod.rs b/tests/fixture/mod.rs\n--- a/tests/fixture/mod.rs\n+++ b/tests/fixture/mod.rs\n@@ -46,7 +57,7 @@ impl Fixture {\n     }\n \n     pub fn get_output_path(&self) -> PathBuf {\n-        self.get_path().join(BUNDLE_OUT)\n+        self.get_path().join(self.output_path)\n     }\n \n     pub fn create_file(&self, name: &str, content: &str) {\ndiff --git a/tests/fixture/mod.rs b/tests/fixture/mod.rs\n--- a/tests/fixture/mod.rs\n+++ b/tests/fixture/mod.rs\n@@ -80,6 +91,23 @@ impl Fixture {\n         self.create_file(\"wrangler.toml\", &toml::to_string(&wrangler_toml).unwrap());\n     }\n \n+    pub fn scaffold_site(&self) {\n+        self.create_dir(\"workers-site\");\n+        self.create_file(\n+            \"workers-site/package.json\",\n+            r#\"\n+            {\n+              \"private\": true,\n+              \"main\": \"index.js\",\n+              \"dependencies\": {\n+                \"@cloudflare/kv-asset-handler\": \"^0.0.5\"\n+              }\n+            }\n+        \"#,\n+        );\n+        self.create_file(\"workers-site/index.js\", \"\");\n+    }\n+\n     pub fn lock(&self) -> MutexGuard<'static, ()> {\n         use std::sync::Mutex;\n \ndiff --git a/tests/fixture/mod.rs b/tests/fixture/mod.rs\n--- a/tests/fixture/mod.rs\n+++ b/tests/fixture/mod.rs\n@@ -91,7 +119,7 @@ impl Fixture {\n     }\n }\n \n-impl Drop for Fixture {\n+impl Drop for Fixture<'_> {\n     fn drop(&mut self) {\n         if !thread::panicking() {\n             unsafe { ManuallyDrop::drop(&mut self.dir) }\ndiff --git a/tests/fixture/wrangler_toml.rs b/tests/fixture/wrangler_toml.rs\n--- a/tests/fixture/wrangler_toml.rs\n+++ b/tests/fixture/wrangler_toml.rs\n@@ -57,7 +57,7 @@ pub struct WranglerToml<'a> {\n }\n \n impl WranglerToml<'_> {\n-    pub fn webpack_no_config(name: &str) -> WranglerToml {\n+    pub fn webpack_build(name: &str) -> WranglerToml {\n         let mut wrangler_toml = WranglerToml::default();\n         wrangler_toml.name = Some(name);\n         wrangler_toml.workers_dev = Some(true);\ndiff --git a/tests/fixture/wrangler_toml.rs b/tests/fixture/wrangler_toml.rs\n--- a/tests/fixture/wrangler_toml.rs\n+++ b/tests/fixture/wrangler_toml.rs\n@@ -67,14 +67,14 @@ impl WranglerToml<'_> {\n     }\n \n     pub fn webpack_std_config(name: &str) -> WranglerToml {\n-        let mut wrangler_toml = WranglerToml::webpack_no_config(name);\n+        let mut wrangler_toml = WranglerToml::webpack_build(name);\n         wrangler_toml.webpack_config = Some(\"webpack.config.js\");\n \n         wrangler_toml\n     }\n \n     pub fn webpack_custom_config<'a>(name: &'a str, webpack_config: &'a str) -> WranglerToml<'a> {\n-        let mut wrangler_toml = WranglerToml::webpack_no_config(name);\n+        let mut wrangler_toml = WranglerToml::webpack_build(name);\n         wrangler_toml.webpack_config = Some(webpack_config);\n \n         wrangler_toml\ndiff --git a/tests/fixture/wrangler_toml.rs b/tests/fixture/wrangler_toml.rs\n--- a/tests/fixture/wrangler_toml.rs\n+++ b/tests/fixture/wrangler_toml.rs\n@@ -97,4 +97,13 @@ impl WranglerToml<'_> {\n \n         wrangler_toml\n     }\n+\n+    pub fn site(name: &str) -> WranglerToml {\n+        let mut wrangler_toml = WranglerToml::webpack_build(name);\n+        let mut site = SiteConfig::default();\n+        site.bucket = Some(\"./public\");\n+        wrangler_toml.site = Some(site);\n+\n+        wrangler_toml\n+    }\n }\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -43,7 +43,7 @@ fn it_can_preview_webpack_project() {\n     let fixture = Fixture::new();\n     fixture.scaffold_webpack();\n \n-    let wrangler_toml = WranglerToml::webpack_no_config(\"test-preview-webpack\");\n+    let wrangler_toml = WranglerToml::webpack_build(\"test-preview-webpack\");\n     fixture.create_wrangler_toml(wrangler_toml);\n \n     preview_succeeds(&fixture);\n",
        "problem_statement": "allow custom webpack config for Workers Sites projects\n```\r\n$ wrangler build\r\n\u26a0\ufe0f  Workers Sites does not support custom webpack configuration files\r\n\u2728  Built successfully, built project size is 11 KiB.\r\n```\r\n\r\nThsi error message is historical; when wrangler implicitly looked at the root for a custom webpack config, it made sense to disable the functionality for sites since the root would likely contain a config for the app you were deploying, not for the workers site. with this change, though, we should allow custom webpack configs since you are required to declare them in your wrangler.toml. This should be as simple as removing a conditional somewhere in wranglerjs, we just need to triage it.\r\n\r\n_Originally posted by @ashleymichal in https://github.com/cloudflare/wrangler/pull/847#issuecomment-558234664_\n",
        "hints_text": "please correct me (never wrote any rust) but it looks like it's not just the warning which is wrong:\r\n\r\nhttps://github.com/cloudflare/wrangler/blob/master/src/commands/build/wranglerjs/mod.rs#L177\r\n```rust\r\n    let custom_webpack_config_path = match &target.webpack_config {\r\n        Some(webpack_config) => match &target.site {\r\n            None => Some(PathBuf::from(&webpack_config)),\r\n            Some(_) => {\r\n                message::warn(\"Workers Sites does not support custom webpack configuration files\");\r\n                None\r\n            }\r\n        },\r\n```\r\nif webpack is given and worker site is activated then `custom_webpack_config_path` will be set to `None`.\r\n\r\nthis is the opposite of what the docs are stating:\r\n\r\n> ... If you are using Workers Sites and want to specify your own webpack configuration, you will always need to specify this ...\r\n\r\nhttps://developers.cloudflare.com/workers/tooling/wrangler/webpack/\nthat's a good catch! i'll assign this to me and tackle it friday. sorry for the mismatch, we'll patch it up asap.",
        "created_at": "2019-12-13T22:33:10Z",
        "version": "1.6"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 923,
        "instance_id": "cloudflare__wrangler-legacy-923",
        "issue_numbers": [
            "875"
        ],
        "base_commit": "b3b5ea73246df00be95701049f343ac8ce7baa85",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -148,7 +148,7 @@ dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-automata 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -212,6 +212,17 @@ name = \"cfg-if\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"chrome-devtools-rs\"\n+version = \"0.1.0\"\n+source = \"git+https://github.com/everlastingbugstopper/chrome-devtools-rs?rev=b7a0e9f#b7a0e9f13593988cbc7f112f1683945ff2068239\"\n+dependencies = [\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"chrono\"\n version = \"0.4.9\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -220,7 +231,7 @@ dependencies = [\n  \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-integer 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -269,9 +280,9 @@ dependencies = [\n  \"maplit 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"reqwest 0.9.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_with 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_yaml 0.8.11 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -289,24 +300,22 @@ dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rust-ini 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"console\"\n-version = \"0.7.7\"\n+version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -337,8 +346,8 @@ dependencies = [\n  \"idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"publicsuffix 1.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"try_from 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -437,7 +446,7 @@ dependencies = [\n  \"csv-core 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ryu 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -456,7 +465,7 @@ dependencies = [\n  \"curl-sys 0.4.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.52 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"schannel 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"socket2 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -470,7 +479,7 @@ dependencies = [\n  \"cc 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.52 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -575,8 +584,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1229,9 +1238,9 @@ dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl 0.10.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl 0.10.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.52 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"schannel 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"security-framework 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"security-framework-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1321,7 +1330,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"openssl\"\n-version = \"0.10.25\"\n+version = \"0.10.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1329,7 +1338,7 @@ dependencies = [\n  \"foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.65 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.52 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1347,7 +1356,7 @@ dependencies = [\n \n [[package]]\n name = \"openssl-sys\"\n-version = \"0.9.52\"\n+version = \"0.9.53\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1728,8 +1737,8 @@ dependencies = [\n  \"mime 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mime_guess 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_urlencoded 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1841,10 +1850,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.102\"\n+version = \"1.0.103\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde_derive 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1861,7 +1870,7 @@ dependencies = [\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.102\"\n+version = \"1.0.103\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1871,12 +1880,12 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.41\"\n+version = \"1.0.44\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ryu 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1887,7 +1896,7 @@ dependencies = [\n  \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1905,7 +1914,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1914,7 +1923,7 @@ name = \"serde_with\"\n version = \"1.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_with_macros 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1935,7 +1944,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2036,8 +2045,8 @@ dependencies = [\n  \"chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libflate 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slog-async 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slog-kvfilter 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2369,7 +2378,7 @@ name = \"toml\"\n version = \"0.4.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2377,7 +2386,7 @@ name = \"toml\"\n version = \"0.5.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2617,11 +2626,12 @@ dependencies = [\n  \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chrome-devtools-rs 0.1.0 (git+https://github.com/everlastingbugstopper/chrome-devtools-rs?rev=b7a0e9f)\",\n  \"chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cloudflare 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"console 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"console 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2638,14 +2648,14 @@ dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"notify 4.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl 0.10.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl 0.10.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"prettytable-rs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"reqwest 0.9.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"sha2 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"text_io 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2668,6 +2678,7 @@ dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio-extras 2.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl 0.10.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"sha-1 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2739,13 +2750,14 @@ dependencies = [\n \"checksum c2-chacha 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"214238caa1bf3a496ec3392968969cab8549f96ff30652c9e56885329315f6bb\"\n \"checksum cc 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa87058dce70a3ff5621797f1506cb837edd02ac4c0ae642b4542dce802908b8\"\n \"checksum cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n+\"checksum chrome-devtools-rs 0.1.0 (git+https://github.com/everlastingbugstopper/chrome-devtools-rs?rev=b7a0e9f)\" = \"<none>\"\n \"checksum chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8493056968583b0193c1bb04d6f7684586f3726992d6c573261941a895dbd68\"\n \"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n \"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n \"checksum cloudflare 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59ad92e7809c9c30862f371bdb613d7aaac8a5372332e323ab3e1b978693665c\"\n \"checksum config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9107d78ed62b3fa5a86e7d18e647abed48cfd8f8fab6c72f4cdb982d196f7e6\"\n-\"checksum console 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ca57c2c14b8a2bf3105bc9d15574aad80babf6a9c44b1058034cdf8bd169628\"\n+\"checksum console 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5d540c2d34ac9dd0deb5f3b5f54c36c79efa78f6b3ad19106a554d07a7b5d9f\"\n \"checksum constant_time_eq 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"995a44c877f9212528ccc74b21a232f66ad69001e40ede5bcee2ac9ef2657120\"\n \"checksum cookie 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"888604f00b3db336d2af898ec3c1d5d0ddf5e6d462220f2ededc33a87ac4bbd5\"\n \"checksum cookie_store 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46750b3f362965f197996c4448e4a0935e791bf7d6631bfce9ee0af3d24c919c\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2858,10 +2870,10 @@ dependencies = [\n \"checksum num_cpus 1.11.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76dac5ed2a876980778b8b85f75a71b6cbf0db0b1232ee12f826bccb00d09d72\"\n \"checksum number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17b02fc0ff9a9e4b35b3342880f48e896ebf69f2967921fe8646bf5b7125956a\"\n \"checksum opaque-debug 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n-\"checksum openssl 0.10.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f372b2b53ce10fb823a337aaa674e3a7d072b957c6264d0f4ff0bd86e657449\"\n+\"checksum openssl 0.10.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a3cc5799d98e1088141b8e01ff760112bbd9f19d850c124500566ca6901a585\"\n \"checksum openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\n \"checksum openssl-src 111.6.0+1.1.1d (registry+https://github.com/rust-lang/crates.io-index)\" = \"b9c2da1de8a7a3f860919c01540b03a6db16de042405a8a07a5e9d0b4b825d9c\"\n-\"checksum openssl-sys 0.9.52 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c977d08e1312e2f7e4b86f9ebaa0ed3b19d1daff75fae88bbb88108afbd801fc\"\n+\"checksum openssl-sys 0.9.53 (registry+https://github.com/rust-lang/crates.io-index)\" = \"465d16ae7fc0e313318f7de5cecf57b2fbe7511fd213978b457e1c96ff46736f\"\n \"checksum parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f842b1982eb6c2fe34036a4fbfb06dd185a3f5c8edfaacdf7d1ea10b07de6252\"\n \"checksum parking_lot_core 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b876b1b9e7ac6e1a74a6da34d25c42e17e8862aa409cbbbdcfc8d86c6f3bc62b\"\n \"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -15,13 +15,13 @@ atty = \"0.2.11\"\n binary-install = \"0.0.3-alpha\"\n clap = \"2.32.0\"\n config = \"0.9.2\"\n-console = \"0.7.5\"\n+console = \"0.9.1\"\n dirs = \"1.0.5\"\n cloudflare = \"0.4.1\"\n env_logger = \"0.6.1\"\n failure = \"0.1.5\"\n log = \"0.4.6\"\n-openssl = { version = '0.10.11', optional = true }\n+openssl = \"0.10.26\"\n reqwest = \"0.9.18\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0.39\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -38,7 +38,6 @@ text_io = \"0.1.7\"\n exitfailure = \"0.5.1\"\n prettytable-rs = \"0.8.0\"\n notify = \"4.0.12\"\n-ws = \"0.9.0\"\n url = \"2.1.0\"\n percent-encoding = \"1.0.1\"\n http_old = {package = \"http\", version = \"0.1.1\"}\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -51,6 +50,12 @@ hyper = \"0.13.1\"\n hyper-tls = \"0.4.0\"\n chrono = \"0.4.9\"\n tokio = \"0.2.0\"\n+# chrome-devtools-rs = { path = \"../chrome-devtools-rs\" }\n+chrome-devtools-rs = { git = \"https://github.com/everlastingbugstopper/chrome-devtools-rs\", rev = \"b7a0e9f\" }\n+\n+[dependencies.ws]\n+version = \"0.9.0\"\n+features = [\"ssl\"]\n \n [dev-dependencies]\n assert_cmd = \"0.11.1\"\ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -1,8 +1,11 @@\n mod server_config;\n+mod socket;\n use server_config::ServerConfig;\n mod headers;\n use headers::{destructure_response, structure_request};\n \n+use std::thread;\n+\n use chrono::prelude::*;\n \n use hyper::client::{HttpConnector, ResponseFuture};\ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -10,10 +13,12 @@ use hyper::header::{HeaderName, HeaderValue};\n \n use hyper::http::uri::InvalidUri;\n use hyper::service::{make_service_fn, service_fn};\n-use hyper::{Body, Client, Request, Response, Server, Uri};\n+use hyper::{Body, Client as HyperClient, Request, Response, Server, Uri};\n \n use hyper_tls::HttpsConnector;\n \n+use tokio::runtime::{Runtime as TokioRuntime};\n+\n use uuid::Uuid;\n \n use crate::commands;\ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -26,7 +31,7 @@ use crate::terminal::emoji;\n \n const PREVIEW_HOST: &str = \"rawhttp.cloudflareworkers.com\";\n \n-pub async fn dev(\n+pub fn dev(\n     target: Target,\n     user: Option<GlobalUser>,\n     host: Option<&str>,\ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -35,14 +40,25 @@ pub async fn dev(\n ) -> Result<(), failure::Error> {\n     commands::build(&target)?;\n     let server_config = ServerConfig::new(host, ip, port)?;\n+    let session_id = get_session_id()?;\n+    let preview_id = get_preview_id(target, user, &server_config, &session_id)?;\n+\n+    // create a new thread to listen for devtools messages\n+    thread::spawn(move || socket::listen(session_id));\n+\n+    // spawn tokio runtime on the main thread to handle incoming HTTP requests\n+    let mut runtime = TokioRuntime::new()?;\n+    runtime.block_on(serve(server_config, preview_id))?;\n+\n+    Ok(())\n+}\n \n+async fn serve(server_config: ServerConfig, preview_id: String) -> Result<(), failure::Error> {\n     // set up https client to connect to the preview service\n     let https = HttpsConnector::new();\n-    let client = Client::builder().build::<_, Body>(https);\n+    let client = HyperClient::builder().build::<_, Body>(https);\n \n-    let preview_id = get_preview_id(target, user, &server_config)?;\n     let listening_address = server_config.listening_address.clone();\n-\n     // create a closure that hyper will use later to handle HTTP requests\n     let make_service = make_service_fn(move |_| {\n         let client = client.to_owned();\ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -87,7 +103,7 @@ fn get_path_as_str(uri: &Uri) -> String {\n \n fn preview_request(\n     req: Request<Body>,\n-    client: Client<HttpsConnector<HttpConnector>>,\n+    client: HyperClient<HttpsConnector<HttpConnector>>,\n     preview_id: String,\n     server_config: ServerConfig,\n ) -> ResponseFuture {\ndiff --git a/src/commands/dev/mod.rs b/src/commands/dev/mod.rs\n--- a/src/commands/dev/mod.rs\n+++ b/src/commands/dev/mod.rs\n@@ -125,19 +141,23 @@ fn preview_request(\n     client.request(req)\n }\n \n+fn get_session_id() -> Result<String, failure::Error> {\n+    Ok(Uuid::new_v4().to_simple().to_string())\n+}\n+\n fn get_preview_id(\n     mut target: Target,\n     user: Option<GlobalUser>,\n     server_config: &ServerConfig,\n+    session_id: &str,\n ) -> Result<String, failure::Error> {\n-    let session = Uuid::new_v4().to_simple();\n     let verbose = true;\n     let sites_preview = false;\n     let script_id: String = upload(&mut target, user.as_ref(), sites_preview, verbose)?;\n     Ok(format!(\n         \"{}{}{}{}\",\n         &script_id,\n-        session,\n+        session_id,\n         server_config.host.is_https() as u8,\n         server_config.host\n     ))\ndiff --git /dev/null b/src/commands/dev/socket/client.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/dev/socket/client.rs\n@@ -0,0 +1,85 @@\n+use chrome_devtools::events::DevtoolsEvent;\n+use console::style;\n+\n+use openssl::ssl::{SslConnector, SslMethod, SslStream, SslVerifyMode};\n+\n+use ws::util::TcpStream;\n+use ws::{Handler, Handshake, Message as WsMessage, Sender};\n+\n+use url::Url;\n+\n+pub struct WsClient {\n+    pub out: Sender,\n+}\n+\n+impl Handler for WsClient {\n+    fn on_open(&mut self, _: Handshake) -> ws::Result<()> {\n+        let enable_profiler = WsMessage::text(\n+            r#\"{\n+                \"id\": 1,\n+                \"method\": \"Profiler.enable\"\n+            }\"#,\n+        );\n+        let enable_runtime = WsMessage::text(\n+            r#\"{\n+                \"id\": 2,\n+                \"method\": \"Runtime.enable\"\n+            }\"#,\n+        );\n+        let enable_debugger = WsMessage::text(\n+            r#\"{\n+                \"id\": 3,\n+                \"method\": \"Debugger.enable\"\n+            }\"#,\n+        );\n+        self.out.send(enable_profiler)?;\n+        self.out.send(enable_runtime)?;\n+        self.out.send(enable_debugger)\n+    }\n+\n+    fn on_message(&mut self, msg: WsMessage) -> ws::Result<()> {\n+        let msg = msg.as_text()?;\n+        log::info!(\"{}\", msg);\n+        let msg: Result<DevtoolsEvent, serde_json::Error> = serde_json::from_str(msg);\n+        match msg {\n+            Ok(msg) => {\n+                match msg {\n+                    DevtoolsEvent::ConsoleAPICalled(event) => match event.log_type.as_str() {\n+                        \"log\" => println!(\"{}\", style(event).blue()),\n+                        \"error\" => eprintln!(\"{}\", style(event).red()),\n+                        _ => println!(\"unknown console event: {}\", event),\n+                    },\n+                    DevtoolsEvent::ExceptionThrown(event) => {\n+                        eprintln!(\"{}\", style(event).bold().red())\n+                    }\n+                }\n+                Ok(())\n+            }\n+            Err(e) => {\n+                // this event was not parsed as a DevtoolsEvent\n+                // TODO: change this to a warn after chrome-devtools-rs is parsing all messages\n+                log::info!(\"this event was not parsed as a DevtoolsEvent:\\n{}\", e);\n+                Ok(())\n+            }\n+        }\n+    }\n+\n+    fn upgrade_ssl_client(&mut self, sock: TcpStream, _: &Url) -> ws::Result<SslStream<TcpStream>> {\n+        let mut builder = SslConnector::builder(SslMethod::tls()).map_err(|e| {\n+            ws::Error::new(\n+                ws::ErrorKind::Internal,\n+                format!(\"Failed to upgrade client to SSL: {}\", e),\n+            )\n+        })?;\n+        builder.set_verify(SslVerifyMode::empty());\n+\n+        let connector = builder.build();\n+        connector\n+            .configure()\n+            .unwrap()\n+            .use_server_name_indication(false)\n+            .verify_hostname(false)\n+            .connect(\"\", sock)\n+            .map_err(From::from)\n+    }\n+}\ndiff --git /dev/null b/src/commands/dev/socket/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/dev/socket/mod.rs\n@@ -0,0 +1,9 @@\n+mod client;\n+\n+use client::WsClient;\n+\n+pub fn listen(session_id: String) -> Result<(), failure::Error> {\n+    let socket_url = format!(\"wss://rawhttp.cloudflareworkers.com/inspect/{}\", session_id);\n+    ws::connect(socket_url, |out| WsClient { out }).unwrap();\n+    Ok(())\n+}\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -12,8 +12,6 @@ use clap::{App, AppSettings, Arg, ArgGroup, SubCommand};\n use commands::HTTPMethod;\n use exitfailure::ExitFailure;\n \n-use tokio::runtime::Runtime;\n-\n use wrangler::commands;\n use wrangler::commands::kv::key::KVMetaData;\n use wrangler::installer;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -553,9 +551,7 @@ fn run() -> Result<(), failure::Error> {\n         let env = matches.value_of(\"env\");\n         let target = manifest.get_target(env)?;\n         let user = settings::global_user::GlobalUser::new().ok();\n-        Runtime::new()\n-            .unwrap()\n-            .block_on(commands::dev(target, user, host, port, ip))?;\n+        commands::dev::dev(target, user, host, port, ip)?;\n     } else if matches.subcommand_matches(\"whoami\").is_some() {\n         log::info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2919,10 +2931,10 @@ dependencies = [\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \"checksum serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9dad3f759919b92c3068c696c15c3d17238234498bbdcc80f2c469606f948ac8\"\n-\"checksum serde 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c4b39bd9b0b087684013a792c59e3e07a46a01d2322518d8a1104641a0b1be0\"\n+\"checksum serde 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1217f97ab8e8904b57dd22eb61cde455fa7446a9c1cf43966066da047c1f3702\"\n \"checksum serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b833c5ad67d52ced5f5938b2980f32a9c1c5ef047f0b4fb3127e7a423c76153\"\n-\"checksum serde_derive 1.0.102 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca13fc1a832f793322228923fbb3aba9f3f44444898f835d31ad1b74fa0a2bf8\"\n-\"checksum serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f72eb2a68a7dc3f9a691bfda9305a1c017a6215e5a4545c258500d2099a37c2\"\n+\"checksum serde_derive 1.0.103 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a8c6faef9a2e64b0064f48570289b4bf8823b7581f1d6157c1b52152306651d0\"\n+\"checksum serde_json 1.0.44 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48c575e0cc52bdd09b47f330f646cf59afc586e9c4e3ccd6fc1f625b8ea1dad7\"\n \"checksum serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35965fa1d2413717053d67c2df1f5c3e1763fbf77200ea7e767523707bd5a0af\"\n \"checksum serde_test 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"110b3dbdf8607ec493c22d5d947753282f3bae73c0f56d322af1e8c78e4c23d5\"\n \"checksum serde_urlencoded 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"642dd69105886af2efd227f75a520ec9b44a820d65bc133a9131f7d229fd165a\"\n",
        "problem_statement": "[dev] Continue implementing devtools protocol work\nThe preview service exposes a websocket according to [this protocol](https://chromedevtools.github.io/devtools-protocol/)\r\n\r\nA good start on this has been made in #923 and future work on implementing types for the protocol is tracked at https://github.com/everlastingbugstopper/chrome-devtools-rs\n",
        "hints_text": "Good idea! Be aware that we don't fully implement the Chrome Devtools protocol.\r\n\r\nI always wanted to make it fully standard to allow developers to use any debugger (aka preview :)) against the online preview or your proxy.",
        "created_at": "2019-12-03T19:29:00Z",
        "version": "1.6"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 883,
        "instance_id": "cloudflare__wrangler-legacy-883",
        "issue_numbers": [
            "845"
        ],
        "base_commit": "1a932463530fe7faa70b7fc6573cb9dbc9f7b0f0",
        "patch": "diff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -12,43 +12,51 @@ build = \"build.rs\"\n \n [dependencies]\n atty = \"0.2.11\"\n+base64 = \"0.10.1\"\n binary-install = \"0.0.3-alpha\"\n+chrome-devtools-rs = \"0.0.0-alpha.0\"\n+chrono = \"0.4.9\"\n clap = \"2.32.0\"\n+cloudflare = \"0.6.2\"\n config = \"0.9.2\"\n-console = \"0.7.5\"\n+console = \"0.9.1\"\n+data-encoding = \"2.1.2\"\n dirs = \"1.0.5\"\n-cloudflare = \"0.6.2\"\n env_logger = \"0.6.1\"\n+exitfailure = \"0.5.1\"\n failure = \"0.1.5\"\n+flate2 = \"1.0.7\"\n+fs2 = \"0.4.3\"\n+futures = \"0.3\"\n+futures-util = \"0.3\"\n+http = \"0.2.0\"\n+hyper = \"0.13.1\"\n+hyper-tls = \"0.4.0\"\n+ignore = \"0.4.10\"\n+indicatif = \"0.13.0\"\n+lazy_static = \"1.3.0\"\n log = \"0.4.6\"\n-openssl = { version = '0.10.11', optional = true }\n+notify = \"4.0.12\"\n+number_prefix = \"0.3.0\"\n+openssl = { version = '0.10.26', optional = true }\n+percent-encoding = \"1.0.1\"\n+prettytable-rs = \"0.8.0\"\n+rand = \"0.6.5\"\n+regex = \"1\"\n reqwest = { version = \"0.10.1\", features = [\"blocking\", \"json\"] }\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0.39\"\n+serde_with = \"1.3.1\"\n+sha2 = \"0.8.0\"\n+tempfile = \"3.1.0\"\n+text_io = \"0.1.7\"\n+tokio = { version = \"0.2\", default-features = false, features = [\"io-std\", \"time\"] }\n+tokio-tungstenite = { version = \"0.10.1\", features = [\"tls\"] }\n toml = \"0.5.5\"\n+url = \"2.1.0\"\n uuid = { version = \"0.8\", features = [\"v4\"] }\n which = \"2.0.1\"\n-rand = \"0.6.5\"\n-fs2 = \"0.4.3\"\n-number_prefix = \"0.3.0\"\n-flate2 = \"1.0.7\"\n-base64 = \"0.10.1\"\n-lazy_static = \"1.3.0\"\n-text_io = \"0.1.7\"\n-exitfailure = \"0.5.1\"\n-prettytable-rs = \"0.8.0\"\n-notify = \"4.0.12\"\n ws = \"0.9.0\"\n-url = \"2.1.0\"\n-percent-encoding = \"1.0.1\"\n-http = \"0.2.0\"\n-regex = \"1\"\n-sha2 = \"0.8.0\"\n-data-encoding = \"2.1.2\"\n-ignore = \"0.4.10\"\n-tempfile = \"3.1.0\"\n-indicatif = \"0.13.0\"\n-serde_with = \"1.3.1\"\n \n [dev-dependencies]\n assert_cmd = \"0.11.1\"\ndiff --git /dev/null b/src/commands/dev/headers.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/dev/headers.rs\n@@ -0,0 +1,58 @@\n+const HEADER_PREFIX: &str = \"cf-ew-raw-\";\n+\n+use std::str::FromStr;\n+\n+use hyper::header::{HeaderMap, HeaderName};\n+use hyper::http::request::Parts as RequestParts;\n+use hyper::http::response::Parts as ResponseParts;\n+use hyper::http::status::StatusCode;\n+\n+pub fn structure_request(parts: &mut RequestParts) {\n+    prepend_request_headers_prefix(parts)\n+}\n+\n+pub fn destructure_response(parts: &mut ResponseParts) -> Result<(), failure::Error> {\n+    set_response_status(parts)?;\n+    strip_response_headers_prefix(parts)\n+}\n+\n+fn prepend_request_headers_prefix(parts: &mut RequestParts) {\n+    let mut headers: HeaderMap = HeaderMap::new();\n+\n+    for header in &parts.headers {\n+        let (name, value) = header;\n+        let forward_header = format!(\"{}{}\", HEADER_PREFIX, name);\n+        let header_name = HeaderName::from_bytes(forward_header.as_bytes())\n+            .unwrap_or_else(|_| panic!(\"Could not create header name for {}\", name));\n+        headers.insert(header_name, value.clone());\n+    }\n+    parts.headers = headers;\n+}\n+\n+fn strip_response_headers_prefix(parts: &mut ResponseParts) -> Result<(), failure::Error> {\n+    let mut headers = HeaderMap::new();\n+\n+    for header in &parts.headers {\n+        let (name, value) = header;\n+        let name = name.as_str();\n+        if name.starts_with(HEADER_PREFIX) {\n+            let header_name = &name[HEADER_PREFIX.len()..];\n+            let header_name = HeaderName::from_bytes(header_name.as_bytes())?;\n+            headers.insert(header_name, value.clone());\n+        }\n+    }\n+    parts.headers = headers;\n+    Ok(())\n+}\n+\n+fn set_response_status(parts: &mut ResponseParts) -> Result<(), failure::Error> {\n+    let status = parts\n+        .headers\n+        .get(\"cf-ew-status\")\n+        .expect(\"Could not determine status code of response\");\n+    // status will be \"404 not found\" or \"200 ok\"\n+    // we need to split that string to create hyper's status code\n+    let status_vec: Vec<&str> = status.to_str()?.split(' ').collect();\n+    parts.status = StatusCode::from_str(status_vec[0])?;\n+    Ok(())\n+}\ndiff --git /dev/null b/src/commands/dev/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/dev/mod.rs\n@@ -0,0 +1,198 @@\n+mod server_config;\n+mod socket;\n+use server_config::ServerConfig;\n+mod headers;\n+use headers::{destructure_response, structure_request};\n+mod watch;\n+use watch::watch_for_changes;\n+\n+use std::sync::{Arc, Mutex};\n+use std::thread;\n+\n+use chrono::prelude::*;\n+\n+use hyper::client::{HttpConnector, ResponseFuture};\n+use hyper::header::{HeaderName, HeaderValue};\n+\n+use hyper::http::uri::InvalidUri;\n+use hyper::service::{make_service_fn, service_fn};\n+use hyper::{Body, Client as HyperClient, Request, Response, Server, Uri};\n+\n+use hyper_tls::HttpsConnector;\n+\n+use tokio::runtime::Runtime as TokioRuntime;\n+\n+use uuid::Uuid;\n+\n+use crate::commands;\n+use crate::commands::preview::upload;\n+\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::toml::Target;\n+\n+use crate::terminal::emoji;\n+\n+const PREVIEW_HOST: &str = \"rawhttp.cloudflareworkers.com\";\n+\n+pub fn dev(\n+    target: Target,\n+    user: Option<GlobalUser>,\n+    host: Option<&str>,\n+    port: Option<&str>,\n+    ip: Option<&str>,\n+    verbose: bool,\n+) -> Result<(), failure::Error> {\n+    commands::build(&target)?;\n+    let server_config = ServerConfig::new(host, ip, port)?;\n+    let session_id = get_session_id()?;\n+    let preview_id = get_preview_id(\n+        target.clone(),\n+        user.clone(),\n+        &server_config,\n+        &session_id.clone(),\n+        verbose,\n+    )?;\n+    let preview_id = Arc::new(Mutex::new(preview_id));\n+\n+    {\n+        let session_id = session_id.clone();\n+        let preview_id = preview_id.clone();\n+        let server_config = server_config.clone();\n+        thread::spawn(move || {\n+            watch_for_changes(\n+                target,\n+                user,\n+                &server_config,\n+                Arc::clone(&preview_id),\n+                &session_id,\n+                verbose,\n+            )\n+        });\n+    }\n+\n+    let mut runtime = TokioRuntime::new()?;\n+\n+    let devtools_listener = socket::listen(&session_id);\n+    let server = serve(server_config, Arc::clone(&preview_id));\n+\n+    let runners = futures::future::join(devtools_listener, server);\n+\n+    runtime.block_on(async {\n+        let (devtools_listener, server) = runners.await;\n+        devtools_listener?;\n+        server\n+    })\n+}\n+\n+async fn serve(\n+    server_config: ServerConfig,\n+    preview_id: Arc<Mutex<String>>,\n+) -> Result<(), failure::Error> {\n+    // set up https client to connect to the preview service\n+    let https = HttpsConnector::new();\n+    let client = HyperClient::builder().build::<_, Body>(https);\n+\n+    let listening_address = server_config.listening_address.clone();\n+    // create a closure that hyper will use later to handle HTTP requests\n+    let make_service = make_service_fn(move |_| {\n+        let client = client.to_owned();\n+        let preview_id = preview_id.lock().unwrap().to_owned();\n+        let server_config = server_config.to_owned();\n+        async move {\n+            Ok::<_, failure::Error>(service_fn(move |req| {\n+                let client = client.to_owned();\n+                let preview_id = preview_id.to_owned();\n+                let server_config = server_config.to_owned();\n+                async move {\n+                    let resp =\n+                        preview_request(req, client, preview_id.to_owned(), server_config).await?;\n+                    let (mut parts, body) = resp.into_parts();\n+\n+                    destructure_response(&mut parts)?;\n+                    let resp = Response::from_parts(parts, body);\n+                    Ok::<_, failure::Error>(resp)\n+                }\n+            }))\n+        }\n+    });\n+\n+    let server = Server::bind(&listening_address.address).serve(make_service);\n+    println!(\"{} Listening on http://{}\", emoji::EAR, listening_address);\n+    if let Err(e) = server.await {\n+        eprintln!(\"server error: {}\", e);\n+    }\n+    Ok(())\n+}\n+\n+fn get_preview_url(path_string: &str) -> Result<Uri, InvalidUri> {\n+    format!(\"https://{}{}\", PREVIEW_HOST, path_string).parse()\n+}\n+\n+fn get_path_as_str(uri: &Uri) -> String {\n+    uri.path_and_query()\n+        .map(|x| x.as_str())\n+        .unwrap_or(\"\")\n+        .to_string()\n+}\n+\n+fn preview_request(\n+    req: Request<Body>,\n+    client: HyperClient<HttpsConnector<HttpConnector>>,\n+    preview_id: String,\n+    server_config: ServerConfig,\n+) -> ResponseFuture {\n+    let (mut parts, body) = req.into_parts();\n+\n+    let path = get_path_as_str(&parts.uri);\n+    let method = parts.method.to_string();\n+    let now: DateTime<Local> = Local::now();\n+    let preview_id = &preview_id;\n+\n+    structure_request(&mut parts);\n+\n+    parts.headers.insert(\n+        HeaderName::from_static(\"host\"),\n+        HeaderValue::from_static(PREVIEW_HOST),\n+    );\n+\n+    parts.headers.insert(\n+        HeaderName::from_static(\"cf-ew-preview\"),\n+        HeaderValue::from_str(preview_id).expect(\"Could not create header for preview id\"),\n+    );\n+\n+    parts.uri = get_preview_url(&path).expect(\"Could not get preview url\");\n+\n+    let req = Request::from_parts(parts, body);\n+\n+    println!(\n+        \"[{}] \\\"{} {}{} {:?}\\\"\",\n+        now.format(\"%Y-%m-%d %H:%M:%S\"),\n+        method,\n+        server_config.host,\n+        path,\n+        req.version()\n+    );\n+    client.request(req)\n+}\n+\n+fn get_session_id() -> Result<String, failure::Error> {\n+    Ok(Uuid::new_v4().to_simple().to_string())\n+}\n+\n+pub fn get_preview_id(\n+    mut target: Target,\n+    user: Option<GlobalUser>,\n+    server_config: &ServerConfig,\n+    session_id: &str,\n+    verbose: bool,\n+) -> Result<String, failure::Error> {\n+    let sites_preview = false;\n+    let script_id = upload(&mut target, user.as_ref(), sites_preview, verbose)?;\n+    Ok(format!(\n+        \"{}{}{}{}\",\n+        &script_id,\n+        session_id,\n+        server_config.host.is_https() as u8,\n+        server_config.host\n+    ))\n+}\ndiff --git /dev/null b/src/commands/dev/server_config/host.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/dev/server_config/host.rs\n@@ -0,0 +1,51 @@\n+use std::fmt;\n+\n+use failure::format_err;\n+use url::Url;\n+\n+#[derive(Clone)]\n+pub struct Host {\n+    url: Url,\n+}\n+\n+impl Host {\n+    pub fn new(host: &str) -> Result<Self, failure::Error> {\n+        // try to create a url from host\n+        let url = match Url::parse(&host) {\n+            Ok(host) => Ok(host),\n+            // if it doesn't work, it might be because there was no scheme\n+            // default to https\n+            Err(_) => Url::parse(&format!(\"https://{}\", host)),\n+        }?;\n+\n+        // validate scheme\n+        let scheme = url.scheme();\n+        if scheme != \"http\" && scheme != \"https\" {\n+            failure::bail!(\"Your host scheme must be either http or https\")\n+        }\n+\n+        // validate host\n+        let host = url.host_str().ok_or_else(|| format_err!(\"Invalid host, accepted formats are example.com, http://example.com, or https://example.com\"))?;\n+\n+        // recreate url without any trailing path\n+        let url = Url::parse(&format!(\"{}://{}\", scheme, host))?;\n+        Ok(Host { url })\n+    }\n+\n+    pub fn is_https(&self) -> bool {\n+        self.url.scheme() == \"https\"\n+    }\n+}\n+\n+impl fmt::Display for Host {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(\n+            f,\n+            \"{}\",\n+            self.url\n+                .host_str()\n+                .expect(\"could not parse host\")\n+                .to_string()\n+        )\n+    }\n+}\ndiff --git /dev/null b/src/commands/dev/server_config/listening_address.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/dev/server_config/listening_address.rs\n@@ -0,0 +1,30 @@\n+use std::fmt;\n+use std::net::{SocketAddr, ToSocketAddrs};\n+\n+use failure::format_err;\n+\n+#[derive(Clone)]\n+pub struct ListeningAddress {\n+    pub address: SocketAddr,\n+}\n+\n+impl ListeningAddress {\n+    pub fn new(ip: &str, port: &str) -> Result<Self, failure::Error> {\n+        let address = format!(\"{}:{}\", ip, port);\n+        let mut address_iter = address.to_socket_addrs()?;\n+        let address = address_iter\n+            .next()\n+            .ok_or_else(|| format_err!(\"Could not parse address {}\", address))?;\n+        Ok(ListeningAddress { address })\n+    }\n+\n+    fn as_str(&self) -> String {\n+        self.address.to_string().replace(\"[::1]\", \"localhost\")\n+    }\n+}\n+\n+impl fmt::Display for ListeningAddress {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}\", self.as_str())\n+    }\n+}\ndiff --git /dev/null b/src/commands/dev/server_config/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/dev/server_config/mod.rs\n@@ -0,0 +1,31 @@\n+mod host;\n+mod listening_address;\n+\n+use host::Host;\n+use listening_address::ListeningAddress;\n+\n+#[derive(Clone)]\n+pub struct ServerConfig {\n+    pub host: Host,\n+    pub listening_address: ListeningAddress,\n+}\n+\n+impl ServerConfig {\n+    pub fn new(\n+        host: Option<&str>,\n+        ip: Option<&str>,\n+        port: Option<&str>,\n+    ) -> Result<Self, failure::Error> {\n+        let port = port.unwrap_or(\"8787\");\n+        let ip = ip.unwrap_or(\"localhost\");\n+        let host = host.unwrap_or(\"https://example.com\").to_string();\n+\n+        let listening_address = ListeningAddress::new(ip, port)?;\n+        let host = Host::new(&host)?;\n+\n+        Ok(ServerConfig {\n+            host,\n+            listening_address,\n+        })\n+    }\n+}\ndiff --git /dev/null b/src/commands/dev/socket.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/dev/socket.rs\n@@ -0,0 +1,67 @@\n+use std::time::Duration;\n+\n+use chrome_devtools as protocol;\n+\n+use futures::{future, pin_mut, StreamExt};\n+use futures_util::sink::SinkExt;\n+\n+use tokio::time;\n+use tokio_tungstenite::{connect_async, tungstenite::protocol::Message};\n+\n+use url::Url;\n+\n+const KEEP_ALIVE_INTERVAL: u64 = 10;\n+\n+pub async fn listen(session_id: &str) -> Result<(), failure::Error> {\n+    let socket_url = format!(\"wss://rawhttp.cloudflareworkers.com/inspect/{}\", session_id);\n+    let socket_url = Url::parse(&socket_url)?;\n+\n+    let (ws_stream, _) = connect_async(socket_url)\n+        .await\n+        .expect(\"Failed to connect to devtools instance\");\n+\n+    let (mut write, read) = ws_stream.split();\n+\n+    let enable_runtime = protocol::runtime::SendMethod::Enable(1.into());\n+    let enable_runtime = serde_json::to_string(&enable_runtime)?;\n+    let enable_runtime = Message::Text(enable_runtime);\n+    write.send(enable_runtime).await?;\n+\n+    let (keep_alive_tx, keep_alive_rx) = futures::channel::mpsc::unbounded();\n+    tokio::spawn(keep_alive(keep_alive_tx));\n+    let keep_alive_to_ws = keep_alive_rx.map(Ok).forward(write);\n+\n+    let print_ws_messages = {\n+        read.for_each(|message| async {\n+            let message = message.unwrap().into_text().unwrap();\n+            log::info!(\"{}\", message);\n+            let message: Result<protocol::Runtime, failure::Error> = serde_json::from_str(&message)\n+                .map_err(|e| failure::format_err!(\"this event could not be parsed:\\n{}\", e));\n+            if let Ok(protocol::Runtime::Event(event)) = message {\n+                println!(\"{}\", event);\n+            }\n+        })\n+    };\n+    pin_mut!(keep_alive_to_ws, print_ws_messages);\n+    future::select(keep_alive_to_ws, print_ws_messages).await;\n+    Ok(())\n+}\n+\n+async fn keep_alive(tx: futures::channel::mpsc::UnboundedSender<Message>) -> ! {\n+    let duration = Duration::from_millis(1000 * KEEP_ALIVE_INTERVAL);\n+    let mut interval = time::interval(duration);\n+\n+    // this is set to 2 because we have already sent an id of 1 to enable the runtime\n+    // eventually this logic should be moved to the chrome-devtools-rs library\n+    let mut id = 2;\n+\n+    loop {\n+        interval.tick().await;\n+        let keep_alive_message = protocol::runtime::SendMethod::GetIsolateId(id.into());\n+        let keep_alive_message = serde_json::to_string(&keep_alive_message)\n+            .expect(\"Could not convert keep alive message to JSON\");\n+        let keep_alive_message = Message::Text(keep_alive_message);\n+        tx.unbounded_send(keep_alive_message).unwrap();\n+        id += 1;\n+    }\n+}\ndiff --git /dev/null b/src/commands/dev/watch.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/dev/watch.rs\n@@ -0,0 +1,31 @@\n+use std::sync::{mpsc, Arc, Mutex};\n+\n+use crate::commands;\n+use crate::commands::dev::get_preview_id;\n+use crate::commands::dev::server_config::ServerConfig;\n+\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::toml::Target;\n+\n+pub fn watch_for_changes(\n+    target: Target,\n+    user: Option<GlobalUser>,\n+    server_config: &ServerConfig,\n+    preview_id: Arc<Mutex<String>>,\n+    session_id: &str,\n+    verbose: bool,\n+) -> Result<(), failure::Error> {\n+    let (sender, receiver) = mpsc::channel();\n+    commands::watch_and_build(&target, Some(sender))?;\n+\n+    while let Ok(_) = receiver.recv() {\n+        let user = user.clone();\n+        let target = target.clone();\n+        commands::build(&target)?;\n+\n+        let mut preview_id = preview_id.lock().unwrap();\n+        *preview_id = get_preview_id(target, user, server_config, session_id, verbose)?;\n+    }\n+\n+    Ok(())\n+}\ndiff --git a/src/commands/mod.rs b/src/commands/mod.rs\n--- a/src/commands/mod.rs\n+++ b/src/commands/mod.rs\n@@ -2,6 +2,7 @@ use std::process::Command;\n \n pub mod build;\n pub mod config;\n+pub mod dev;\n pub mod generate;\n pub mod init;\n pub mod kv;\ndiff --git a/src/commands/mod.rs b/src/commands/mod.rs\n--- a/src/commands/mod.rs\n+++ b/src/commands/mod.rs\n@@ -14,6 +15,7 @@ pub mod whoami;\n pub use self::config::global_config;\n pub use build::build;\n pub use build::watch_and_build;\n+pub use dev::dev;\n pub use generate::generate;\n pub use init::init;\n pub use preview::{preview, HTTPMethod};\ndiff --git a/src/commands/preview/mod.rs b/src/commands/preview/mod.rs\n--- a/src/commands/preview/mod.rs\n+++ b/src/commands/preview/mod.rs\n@@ -7,7 +7,7 @@ mod http_method;\n pub use http_method::HTTPMethod;\n \n mod upload;\n-use upload::upload;\n+pub use upload::upload;\n \n use crate::commands;\n \ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -2,6 +2,7 @@\n \n #[macro_use]\n extern crate text_io;\n+extern crate tokio;\n \n use std::env;\n use std::path::Path;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -537,6 +579,17 @@ fn run() -> Result<(), failure::Error> {\n         let headless = matches.is_present(\"headless\");\n \n         commands::preview(target, user, method, body, watch, verbose, headless)?;\n+    } else if let Some(matches) = matches.subcommand_matches(\"dev\") {\n+        log::info!(\"Starting dev server\");\n+        let port = matches.value_of(\"port\");\n+        let host = matches.value_of(\"host\");\n+        let ip = matches.value_of(\"ip\");\n+        let manifest = settings::toml::Manifest::new(config_path)?;\n+        let env = matches.value_of(\"env\");\n+        let target = manifest.get_target(env)?;\n+        let user = settings::global_user::GlobalUser::new().ok();\n+        let verbose = matches.is_present(\"verbose\");\n+        commands::dev::dev(target, user, host, port, ip, verbose)?;\n     } else if matches.subcommand_matches(\"whoami\").is_some() {\n         log::info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\ndiff --git a/src/terminal/emoji.rs b/src/terminal/emoji.rs\n--- a/src/terminal/emoji.rs\n+++ b/src/terminal/emoji.rs\n@@ -15,7 +15,9 @@ use console::Emoji;\n \n pub static BICEP: Emoji = Emoji(\"\ud83d\udcaa \", \"\");\n pub static CRAB: Emoji = Emoji(\"\ud83e\udd80 \", \"\");\n+pub static COMPUTER: Emoji = Emoji(\"\ud83d\udcbb \", \"\");\n pub static DANCERS: Emoji = Emoji(\"\ud83d\udc6f \", \"\");\n+pub static EAR: Emoji = Emoji(\"\ud83d\udc42 \", \"\");\n pub static EYES: Emoji = Emoji(\"\ud83d\udc40 \", \"\");\n pub static FILES: Emoji = Emoji(\"\ud83d\uddc2\ufe0f \", \"\");\n pub static INBOX: Emoji = Emoji(\"\ud83d\udce5 \", \"\");\n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -4,2755 +4,2840 @@\n name = \"adler32\"\n version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5d2e7343e7fc9de883d1b0341e0b13970f764c14101234857d2ddafa1cb1cac2\"\n \n [[package]]\n name = \"aho-corasick\"\n version = \"0.7.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"743ad5a418686aad3b87fd14c43badd828cf26e214a00f92a384291cf22e1811\"\n dependencies = [\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr\",\n ]\n \n [[package]]\n name = \"ansi_term\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n dependencies = [\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"anyhow\"\n version = \"1.0.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7825f6833612eb2414095684fcf6c635becf3ce97fe48cf6421321e93bfbd53c\"\n \n [[package]]\n name = \"arc-swap\"\n version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d7b8a9123b8027467bce0099fe556c628a53c8d83df0507084c31e9ba2e39aff\"\n \n [[package]]\n name = \"arrayref\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a4c527152e37cf757a3f78aae5a06fbeefdb07ccc535c980a3208ee3060dd544\"\n \n [[package]]\n name = \"arrayvec\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cff77d8686867eceff3105329d4698d96c2391c176d5d03adc90c7389162b5b8\"\n \n [[package]]\n name = \"assert_cmd\"\n version = \"0.11.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2dc477793bd82ec39799b6f6b3df64938532fdf2ab0d49ef817eac65856a5a1e\"\n dependencies = [\n- \"escargot 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"predicates 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"predicates-core 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"predicates-tree 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"escargot\",\n+ \"predicates\",\n+ \"predicates-core\",\n+ \"predicates-tree\",\n ]\n \n [[package]]\n name = \"async-trait\"\n version = \"0.1.24\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"750b1c38a1dfadd108da0f01c08f4cdc7ff1bb39b325f9c82cc972361780a6e1\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n name = \"atty\"\n version = \"0.2.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\n dependencies = [\n- \"hermit-abi 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hermit-abi\",\n+ \"libc\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"autocfg\"\n version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\"\n \n [[package]]\n name = \"autocfg\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d\"\n \n [[package]]\n name = \"backtrace\"\n version = \"0.3.43\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7f80256bc78f67e7df7e36d77366f636ed976895d91fe2ab9efa3973e8fe8c4f\"\n dependencies = [\n- \"backtrace-sys 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace-sys\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"rustc-demangle\",\n ]\n \n [[package]]\n name = \"backtrace-sys\"\n version = \"0.1.32\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5d6575f128516de27e3ce99689419835fce9643a9b215a14d2b5b685be018491\"\n dependencies = [\n- \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"base64\"\n version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e\"\n dependencies = [\n- \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder\",\n ]\n \n [[package]]\n name = \"base64\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b41b7ea54a0c9d92199de89e20e58d49f02f8e699814ef3fdf266f6f748d15c7\"\n \n [[package]]\n name = \"binary-install\"\n version = \"0.0.3-alpha\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a81dda17f2dbba8271cf61f2ea3e48e3da8aef31665731bce48818cc07863f06\"\n dependencies = [\n- \"curl 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"is_executable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tar 0.4.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"zip 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl\",\n+ \"dirs 1.0.5\",\n+ \"failure\",\n+ \"flate2\",\n+ \"fs2\",\n+ \"hex\",\n+ \"is_executable\",\n+ \"siphasher\",\n+ \"tar\",\n+ \"zip\",\n ]\n \n [[package]]\n name = \"bitflags\"\n version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n \n [[package]]\n name = \"blake2b_simd\"\n version = \"0.5.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d8fb2d74254a3a0b5cac33ac9f8ed0e44aa50378d9dbb2e5d83bd21ed1dc2c8a\"\n dependencies = [\n- \"arrayref 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"arrayvec 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"constant_time_eq 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"arrayref\",\n+ \"arrayvec\",\n+ \"constant_time_eq\",\n ]\n \n [[package]]\n name = \"block-buffer\"\n version = \"0.7.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b\"\n dependencies = [\n- \"block-padding 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"generic-array 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"block-padding\",\n+ \"byte-tools\",\n+ \"byteorder\",\n+ \"generic-array\",\n ]\n \n [[package]]\n name = \"block-padding\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5\"\n dependencies = [\n- \"byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byte-tools\",\n ]\n \n [[package]]\n name = \"bstr\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"502ae1441a0a5adb8fbd38a5955a6416b9493e92b465de5e4a9bde6a539c2c48\"\n dependencies = [\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex-automata 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0\",\n+ \"memchr\",\n+ \"regex-automata\",\n+ \"serde 1.0.104\",\n ]\n \n [[package]]\n name = \"bumpalo\"\n version = \"3.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5fb8038c1ddc0a5f73787b130f4cc75151e96ed33e417fde765eb5a81e3532f4\"\n \n [[package]]\n name = \"byte-tools\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7\"\n \n [[package]]\n name = \"byteorder\"\n version = \"1.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a7c3dd8985a7111efc5c80b44e23ecdd8c007de8ade3b96595387e812b957cf5\"\n \n [[package]]\n name = \"bytes\"\n version = \"0.4.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"206fdffcfa2df7cbe15601ef46c813fce0965eb3286db6b56c583b814b51c81c\"\n dependencies = [\n- \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder\",\n+ \"iovec\",\n ]\n \n [[package]]\n name = \"bytes\"\n version = \"0.5.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"130aac562c0dd69c56b3b1cc8ffd2e17be31d0b6c25b61c96b76231aa23e39e1\"\n \n [[package]]\n name = \"bzip2\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"42b7c3cbf0fa9c1b82308d57191728ca0256cb821220f4e2fd410a72ade26e3b\"\n dependencies = [\n- \"bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bzip2-sys\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"bzip2-sys\"\n version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6584aa36f5ad4c9247f5323b0a42f37802b37a836f0ad87084d7a33961abe25f\"\n dependencies = [\n- \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"c2-chacha\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"214238caa1bf3a496ec3392968969cab8549f96ff30652c9e56885329315f6bb\"\n dependencies = [\n- \"ppv-lite86 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ppv-lite86\",\n ]\n \n [[package]]\n name = \"cc\"\n version = \"1.0.50\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"95e28fa049fda1c330bcf9d723be7663a899c4679724b34c81e9f5a326aab8cd\"\n \n [[package]]\n name = \"cfg-if\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n+\n+[[package]]\n+name = \"chrome-devtools-rs\"\n+version = \"0.0.0-alpha.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"dee9b8a1ad6b2382a01aad9f17b381544b2396173abac19c38ac7e8f0087d752\"\n+dependencies = [\n+ \"console\",\n+ \"log 0.4.8\",\n+ \"serde 1.0.104\",\n+ \"serde_json\",\n+]\n \n [[package]]\n name = \"chrono\"\n version = \"0.4.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"31850b4a4d6bae316f7a09e691c944c28299298837edc0a03f755618c23cbc01\"\n dependencies = [\n- \"num-integer 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-integer\",\n+ \"num-traits 0.2.11\",\n+ \"serde 1.0.104\",\n+ \"time\",\n ]\n \n [[package]]\n name = \"clap\"\n version = \"2.33.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n dependencies = [\n- \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ansi_term\",\n+ \"atty\",\n+ \"bitflags\",\n+ \"strsim\",\n+ \"textwrap\",\n+ \"unicode-width\",\n+ \"vec_map\",\n ]\n \n [[package]]\n name = \"clicolors-control\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n dependencies = [\n- \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty\",\n+ \"lazy_static 1.4.0\",\n+ \"libc\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"cloudabi\"\n version = \"0.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n dependencies = [\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags\",\n ]\n \n [[package]]\n name = \"cloudflare\"\n version = \"0.6.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b9ce184e2405391f7a967dbeb192a6ab103eba6bb919eab00331b0e18ed92c0a\"\n dependencies = [\n- \"async-trait 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"reqwest 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_with 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-term 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"sloggers 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"async-trait\",\n+ \"chrono\",\n+ \"failure\",\n+ \"http\",\n+ \"percent-encoding 1.0.1\",\n+ \"reqwest\",\n+ \"serde 1.0.104\",\n+ \"serde_json\",\n+ \"serde_qs\",\n+ \"serde_with\",\n+ \"slog\",\n+ \"slog-term\",\n+ \"sloggers\",\n+ \"url\",\n ]\n \n [[package]]\n name = \"config\"\n version = \"0.9.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f9107d78ed62b3fa5a86e7d18e647abed48cfd8f8fab6c72f4cdb982d196f7e6\"\n dependencies = [\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rust-ini 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"console\"\n-version = \"0.7.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0\",\n+ \"nom\",\n+ \"rust-ini\",\n+ \"serde 1.0.104\",\n+ \"serde-hjson\",\n+ \"serde_json\",\n+ \"toml 0.4.10\",\n+ \"yaml-rust\",\n ]\n \n [[package]]\n name = \"console\"\n version = \"0.9.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"45e0f3986890b3acbc782009e2629dfe2baa430ac091519ce3be26164a2ae6c0\"\n dependencies = [\n- \"clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clicolors-control\",\n+ \"encode_unicode\",\n+ \"lazy_static 1.4.0\",\n+ \"libc\",\n+ \"regex\",\n+ \"termios\",\n+ \"unicode-width\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"constant_time_eq\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"245097e9a4535ee1e3e3931fcfcd55a796a44c643e8596ff6566d68f09b87bbc\"\n \n [[package]]\n name = \"core-foundation\"\n version = \"0.6.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"25b9e03f145fd4f2bf705e07b900cd41fc636598fe5dc452fd0db1441c3f496d\"\n dependencies = [\n- \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core-foundation-sys\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"core-foundation-sys\"\n version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b\"\n \n [[package]]\n name = \"crc32fast\"\n version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n ]\n \n [[package]]\n name = \"crossbeam\"\n version = \"0.2.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bd66663db5a988098a89599d4857919b3acf7f61402e61365acfd3919857b9be\"\n \n [[package]]\n name = \"crossbeam-channel\"\n version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c8ec7fcd21571dc78f96cc96243cab8d8f035247c3efd16c687be154c3fa9efa\"\n dependencies = [\n- \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-utils 0.6.6\",\n ]\n \n [[package]]\n name = \"crossbeam-channel\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"acec9a3b0b3559f15aee4f90746c4e5e293b701c0f7d3925d24e01645267b68c\"\n dependencies = [\n- \"crossbeam-utils 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-utils 0.7.0\",\n ]\n \n [[package]]\n name = \"crossbeam-utils\"\n version = \"0.6.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"04973fa96e96579258a5091af6003abde64af786b860f18622b82e026cca60e6\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"lazy_static 1.4.0\",\n ]\n \n [[package]]\n name = \"crossbeam-utils\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ce446db02cdc3165b94ae73111e570793400d0794e46125cc4056c81cbb039f4\"\n dependencies = [\n- \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.7\",\n+ \"cfg-if\",\n+ \"lazy_static 1.4.0\",\n ]\n \n [[package]]\n name = \"csv\"\n version = \"1.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"00affe7f6ab566df61b4be3ce8cf16bc2576bca0963ceb0955e45d514bf9a279\"\n dependencies = [\n- \"bstr 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"csv-core 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ryu 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bstr\",\n+ \"csv-core\",\n+ \"itoa\",\n+ \"ryu\",\n+ \"serde 1.0.104\",\n ]\n \n [[package]]\n name = \"csv-core\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9b5cadb6b25c77aeff80ba701712494213f4a8418fcda2ee11b6560c3ad0bf4c\"\n dependencies = [\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr\",\n ]\n \n [[package]]\n name = \"curl\"\n version = \"0.4.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"06aa71e9208a54def20792d877bc663d6aae0732b9852e612c4a933177c31283\"\n dependencies = [\n- \"curl-sys 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"schannel 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"socket2 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl-sys\",\n+ \"libc\",\n+ \"openssl-probe\",\n+ \"openssl-sys\",\n+ \"schannel\",\n+ \"socket2\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"curl-sys\"\n version = \"0.4.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0c38ca47d60b86d0cc9d42caa90a0885669c2abc9791f871c81f58cdf39e979b\"\n dependencies = [\n- \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"vcpkg 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc\",\n+ \"libc\",\n+ \"libz-sys\",\n+ \"openssl-sys\",\n+ \"pkg-config\",\n+ \"vcpkg\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"data-encoding\"\n version = \"2.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f4f47ca1860a761136924ddd2422ba77b2ea54fe8cc75b9040804a0d9d32ad97\"\n \n [[package]]\n name = \"difference\"\n version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \n [[package]]\n name = \"digest\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\n dependencies = [\n- \"generic-array 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"generic-array\",\n ]\n \n [[package]]\n name = \"dirs\"\n version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_users 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n+ \"redox_users\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"dirs\"\n version = \"2.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"13aea89a5c93364a98e9b37b2fa237effbb694d5cfe01c5b70941f7eb087d5e3\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"dirs-sys 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"dirs-sys\",\n ]\n \n [[package]]\n name = \"dirs-sys\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"afa0b23de8fd801745c471deffa6e12d248f962c9fd4b4c33787b055599bde7b\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_users 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"redox_users\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"dtoa\"\n version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4358a9e11b9a09cf52383b451b49a169e8d797b68aa02301ff586d70d9661ea3\"\n \n [[package]]\n name = \"encode_unicode\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n \n [[package]]\n name = \"encoding_rs\"\n version = \"0.8.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cd8d03faa7fe0c1431609dfad7bbe827af30f82e1e2ae6f7ee4fca6bd764bc28\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n ]\n \n [[package]]\n name = \"env_logger\"\n version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\n dependencies = [\n- \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"humantime 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termcolor 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty\",\n+ \"humantime\",\n+ \"log 0.4.8\",\n+ \"regex\",\n+ \"termcolor\",\n ]\n \n [[package]]\n name = \"error-chain\"\n version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3ab49e9dcb602294bc42f9a7dfc9bc6e936fca4418ea300dbfb84fe16de0b7d9\"\n dependencies = [\n- \"backtrace 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace\",\n+ \"version_check 0.1.5\",\n ]\n \n [[package]]\n name = \"escargot\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ceb9adbf9874d5d028b5e4c5739d22b71988252b25c9c98fe7cf9738bee84597\"\n dependencies = [\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0\",\n+ \"log 0.4.8\",\n+ \"serde 1.0.104\",\n+ \"serde_json\",\n ]\n \n [[package]]\n name = \"exitfailure\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2ff5bd832af37f366c6c194d813a11cd90ac484f124f079294f28e357ae40515\"\n dependencies = [\n- \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure\",\n ]\n \n [[package]]\n name = \"failure\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f8273f13c977665c5db7eb2b99ae520952fe5ac831ae4cd09d80c4c7042b5ed9\"\n dependencies = [\n- \"backtrace 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure_derive 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace\",\n+ \"failure_derive\",\n ]\n \n [[package]]\n name = \"failure_derive\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0bc225b78e0391e4b8683440bf2e63c2deeeb2ce5189eab46e2b68c6d3725d08\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"synstructure 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"synstructure\",\n ]\n \n [[package]]\n name = \"fake-simd\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n \n [[package]]\n name = \"filetime\"\n version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1ff6d4dab0aa0c8e6346d46052e93b13a16cf847b54ed357087c35011048cc7d\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"redox_syscall\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"flate2\"\n version = \"1.0.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6bd6d6f4752952feb71363cffc9ebac9411b75b87c6ab6058c40c8900cf43c0f\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"miniz_oxide 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"crc32fast\",\n+ \"libc\",\n+ \"miniz_oxide\",\n ]\n \n [[package]]\n name = \"fnv\"\n version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \n [[package]]\n name = \"foreign-types\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\n dependencies = [\n- \"foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"foreign-types-shared\",\n ]\n \n [[package]]\n name = \"foreign-types-shared\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n \n [[package]]\n name = \"fs2\"\n version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"fs_extra\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5f2a4a2034423744d2cc7ca2068453168dcdb82c438419e639a26bd87839c674\"\n \n [[package]]\n name = \"fsevent\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5ab7d1bd1bd33cc98b0889831b72da23c0aa4df9cec7e0702f46ecea04b35db6\"\n dependencies = [\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fsevent-sys 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags\",\n+ \"fsevent-sys\",\n ]\n \n [[package]]\n name = \"fsevent-sys\"\n version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f41b048a94555da0f42f1d632e2e19510084fb8e303b0daa2816e733fb3644a0\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"fuchsia-cprng\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n \n [[package]]\n name = \"fuchsia-zircon\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n dependencies = [\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags\",\n+ \"fuchsia-zircon-sys\",\n ]\n \n [[package]]\n name = \"fuchsia-zircon-sys\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n+\n+[[package]]\n+name = \"futures\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ad6636318d07abeb4656157ef1936c64485f066c7f9ce5d7c5b879fcb6dd5ccb\"\n+dependencies = [\n+ \"futures-channel\",\n+ \"futures-core\",\n+ \"futures-executor\",\n+ \"futures-io\",\n+ \"futures-sink\",\n+ \"futures-task\",\n+ \"futures-util\",\n+]\n \n [[package]]\n name = \"futures-channel\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7264eb65b194d2fa6ec31b898ead7c332854bfa42521659226e72a585fca5b85\"\n dependencies = [\n- \"futures-core 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-core\",\n+ \"futures-sink\",\n ]\n \n [[package]]\n name = \"futures-core\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b597b16aa1a19ce2dfde5128a7c656d75346b35601a640be2d9efd4e9c83609d\"\n+\n+[[package]]\n+name = \"futures-executor\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"46a5e593d77bee52393c7f3b16b8b413214096d3f7dc4f5f4c57dee01ad2bdaf\"\n+dependencies = [\n+ \"futures-core\",\n+ \"futures-task\",\n+ \"futures-util\",\n+]\n \n [[package]]\n name = \"futures-io\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3d429f824b5e5dbd45fc8e54e1005a37e1f8c6d570cd64d0b59b24d3a80b8b8e\"\n+\n+[[package]]\n+name = \"futures-macro\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a1d75b72904b78044e0091355fc49d29f48bff07a68a719a41cf059711e071b4\"\n+dependencies = [\n+ \"proc-macro-hack\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n \n [[package]]\n name = \"futures-sink\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"04299e123547ea7c56f3e1b376703142f5fc0b6700433eed549e9d0b8a75a66c\"\n \n [[package]]\n name = \"futures-task\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"86f9ceab4bce46555ee608b1ec7c414d6b2e76e196ef46fa5a8d4815a8571398\"\n \n [[package]]\n name = \"futures-util\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7d2f1296f7644d2cd908ebb2fa74645608e39f117c72bac251d40418c6d74c4f\"\n dependencies = [\n- \"futures-core 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-io 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-task 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pin-utils 0.1.0-alpha.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-channel\",\n+ \"futures-core\",\n+ \"futures-io\",\n+ \"futures-macro\",\n+ \"futures-sink\",\n+ \"futures-task\",\n+ \"memchr\",\n+ \"pin-utils\",\n+ \"proc-macro-hack\",\n+ \"proc-macro-nested\",\n+ \"slab\",\n ]\n \n [[package]]\n name = \"generic-array\"\n version = \"0.12.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec\"\n dependencies = [\n- \"typenum 1.11.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"typenum\",\n ]\n \n [[package]]\n name = \"getrandom\"\n version = \"0.1.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasi 0.9.0+wasi-snapshot-preview1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"wasi\",\n ]\n \n [[package]]\n name = \"globset\"\n version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"925aa2cac82d8834e2b2a4415b6f6879757fb5c0928fc445ae76461a12eed8f2\"\n dependencies = [\n- \"aho-corasick 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bstr 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"aho-corasick\",\n+ \"bstr\",\n+ \"fnv\",\n+ \"log 0.4.8\",\n+ \"regex\",\n ]\n \n [[package]]\n name = \"h2\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b9433d71e471c1736fd5a61b671fc0b148d7a2992f666c958d03cd8feb3b88d1\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-core 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-sink 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-util 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"indexmap 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-util 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"fnv\",\n+ \"futures-core\",\n+ \"futures-sink\",\n+ \"futures-util\",\n+ \"http\",\n+ \"indexmap\",\n+ \"log 0.4.8\",\n+ \"slab\",\n+ \"tokio\",\n+ \"tokio-util\",\n ]\n \n [[package]]\n name = \"heck\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n dependencies = [\n- \"unicode-segmentation 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation\",\n ]\n \n [[package]]\n name = \"hermit-abi\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eff2656d88f158ce120947499e971d743c05dbcbed62e5bd2f38f1698bbc3772\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"hex\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n \n [[package]]\n name = \"http\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b708cc7f06493459026f53b9a61a7a121a5d1ec6238dee58ea4941132b30156b\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"fnv\",\n+ \"itoa\",\n ]\n \n [[package]]\n name = \"http-body\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"13d5ff830006f7646652e057693569bfe0d51760c0085a071769d142a205111b\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"http\",\n ]\n \n [[package]]\n name = \"httparse\"\n version = \"1.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cd179ae861f0c2e53da70d892f5f3029f9594be0c41dc5269cd371691b1dc2f9\"\n \n [[package]]\n name = \"humantime\"\n version = \"1.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\n dependencies = [\n- \"quick-error 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quick-error\",\n ]\n \n [[package]]\n name = \"hyper\"\n version = \"0.13.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fa1c527bbc634be72aa7ba31e4e4def9bbb020f5416916279b7c705cd838893e\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-channel 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-core 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-util 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"h2 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http-body 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"httparse 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pin-project 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tower-service 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"want 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"futures-channel\",\n+ \"futures-core\",\n+ \"futures-util\",\n+ \"h2\",\n+ \"http\",\n+ \"http-body\",\n+ \"httparse\",\n+ \"itoa\",\n+ \"log 0.4.8\",\n+ \"net2\",\n+ \"pin-project\",\n+ \"time\",\n+ \"tokio\",\n+ \"tower-service\",\n+ \"want\",\n ]\n \n [[package]]\n name = \"hyper-tls\"\n version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3adcd308402b9553630734e9c36b77a7e48b3821251ca2493e8cd596763aafaa\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-tls 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"hyper\",\n+ \"native-tls\",\n+ \"tokio\",\n+ \"tokio-tls\",\n ]\n \n [[package]]\n name = \"idna\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\n dependencies = [\n- \"matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-normalization 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches\",\n+ \"unicode-bidi\",\n+ \"unicode-normalization\",\n ]\n \n [[package]]\n name = \"ignore\"\n version = \"0.4.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"522daefc3b69036f80c7d2990b28ff9e0471c683bad05ca258e0a01dd22c5a1e\"\n dependencies = [\n- \"crossbeam-channel 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"same-file 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"walkdir 2.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-channel 0.4.0\",\n+ \"globset\",\n+ \"lazy_static 1.4.0\",\n+ \"log 0.4.8\",\n+ \"memchr\",\n+ \"regex\",\n+ \"same-file\",\n+ \"thread_local\",\n+ \"walkdir\",\n+ \"winapi-util\",\n ]\n \n [[package]]\n name = \"indexmap\"\n version = \"1.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"076f042c5b7b98f31d205f1249267e12a6518c1481e9dae9764af19b707d2292\"\n dependencies = [\n- \"autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 1.0.0\",\n ]\n \n [[package]]\n name = \"indicatif\"\n version = \"0.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8572bccfb0665e70b7faf44ee28841b8e0823450cd4ad562a76b5a3c4bf48487\"\n dependencies = [\n- \"console 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"console\",\n+ \"lazy_static 1.4.0\",\n+ \"number_prefix\",\n+ \"regex\",\n ]\n \n [[package]]\n name = \"inotify\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"24e40d6fd5d64e2082e0c796495c8ef5ad667a96d03e5aaa0becfd9d47bcbfb8\"\n dependencies = [\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"inotify-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags\",\n+ \"inotify-sys\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"inotify-sys\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e74a1aa87c59aeff6ef2cc2fa62d41bc43f54952f55652656b18a02fd5e356c0\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"input_buffer\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"19a8a95243d5a0398cae618ec29477c6e3cb631152be5c19481f80bc71559754\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n ]\n \n [[package]]\n name = \"iovec\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b2b3ea6ff95e175473f8ffe6a7eb7c00d054240321b84c57051175fe3c1e075e\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"is_executable\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"302d553b8abc8187beb7d663e34c065ac4570b273bc9511a50e940e99409c577\"\n dependencies = [\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"itoa\"\n version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b8b7a7c0c47db5545ed3fef7468ee7bb5b74691498139e4b3f6a20685dc6dd8e\"\n \n [[package]]\n name = \"js-sys\"\n version = \"0.3.35\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7889c7c36282151f6bf465be4700359318aef36baa951462382eae49e9577cf9\"\n dependencies = [\n- \"wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasm-bindgen\",\n ]\n \n [[package]]\n name = \"kernel32-sys\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8\",\n+ \"winapi-build\",\n ]\n \n [[package]]\n name = \"lazy_static\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n \n [[package]]\n name = \"lazy_static\"\n version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \n [[package]]\n name = \"lazycell\"\n version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b294d6fa9ee409a054354afc4352b0b9ef7ca222c69b8812cbea9e7d2bf3783f\"\n \n [[package]]\n name = \"libc\"\n version = \"0.2.66\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d515b1f41455adea1313a4a2ac8a8a477634fbae63cc6100e3aebb207ce61558\"\n \n [[package]]\n name = \"libflate\"\n version = \"0.1.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d9135df43b1f5d0e333385cb6e7897ecd1a43d7d11b91ac003f4d2c2d2401fdd\"\n dependencies = [\n- \"adler32 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rle-decode-fast 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"adler32\",\n+ \"crc32fast\",\n+ \"rle-decode-fast\",\n+ \"take_mut\",\n ]\n \n [[package]]\n name = \"libz-sys\"\n version = \"1.0.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2eb5e43362e38e2bca2fd5f5134c4d4564a23a5c28e9b95411652021a8675ebe\"\n dependencies = [\n- \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"vcpkg 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc\",\n+ \"libc\",\n+ \"pkg-config\",\n+ \"vcpkg\",\n ]\n \n [[package]]\n name = \"linked-hash-map\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6d262045c5b87c0861b3f004610afd0e2c851e2908d08b6c870cbb9d5f494ecd\"\n dependencies = [\n- \"serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_test 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.8.23\",\n+ \"serde_test\",\n ]\n \n [[package]]\n name = \"linked-hash-map\"\n version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"lock_api\"\n-version = \"0.3.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"scopeguard 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n+checksum = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\n \n [[package]]\n name = \"log\"\n version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n dependencies = [\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8\",\n ]\n \n [[package]]\n name = \"log\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n ]\n \n [[package]]\n name = \"matches\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n \n [[package]]\n name = \"memchr\"\n version = \"2.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3197e20c7edb283f87c071ddfc7a2cca8f8e0b888c242959846a6fce03c72223\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"mime\"\n version = \"0.3.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d\"\n \n [[package]]\n name = \"mime_guess\"\n version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1a0ed03949aef72dbdf3116a383d7b38b4768e6f960528cd6a6044aa9ed68599\"\n dependencies = [\n- \"mime 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicase 2.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mime\",\n+ \"unicase\",\n ]\n \n [[package]]\n name = \"miniz_oxide\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"aa679ff6578b1cddee93d7e82e263b94a575e0bfced07284eb0c037c1d2416a5\"\n dependencies = [\n- \"adler32 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"adler32\",\n ]\n \n [[package]]\n name = \"mio\"\n version = \"0.6.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"302dec22bcf6bae6dfb69c647187f4b4d0fb6f535521f7bc022430ce8e12008f\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"fuchsia-zircon\",\n+ \"fuchsia-zircon-sys\",\n+ \"iovec\",\n+ \"kernel32-sys\",\n+ \"libc\",\n+ \"log 0.4.8\",\n+ \"miow\",\n+ \"net2\",\n+ \"slab\",\n+ \"winapi 0.2.8\",\n ]\n \n [[package]]\n name = \"mio-extras\"\n version = \"2.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"52403fe290012ce777c4626790c8951324a2b9e3316b3143779c72b029742f19\"\n+dependencies = [\n+ \"lazycell\",\n+ \"log 0.4.8\",\n+ \"mio\",\n+ \"slab\",\n+]\n+\n+[[package]]\n+name = \"mio-uds\"\n+version = \"0.6.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"966257a94e196b11bb43aca423754d87429960a768de9414f3691d6957abf125\"\n dependencies = [\n- \"lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"iovec\",\n+ \"libc\",\n+ \"mio\",\n ]\n \n [[package]]\n name = \"miow\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\n dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys\",\n+ \"net2\",\n+ \"winapi 0.2.8\",\n+ \"ws2_32-sys\",\n ]\n \n [[package]]\n name = \"native-tls\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4b2df1a4c22fd44a62147fd8f13dd0f95c9d8ca7b2610299b2a2f9cf8964274e\"\n dependencies = [\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl 0.10.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"schannel 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"security-framework 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"security-framework-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0\",\n+ \"libc\",\n+ \"log 0.4.8\",\n+ \"openssl\",\n+ \"openssl-probe\",\n+ \"openssl-sys\",\n+ \"schannel\",\n+ \"security-framework\",\n+ \"security-framework-sys\",\n+ \"tempfile\",\n ]\n \n [[package]]\n name = \"net2\"\n version = \"0.2.33\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"42550d9fb7b6684a6d404d9fa7250c2eb2646df731d1c06afc06dcee9e1bcf88\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"nom\"\n version = \"4.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2ad2a91a8e869eeb30b9cb3119ae87773a8f4ae617f41b1eb9c154b2905f7bd6\"\n dependencies = [\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr\",\n+ \"version_check 0.1.5\",\n ]\n \n [[package]]\n name = \"notify\"\n version = \"4.0.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"80ae4a7688d1fab81c5bf19c64fc8db920be8d519ce6336ed4e7efe024724dbd\"\n dependencies = [\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"filetime 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fsevent 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fsevent-sys 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"inotify 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio-extras 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"walkdir 2.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags\",\n+ \"filetime\",\n+ \"fsevent\",\n+ \"fsevent-sys\",\n+ \"inotify\",\n+ \"libc\",\n+ \"mio\",\n+ \"mio-extras\",\n+ \"walkdir\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"num-integer\"\n version = \"0.1.42\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3f6ea62e9d81a77cd3ee9a2a5b9b609447857f3d358704331e4ef39eb247fcba\"\n dependencies = [\n- \"autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 1.0.0\",\n+ \"num-traits 0.2.11\",\n ]\n \n [[package]]\n name = \"num-traits\"\n version = \"0.1.43\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"92e5113e9fd4cc14ded8e499429f396a20f98c772a47cc8622a736e1ec843c31\"\n dependencies = [\n- \"num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.2.11\",\n ]\n \n [[package]]\n name = \"num-traits\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c62be47e61d1842b9170f0fdeec8eba98e60e90e5446449a0545e5152acd7096\"\n dependencies = [\n- \"autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 1.0.0\",\n ]\n \n [[package]]\n name = \"num_cpus\"\n version = \"1.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"46203554f085ff89c235cd12f7075f3233af9b11ed7c9e16dfe2560d03313ce6\"\n dependencies = [\n- \"hermit-abi 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hermit-abi\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"number_prefix\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"17b02fc0ff9a9e4b35b3342880f48e896ebf69f2967921fe8646bf5b7125956a\"\n \n [[package]]\n name = \"opaque-debug\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n \n [[package]]\n name = \"openssl\"\n version = \"0.10.28\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"973293749822d7dd6370d6da1e523b0d1db19f06c459134c658b2a4261378b52\"\n dependencies = [\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags\",\n+ \"cfg-if\",\n+ \"foreign-types\",\n+ \"lazy_static 1.4.0\",\n+ \"libc\",\n+ \"openssl-sys\",\n ]\n \n [[package]]\n name = \"openssl-probe\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\n \n [[package]]\n name = \"openssl-src\"\n version = \"111.6.1+1.1.1d\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c91b04cb43c1a8a90e934e0cd612e2a5715d976d2d6cff4490278a0cddf35005\"\n dependencies = [\n- \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc\",\n ]\n \n [[package]]\n name = \"openssl-sys\"\n version = \"0.9.54\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1024c0a59774200a555087a6da3f253a9095a5f344e353b212ac4c8b8e450986\"\n dependencies = [\n- \"autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-src 111.6.1+1.1.1d (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"vcpkg 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"parking_lot\"\n-version = \"0.10.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"lock_api 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot_core 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"parking_lot_core\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 1.0.0\",\n+ \"cc\",\n+ \"libc\",\n+ \"openssl-src\",\n+ \"pkg-config\",\n+ \"vcpkg\",\n ]\n \n [[package]]\n name = \"percent-encoding\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \n [[package]]\n name = \"percent-encoding\"\n version = \"2.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n \n [[package]]\n name = \"pin-project\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7804a463a8d9572f13453c516a5faea534a2403d7ced2f0c7e100eeff072772c\"\n dependencies = [\n- \"pin-project-internal 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pin-project-internal\",\n ]\n \n [[package]]\n name = \"pin-project-internal\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"385322a45f2ecf3410c68d2a549a4a2685e8051d0f278e39743ff4e451cb9b3f\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n name = \"pin-project-lite\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"237844750cfbb86f67afe27eee600dfbbcb6188d734139b534cbfbf4f96792ae\"\n \n [[package]]\n name = \"pin-utils\"\n version = \"0.1.0-alpha.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5894c618ce612a3fa23881b152b608bafb8c56cfc22f434a3ba3120b40f7b587\"\n \n [[package]]\n name = \"pkg-config\"\n version = \"0.3.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"05da548ad6865900e60eaba7f589cc0783590a92e940c26953ff81ddbab2d677\"\n \n [[package]]\n name = \"podio\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"780fb4b6698bbf9cf2444ea5d22411cef2953f0824b98f33cf454ec5615645bd\"\n \n [[package]]\n name = \"ppv-lite86\"\n version = \"0.2.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"74490b50b9fbe561ac330df47c08f3f33073d2d00c150f719147d7c54522fa1b\"\n \n [[package]]\n name = \"predicates\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a9bfe52247e5cc9b2f943682a85a5549fb9662245caf094504e69a2f03fe64d4\"\n dependencies = [\n- \"difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"predicates-core 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"difference\",\n+ \"predicates-core\",\n ]\n \n [[package]]\n name = \"predicates-core\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"06075c3a3e92559ff8929e7a280684489ea27fe44805174c3ebd9328dcb37178\"\n \n [[package]]\n name = \"predicates-tree\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8e63c4859013b38a76eca2414c64911fba30def9e3202ac461a2d22831220124\"\n dependencies = [\n- \"predicates-core 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"treeline 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"predicates-core\",\n+ \"treeline\",\n ]\n \n [[package]]\n name = \"prettytable-rs\"\n version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0fd04b170004fa2daccf418a7f8253aaf033c27760b5f225889024cf66d7ac2e\"\n dependencies = [\n- \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"csv 1.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty\",\n+ \"csv\",\n+ \"encode_unicode\",\n+ \"lazy_static 1.4.0\",\n+ \"term 0.5.2\",\n+ \"unicode-width\",\n ]\n \n+[[package]]\n+name = \"proc-macro-hack\"\n+version = \"0.5.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ecd45702f76d6d3c75a80564378ae228a85f0b59d2f3ed43c91b4a69eb2ebfc5\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"proc-macro-nested\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"369a6ed065f249a159e06c45752c780bda2fb53c995718f9e484d08daa9eb42e\"\n+\n [[package]]\n name = \"proc-macro2\"\n version = \"1.0.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3acb317c6ff86a4e579dfa00fc5e6cca91ecbb4e7eb2df0468805b674eb88548\"\n dependencies = [\n- \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid\",\n ]\n \n [[package]]\n name = \"quick-error\"\n version = \"1.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\n \n [[package]]\n name = \"quote\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n ]\n \n [[package]]\n name = \"rand\"\n version = \"0.6.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n dependencies = [\n- \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_jitter 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_pcg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_xorshift 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.7\",\n+ \"libc\",\n+ \"rand_chacha 0.1.1\",\n+ \"rand_core 0.4.2\",\n+ \"rand_hc 0.1.0\",\n+ \"rand_isaac\",\n+ \"rand_jitter\",\n+ \"rand_os\",\n+ \"rand_pcg\",\n+ \"rand_xorshift\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"rand\"\n version = \"0.7.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\n dependencies = [\n- \"getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_chacha 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom\",\n+ \"libc\",\n+ \"rand_chacha 0.2.1\",\n+ \"rand_core 0.5.1\",\n+ \"rand_hc 0.2.0\",\n ]\n \n [[package]]\n name = \"rand_chacha\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\"\n dependencies = [\n- \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.7\",\n+ \"rand_core 0.3.1\",\n ]\n \n [[package]]\n name = \"rand_chacha\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"03a2a90da8c7523f554344f921aa97283eadf6ac484a6d2a7d0212fa7f8d6853\"\n dependencies = [\n- \"c2-chacha 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"c2-chacha\",\n+ \"rand_core 0.5.1\",\n ]\n \n [[package]]\n name = \"rand_core\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\n dependencies = [\n- \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.4.2\",\n ]\n \n [[package]]\n name = \"rand_core\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc\"\n \n [[package]]\n name = \"rand_core\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\n dependencies = [\n- \"getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom\",\n ]\n \n [[package]]\n name = \"rand_hc\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b40677c7be09ae76218dc623efbf7b18e34bced3f38883af07bb75630a21bc4\"\n dependencies = [\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.1\",\n ]\n \n [[package]]\n name = \"rand_hc\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\n dependencies = [\n- \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.5.1\",\n ]\n \n [[package]]\n name = \"rand_isaac\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ded997c9d5f13925be2a6fd7e66bf1872597f759fd9dd93513dd7e92e5a5ee08\"\n dependencies = [\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.1\",\n ]\n \n [[package]]\n name = \"rand_jitter\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1166d5c91dc97b88d1decc3285bb0a99ed84b05cfd0bc2341bdf2d43fc41e39b\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n+ \"rand_core 0.4.2\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"rand_os\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b75f676a1e053fc562eafbb47838d67c84801e38fc1ba459e8f180deabd5071\"\n dependencies = [\n- \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cloudabi\",\n+ \"fuchsia-cprng\",\n+ \"libc\",\n+ \"rand_core 0.4.2\",\n+ \"rdrand\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"rand_pcg\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"abf9b09b01790cfe0364f52bf32995ea3c39f4d2dd011eac241d2914146d0b44\"\n dependencies = [\n- \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.7\",\n+ \"rand_core 0.4.2\",\n ]\n \n [[package]]\n name = \"rand_xorshift\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cbf7e9e623549b0e21f6e97cf8ecf247c1a8fd2e8a992ae265314300b2455d5c\"\n dependencies = [\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.1\",\n ]\n \n [[package]]\n name = \"rdrand\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\"\n dependencies = [\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.1\",\n ]\n \n [[package]]\n name = \"redox_syscall\"\n version = \"0.1.56\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2439c63f3f6139d1b57529d16bc3b8bb855230c8efcc5d3a896c8bea7c3b1e84\"\n \n [[package]]\n name = \"redox_users\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"09b23093265f8d200fa7b4c2c76297f47e681c655f6f1285a8780d6a022f7431\"\n dependencies = [\n- \"getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rust-argon2 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom\",\n+ \"redox_syscall\",\n+ \"rust-argon2\",\n ]\n \n [[package]]\n name = \"regex\"\n version = \"1.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"322cf97724bea3ee221b78fe25ac9c46114ebb51747ad5babd51a2fc6a8235a8\"\n dependencies = [\n- \"aho-corasick 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex-syntax 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"aho-corasick\",\n+ \"memchr\",\n+ \"regex-syntax\",\n+ \"thread_local\",\n ]\n \n [[package]]\n name = \"regex-automata\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"92b73c2a1770c255c240eaa4ee600df1704a38dc3feaa6e949e7fcd4f8dc09f9\"\n dependencies = [\n- \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder\",\n ]\n \n [[package]]\n name = \"regex-syntax\"\n version = \"0.6.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b28dfe3fe9badec5dbf0a79a9cccad2cfc2ab5484bdb3e44cbd1ae8b3ba2be06\"\n \n [[package]]\n name = \"remove_dir_all\"\n version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e\"\n dependencies = [\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"reqwest\"\n version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"encoding_rs 0.8.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-core 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-util 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http-body 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper-tls 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"js-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mime 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mime_guess 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pin-project-lite 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_urlencoded 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-tls 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-futures 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"web-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winreg 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+checksum = \"c0e798e19e258bf6c30a304622e3e9ac820e483b06a1857a026e1f109b113fe4\"\n+dependencies = [\n+ \"base64 0.11.0\",\n+ \"bytes 0.5.4\",\n+ \"encoding_rs\",\n+ \"futures-core\",\n+ \"futures-util\",\n+ \"http\",\n+ \"http-body\",\n+ \"hyper\",\n+ \"hyper-tls\",\n+ \"js-sys\",\n+ \"lazy_static 1.4.0\",\n+ \"log 0.4.8\",\n+ \"mime\",\n+ \"mime_guess\",\n+ \"native-tls\",\n+ \"percent-encoding 2.1.0\",\n+ \"pin-project-lite\",\n+ \"serde 1.0.104\",\n+ \"serde_json\",\n+ \"serde_urlencoded\",\n+ \"time\",\n+ \"tokio\",\n+ \"tokio-tls\",\n+ \"url\",\n+ \"wasm-bindgen\",\n+ \"wasm-bindgen-futures\",\n+ \"web-sys\",\n+ \"winreg\",\n ]\n \n [[package]]\n name = \"rle-decode-fast\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cabe4fa914dec5870285fa7f71f602645da47c486e68486d2b4ceb4a343e90ac\"\n \n [[package]]\n name = \"rust-argon2\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2bc8af4bda8e1ff4932523b94d3dd20ee30a87232323eda55903ffd71d2fb017\"\n dependencies = [\n- \"base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"blake2b_simd 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"constant_time_eq 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crossbeam-utils 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"base64 0.11.0\",\n+ \"blake2b_simd\",\n+ \"constant_time_eq\",\n+ \"crossbeam-utils 0.7.0\",\n ]\n \n [[package]]\n name = \"rust-ini\"\n version = \"0.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3e52c148ef37f8c375d49d5a73aa70713125b7f19095948a923f80afdeb22ec2\"\n \n [[package]]\n name = \"rustc-demangle\"\n version = \"0.1.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n \n [[package]]\n name = \"ryu\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bfa8506c1de11c9c4e4c38863ccbe02a305c8188e85a05a784c9e11e1c3910c8\"\n \n [[package]]\n name = \"same-file\"\n version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\n dependencies = [\n- \"winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-util\",\n ]\n \n [[package]]\n name = \"schannel\"\n version = \"0.1.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"507a9e6e8ffe0a4e0ebb9a10293e62fdf7657c06f1b8bb07a8fcf697d2abf295\"\n dependencies = [\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0\",\n+ \"winapi 0.3.8\",\n ]\n \n-[[package]]\n-name = \"scopeguard\"\n-version = \"1.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"security-framework\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8ef2429d7cefe5fd28bd1d2ed41c944547d4ff84776f5935b456da44593a16df\"\n dependencies = [\n- \"core-foundation 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"security-framework-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core-foundation\",\n+ \"core-foundation-sys\",\n+ \"libc\",\n+ \"security-framework-sys\",\n ]\n \n [[package]]\n name = \"security-framework-sys\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e31493fc37615debb8c5090a7aeb4a9730bc61e77ab10b9af59f1a202284f895\"\n dependencies = [\n- \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core-foundation-sys\",\n ]\n \n [[package]]\n name = \"serde\"\n version = \"0.8.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9dad3f759919b92c3068c696c15c3d17238234498bbdcc80f2c469606f948ac8\"\n \n [[package]]\n name = \"serde\"\n version = \"1.0.104\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"414115f25f818d7dfccec8ee535d76949ae78584fc4f79a6f45a904bf8ab4449\"\n dependencies = [\n- \"serde_derive 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde-hjson\"\n version = \"0.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0b833c5ad67d52ced5f5938b2980f32a9c1c5ef047f0b4fb3127e7a423c76153\"\n dependencies = [\n- \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"linked-hash-map 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.11\",\n+ \"linked-hash-map 0.3.0\",\n+ \"num-traits 0.1.43\",\n+ \"regex\",\n+ \"serde 0.8.23\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n version = \"1.0.104\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"128f9e303a5a29922045a830221b8f78ec74a5f544944f3d5984f8ec3895ef64\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n name = \"serde_json\"\n version = \"1.0.46\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"21b01d7f0288608a01dca632cf1df859df6fd6ffa885300fc275ce2ba6221953\"\n dependencies = [\n- \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ryu 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa\",\n+ \"ryu\",\n+ \"serde 1.0.104\",\n ]\n \n [[package]]\n name = \"serde_qs\"\n version = \"0.4.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"35965fa1d2413717053d67c2df1f5c3e1763fbf77200ea7e767523707bd5a0af\"\n dependencies = [\n- \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"data-encoding\",\n+ \"error-chain\",\n+ \"percent-encoding 1.0.1\",\n+ \"serde 1.0.104\",\n ]\n \n [[package]]\n name = \"serde_test\"\n version = \"0.8.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"110b3dbdf8607ec493c22d5d947753282f3bae73c0f56d322af1e8c78e4c23d5\"\n dependencies = [\n- \"serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.8.23\",\n ]\n \n [[package]]\n name = \"serde_urlencoded\"\n version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9ec5d77e2d4c73717816afac02670d5c4f534ea95ed430442cad02e7a6e32c97\"\n dependencies = [\n- \"dtoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dtoa\",\n+ \"itoa\",\n+ \"serde 1.0.104\",\n+ \"url\",\n ]\n \n [[package]]\n name = \"serde_with\"\n version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"89d3d595d64120bbbc70b7f6d5ae63298b62a3d9f373ec2f56acf5365ca8a444\"\n dependencies = [\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_with_macros 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104\",\n+ \"serde_with_macros\",\n ]\n \n [[package]]\n name = \"serde_with_macros\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4070d2c9b9d258465ad1d82aabb985b84cd9a3afa94da25ece5a9938ba5f1606\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n name = \"sha-1\"\n version = \"0.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df\"\n dependencies = [\n- \"block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"digest 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"opaque-debug 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"block-buffer\",\n+ \"digest\",\n+ \"fake-simd\",\n+ \"opaque-debug\",\n ]\n \n [[package]]\n name = \"sha2\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"27044adfd2e1f077f649f59deb9490d3941d674002f7d062870a60ebe9bd47a0\"\n dependencies = [\n- \"block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"digest 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"opaque-debug 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"block-buffer\",\n+ \"digest\",\n+ \"fake-simd\",\n+ \"opaque-debug\",\n ]\n \n [[package]]\n name = \"siphasher\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0b8de496cf83d4ed58b6be86c3a275b8602f6ffe98d3024a869e124147a9a3ac\"\n \n [[package]]\n name = \"slab\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n \n [[package]]\n name = \"slog\"\n version = \"2.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1cc9c640a4adbfbcc11ffb95efe5aa7af7309e002adab54b185507dbf2377b99\"\n \n [[package]]\n name = \"slog-async\"\n version = \"2.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78ca925b180da88ccc595cbe4a3d378d79cb49fe5906c2cbc2488eaf700913ee\"\n dependencies = [\n- \"crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-channel 0.3.9\",\n+ \"slog\",\n+ \"take_mut\",\n+ \"thread_local\",\n ]\n \n [[package]]\n name = \"slog-kvfilter\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ae939ed7d169eed9699f4f5cd440f046f5dc5dfc27c19e3cd311619594c175e0\"\n dependencies = [\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex\",\n+ \"slog\",\n ]\n \n [[package]]\n name = \"slog-scope\"\n version = \"4.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7c44c89dd8b0ae4537d1ae318353eaf7840b4869c536e31c41e963d1ea523ee6\"\n dependencies = [\n- \"arc-swap 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"arc-swap\",\n+ \"lazy_static 1.4.0\",\n+ \"slog\",\n ]\n \n [[package]]\n name = \"slog-stdlog\"\n version = \"3.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f1c469573d1e3f36f9eee66cd132206caf47b50c94b1f6c6e7b4d8235e9ecf01\"\n dependencies = [\n- \"crossbeam 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-scope 4.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam\",\n+ \"log 0.3.9\",\n+ \"slog\",\n+ \"slog-scope\",\n ]\n \n [[package]]\n name = \"slog-term\"\n version = \"2.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"124501187c410b6a46fe8a47a48435ae462fae4e02d03c558d358f40b17308cb\"\n dependencies = [\n- \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"term 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty\",\n+ \"chrono\",\n+ \"slog\",\n+ \"term 0.6.1\",\n+ \"thread_local\",\n ]\n \n [[package]]\n name = \"sloggers\"\n version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d41aa58f9a02e205e21117ffa08e94c37f06e1f1009be2639b621f351a75796d\"\n dependencies = [\n- \"chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libflate 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-async 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-kvfilter 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-scope 4.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-stdlog 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-term 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"trackable 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chrono\",\n+ \"libflate\",\n+ \"regex\",\n+ \"serde 1.0.104\",\n+ \"serde_derive\",\n+ \"slog\",\n+ \"slog-async\",\n+ \"slog-kvfilter\",\n+ \"slog-scope\",\n+ \"slog-stdlog\",\n+ \"slog-term\",\n+ \"trackable\",\n ]\n \n [[package]]\n name = \"smallvec\"\n version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5c2fb2ec9bcd216a5b0d0ccf31ab17b5ed1d627960edff65bbe95d3ce221cefc\"\n \n [[package]]\n name = \"socket2\"\n version = \"0.3.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e8b74de517221a2cb01a53349cf54182acdc31a074727d3079068448c0676d85\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"redox_syscall\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"sourcefile\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4bf77cb82ba8453b42b6ae1d692e4cdc92f9a47beaf89a847c8be83f4e328ad3\"\n \n [[package]]\n name = \"strsim\"\n version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n \n [[package]]\n name = \"syn\"\n version = \"1.0.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"af6f3550d8dff9ef7dc34d384ac6f107e5d31c8f57d9f28e0081503f547ac8f5\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-xid\",\n ]\n \n [[package]]\n name = \"synstructure\"\n version = \"0.12.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"67656ea1dc1b41b1451851562ea232ec2e5a80242139f7e679ceccfb5d61f545\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"unicode-xid\",\n ]\n \n [[package]]\n name = \"take_mut\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f764005d11ee5f36500a149ace24e00e3da98b0158b3e2d53a7495660d3f4d60\"\n \n [[package]]\n name = \"tar\"\n version = \"0.4.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b3196bfbffbba3e57481b6ea32249fbaf590396a52505a2615adbb79d9d826d3\"\n dependencies = [\n- \"filetime 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"xattr 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"filetime\",\n+ \"libc\",\n+ \"redox_syscall\",\n+ \"xattr\",\n ]\n \n [[package]]\n name = \"tempfile\"\n version = \"3.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"rand 0.7.3\",\n+ \"redox_syscall\",\n+ \"remove_dir_all\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"term\"\n version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42\"\n dependencies = [\n- \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder\",\n+ \"dirs 1.0.5\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"term\"\n version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5\"\n dependencies = [\n- \"dirs 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dirs 2.0.2\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"termcolor\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bb6bfa289a4d7c5766392812c0a1f4c1ba45afa1ad47803c11e1f407d846d75f\"\n dependencies = [\n- \"winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-util\",\n ]\n \n [[package]]\n name = \"termios\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"text_io\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6cb170b4f47dc48835fbc56259c12d8963e542b05a24be2e3a1f5a6c320fd2d4\"\n \n [[package]]\n name = \"textwrap\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n dependencies = [\n- \"unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width\",\n ]\n \n [[package]]\n name = \"thread_local\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d40c6d1b69745a6ec6fb1ca717914848da4b44ae29d9b3080cbee91d72a69b14\"\n dependencies = [\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0\",\n ]\n \n [[package]]\n name = \"time\"\n version = \"0.1.42\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n+ \"redox_syscall\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"tokio\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8fdd17989496f49cdc57978c96f0c9fe5e4a58a8bddc6813c449a4624f6a030b\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 1.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pin-project-lite 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"fnv\",\n+ \"iovec\",\n+ \"lazy_static 1.4.0\",\n+ \"libc\",\n+ \"memchr\",\n+ \"mio\",\n+ \"mio-uds\",\n+ \"num_cpus\",\n+ \"pin-project-lite\",\n+ \"slab\",\n ]\n \n [[package]]\n name = \"tokio-tls\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7bde02a3a5291395f59b06ec6945a3077602fac2b07eeeaf0dee2122f3619828\"\n+dependencies = [\n+ \"native-tls\",\n+ \"tokio\",\n+]\n+\n+[[package]]\n+name = \"tokio-tungstenite\"\n+version = \"0.10.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b8b8fe88007ebc363512449868d7da4389c9400072a3f666f212c7280082882a\"\n dependencies = [\n- \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures\",\n+ \"log 0.4.8\",\n+ \"native-tls\",\n+ \"pin-project\",\n+ \"tokio\",\n+ \"tokio-tls\",\n+ \"tungstenite\",\n ]\n \n [[package]]\n name = \"tokio-util\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"571da51182ec208780505a32528fc5512a8fe1443ab960b3f2f3ef093cd16930\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-core 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-sink 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pin-project-lite 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"futures-core\",\n+ \"futures-sink\",\n+ \"log 0.4.8\",\n+ \"pin-project-lite\",\n+ \"tokio\",\n ]\n \n [[package]]\n name = \"toml\"\n version = \"0.4.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"758664fc71a3a69038656bee8b6be6477d2a6c315a6b81f7081f591bffa4111f\"\n dependencies = [\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104\",\n ]\n \n [[package]]\n name = \"toml\"\n version = \"0.5.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ffc92d160b1eef40665be3a05630d003936a3bc7da7421277846c2613e92c71a\"\n dependencies = [\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104\",\n ]\n \n [[package]]\n name = \"tower-service\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e987b6bf443f4b5b3b6f38704195592cca41c5bb7aedd3c3693c7081f8289860\"\n \n [[package]]\n name = \"trackable\"\n version = \"0.2.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"11475c3c53b075360eac9794965822cb053996046545f91cf61d90e00b72efa5\"\n dependencies = [\n- \"trackable_derive 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"trackable_derive\",\n ]\n \n [[package]]\n name = \"trackable_derive\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"edcf0b9b2caa5f4804ef77aeee1b929629853d806117c48258f402b69737e65c\"\n dependencies = [\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n name = \"treeline\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a7f741b240f1a48843f9b8e0444fb55fb2a4ff67293b50a9179dfd5ea67f8d41\"\n \n [[package]]\n name = \"try-lock\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e604eb7b43c06650e854be16a2a03155743d3752dd1c943f6829e26b7a36e382\"\n+\n+[[package]]\n+name = \"tungstenite\"\n+version = \"0.10.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cfea31758bf674f990918962e8e5f07071a3161bd7c4138ed23e416e1ac4264e\"\n+dependencies = [\n+ \"base64 0.11.0\",\n+ \"byteorder\",\n+ \"bytes 0.5.4\",\n+ \"http\",\n+ \"httparse\",\n+ \"input_buffer\",\n+ \"log 0.4.8\",\n+ \"native-tls\",\n+ \"rand 0.7.3\",\n+ \"sha-1\",\n+ \"url\",\n+ \"utf-8\",\n+]\n \n [[package]]\n name = \"typenum\"\n version = \"1.11.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6d2783fe2d6b8c1101136184eb41be8b1ad379e4657050b8aaff0c79ee7575f9\"\n \n [[package]]\n name = \"unicase\"\n version = \"2.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"\n dependencies = [\n- \"version_check 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"version_check 0.9.1\",\n ]\n \n [[package]]\n name = \"unicode-bidi\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n dependencies = [\n- \"matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches\",\n ]\n \n [[package]]\n name = \"unicode-normalization\"\n version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5479532badd04e128284890390c1e876ef7a993d0570b3597ae43dfa1d59afa4\"\n dependencies = [\n- \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec\",\n ]\n \n [[package]]\n name = \"unicode-segmentation\"\n version = \"1.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e83e153d1053cbb5a118eeff7fd5be06ed99153f00dbcd8ae310c5fb2b22edc0\"\n \n [[package]]\n name = \"unicode-width\"\n version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"caaa9d531767d1ff2150b9332433f32a24622147e5ebb1f26409d5da67afd479\"\n \n [[package]]\n name = \"unicode-xid\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n \n [[package]]\n name = \"url\"\n version = \"2.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"829d4a8476c35c9bf0bbce5a3b23f4106f79728039b726d292bb93bc106787cb\"\n dependencies = [\n- \"idna 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"idna\",\n+ \"matches\",\n+ \"percent-encoding 2.1.0\",\n ]\n \n+[[package]]\n+name = \"utf-8\"\n+version = \"0.7.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"05e42f7c18b8f902290b009cde6d651262f956c98bc51bca4cd1d511c9cd85c7\"\n+\n [[package]]\n name = \"uuid\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9fde2f6a4bea1d6e007c4ad38c6839fa71cbb63b6dbf5b595aa38dc9b1093c11\"\n dependencies = [\n- \"rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.7.3\",\n ]\n \n [[package]]\n name = \"vcpkg\"\n version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3fc439f2794e98976c88a2a2dafce96b930fe8010b0a256b3c2199a773933168\"\n \n [[package]]\n name = \"vec_map\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n \n [[package]]\n name = \"version_check\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"914b1a6776c4c929a602fafd8bc742e06365d4bcbe48c30f9cca5824f70dc9dd\"\n \n [[package]]\n name = \"version_check\"\n version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"078775d0255232fb988e6fccf26ddc9d1ac274299aaedcedce21c6f72cc533ce\"\n \n [[package]]\n name = \"walkdir\"\n version = \"2.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"777182bc735b6424e1a57516d35ed72cb8019d85c8c9bf536dccb3445c1a2f7d\"\n dependencies = [\n- \"same-file 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"same-file\",\n+ \"winapi 0.3.8\",\n+ \"winapi-util\",\n ]\n \n [[package]]\n name = \"want\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0\"\n dependencies = [\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"try-lock 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8\",\n+ \"try-lock\",\n ]\n \n [[package]]\n name = \"wasi\"\n version = \"0.9.0+wasi-snapshot-preview1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n \n [[package]]\n name = \"wasm-bindgen\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5205e9afdf42282b192e2310a5b463a6d1c1d774e30dc3c791ac37ab42d2616c\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-macro 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"serde 1.0.104\",\n+ \"serde_json\",\n+ \"wasm-bindgen-macro\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-backend\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"11cdb95816290b525b32587d76419facd99662a07e59d3cdb560488a819d9a45\"\n dependencies = [\n- \"bumpalo 3.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-shared 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bumpalo\",\n+ \"lazy_static 1.4.0\",\n+ \"log 0.4.8\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-shared\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-futures\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8bbdd49e3e28b40dec6a9ba8d17798245ce32b019513a845369c641b275135d9\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"js-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"web-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"js-sys\",\n+ \"wasm-bindgen\",\n+ \"web-sys\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-macro\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"574094772ce6921576fb6f2e3f7497b8a76273b6db092be18fc48a082de09dc3\"\n dependencies = [\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-macro-support 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote\",\n+ \"wasm-bindgen-macro-support\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-macro-support\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e85031354f25eaebe78bb7db1c3d86140312a911a106b2e29f9cc440ce3e7668\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-backend 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-shared 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-backend\",\n+ \"wasm-bindgen-shared\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-shared\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f5e7e61fc929f4c0dddb748b102ebf9f632e2b8d739f2016542b4de2965a9601\"\n \n [[package]]\n name = \"wasm-bindgen-webidl\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ef012a0d93fc0432df126a8eaf547b2dce25a8ce9212e1d3cbeef5c11157975d\"\n dependencies = [\n- \"anyhow 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-backend 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"weedle 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"anyhow\",\n+ \"heck\",\n+ \"log 0.4.8\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-backend\",\n+ \"weedle\",\n ]\n \n [[package]]\n name = \"web-sys\"\n version = \"0.3.35\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"aaf97caf6aa8c2b1dac90faf0db529d9d63c93846cca4911856f78a83cebf53b\"\n dependencies = [\n- \"anyhow 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"js-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"sourcefile 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-webidl 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"anyhow\",\n+ \"js-sys\",\n+ \"sourcefile\",\n+ \"wasm-bindgen\",\n+ \"wasm-bindgen-webidl\",\n ]\n \n [[package]]\n name = \"weedle\"\n version = \"0.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3bb43f70885151e629e2a19ce9e50bd730fd436cfd4b666894c9ce4de9141164\"\n dependencies = [\n- \"nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"nom\",\n ]\n \n [[package]]\n name = \"which\"\n version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b57acb10231b9493c8472b20cb57317d0679a49e0bdbee44b3b803a6473af164\"\n dependencies = [\n- \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"winapi\"\n version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \n [[package]]\n name = \"winapi\"\n version = \"0.3.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8093091eeb260906a183e6ae1abdba2ef5ef2257a21801128899c3fc699229c6\"\n dependencies = [\n- \"winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-i686-pc-windows-gnu\",\n+ \"winapi-x86_64-pc-windows-gnu\",\n ]\n \n [[package]]\n name = \"winapi-build\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n \n [[package]]\n name = \"winapi-i686-pc-windows-gnu\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n \n [[package]]\n name = \"winapi-util\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4ccfbf554c6ad11084fb7517daca16cfdcaccbdadba4fc336f032a8b12c2ad80\"\n dependencies = [\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"winapi-x86_64-pc-windows-gnu\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n \n [[package]]\n name = \"winreg\"\n version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b2986deb581c4fe11b621998a5e53361efe6b48a151178d0cd9eeffa4dc6acc9\"\n dependencies = [\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"wrangler\"\n version = \"1.7.0\"\n dependencies = [\n- \"assert_cmd 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cloudflare 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"console 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"exitfailure 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ignore 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"indicatif 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"notify 4.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl 0.10.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"prettytable-rs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"reqwest 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_with 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"sha2 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"text_io 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"uuid 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"which 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ws 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"assert_cmd\",\n+ \"atty\",\n+ \"base64 0.10.1\",\n+ \"binary-install\",\n+ \"chrome-devtools-rs\",\n+ \"chrono\",\n+ \"clap\",\n+ \"cloudflare\",\n+ \"config\",\n+ \"console\",\n+ \"data-encoding\",\n+ \"dirs 1.0.5\",\n+ \"env_logger\",\n+ \"exitfailure\",\n+ \"failure\",\n+ \"flate2\",\n+ \"fs2\",\n+ \"fs_extra\",\n+ \"futures\",\n+ \"futures-util\",\n+ \"http\",\n+ \"hyper\",\n+ \"hyper-tls\",\n+ \"ignore\",\n+ \"indicatif\",\n+ \"lazy_static 1.4.0\",\n+ \"log 0.4.8\",\n+ \"notify\",\n+ \"number_prefix\",\n+ \"openssl\",\n+ \"percent-encoding 1.0.1\",\n+ \"prettytable-rs\",\n+ \"rand 0.6.5\",\n+ \"regex\",\n+ \"reqwest\",\n+ \"serde 1.0.104\",\n+ \"serde_json\",\n+ \"serde_with\",\n+ \"sha2\",\n+ \"tempfile\",\n+ \"text_io\",\n+ \"tokio\",\n+ \"tokio-tungstenite\",\n+ \"toml 0.5.6\",\n+ \"url\",\n+ \"uuid\",\n+ \"which\",\n+ \"ws\",\n ]\n \n [[package]]\n name = \"ws\"\n version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c51a2c47b5798ccc774ffb93ff536aec7c4275d722fd9c740c83cdd1af1f2d94\"\n dependencies = [\n- \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"httparse 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio-extras 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"sha-1 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder\",\n+ \"bytes 0.4.12\",\n+ \"httparse\",\n+ \"log 0.4.8\",\n+ \"mio\",\n+ \"mio-extras\",\n+ \"rand 0.7.3\",\n+ \"sha-1\",\n+ \"slab\",\n+ \"url\",\n ]\n \n [[package]]\n name = \"ws2_32-sys\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\"\n dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8\",\n+ \"winapi-build\",\n ]\n \n [[package]]\n name = \"xattr\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"244c3741f4240ef46274860397c7c74e50eb23624996930e484c16679633a54c\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"yaml-rust\"\n version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"65923dd1784f44da1d2c3dbbc5e822045628c590ba72123e1c73d3c230c4434d\"\n dependencies = [\n- \"linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"linked-hash-map 0.5.2\",\n ]\n \n [[package]]\n name = \"zip\"\n version = \"0.5.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e41ff37ba788e2169b19fa70253b70cb53d9f2db9fb9aea9bcfc5047e02c3bae\"\n dependencies = [\n- \"bzip2 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"podio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[metadata]\n-\"checksum adler32 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d2e7343e7fc9de883d1b0341e0b13970f764c14101234857d2ddafa1cb1cac2\"\n-\"checksum aho-corasick 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"743ad5a418686aad3b87fd14c43badd828cf26e214a00f92a384291cf22e1811\"\n-\"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n-\"checksum anyhow 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7825f6833612eb2414095684fcf6c635becf3ce97fe48cf6421321e93bfbd53c\"\n-\"checksum arc-swap 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d7b8a9123b8027467bce0099fe556c628a53c8d83df0507084c31e9ba2e39aff\"\n-\"checksum arrayref 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a4c527152e37cf757a3f78aae5a06fbeefdb07ccc535c980a3208ee3060dd544\"\n-\"checksum arrayvec 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cff77d8686867eceff3105329d4698d96c2391c176d5d03adc90c7389162b5b8\"\n-\"checksum assert_cmd 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2dc477793bd82ec39799b6f6b3df64938532fdf2ab0d49ef817eac65856a5a1e\"\n-\"checksum async-trait 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"750b1c38a1dfadd108da0f01c08f4cdc7ff1bb39b325f9c82cc972361780a6e1\"\n-\"checksum atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\n-\"checksum autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\"\n-\"checksum autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d\"\n-\"checksum backtrace 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7f80256bc78f67e7df7e36d77366f636ed976895d91fe2ab9efa3973e8fe8c4f\"\n-\"checksum backtrace-sys 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d6575f128516de27e3ce99689419835fce9643a9b215a14d2b5b685be018491\"\n-\"checksum base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e\"\n-\"checksum base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b41b7ea54a0c9d92199de89e20e58d49f02f8e699814ef3fdf266f6f748d15c7\"\n-\"checksum binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\" = \"a81dda17f2dbba8271cf61f2ea3e48e3da8aef31665731bce48818cc07863f06\"\n-\"checksum bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n-\"checksum blake2b_simd 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8fb2d74254a3a0b5cac33ac9f8ed0e44aa50378d9dbb2e5d83bd21ed1dc2c8a\"\n-\"checksum block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b\"\n-\"checksum block-padding 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5\"\n-\"checksum bstr 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"502ae1441a0a5adb8fbd38a5955a6416b9493e92b465de5e4a9bde6a539c2c48\"\n-\"checksum bumpalo 3.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5fb8038c1ddc0a5f73787b130f4cc75151e96ed33e417fde765eb5a81e3532f4\"\n-\"checksum byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7\"\n-\"checksum byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7c3dd8985a7111efc5c80b44e23ecdd8c007de8ade3b96595387e812b957cf5\"\n-\"checksum bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"206fdffcfa2df7cbe15601ef46c813fce0965eb3286db6b56c583b814b51c81c\"\n-\"checksum bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"130aac562c0dd69c56b3b1cc8ffd2e17be31d0b6c25b61c96b76231aa23e39e1\"\n-\"checksum bzip2 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42b7c3cbf0fa9c1b82308d57191728ca0256cb821220f4e2fd410a72ade26e3b\"\n-\"checksum bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6584aa36f5ad4c9247f5323b0a42f37802b37a836f0ad87084d7a33961abe25f\"\n-\"checksum c2-chacha 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"214238caa1bf3a496ec3392968969cab8549f96ff30652c9e56885329315f6bb\"\n-\"checksum cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\" = \"95e28fa049fda1c330bcf9d723be7663a899c4679724b34c81e9f5a326aab8cd\"\n-\"checksum cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n-\"checksum chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31850b4a4d6bae316f7a09e691c944c28299298837edc0a03f755618c23cbc01\"\n-\"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n-\"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n-\"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n-\"checksum cloudflare 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b9ce184e2405391f7a967dbeb192a6ab103eba6bb919eab00331b0e18ed92c0a\"\n-\"checksum config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9107d78ed62b3fa5a86e7d18e647abed48cfd8f8fab6c72f4cdb982d196f7e6\"\n-\"checksum console 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ca57c2c14b8a2bf3105bc9d15574aad80babf6a9c44b1058034cdf8bd169628\"\n-\"checksum console 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"45e0f3986890b3acbc782009e2629dfe2baa430ac091519ce3be26164a2ae6c0\"\n-\"checksum constant_time_eq 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"245097e9a4535ee1e3e3931fcfcd55a796a44c643e8596ff6566d68f09b87bbc\"\n-\"checksum core-foundation 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25b9e03f145fd4f2bf705e07b900cd41fc636598fe5dc452fd0db1441c3f496d\"\n-\"checksum core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b\"\n-\"checksum crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n-\"checksum crossbeam 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd66663db5a988098a89599d4857919b3acf7f61402e61365acfd3919857b9be\"\n-\"checksum crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8ec7fcd21571dc78f96cc96243cab8d8f035247c3efd16c687be154c3fa9efa\"\n-\"checksum crossbeam-channel 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"acec9a3b0b3559f15aee4f90746c4e5e293b701c0f7d3925d24e01645267b68c\"\n-\"checksum crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"04973fa96e96579258a5091af6003abde64af786b860f18622b82e026cca60e6\"\n-\"checksum crossbeam-utils 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ce446db02cdc3165b94ae73111e570793400d0794e46125cc4056c81cbb039f4\"\n-\"checksum csv 1.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00affe7f6ab566df61b4be3ce8cf16bc2576bca0963ceb0955e45d514bf9a279\"\n-\"checksum csv-core 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9b5cadb6b25c77aeff80ba701712494213f4a8418fcda2ee11b6560c3ad0bf4c\"\n-\"checksum curl 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"06aa71e9208a54def20792d877bc663d6aae0732b9852e612c4a933177c31283\"\n-\"checksum curl-sys 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c38ca47d60b86d0cc9d42caa90a0885669c2abc9791f871c81f58cdf39e979b\"\n-\"checksum data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f4f47ca1860a761136924ddd2422ba77b2ea54fe8cc75b9040804a0d9d32ad97\"\n-\"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n-\"checksum digest 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\n-\"checksum dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\n-\"checksum dirs 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13aea89a5c93364a98e9b37b2fa237effbb694d5cfe01c5b70941f7eb087d5e3\"\n-\"checksum dirs-sys 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afa0b23de8fd801745c471deffa6e12d248f962c9fd4b4c33787b055599bde7b\"\n-\"checksum dtoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4358a9e11b9a09cf52383b451b49a169e8d797b68aa02301ff586d70d9661ea3\"\n-\"checksum encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n-\"checksum encoding_rs 0.8.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd8d03faa7fe0c1431609dfad7bbe827af30f82e1e2ae6f7ee4fca6bd764bc28\"\n-\"checksum env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\n-\"checksum error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ab49e9dcb602294bc42f9a7dfc9bc6e936fca4418ea300dbfb84fe16de0b7d9\"\n-\"checksum escargot 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ceb9adbf9874d5d028b5e4c5739d22b71988252b25c9c98fe7cf9738bee84597\"\n-\"checksum exitfailure 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2ff5bd832af37f366c6c194d813a11cd90ac484f124f079294f28e357ae40515\"\n-\"checksum failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8273f13c977665c5db7eb2b99ae520952fe5ac831ae4cd09d80c4c7042b5ed9\"\n-\"checksum failure_derive 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0bc225b78e0391e4b8683440bf2e63c2deeeb2ce5189eab46e2b68c6d3725d08\"\n-\"checksum fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n-\"checksum filetime 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1ff6d4dab0aa0c8e6346d46052e93b13a16cf847b54ed357087c35011048cc7d\"\n-\"checksum flate2 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6bd6d6f4752952feb71363cffc9ebac9411b75b87c6ab6058c40c8900cf43c0f\"\n-\"checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n-\"checksum foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\n-\"checksum foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n-\"checksum fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\n-\"checksum fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5f2a4a2034423744d2cc7ca2068453168dcdb82c438419e639a26bd87839c674\"\n-\"checksum fsevent 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5ab7d1bd1bd33cc98b0889831b72da23c0aa4df9cec7e0702f46ecea04b35db6\"\n-\"checksum fsevent-sys 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f41b048a94555da0f42f1d632e2e19510084fb8e303b0daa2816e733fb3644a0\"\n-\"checksum fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n-\"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n-\"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n-\"checksum futures-channel 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7264eb65b194d2fa6ec31b898ead7c332854bfa42521659226e72a585fca5b85\"\n-\"checksum futures-core 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b597b16aa1a19ce2dfde5128a7c656d75346b35601a640be2d9efd4e9c83609d\"\n-\"checksum futures-io 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d429f824b5e5dbd45fc8e54e1005a37e1f8c6d570cd64d0b59b24d3a80b8b8e\"\n-\"checksum futures-sink 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"04299e123547ea7c56f3e1b376703142f5fc0b6700433eed549e9d0b8a75a66c\"\n-\"checksum futures-task 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"86f9ceab4bce46555ee608b1ec7c414d6b2e76e196ef46fa5a8d4815a8571398\"\n-\"checksum futures-util 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7d2f1296f7644d2cd908ebb2fa74645608e39f117c72bac251d40418c6d74c4f\"\n-\"checksum generic-array 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec\"\n-\"checksum getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb\"\n-\"checksum globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925aa2cac82d8834e2b2a4415b6f6879757fb5c0928fc445ae76461a12eed8f2\"\n-\"checksum h2 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b9433d71e471c1736fd5a61b671fc0b148d7a2992f666c958d03cd8feb3b88d1\"\n-\"checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n-\"checksum hermit-abi 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eff2656d88f158ce120947499e971d743c05dbcbed62e5bd2f38f1698bbc3772\"\n-\"checksum hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n-\"checksum http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b708cc7f06493459026f53b9a61a7a121a5d1ec6238dee58ea4941132b30156b\"\n-\"checksum http-body 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13d5ff830006f7646652e057693569bfe0d51760c0085a071769d142a205111b\"\n-\"checksum httparse 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd179ae861f0c2e53da70d892f5f3029f9594be0c41dc5269cd371691b1dc2f9\"\n-\"checksum humantime 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\n-\"checksum hyper 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa1c527bbc634be72aa7ba31e4e4def9bbb020f5416916279b7c705cd838893e\"\n-\"checksum hyper-tls 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3adcd308402b9553630734e9c36b77a7e48b3821251ca2493e8cd596763aafaa\"\n-\"checksum idna 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\n-\"checksum ignore 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"522daefc3b69036f80c7d2990b28ff9e0471c683bad05ca258e0a01dd22c5a1e\"\n-\"checksum indexmap 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"076f042c5b7b98f31d205f1249267e12a6518c1481e9dae9764af19b707d2292\"\n-\"checksum indicatif 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8572bccfb0665e70b7faf44ee28841b8e0823450cd4ad562a76b5a3c4bf48487\"\n-\"checksum inotify 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"24e40d6fd5d64e2082e0c796495c8ef5ad667a96d03e5aaa0becfd9d47bcbfb8\"\n-\"checksum inotify-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e74a1aa87c59aeff6ef2cc2fa62d41bc43f54952f55652656b18a02fd5e356c0\"\n-\"checksum iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2b3ea6ff95e175473f8ffe6a7eb7c00d054240321b84c57051175fe3c1e075e\"\n-\"checksum is_executable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"302d553b8abc8187beb7d663e34c065ac4570b273bc9511a50e940e99409c577\"\n-\"checksum itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8b7a7c0c47db5545ed3fef7468ee7bb5b74691498139e4b3f6a20685dc6dd8e\"\n-\"checksum js-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7889c7c36282151f6bf465be4700359318aef36baa951462382eae49e9577cf9\"\n-\"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n-\"checksum lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n-\"checksum lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b294d6fa9ee409a054354afc4352b0b9ef7ca222c69b8812cbea9e7d2bf3783f\"\n-\"checksum libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d515b1f41455adea1313a4a2ac8a8a477634fbae63cc6100e3aebb207ce61558\"\n-\"checksum libflate 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9135df43b1f5d0e333385cb6e7897ecd1a43d7d11b91ac003f4d2c2d2401fdd\"\n-\"checksum libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2eb5e43362e38e2bca2fd5f5134c4d4564a23a5c28e9b95411652021a8675ebe\"\n-\"checksum linked-hash-map 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d262045c5b87c0861b3f004610afd0e2c851e2908d08b6c870cbb9d5f494ecd\"\n-\"checksum linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\n-\"checksum lock_api 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"79b2de95ecb4691949fea4716ca53cdbcfccb2c612e19644a8bad05edcf9f47b\"\n-\"checksum log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n-\"checksum log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n-\"checksum matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n-\"checksum memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3197e20c7edb283f87c071ddfc7a2cca8f8e0b888c242959846a6fce03c72223\"\n-\"checksum mime 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d\"\n-\"checksum mime_guess 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1a0ed03949aef72dbdf3116a383d7b38b4768e6f960528cd6a6044aa9ed68599\"\n-\"checksum miniz_oxide 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa679ff6578b1cddee93d7e82e263b94a575e0bfced07284eb0c037c1d2416a5\"\n-\"checksum mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"302dec22bcf6bae6dfb69c647187f4b4d0fb6f535521f7bc022430ce8e12008f\"\n-\"checksum mio-extras 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"52403fe290012ce777c4626790c8951324a2b9e3316b3143779c72b029742f19\"\n-\"checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\n-\"checksum native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b2df1a4c22fd44a62147fd8f13dd0f95c9d8ca7b2610299b2a2f9cf8964274e\"\n-\"checksum net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42550d9fb7b6684a6d404d9fa7250c2eb2646df731d1c06afc06dcee9e1bcf88\"\n-\"checksum nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2ad2a91a8e869eeb30b9cb3119ae87773a8f4ae617f41b1eb9c154b2905f7bd6\"\n-\"checksum notify 4.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80ae4a7688d1fab81c5bf19c64fc8db920be8d519ce6336ed4e7efe024724dbd\"\n-\"checksum num-integer 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f6ea62e9d81a77cd3ee9a2a5b9b609447857f3d358704331e4ef39eb247fcba\"\n-\"checksum num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92e5113e9fd4cc14ded8e499429f396a20f98c772a47cc8622a736e1ec843c31\"\n-\"checksum num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c62be47e61d1842b9170f0fdeec8eba98e60e90e5446449a0545e5152acd7096\"\n-\"checksum num_cpus 1.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46203554f085ff89c235cd12f7075f3233af9b11ed7c9e16dfe2560d03313ce6\"\n-\"checksum number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17b02fc0ff9a9e4b35b3342880f48e896ebf69f2967921fe8646bf5b7125956a\"\n-\"checksum opaque-debug 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n-\"checksum openssl 0.10.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"973293749822d7dd6370d6da1e523b0d1db19f06c459134c658b2a4261378b52\"\n-\"checksum openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\n-\"checksum openssl-src 111.6.1+1.1.1d (registry+https://github.com/rust-lang/crates.io-index)\" = \"c91b04cb43c1a8a90e934e0cd612e2a5715d976d2d6cff4490278a0cddf35005\"\n-\"checksum openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1024c0a59774200a555087a6da3f253a9095a5f344e353b212ac4c8b8e450986\"\n-\"checksum parking_lot 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92e98c49ab0b7ce5b222f2cc9193fc4efe11c6d0bd4f648e374684a6857b1cfc\"\n-\"checksum parking_lot_core 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7582838484df45743c8434fbff785e8edf260c28748353d44bc0da32e0ceabf1\"\n-\"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n-\"checksum percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n-\"checksum pin-project 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7804a463a8d9572f13453c516a5faea534a2403d7ced2f0c7e100eeff072772c\"\n-\"checksum pin-project-internal 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"385322a45f2ecf3410c68d2a549a4a2685e8051d0f278e39743ff4e451cb9b3f\"\n-\"checksum pin-project-lite 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"237844750cfbb86f67afe27eee600dfbbcb6188d734139b534cbfbf4f96792ae\"\n-\"checksum pin-utils 0.1.0-alpha.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5894c618ce612a3fa23881b152b608bafb8c56cfc22f434a3ba3120b40f7b587\"\n-\"checksum pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05da548ad6865900e60eaba7f589cc0783590a92e940c26953ff81ddbab2d677\"\n-\"checksum podio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"780fb4b6698bbf9cf2444ea5d22411cef2953f0824b98f33cf454ec5615645bd\"\n-\"checksum ppv-lite86 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74490b50b9fbe561ac330df47c08f3f33073d2d00c150f719147d7c54522fa1b\"\n-\"checksum predicates 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9bfe52247e5cc9b2f943682a85a5549fb9662245caf094504e69a2f03fe64d4\"\n-\"checksum predicates-core 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"06075c3a3e92559ff8929e7a280684489ea27fe44805174c3ebd9328dcb37178\"\n-\"checksum predicates-tree 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8e63c4859013b38a76eca2414c64911fba30def9e3202ac461a2d22831220124\"\n-\"checksum prettytable-rs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0fd04b170004fa2daccf418a7f8253aaf033c27760b5f225889024cf66d7ac2e\"\n-\"checksum proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3acb317c6ff86a4e579dfa00fc5e6cca91ecbb4e7eb2df0468805b674eb88548\"\n-\"checksum quick-error 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\n-\"checksum quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n-\"checksum rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n-\"checksum rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\n-\"checksum rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\"\n-\"checksum rand_chacha 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03a2a90da8c7523f554344f921aa97283eadf6ac484a6d2a7d0212fa7f8d6853\"\n-\"checksum rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\n-\"checksum rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc\"\n-\"checksum rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\n-\"checksum rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b40677c7be09ae76218dc623efbf7b18e34bced3f38883af07bb75630a21bc4\"\n-\"checksum rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\n-\"checksum rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ded997c9d5f13925be2a6fd7e66bf1872597f759fd9dd93513dd7e92e5a5ee08\"\n-\"checksum rand_jitter 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1166d5c91dc97b88d1decc3285bb0a99ed84b05cfd0bc2341bdf2d43fc41e39b\"\n-\"checksum rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b75f676a1e053fc562eafbb47838d67c84801e38fc1ba459e8f180deabd5071\"\n-\"checksum rand_pcg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abf9b09b01790cfe0364f52bf32995ea3c39f4d2dd011eac241d2914146d0b44\"\n-\"checksum rand_xorshift 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cbf7e9e623549b0e21f6e97cf8ecf247c1a8fd2e8a992ae265314300b2455d5c\"\n-\"checksum rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\"\n-\"checksum redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2439c63f3f6139d1b57529d16bc3b8bb855230c8efcc5d3a896c8bea7c3b1e84\"\n-\"checksum redox_users 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09b23093265f8d200fa7b4c2c76297f47e681c655f6f1285a8780d6a022f7431\"\n-\"checksum regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"322cf97724bea3ee221b78fe25ac9c46114ebb51747ad5babd51a2fc6a8235a8\"\n-\"checksum regex-automata 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92b73c2a1770c255c240eaa4ee600df1704a38dc3feaa6e949e7fcd4f8dc09f9\"\n-\"checksum regex-syntax 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b28dfe3fe9badec5dbf0a79a9cccad2cfc2ab5484bdb3e44cbd1ae8b3ba2be06\"\n-\"checksum remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e\"\n-\"checksum reqwest 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0e798e19e258bf6c30a304622e3e9ac820e483b06a1857a026e1f109b113fe4\"\n-\"checksum rle-decode-fast 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cabe4fa914dec5870285fa7f71f602645da47c486e68486d2b4ceb4a343e90ac\"\n-\"checksum rust-argon2 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2bc8af4bda8e1ff4932523b94d3dd20ee30a87232323eda55903ffd71d2fb017\"\n-\"checksum rust-ini 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e52c148ef37f8c375d49d5a73aa70713125b7f19095948a923f80afdeb22ec2\"\n-\"checksum rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n-\"checksum ryu 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bfa8506c1de11c9c4e4c38863ccbe02a305c8188e85a05a784c9e11e1c3910c8\"\n-\"checksum same-file 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\n-\"checksum schannel 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"507a9e6e8ffe0a4e0ebb9a10293e62fdf7657c06f1b8bb07a8fcf697d2abf295\"\n-\"checksum scopeguard 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b42e15e59b18a828bbf5c58ea01debb36b9b096346de35d941dcb89009f24a0d\"\n-\"checksum security-framework 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ef2429d7cefe5fd28bd1d2ed41c944547d4ff84776f5935b456da44593a16df\"\n-\"checksum security-framework-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e31493fc37615debb8c5090a7aeb4a9730bc61e77ab10b9af59f1a202284f895\"\n-\"checksum serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9dad3f759919b92c3068c696c15c3d17238234498bbdcc80f2c469606f948ac8\"\n-\"checksum serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\" = \"414115f25f818d7dfccec8ee535d76949ae78584fc4f79a6f45a904bf8ab4449\"\n-\"checksum serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b833c5ad67d52ced5f5938b2980f32a9c1c5ef047f0b4fb3127e7a423c76153\"\n-\"checksum serde_derive 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\" = \"128f9e303a5a29922045a830221b8f78ec74a5f544944f3d5984f8ec3895ef64\"\n-\"checksum serde_json 1.0.46 (registry+https://github.com/rust-lang/crates.io-index)\" = \"21b01d7f0288608a01dca632cf1df859df6fd6ffa885300fc275ce2ba6221953\"\n-\"checksum serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35965fa1d2413717053d67c2df1f5c3e1763fbf77200ea7e767523707bd5a0af\"\n-\"checksum serde_test 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"110b3dbdf8607ec493c22d5d947753282f3bae73c0f56d322af1e8c78e4c23d5\"\n-\"checksum serde_urlencoded 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ec5d77e2d4c73717816afac02670d5c4f534ea95ed430442cad02e7a6e32c97\"\n-\"checksum serde_with 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89d3d595d64120bbbc70b7f6d5ae63298b62a3d9f373ec2f56acf5365ca8a444\"\n-\"checksum serde_with_macros 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4070d2c9b9d258465ad1d82aabb985b84cd9a3afa94da25ece5a9938ba5f1606\"\n-\"checksum sha-1 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df\"\n-\"checksum sha2 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"27044adfd2e1f077f649f59deb9490d3941d674002f7d062870a60ebe9bd47a0\"\n-\"checksum siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b8de496cf83d4ed58b6be86c3a275b8602f6ffe98d3024a869e124147a9a3ac\"\n-\"checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n-\"checksum slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1cc9c640a4adbfbcc11ffb95efe5aa7af7309e002adab54b185507dbf2377b99\"\n-\"checksum slog-async 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"78ca925b180da88ccc595cbe4a3d378d79cb49fe5906c2cbc2488eaf700913ee\"\n-\"checksum slog-kvfilter 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae939ed7d169eed9699f4f5cd440f046f5dc5dfc27c19e3cd311619594c175e0\"\n-\"checksum slog-scope 4.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c44c89dd8b0ae4537d1ae318353eaf7840b4869c536e31c41e963d1ea523ee6\"\n-\"checksum slog-stdlog 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1c469573d1e3f36f9eee66cd132206caf47b50c94b1f6c6e7b4d8235e9ecf01\"\n-\"checksum slog-term 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"124501187c410b6a46fe8a47a48435ae462fae4e02d03c558d358f40b17308cb\"\n-\"checksum sloggers 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d41aa58f9a02e205e21117ffa08e94c37f06e1f1009be2639b621f351a75796d\"\n-\"checksum smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5c2fb2ec9bcd216a5b0d0ccf31ab17b5ed1d627960edff65bbe95d3ce221cefc\"\n-\"checksum socket2 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8b74de517221a2cb01a53349cf54182acdc31a074727d3079068448c0676d85\"\n-\"checksum sourcefile 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4bf77cb82ba8453b42b6ae1d692e4cdc92f9a47beaf89a847c8be83f4e328ad3\"\n-\"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n-\"checksum syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"af6f3550d8dff9ef7dc34d384ac6f107e5d31c8f57d9f28e0081503f547ac8f5\"\n-\"checksum synstructure 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"67656ea1dc1b41b1451851562ea232ec2e5a80242139f7e679ceccfb5d61f545\"\n-\"checksum take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f764005d11ee5f36500a149ace24e00e3da98b0158b3e2d53a7495660d3f4d60\"\n-\"checksum tar 0.4.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3196bfbffbba3e57481b6ea32249fbaf590396a52505a2615adbb79d9d826d3\"\n-\"checksum tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\n-\"checksum term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42\"\n-\"checksum term 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5\"\n-\"checksum termcolor 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb6bfa289a4d7c5766392812c0a1f4c1ba45afa1ad47803c11e1f407d846d75f\"\n-\"checksum termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n-\"checksum text_io 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6cb170b4f47dc48835fbc56259c12d8963e542b05a24be2e3a1f5a6c320fd2d4\"\n-\"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n-\"checksum thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d40c6d1b69745a6ec6fb1ca717914848da4b44ae29d9b3080cbee91d72a69b14\"\n-\"checksum time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f\"\n-\"checksum tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8fdd17989496f49cdc57978c96f0c9fe5e4a58a8bddc6813c449a4624f6a030b\"\n-\"checksum tokio-tls 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7bde02a3a5291395f59b06ec6945a3077602fac2b07eeeaf0dee2122f3619828\"\n-\"checksum tokio-util 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"571da51182ec208780505a32528fc5512a8fe1443ab960b3f2f3ef093cd16930\"\n-\"checksum toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"758664fc71a3a69038656bee8b6be6477d2a6c315a6b81f7081f591bffa4111f\"\n-\"checksum toml 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffc92d160b1eef40665be3a05630d003936a3bc7da7421277846c2613e92c71a\"\n-\"checksum tower-service 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e987b6bf443f4b5b3b6f38704195592cca41c5bb7aedd3c3693c7081f8289860\"\n-\"checksum trackable 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11475c3c53b075360eac9794965822cb053996046545f91cf61d90e00b72efa5\"\n-\"checksum trackable_derive 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edcf0b9b2caa5f4804ef77aeee1b929629853d806117c48258f402b69737e65c\"\n-\"checksum treeline 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7f741b240f1a48843f9b8e0444fb55fb2a4ff67293b50a9179dfd5ea67f8d41\"\n-\"checksum try-lock 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e604eb7b43c06650e854be16a2a03155743d3752dd1c943f6829e26b7a36e382\"\n-\"checksum typenum 1.11.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d2783fe2d6b8c1101136184eb41be8b1ad379e4657050b8aaff0c79ee7575f9\"\n-\"checksum unicase 2.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"\n-\"checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n-\"checksum unicode-normalization 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5479532badd04e128284890390c1e876ef7a993d0570b3597ae43dfa1d59afa4\"\n-\"checksum unicode-segmentation 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e83e153d1053cbb5a118eeff7fd5be06ed99153f00dbcd8ae310c5fb2b22edc0\"\n-\"checksum unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"caaa9d531767d1ff2150b9332433f32a24622147e5ebb1f26409d5da67afd479\"\n-\"checksum unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n-\"checksum url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"829d4a8476c35c9bf0bbce5a3b23f4106f79728039b726d292bb93bc106787cb\"\n-\"checksum uuid 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9fde2f6a4bea1d6e007c4ad38c6839fa71cbb63b6dbf5b595aa38dc9b1093c11\"\n-\"checksum vcpkg 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fc439f2794e98976c88a2a2dafce96b930fe8010b0a256b3c2199a773933168\"\n-\"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n-\"checksum version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"914b1a6776c4c929a602fafd8bc742e06365d4bcbe48c30f9cca5824f70dc9dd\"\n-\"checksum version_check 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"078775d0255232fb988e6fccf26ddc9d1ac274299aaedcedce21c6f72cc533ce\"\n-\"checksum walkdir 2.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"777182bc735b6424e1a57516d35ed72cb8019d85c8c9bf536dccb3445c1a2f7d\"\n-\"checksum want 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0\"\n-\"checksum wasi 0.9.0+wasi-snapshot-preview1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n-\"checksum wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5205e9afdf42282b192e2310a5b463a6d1c1d774e30dc3c791ac37ab42d2616c\"\n-\"checksum wasm-bindgen-backend 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11cdb95816290b525b32587d76419facd99662a07e59d3cdb560488a819d9a45\"\n-\"checksum wasm-bindgen-futures 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8bbdd49e3e28b40dec6a9ba8d17798245ce32b019513a845369c641b275135d9\"\n-\"checksum wasm-bindgen-macro 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"574094772ce6921576fb6f2e3f7497b8a76273b6db092be18fc48a082de09dc3\"\n-\"checksum wasm-bindgen-macro-support 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e85031354f25eaebe78bb7db1c3d86140312a911a106b2e29f9cc440ce3e7668\"\n-\"checksum wasm-bindgen-shared 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5e7e61fc929f4c0dddb748b102ebf9f632e2b8d739f2016542b4de2965a9601\"\n-\"checksum wasm-bindgen-webidl 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef012a0d93fc0432df126a8eaf547b2dce25a8ce9212e1d3cbeef5c11157975d\"\n-\"checksum web-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aaf97caf6aa8c2b1dac90faf0db529d9d63c93846cca4911856f78a83cebf53b\"\n-\"checksum weedle 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3bb43f70885151e629e2a19ce9e50bd730fd436cfd4b666894c9ce4de9141164\"\n-\"checksum which 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b57acb10231b9493c8472b20cb57317d0679a49e0bdbee44b3b803a6473af164\"\n-\"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n-\"checksum winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8093091eeb260906a183e6ae1abdba2ef5ef2257a21801128899c3fc699229c6\"\n-\"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n-\"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n-\"checksum winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ccfbf554c6ad11084fb7517daca16cfdcaccbdadba4fc336f032a8b12c2ad80\"\n-\"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n-\"checksum winreg 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2986deb581c4fe11b621998a5e53361efe6b48a151178d0cd9eeffa4dc6acc9\"\n-\"checksum ws 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c51a2c47b5798ccc774ffb93ff536aec7c4275d722fd9c740c83cdd1af1f2d94\"\n-\"checksum ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\"\n-\"checksum xattr 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"244c3741f4240ef46274860397c7c74e50eb23624996930e484c16679633a54c\"\n-\"checksum yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"65923dd1784f44da1d2c3dbbc5e822045628c590ba72123e1c73d3c230c4434d\"\n-\"checksum zip 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e41ff37ba788e2169b19fa70253b70cb53d9f2db9fb9aea9bcfc5047e02c3bae\"\n+ \"bzip2\",\n+ \"crc32fast\",\n+ \"flate2\",\n+ \"podio\",\n+ \"time\",\n+]\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -369,6 +370,47 @@ fn run() -> Result<(), failure::Error> {\n                         .help(\"toggle verbose output\"),\n                 ),\n         )\n+        .subcommand(\n+            SubCommand::with_name(\"dev\")\n+                .about(&*format!(\n+                    \"{} Start a local server for developing your worker\",\n+                    emoji::EAR\n+                ))\n+                .arg(\n+                    Arg::with_name(\"env\")\n+                        .help(\"environment to build\")\n+                        .short(\"e\")\n+                        .long(\"env\")\n+                        .takes_value(true)\n+                )\n+                .arg(\n+                    Arg::with_name(\"port\")\n+                        .help(\"port to listen on. defaults to 8787\")\n+                        .short(\"p\")\n+                        .long(\"port\")\n+                        .takes_value(true)\n+                )\n+                .arg(\n+                    Arg::with_name(\"host\")\n+                        .help(\"domain to test behind your worker. defaults to example.com\")\n+                        .short(\"h\")\n+                        .long(\"host\")\n+                        .takes_value(true)\n+                )\n+                .arg(\n+                    Arg::with_name(\"ip\")\n+                        .help(\"ip to listsen on. defaults to localhost\")\n+                        .short(\"i\")\n+                        .long(\"ip\")\n+                        .takes_value(true)\n+                )\n+                .arg(\n+                    Arg::with_name(\"verbose\")\n+                        .long(\"verbose\")\n+                        .takes_value(false)\n+                        .help(\"toggle verbose output\")\n+                ),\n+        )\n         .subcommand(\n             SubCommand::with_name(\"publish\")\n                 .about(&*format!(\n",
        "problem_statement": "Create a dev server\nThis issue is meant to be a summary of everything associated with [this milestone](https://github.com/cloudflare/wrangler/milestone/18) - for more detailed information, please look at the issues and PRs listed there.\r\n\r\nThe overarching goal is to create a \"local\" development environment for Workers that only requires an Internet connection. Expose the server on a configurable IP and port, and take care of uploading the script to the preview service and sending the necessary authentication headers. \r\n\r\nThis feature will proxy requests to rawhttp.cloudflareworkers.com and future work will be built on top of how this service is currently implemented.\r\n\r\nThe proxy will need to mimic what the UI does:\r\n\r\n- Send the same path to execute the worker to the preview endpoint\r\n- Send the same HTTP method to execute the worker to the preview endpoint\r\n- Append `cf-ew-` to all request headers #873 \r\n- Strip `cf-ew-` from response headers #872 \r\n- Pipe console.log output via the chrome devtools protocol #875 \r\n\r\nThe proxy will depend on the following endpoints:\r\n\r\n1) https://rawhttp.cloudflareworkers.com\r\n1) https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}/preview\r\n1) https://cloudflareworkers.com/script\n",
        "hints_text": "",
        "created_at": "2019-11-19T21:27:09Z",
        "version": "1.7"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 879,
        "instance_id": "cloudflare__wrangler-legacy-879",
        "issue_numbers": [
            "834"
        ],
        "base_commit": "87eaecc5902718813fec3eab03b8dd0c0f31c883",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2403,6 +2403,7 @@ dependencies = [\n  \"serde 1.0.101 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"sha2 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"text_io 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -46,6 +46,7 @@ regex = \"1\"\n sha2 = \"0.8.0\"\n data-encoding = \"2.1.2\"\n ignore = \"0.4.10\"\n+tempfile = \"3.1.0\"\n \n [dev-dependencies]\n assert_cmd = \"0.11.1\"\ndiff --git a/src/commands/config/mod.rs b/src/commands/config/mod.rs\n--- a/src/commands/config/mod.rs\n+++ b/src/commands/config/mod.rs\n@@ -1,17 +1,16 @@\n-use crate::terminal::message;\n-use std::fs;\n use std::fs::File;\n #[cfg(not(target_os = \"windows\"))]\n use std::os::unix::fs::PermissionsExt;\n use std::path::PathBuf;\n \n-use crate::http;\n-use crate::settings::global_user::{get_global_config_dir, GlobalUser};\n-\n use cloudflare::endpoints::user::{GetUserDetails, GetUserTokenStatus};\n use cloudflare::framework::apiclient::ApiClient;\n use cloudflare::framework::HttpApiClientConfig;\n \n+use crate::http;\n+use crate::settings::global_user::{get_global_config_path, GlobalUser};\n+use crate::terminal::message;\n+\n // set the permissions on the dir, we want to avoid that other user reads to file\n #[cfg(not(target_os = \"windows\"))]\n pub fn set_file_mode(file: &PathBuf) {\ndiff --git a/src/commands/config/mod.rs b/src/commands/config/mod.rs\n--- a/src/commands/config/mod.rs\n+++ b/src/commands/config/mod.rs\n@@ -27,13 +26,8 @@ pub fn global_config(user: &GlobalUser, verify: bool) -> Result<(), failure::Err\n         validate_credentials(user)?;\n     }\n \n-    let toml = toml::to_string(&user)?;\n-\n-    let config_dir = get_global_config_dir().expect(\"could not find global config directory\");\n-    fs::create_dir_all(&config_dir)?;\n-\n-    let config_file = config_dir.join(\"default.toml\");\n-    fs::write(&config_file, &toml)?;\n+    let config_file = get_global_config_path()?;\n+    user.to_file(&config_file)?;\n \n     // set permissions on the file\n     #[cfg(not(target_os = \"windows\"))]\ndiff --git a/src/commands/preview/upload.rs b/src/commands/preview/upload.rs\n--- a/src/commands/preview/upload.rs\n+++ b/src/commands/preview/upload.rs\n@@ -77,8 +77,8 @@ pub fn upload(\n             message::warn(\n                 \"You haven't run `wrangler config`. Running preview without authentication\",\n             );\n-            message::help(\n-                \"Run `wrangler config` or set either $CF_API_TOKEN or ($CF_EMAIL, $CF_API_KEY) to configure your user.\",\n+            message::big_info(\n+                \"Please run `wrangler config` or visit https://developers.cloudflare.com/workers/tooling/wrangler/configuration/#using-environment-variables for info on configuring with environment variables\",\n             );\n \n             if sites_preview {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -416,8 +416,8 @@ fn run() -> Result<(), failure::Error> {\n \n         let user: GlobalUser = if default {\n             // API Tokens are the default\n-            message::info(\"To find your API token, go to https://dash.cloudflare.com/profile/api-tokens and create it using the \\\"Edit Cloudflare Workers\\\" template\");\n-            message::info(\"If you are trying to use your Global API Key instead of an API Token (Not Recommended), run \\\"wrangler config --api-key\\\".\");\n+            message::big_info(\"To find your API token, go to https://dash.cloudflare.com/profile/api-tokens\\n\\tand create it using the \\\"Edit Cloudflare Workers\\\" template\");\n+            message::big_info(\"If you are trying to use your Global API Key instead of an API Token\\n\\t(Not Recommended), run \\\"wrangler config --api-key\\\".\\n\");\n             println!(\"Enter API token: \");\n             let mut api_token: String = read!(\"{}\\n\");\n             api_token.truncate(api_token.trim_end().len());\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -1,12 +1,22 @@\n use std::env;\n+use std::fs;\n+use std::io::prelude::*;\n use std::path::{Path, PathBuf};\n \n use cloudflare::framework::auth::Credentials;\n-use log::info;\n+use config;\n use serde::{Deserialize, Serialize};\n \n+use crate::settings::{Environment, QueryEnvironment};\n use crate::terminal::emoji;\n-use config::{Config, Environment, File};\n+\n+const DEFAULT_CONFIG_FILE_NAME: &str = \"default.toml\";\n+\n+const CF_API_TOKEN: &str = \"CF_API_TOKEN\";\n+const CF_API_KEY: &str = \"CF_API_KEY\";\n+const CF_EMAIL: &str = \"CF_EMAIL\";\n+\n+static ENV_VAR_WHITELIST: [&str; 3] = [CF_API_TOKEN, CF_API_KEY, CF_EMAIL];\n \n #[derive(Clone, Debug, Deserialize, Serialize, PartialEq)]\n #[serde(untagged)]\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -17,7 +27,92 @@ pub enum GlobalUser {\n \n impl GlobalUser {\n     pub fn new() -> Result<Self, failure::Error> {\n-        get_global_config()\n+        let environment = Environment::with_whitelist(ENV_VAR_WHITELIST.to_vec());\n+\n+        let config_path = get_global_config_path()?;\n+        GlobalUser::build(environment, config_path)\n+    }\n+\n+    fn build<T: 'static + QueryEnvironment>(\n+        environment: T,\n+        config_path: PathBuf,\n+    ) -> Result<Self, failure::Error>\n+    where\n+        T: config::Source + Send + Sync,\n+    {\n+        if let Some(user) = Self::from_env(environment) {\n+            user\n+        } else {\n+            Self::from_file(config_path)\n+        }\n+    }\n+\n+    fn from_env<T: 'static + QueryEnvironment>(\n+        environment: T,\n+    ) -> Option<Result<Self, failure::Error>>\n+    where\n+        T: config::Source + Send + Sync,\n+    {\n+        // if there's some problem with gathering the environment,\n+        // or if there are no relevant environment variables set,\n+        // fall back to config file.\n+        if environment.empty().unwrap_or(true) {\n+            None\n+        } else {\n+            let mut s = config::Config::new();\n+            s.merge(environment).ok();\n+\n+            Some(GlobalUser::from_config(s))\n+        }\n+    }\n+\n+    fn from_file(config_path: PathBuf) -> Result<Self, failure::Error> {\n+        let mut s = config::Config::new();\n+\n+        let config_str = config_path\n+            .to_str()\n+            .expect(\"global config path should be a string\");\n+\n+        // Skip reading global config if non existent\n+        // because envs might be provided\n+        if config_path.exists() {\n+            log::info!(\n+                \"Config path exists. Reading from config file, {}\",\n+                config_str\n+            );\n+            s.merge(config::File::with_name(config_str))?;\n+        } else {\n+            failure::bail!(\n+                \"config path does not exist {}. Try running `wrangler config`\",\n+                config_str\n+            );\n+        }\n+\n+        GlobalUser::from_config(s)\n+    }\n+\n+    pub fn to_file(&self, config_path: &Path) -> Result<(), failure::Error> {\n+        let toml = toml::to_string(self)?;\n+\n+        fs::create_dir_all(&config_path.parent().unwrap())?;\n+        fs::write(&config_path, toml)?;\n+\n+        Ok(())\n+    }\n+\n+    fn from_config(config: config::Config) -> Result<Self, failure::Error> {\n+        let global_user: Result<GlobalUser, config::ConfigError> = config.clone().try_into();\n+        match global_user {\n+            Ok(user) => Ok(user),\n+            Err(_) => {\n+                let msg = format!(\n+                    \"{} Your authentication details are improperly configured.\\nPlease run `wrangler config` or visit\\nhttps://developers.cloudflare.com/workers/tooling/wrangler/configuration/#using-environment-variables\\nfor info on configuring with environment variables\",\n+                    emoji::WARN,\n+                );\n+                log::info!(\"{:?}\", config);\n+                failure::bail!(msg)\n+            }\n+        }\n     }\n }\n \ndiff --git a/src/settings/mod.rs b/src/settings/mod.rs\n--- a/src/settings/mod.rs\n+++ b/src/settings/mod.rs\n@@ -1,4 +1,7 @@\n pub mod binding;\n+mod environment;\n pub mod global_user;\n pub mod metadata;\n pub mod target;\n+\n+pub use environment::{Environment, QueryEnvironment};\ndiff --git a/src/terminal/message.rs b/src/terminal/message.rs\n--- a/src/terminal/message.rs\n+++ b/src/terminal/message.rs\n@@ -10,6 +10,11 @@ pub fn info(msg: &str) {\n     message(&msg);\n }\n \n+pub fn big_info(msg: &str) {\n+    let msg = format!(\"\\n\\t{} {}\", emoji::INFO, msg);\n+    message(&msg);\n+}\n+\n pub fn warn(msg: &str) {\n     let msg = format!(\"{} {}\", emoji::WARN, msg);\n     message(&msg);\n",
        "test_patch": "diff --git /dev/null b/src/settings/environment.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/environment.rs\n@@ -0,0 +1,144 @@\n+use std::collections::HashMap;\n+use std::env;\n+\n+use config::{ConfigError, Source, Value};\n+\n+const PREFIX_PATTERN: &str = \"CF_\";\n+\n+pub trait QueryEnvironment {\n+    fn get_var(&self, var: &'static str) -> Result<String, std::env::VarError>;\n+\n+    fn empty(&self) -> Result<bool, failure::Error>;\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct Environment {\n+    whitelist: Vec<&'static str>,\n+}\n+\n+impl Environment {\n+    pub fn with_whitelist(whitelist: Vec<&'static str>) -> Self {\n+        Environment { whitelist }\n+    }\n+}\n+\n+impl QueryEnvironment for Environment {\n+    fn get_var(&self, var: &'static str) -> Result<String, std::env::VarError> {\n+        env::var(var)\n+    }\n+\n+    fn empty(&self) -> Result<bool, failure::Error> {\n+        let env = self.collect()?;\n+\n+        Ok(env.is_empty())\n+    }\n+}\n+\n+// Source trait implementation for use with Config::merge\n+// until config crate removal is complete. This is effectively a\n+// copy of the config crate's impl of Source for its Environment\n+// struct, but rather than pulling the whole environment in #collect,\n+// we pull in only whitelisted values, and rather than taking a custom\n+// prefix, we assume a prefix of `CF_`.\n+impl Source for Environment {\n+    fn clone_into_box(&self) -> Box<dyn Source + Send + Sync> {\n+        Box::new((*self).clone())\n+    }\n+\n+    fn collect(&self) -> Result<HashMap<String, Value>, ConfigError> {\n+        let mut m = HashMap::new();\n+        let uri: String = \"env\".into();\n+\n+        for key in &self.whitelist {\n+            if let Some(value) = env::var(key).ok() {\n+                // remove the `CF` prefix before adding to collection\n+                let key = if key.starts_with(PREFIX_PATTERN) {\n+                    &key[PREFIX_PATTERN.len()..]\n+                } else {\n+                    key\n+                };\n+\n+                m.insert(key.to_lowercase(), Value::new(Some(&uri), value));\n+            }\n+        }\n+\n+        Ok(m)\n+    }\n+}\n+\n+#[derive(Clone, Debug, Default)]\n+pub struct MockEnvironment {\n+    vars: Vec<(&'static str, &'static str)>,\n+}\n+\n+impl MockEnvironment {\n+    pub fn set(&mut self, key: &'static str, value: &'static str) -> &Self {\n+        self.vars.push((key, value));\n+\n+        self\n+    }\n+}\n+\n+impl QueryEnvironment for MockEnvironment {\n+    #[allow(unused_variables)]\n+    fn get_var(&self, var: &'static str) -> Result<String, std::env::VarError> {\n+        Ok(\"Some Mocked Result\".to_string()) // Returns a mocked response\n+    }\n+\n+    fn empty(&self) -> Result<bool, failure::Error> {\n+        Ok(self.vars.is_empty())\n+    }\n+}\n+\n+// config::Source trait implementation for use with config::Config.merge\n+// until config crate removal is complete.\n+impl Source for MockEnvironment {\n+    fn clone_into_box(&self) -> Box<dyn Source + Send + Sync> {\n+        Box::new((*self).clone())\n+    }\n+\n+    fn collect(&self) -> Result<HashMap<String, Value>, ConfigError> {\n+        let mut m = HashMap::new();\n+        let uri: String = \"env\".into();\n+\n+        for (key, value) in &self.vars {\n+            // remove the `CF` prefix before adding to collection\n+            let prefix_pattern = \"CF_\";\n+            let key = &key[prefix_pattern.len()..];\n+\n+            m.insert(key.to_lowercase(), Value::new(Some(&uri), *value));\n+        }\n+\n+        Ok(m)\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn it_gets_from_the_environment() {\n+        env::set_var(\"CF_API_KEY\", \"waylongapikey\");\n+        env::set_var(\"CF_EMAIL\", \"user@example.com\");\n+        env::set_var(\"CF_IRRELEVANT\", \"irrelevant\");\n+\n+        let environment = Environment::with_whitelist(vec![\"CF_API_KEY\", \"CF_EMAIL\"]);\n+\n+        let mut expected_env_vars: HashMap<String, Value> = HashMap::new();\n+\n+        // we expect that our environment variables will be stripped of the\n+        // `CF_` prefix, and that they will be downcased; consistent with the\n+        // behavior of `config::Environment::with_prefix(\"CF\")`\n+        expected_env_vars.insert(\n+            \"api_key\".to_string(),\n+            Value::new(Some(&\"env\".to_string()), \"waylongapikey\"),\n+        );\n+        expected_env_vars.insert(\n+            \"email\".to_string(),\n+            Value::new(Some(&\"env\".to_string()), \"user@example.com\"),\n+        );\n+\n+        assert_eq!(environment.collect().unwrap(), expected_env_vars);\n+    }\n+}\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -33,63 +128,28 @@ impl From<GlobalUser> for Credentials {\n     }\n }\n \n-fn get_global_config() -> Result<GlobalUser, failure::Error> {\n-    let mut s = Config::new();\n-\n-    let config_path = get_global_config_dir()\n-        .expect(\"could not find global config directory\")\n-        .join(\"default.toml\");\n-    let config_str = config_path\n-        .to_str()\n-        .expect(\"global config path should be a string\");\n-\n-    // Skip reading global config if non existent\n-    // because envs might be provided\n-    if config_path.exists() {\n-        info!(\n-            \"Config path exists. Reading from config file, {}\",\n-            config_str\n-        );\n-        s.merge(File::with_name(config_str))?;\n-    }\n-\n-    // Eg.. `CF_API_KEY=farts` would set the `account_auth_key` key\n-    // envs are: CF_EMAIL, CF_API_KEY and CF_API_TOKEN\n-    s.merge(Environment::with_prefix(\"CF\"))?;\n-\n-    let global_user: Result<GlobalUser, config::ConfigError> = s.try_into();\n-    match global_user {\n-        Ok(s) => Ok(s),\n-        Err(e) => {\n-            let msg = format!(\n-                \"{} Your global config has an error, run `wrangler config`: {}\",\n-                emoji::WARN,\n-                e\n-            );\n-            failure::bail!(msg)\n-        }\n-    }\n-}\n-\n-pub fn get_global_config_dir() -> Result<PathBuf, failure::Error> {\n+pub fn get_global_config_path() -> Result<PathBuf, failure::Error> {\n     let home_dir = if let Ok(value) = env::var(\"WRANGLER_HOME\") {\n-        info!(\"Using WRANGLER_HOME: {}\", value);\n+        log::info!(\"Using $WRANGLER_HOME: {}\", value);\n         Path::new(&value).to_path_buf()\n     } else {\n-        info!(\"No WRANGLER_HOME detected\");\n+        log::info!(\"No $WRANGLER_HOME detected, using $HOME\");\n         dirs::home_dir()\n-            .expect(\"oops no home dir\")\n+            .expect(\"Could not find home directory\")\n             .join(\".wrangler\")\n     };\n-    let global_config_dir = home_dir.join(\"config\");\n-    info!(\"Using global config dir: {:?}\", global_config_dir);\n-    Ok(global_config_dir)\n+    let global_config_file = home_dir.join(\"config\").join(DEFAULT_CONFIG_FILE_NAME);\n+    log::info!(\"Using global config file: {}\", global_config_file.display());\n+    Ok(global_config_file)\n }\n \n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use std::env;\n+    use std::fs::File;\n+    use tempfile::tempdir;\n+\n+    use crate::settings::environment::MockEnvironment;\n \n     #[test]\n     fn it_can_prioritize_token_input() {\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -97,11 +157,15 @@ mod tests {\n         // This test evaluates whether the GlobalUser returned is\n         // a GlobalUser::TokenAuth (expected behavior; token\n         // should be prioritized over email + global API key pair.)\n-        env::set_var(\"CF_API_TOKEN\", \"foo\");\n-        env::set_var(\"CF_EMAIL\", \"test@cloudflare.com\");\n-        env::set_var(\"CF_API_KEY\", \"bar\");\n+        let mut mock_env = MockEnvironment::default();\n+        mock_env.set(CF_API_TOKEN, \"foo\");\n+        mock_env.set(CF_EMAIL, \"test@cloudflare.com\");\n+        mock_env.set(CF_API_KEY, \"bar\");\n+\n+        let tmp_dir = tempdir().unwrap();\n+        let config_dir = test_config_dir(&tmp_dir, None).unwrap();\n \n-        let user = get_global_config().unwrap();\n+        let user = GlobalUser::build(mock_env, config_dir).unwrap();\n         assert_eq!(\n             user,\n             GlobalUser::TokenAuth {\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -109,4 +173,102 @@ mod tests {\n             }\n         );\n     }\n+\n+    #[test]\n+    fn it_can_prioritize_env_vars() {\n+        let api_token = \"thisisanapitoken\";\n+        let api_key = \"reallylongglobalapikey\";\n+        let email = \"user@example.com\";\n+\n+        let file_user = GlobalUser::TokenAuth {\n+            api_token: api_token.to_string(),\n+        };\n+        let env_user = GlobalUser::GlobalKeyAuth {\n+            api_key: api_key.to_string(),\n+            email: email.to_string(),\n+        };\n+\n+        let mut mock_env = MockEnvironment::default();\n+        mock_env.set(CF_EMAIL, email);\n+        mock_env.set(CF_API_KEY, api_key);\n+\n+        let tmp_dir = tempdir().unwrap();\n+        let tmp_config_path = test_config_dir(&tmp_dir, Some(file_user)).unwrap();\n+\n+        let new_user = GlobalUser::build(mock_env, tmp_config_path).unwrap();\n+\n+        assert_eq!(new_user, env_user);\n+    }\n+\n+    #[test]\n+    fn it_falls_through_to_config_with_no_env_vars() {\n+        let mock_env = MockEnvironment::default();\n+\n+        let user = GlobalUser::TokenAuth {\n+            api_token: \"thisisanapitoken\".to_string(),\n+        };\n+\n+        let tmp_dir = tempdir().unwrap();\n+        let tmp_config_path = test_config_dir(&tmp_dir, Some(user.clone())).unwrap();\n+\n+        let new_user = GlobalUser::build(mock_env, tmp_config_path).unwrap();\n+\n+        assert_eq!(new_user, user);\n+    }\n+\n+    #[test]\n+    fn it_fails_if_global_auth_incomplete_in_file() {\n+        let tmp_dir = tempdir().unwrap();\n+        let config_dir = test_config_dir(&tmp_dir, None).unwrap();\n+\n+        let mut file = fs::OpenOptions::new()\n+            .write(true)\n+            .open(&config_dir.as_path())\n+            .unwrap();\n+        let email_config = \"email = \\\"thisisanemail\\\"\";\n+        file.write_all(email_config.as_bytes()).unwrap();\n+\n+        let file_user = GlobalUser::from_file(config_dir);\n+\n+        assert!(file_user.is_err());\n+    }\n+\n+    #[test]\n+    fn it_fails_if_global_auth_incomplete_in_env() {\n+        let mut mock_env = MockEnvironment::default();\n+\n+        mock_env.set(CF_API_KEY, \"apikey\");\n+\n+        let tmp_dir = tempdir().unwrap();\n+        let config_dir = test_config_dir(&tmp_dir, None).unwrap();\n+\n+        let new_user = GlobalUser::build(mock_env, config_dir);\n+\n+        assert!(new_user.is_err());\n+    }\n+\n+    #[test]\n+    fn it_succeeds_with_no_config() {\n+        let mut mock_env = MockEnvironment::default();\n+        mock_env.set(CF_API_KEY, \"apikey\");\n+        mock_env.set(CF_EMAIL, \"email\");\n+        let dummy_path = Path::new(\"./definitely-does-not-exist.txt\").to_path_buf();\n+        let new_user = GlobalUser::build(mock_env, dummy_path);\n+\n+        assert!(new_user.is_ok());\n+    }\n+\n+    fn test_config_dir(\n+        tmp_dir: &tempfile::TempDir,\n+        user: Option<GlobalUser>,\n+    ) -> Result<PathBuf, failure::Error> {\n+        let tmp_config_path = tmp_dir.path().join(DEFAULT_CONFIG_FILE_NAME);\n+        if let Some(user_config) = user {\n+            user_config.to_file(&tmp_config_path)?;\n+        } else {\n+            File::create(&tmp_config_path)?;\n+        }\n+\n+        Ok(tmp_config_path.to_path_buf())\n+    }\n }\n",
        "problem_statement": "prefer environment variables over config file; require complete user config\nper discussion https://github.com/cloudflare/wrangler/pull/471#discussion_r341769828:\r\n\r\nwe should be clear about precedence for user configuration; i.e., we need to explain what happens when you have both a config file and environment variables defined, and what happens if you have both token and global api key/email defined.\r\n\r\ne.g. (strawman): if you have both a config file and env vars, env vars take precedence; if you have all three env vars defined, api token takes precedence.\n",
        "hints_text": "So, our current idea is to have environment variables always override whatever auth is specified in a wrangler config file. That is, the following truth table would be observed:\r\n\r\nEnvironment variables | Config file variables | Used auth method\r\n------------------------------ | -------------------------- | ------------------------\r\ntoken a                         | token b                    | token a\r\nemail b + key b             | email a + key a        | email b + key b\r\ntoken a                         | email a + key a        | token a\r\nemail b + key b             | token a                    | email b + key b\r\n\r\nThis looks simple enough, but things get complicated when we think about when authentication information is partially provided:\r\n\r\nEnvironment variables | Config file variables | Used auth method\r\n------------------------------ | -------------------------- | ------------------------\r\nemail b + no key           | email a + key a        | throw error for missing key\r\nno email  + key b          | email a + key a        | throw error for missing email\r\nemail b + no key           | token a                    | throw error for missing key\r\nno email  + key b          | token a                    | throw error for missing email\r\n\r\n^ I think this approach above makes sense; there should be NO case where email and key aren't in a 1-1 relationship, so if only one of the two is provided in an environment variable, we should throw an error.\r\n\r\nWe can also throw errors for empty keys, emails, or api tokens when `wrangler config` is run. This will prevent situations where someone puts an empty email and their real key in a config file and passes their email through an env var, which is a nonsensical use of wrangler in the first place.\nFrom ashley: I think including at minimum info logs indicating \"found environment variables, using those\" and \"no environment variables, using config file at {}\" would be helpful, even if all we get is the ability to use `RUST_LOG=info`\r\n^ this is a good idea, let's make sure this is part of our implementation",
        "created_at": "2019-11-14T23:54:04Z"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 851,
        "instance_id": "cloudflare__wrangler-legacy-851",
        "issue_numbers": [
            "643"
        ],
        "base_commit": "b6e636020259632aea32e8177f8e4e83865d5660",
        "patch": "diff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -1,34 +1,32 @@\n mod bundle;\n pub mod output;\n \n-use crate::commands::build::watch::wait_for_changes;\n-use crate::commands::build::watch::COOLDOWN_PERIOD;\n-use crate::commands::generate::run_generate;\n-\n-use crate::commands::publish::package::Package;\n-use crate::install;\n-use crate::util;\n pub use bundle::Bundle;\n-use fs2::FileExt;\n-use log::info;\n-use output::WranglerjsOutput;\n-use rand::distributions::Alphanumeric;\n-use rand::{thread_rng, Rng};\n+\n use std::env;\n use std::fs;\n use std::fs::File;\n use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n-\n-use crate::settings::target::Target;\n-use crate::terminal::message;\n-\n-use notify::{self, RecursiveMode, Watcher};\n use std::sync::mpsc::{channel, Sender};\n use std::thread;\n use std::time::Duration;\n \n+use fs2::FileExt;\n+use notify::{self, RecursiveMode, Watcher};\n+use output::WranglerjsOutput;\n+use rand::distributions::Alphanumeric;\n+use rand::{thread_rng, Rng};\n+\n+use crate::commands::build::watch::wait_for_changes;\n+use crate::commands::build::watch::COOLDOWN_PERIOD;\n+use crate::commands::publish::package::Package;\n+use crate::install;\n+use crate::settings::target::Target;\n+use crate::terminal::message;\n+use crate::util;\n+\n // Run the underlying {wranglerjs} executable.\n \n // In Rust we create a virtual file, pass it to {wranglerjs}, run the\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -38,7 +36,7 @@ use std::time::Duration;\n pub fn run_build(target: &Target) -> Result<(), failure::Error> {\n     let (mut command, temp_file, bundle) = setup_build(target)?;\n \n-    info!(\"Running {:?}\", command);\n+    log::info!(\"Running {:?}\", command);\n \n     let status = command.status()?;\n \ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -60,7 +58,7 @@ pub fn run_build_and_watch(target: &Target, tx: Option<Sender<()>>) -> Result<()\n \n     let is_site = target.site.clone();\n \n-    info!(\"Running {:?} in watch mode\", command);\n+    log::info!(\"Running {:?} in watch mode\", command);\n \n     // Turbofish the result of the closure so we can use ?\n     thread::spawn::<_, Result<(), failure::Error>>(move || {\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -70,17 +68,17 @@ pub fn run_build_and_watch(target: &Target, tx: Option<Sender<()>>) -> Result<()\n         let mut watcher = notify::watcher(watcher_tx, Duration::from_secs(1))?;\n \n         watcher.watch(&temp_file, RecursiveMode::Recursive)?;\n-        info!(\"watching temp file {:?}\", &temp_file);\n+        log::info!(\"watching temp file {:?}\", &temp_file);\n \n         if let Some(site) = is_site {\n             let bucket = site.bucket;\n             if Path::new(&bucket).exists() {\n                 watcher.watch(&bucket, RecursiveMode::Recursive)?;\n-                info!(\"watching static sites asset file {:?}\", &bucket);\n+                log::info!(\"watching static sites asset file {:?}\", &bucket);\n             } else {\n                 failure::bail!(\n                     \"Attempting to watch static assets bucket \\\"{}\\\" which doesn't exist\",\n-                    bucket\n+                    bucket.display()\n                 );\n             }\n         }\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -146,8 +144,8 @@ fn setup_build(target: &Target) -> Result<(Command, PathBuf, Bundle), failure::E\n \n     let build_dir = target.build_dir()?;\n \n-    if target.site.is_some() {\n-        scaffold_site_worker(&target)?;\n+    if let Some(site) = &target.site {\n+        site.scaffold_worker()?;\n     }\n \n     run_npm_install(&build_dir).expect(\"could not run `npm install`\");\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -228,22 +226,6 @@ fn build_with_default_webpack(\n     Ok(())\n }\n \n-pub fn scaffold_site_worker(target: &Target) -> Result<(), failure::Error> {\n-    let build_dir = target.build_dir()?;\n-    let template = \"https://github.com/cloudflare/worker-sites-init\";\n-\n-    if !Path::new(&build_dir).exists() {\n-        // TODO: use site.entry_point instead of build_dir explicitly.\n-        run_generate(build_dir.file_name().unwrap().to_str().unwrap(), template)?;\n-\n-        // This step is to prevent having a git repo within a git repo after\n-        // generating the scaffold into an existing project.\n-        fs::remove_dir_all(&build_dir.join(\".git\"))?;\n-    }\n-\n-    Ok(())\n-}\n-\n // Run {npm install} in the specified directory. Skips the install if a\n // {node_modules} is found in the directory.\n fn run_npm_install(dir: &PathBuf) -> Result<(), failure::Error> {\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -256,7 +238,7 @@ fn run_npm_install(dir: &PathBuf) -> Result<(), failure::Error> {\n         let mut command = build_npm_command();\n         command.current_dir(dir.clone());\n         command.arg(\"install\");\n-        info!(\"Running {:?} in directory {:?}\", command, dir);\n+        log::info!(\"Running {:?} in directory {:?}\", command, dir);\n \n         let status = command.status()?;\n \ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -264,7 +246,7 @@ fn run_npm_install(dir: &PathBuf) -> Result<(), failure::Error> {\n             failure::bail!(\"failed to execute `{:?}`: exited with {}\", command, status)\n         }\n     } else {\n-        info!(\"skipping npm install because node_modules exists\");\n+        log::info!(\"skipping npm install because node_modules exists\");\n     }\n \n     // TODO: (sven) figure out why the file doesn't exist in some cases\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -314,13 +296,13 @@ fn install() -> Result<PathBuf, failure::Error> {\n     let wranglerjs_path = if install::target::DEBUG {\n         let source_path = get_source_dir();\n         let wranglerjs_path = source_path.join(\"wranglerjs\");\n-        info!(\"wranglerjs at: {:?}\", wranglerjs_path);\n+        log::info!(\"wranglerjs at: {:?}\", wranglerjs_path);\n         wranglerjs_path\n     } else {\n         let tool_name = \"wranglerjs\";\n         let version = env!(\"CARGO_PKG_VERSION\");\n         let wranglerjs_path = install::install_artifact(tool_name, \"cloudflare\", version)?;\n-        info!(\"wranglerjs downloaded at: {:?}\", wranglerjs_path.path());\n+        log::info!(\"wranglerjs downloaded at: {:?}\", wranglerjs_path.path());\n         wranglerjs_path.path()\n     };\n \ndiff --git a/src/commands/generate/mod.rs b/src/commands/generate/mod.rs\n--- a/src/commands/generate/mod.rs\n+++ b/src/commands/generate/mod.rs\n@@ -12,7 +12,10 @@ pub fn generate(\n     site: bool,\n ) -> Result<(), failure::Error> {\n     validate_worker_name(name)?;\n+\n+    log::info!(\"Generating a new worker project with name '{}'\", name);\n     run_generate(name, template)?;\n+\n     let config_path = PathBuf::from(\"./\").join(&name);\n     // TODO: this is tightly coupled to our site template. Need to remove once\n     // we refine our generate logic.\ndiff --git a/src/commands/generate/mod.rs b/src/commands/generate/mod.rs\n--- a/src/commands/generate/mod.rs\n+++ b/src/commands/generate/mod.rs\n@@ -32,15 +35,13 @@ pub fn run_generate(name: &str, template: &str) -> Result<(), failure::Error> {\n \n     let args = [\"generate\", \"--git\", template, \"--name\", name, \"--force\"];\n \n-    let command = command(name, binary_path, &args);\n+    let command = command(binary_path, &args);\n     let command_name = format!(\"{:?}\", command);\n \n     commands::run(command, &command_name)\n }\n \n-fn command(name: &str, binary_path: PathBuf, args: &[&str]) -> Command {\n-    log::info!(\"Generating a new worker project with name '{}'\", name);\n-\n+fn command(binary_path: PathBuf, args: &[&str]) -> Command {\n     let mut c = if cfg!(target_os = \"windows\") {\n         let mut c = Command::new(\"cmd\");\n         c.arg(\"/C\");\ndiff --git a/src/commands/init/mod.rs b/src/commands/init/mod.rs\n--- a/src/commands/init/mod.rs\n+++ b/src/commands/init/mod.rs\n@@ -1,6 +1,5 @@\n use std::path::{Path, PathBuf};\n \n-use crate::commands;\n use crate::commands::validate_worker_name;\n use crate::settings::target::{Manifest, Site, TargetType};\n use crate::terminal::message;\ndiff --git a/src/commands/init/mod.rs b/src/commands/init/mod.rs\n--- a/src/commands/init/mod.rs\n+++ b/src/commands/init/mod.rs\n@@ -8,7 +7,7 @@ use crate::terminal::message;\n pub fn init(\n     name: Option<&str>,\n     target_type: Option<TargetType>,\n-    site: bool,\n+    site_flag: bool,\n ) -> Result<(), failure::Error> {\n     if Path::new(\"./wrangler.toml\").exists() {\n         failure::bail!(\"A wrangler.toml file already exists! Please remove it before running this command again.\");\ndiff --git a/src/commands/init/mod.rs b/src/commands/init/mod.rs\n--- a/src/commands/init/mod.rs\n+++ b/src/commands/init/mod.rs\n@@ -19,20 +18,23 @@ pub fn init(\n \n     let target_type = target_type.unwrap_or_default();\n     let config_path = PathBuf::from(\"./\");\n-    let initialized_site = if site { Some(Site::default()) } else { None };\n-    let manifest = Manifest::generate(\n-        name.to_string(),\n-        Some(target_type),\n-        &config_path,\n-        initialized_site,\n-    )?;\n-    message::success(\"Succesfully created a `wrangler.toml`\");\n \n-    if site {\n-        let env = None;\n-        let target = manifest.get_target(env)?;\n-        commands::build::wranglerjs::scaffold_site_worker(&target)?;\n+    if site_flag {\n+        let site = Site::default();\n+        Manifest::generate(\n+            name.to_string(),\n+            Some(target_type),\n+            &config_path,\n+            Some(site.clone()),\n+        )?;\n+\n+        site.scaffold_worker()?;\n+        message::success(\"Succesfully scaffolded workers site\");\n+    } else {\n+        Manifest::generate(name.to_string(), Some(target_type), &config_path, None)?;\n     }\n+\n+    message::success(\"Succesfully created a `wrangler.toml`\");\n     Ok(())\n }\n \ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -5,9 +5,9 @@ pub mod upload_form;\n \n pub use package::Package;\n \n-use crate::settings::target::KvNamespace;\n use route::Route;\n \n+use std::env;\n use std::path::Path;\n \n use crate::commands;\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -17,8 +17,7 @@ use crate::commands::subdomain::Subdomain;\n use crate::commands::validate_worker_name;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-\n-use crate::settings::target::{Site, Target};\n+use crate::settings::target::{KvNamespace, Site, Target};\n use crate::terminal::{emoji, message};\n \n pub fn publish(\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -158,7 +157,10 @@ pub fn upload_buckets(\n     let mut asset_manifest = None;\n     for namespace in &target.kv_namespaces() {\n         if let Some(bucket) = &namespace.bucket {\n-            if bucket.is_empty() {\n+            // We don't want folks setting their bucket to the top level directory,\n+            // which is where wrangler commands are always called from.\n+            let current_dir = env::current_dir()?;\n+            if bucket.as_os_str() == current_dir {\n                 failure::bail!(\n                     \"{} You need to specify a bucket directory in your wrangler.toml\",\n                     emoji::WARN\ndiff --git a/src/settings/target/kv_namespace.rs b/src/settings/target/kv_namespace.rs\n--- a/src/settings/target/kv_namespace.rs\n+++ b/src/settings/target/kv_namespace.rs\n@@ -1,13 +1,15 @@\n-use crate::settings::binding::Binding;\n use std::fmt;\n+use std::path::PathBuf;\n \n use serde::{Deserialize, Serialize};\n \n+use crate::settings::binding::Binding;\n+\n #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]\n pub struct KvNamespace {\n     pub id: String,\n     pub binding: String,\n-    pub bucket: Option<String>,\n+    pub bucket: Option<PathBuf>,\n }\n \n impl fmt::Display for KvNamespace {\ndiff --git a/src/settings/target/site.rs b/src/settings/target/site.rs\n--- a/src/settings/target/site.rs\n+++ b/src/settings/target/site.rs\n@@ -1,14 +1,18 @@\n+use std::env;\n+use std::fs;\n use std::path::PathBuf;\n \n use serde::{Deserialize, Serialize};\n \n+use crate::commands::generate::run_generate;\n+\n const SITE_ENTRY_POINT: &str = \"workers-site\";\n \n #[derive(Clone, Debug, Deserialize, Serialize)]\n pub struct Site {\n-    pub bucket: String,\n+    pub bucket: PathBuf,\n     #[serde(rename = \"entry-point\")]\n-    pub entry_point: Option<String>,\n+    entry_point: Option<PathBuf>,\n     pub include: Option<Vec<String>>,\n     pub exclude: Option<Vec<String>>,\n }\ndiff --git a/src/settings/target/site.rs b/src/settings/target/site.rs\n--- a/src/settings/target/site.rs\n+++ b/src/settings/target/site.rs\n@@ -16,7 +20,7 @@ pub struct Site {\n impl Site {\n     pub fn new(bucket: &str) -> Site {\n         let mut site = Site::default();\n-        site.bucket = String::from(bucket);\n+        site.bucket = PathBuf::from(bucket);\n \n         site\n     }\ndiff --git a/src/settings/target/site.rs b/src/settings/target/site.rs\n--- a/src/settings/target/site.rs\n+++ b/src/settings/target/site.rs\n@@ -24,20 +28,37 @@ impl Site {\n     // if the user has configured `site.entry-point`, use that\n     // as the build directory. Otherwise use the default const\n     // SITE_ENTRY_POINT\n-    pub fn build_dir(&self, current_dir: PathBuf) -> Result<PathBuf, std::io::Error> {\n+    pub fn entry_point(&self) -> Result<PathBuf, std::io::Error> {\n+        let current_dir = env::current_dir()?;\n         Ok(current_dir.join(\n             self.entry_point\n                 .to_owned()\n-                .unwrap_or_else(|| format!(\"./{}\", SITE_ENTRY_POINT)),\n+                .unwrap_or_else(|| PathBuf::from(SITE_ENTRY_POINT)),\n         ))\n     }\n+\n+    pub fn scaffold_worker(&self) -> Result<(), failure::Error> {\n+        let entry_point = &self.entry_point()?;\n+        let template = \"https://github.com/cloudflare/worker-sites-init\";\n+\n+        if !entry_point.exists() {\n+            log::info!(\"Generating a new workers site project\");\n+            run_generate(entry_point.file_name().unwrap().to_str().unwrap(), template)?;\n+\n+            // This step is to prevent having a git repo within a git repo after\n+            // generating the scaffold into an existing project.\n+            fs::remove_dir_all(&entry_point.join(\".git\"))?;\n+        }\n+\n+        Ok(())\n+    }\n }\n \n impl Default for Site {\n     fn default() -> Site {\n         Site {\n-            bucket: String::new(),\n-            entry_point: Some(String::from(SITE_ENTRY_POINT)),\n+            bucket: PathBuf::new(),\n+            entry_point: Some(PathBuf::from(SITE_ENTRY_POINT)),\n             include: None,\n             exclude: None,\n         }\ndiff --git a/src/settings/target/target.rs b/src/settings/target/target.rs\n--- a/src/settings/target/target.rs\n+++ b/src/settings/target/target.rs\n@@ -37,12 +37,14 @@ impl Target {\n     }\n \n     pub fn build_dir(&self) -> Result<PathBuf, std::io::Error> {\n-        let current_dir = env::current_dir()?;\n         // if `site` is configured, we want to isolate worker code\n         // and build artifacts away from static site application code.\n         match &self.site {\n-            Some(site_config) => site_config.build_dir(current_dir),\n-            None => Ok(current_dir),\n+            Some(site_config) => site_config.entry_point(),\n+            None => {\n+                let current_dir = env::current_dir()?;\n+                Ok(current_dir)\n+            }\n         }\n     }\n }\n",
        "test_patch": "diff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -278,12 +278,9 @@ mod tests {\n \n     #[test]\n     fn it_can_ignore_node_modules() {\n-        let target = make_target(Site {\n-            bucket: \"fake\".to_string(),\n-            entry_point: None,\n-            include: None,\n-            exclude: None,\n-        });\n+        let mut site = Site::default();\n+        site.bucket = PathBuf::from(\"fake\");\n+        let target = make_target(site);\n \n         let test_dir = \"test1\";\n         // If test dir already exists, delete it.\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -308,12 +305,9 @@ mod tests {\n \n     #[test]\n     fn it_can_ignore_hidden() {\n-        let target = make_target(Site {\n-            bucket: \"fake\".to_string(),\n-            entry_point: None,\n-            include: None,\n-            exclude: None,\n-        });\n+        let mut site = Site::default();\n+        site.bucket = PathBuf::from(\"fake\");\n+        let target = make_target(site);\n \n         let test_dir = \"test2\";\n         // If test dir already exists, delete it.\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -338,12 +332,9 @@ mod tests {\n \n     #[test]\n     fn it_can_allow_unfiltered_files() {\n-        let target = make_target(Site {\n-            bucket: \"fake\".to_string(),\n-            entry_point: None,\n-            include: None,\n-            exclude: None,\n-        });\n+        let mut site = Site::default();\n+        site.bucket = PathBuf::from(\"fake\");\n+        let target = make_target(site);\n \n         let test_dir = \"test3\";\n         // If test dir already exists, delete it.\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -368,12 +359,10 @@ mod tests {\n \n     #[test]\n     fn it_can_filter_by_include() {\n-        let target = make_target(Site {\n-            bucket: \"fake\".to_string(),\n-            entry_point: None,\n-            include: Some(vec![\"this_isnt_here.txt\".to_string()]),\n-            exclude: None,\n-        });\n+        let mut site = Site::default();\n+        site.bucket = PathBuf::from(\"fake\");\n+        site.include = Some(vec![\"this_isnt_here.txt\".to_string()]);\n+        let target = make_target(site);\n \n         let test_dir = \"test4\";\n         // If test dir already exists, delete it.\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -398,12 +387,10 @@ mod tests {\n \n     #[test]\n     fn it_can_filter_by_exclude() {\n-        let target = make_target(Site {\n-            bucket: \"fake\".to_string(),\n-            entry_point: None,\n-            include: None,\n-            exclude: Some(vec![\"ignore_me.txt\".to_string()]),\n-        });\n+        let mut site = Site::default();\n+        site.bucket = PathBuf::from(\"fake\");\n+        site.exclude = Some(vec![\"ignore_me.txt\".to_string()]);\n+        let target = make_target(site);\n \n         let test_dir = \"test5\";\n         // If test dir already exists, delete it.\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -428,12 +415,11 @@ mod tests {\n \n     #[test]\n     fn it_can_prioritize_include_over_exclude() {\n-        let target = make_target(Site {\n-            bucket: \"fake\".to_string(),\n-            entry_point: None,\n-            include: Some(vec![\"notice_me.txt\".to_string()]),\n-            exclude: Some(vec![\"notice_me.txt\".to_string()]),\n-        });\n+        let mut site = Site::default();\n+        site.bucket = PathBuf::from(\"fake\");\n+        site.include = Some(vec![\"notice_me.txt\".to_string()]);\n+        site.exclude = Some(vec![\"notice_me.txt\".to_string()]);\n+        let target = make_target(site);\n \n         let test_dir = \"test6\";\n         // If test dir already exists, delete it.\n",
        "problem_statement": "Use site.entry_point instead of build_dir for scaffolding sites\nRight now i assume the build_dir is determined entirely by entry_point. It's true, but not a good idea to leave coupled.\r\nhttps://github.com/cloudflare/wrangler/pull/509/files#diff-bc87f262247b9e739224645f50263bd2R197\n",
        "hints_text": "",
        "created_at": "2019-11-06T20:16:38Z",
        "version": "1.5"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1410,
        "instance_id": "cloudflare__wrangler-legacy-1410",
        "issue_numbers": [
            "247"
        ],
        "base_commit": "e8ccd994da013a94209f3960332efac1a383e206",
        "patch": "diff --git a/src/install/krate.rs /dev/null\n--- a/src/install/krate.rs\n+++ /dev/null\n@@ -1,24 +0,0 @@\n-use crate::http;\n-use serde::{self, Deserialize};\n-\n-#[derive(Debug, Deserialize)]\n-pub struct Krate {\n-    pub max_version: String,\n-}\n-\n-#[derive(Debug, Deserialize)]\n-pub struct KrateResponse {\n-    #[serde(rename = \"crate\")]\n-    pub krate: Krate,\n-}\n-\n-impl Krate {\n-    pub fn new(name: &str) -> Result<Krate, failure::Error> {\n-        let krate_address = format!(\"https://crates.io/api/v1/crates/{}\", name);\n-        let client = http::client();\n-        let res = client.get(&krate_address).send()?;\n-\n-        let kr: KrateResponse = serde_json::from_str(&res.text()?)?;\n-        Ok(kr.krate)\n-    }\n-}\ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -1,11 +1,9 @@\n pub mod dependencies;\n-mod krate;\n pub mod target;\n \n use crate::terminal::emoji;\n \n use binary_install::{Cache, Download};\n-use krate::Krate;\n use log::info;\n use semver::Version;\n \n",
        "test_patch": "diff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -165,13 +163,6 @@ fn prebuilt_url(tool_name: &str, owner: &str, version: &str) -> Option<String> {\n     }\n }\n \n-pub fn get_latest_version(tool_name: &str) -> Result<Version, failure::Error> {\n-    // TODO: return the latest version pulled from github api, not via Krate.\n-    let latest_version = Krate::new(tool_name)?.max_version;\n-    Version::parse(&latest_version)\n-        .map_err(|e| failure::format_err!(\"could not parse latest version\\n{}\", e))\n-}\n-\n fn get_wrangler_cache() -> Result<Cache, failure::Error> {\n     if let Ok(path) = env::var(\"WRANGLER_CACHE\") {\n         Ok(Cache::at(Path::new(&path)))\n",
        "problem_statement": "better error message for Krate HTTP error\njust `wrangler generate myproject` and then `wrangler preview` but it fails with this error\r\n\r\n```\r\n\u2b07\ufe0f Installing wasm-pack...\r\n\u2b07\ufe0f Installing wranglerjs...\r\n\u2728   Built successfully.\r\nError: Error(\"expected value\", line: 1, column: 1)\r\n```\n",
        "hints_text": "Could you please run `export RUST_BACKTRACE=1` and try to run your command again? This should give us more information.\r\n\r\nI'm seeing https://github.com/cloudflare/wrangler/issues/249 when running these commands.\nI got this \r\n\r\n```\r\n\u2b07\ufe0f Installing wasm-pack...\r\n\u2b07\ufe0f Installing wranglerjs...\r\n\u2728   Built successfully.\r\nError: Error(\"expected value\", line: 1, column: 1)\r\n\r\nstack backtrace:\r\n   0: backtrace::backtrace::trace::h379958959b40dd56 (0x1092280ee)\r\n   1: backtrace::capture::Backtrace::new_unresolved::h63674da28c1bba7f (0x109227118)\r\n   2: failure::backtrace::internal::InternalBacktrace::new::h30a93456ed16e304 (0x109226969)\r\n   3: <failure::backtrace::Backtrace as core::default::Default>::default::h09b3c6b58f5b002f (0x109226b65)\r\n   4: wrangler::commands::publish::preview::preview::h44ba605b0f0f26d6 (0x108e99e32)\r\n   5: wrangler::main::hfbc4c89f30aacff3 (0x108eb3db2)\r\n   6: std::rt::lang_start::{{closure}}::hc293ed58579bef94 (0x108e9f7cb)\r\n   7: std::panicking::try::do_call::h0b8150034252df34 (0x1092a78a8)\r\n   8: ___rust_maybe_catch_panic (0x1092b12ff)\r\n   9: std::rt::lang_start_internal::h72393d7cb5a1e5ac (0x1092a838e)\r\n  10: _main (0x108eb4689)\r\n```\nthe issue has resolved by itself. i have no idea why though\n\ud83d\udc4b \r\nIt happened to me twice today and indeed the first time it disappeared by itself.\r\n\r\nThe second time I looked in processes and SIGTERM all remaining `wranglerjs` processes.\r\nThen it worked again...\r\n\r\nNote: I mostly used `wrangler dev` command\nHappened with me again today. Gone after half an hour or so\n\nOn Tue, Mar 17, 2020 at 03:08 thochra <notifications@github.com> wrote:\n\n> \ud83d\udc4b\n> It happened to me twice today and indeed the first time it disappeared by\n> itself.\n>\n> The second time I looked in processes and SIGTERM all remaining wranglerjs\n> processes.\n> Then it worked again...\n>\n> Note: I mostly used wrangler dev command\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/cloudflare/wrangler/issues/247#issuecomment-599736263>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAEZETSOHOXOW7422RQJYHLRH2BNPANCNFSM4HYDVXCA>\n> .\n>\n\nthis is very strange, going to re-open and tag with bug and needs reproduction. i'm not able to reproduce this on my machine - if anybody can give detailed steps to reproduce we can track this down.\nI don't know what cause it either. I got that error then went away for half an hour and when i came back, tried again and it worked.\nwith `RUST_BACKTRACE=1 wrangler publish` I was able to pinpoint this bug to `Krate`. When crates.io's API is down for any reason we get this error. It appears we all were unfortunate enough to use wrangler in separate transient downtime periods. I'd love to address the to-do there to use GitHub and fix this issue in the process.\r\n\naha! so it sounds like we just need to surface that error explicitly instead of masking it. thanks for the sleuthing @msfjarvis ",
        "created_at": "2020-06-24T19:05:03Z",
        "version": "1.10"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1400,
        "instance_id": "cloudflare__wrangler-legacy-1400",
        "issue_numbers": [
            "1398"
        ],
        "base_commit": "cd0fdc1f126e604752947f0ee15fa14d82d89311",
        "patch": "diff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -10,7 +10,7 @@ use indicatif::{ProgressBar, ProgressStyle};\n \n use crate::commands::kv;\n use crate::kv::bulk::delete;\n-use crate::kv::bulk::MAX_PAIRS;\n+use crate::kv::bulk::BATCH_KEY_MAX;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n use crate::terminal::interactive;\ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -49,11 +50,11 @@ pub fn run(\n         Err(e) => failure::bail!(\"{}\", e),\n     };\n \n-    let mut keys: Vec<String> = pairs?.iter().map(|kv| kv.key.to_owned()).collect();\n-\n     let len = keys.len();\n+\n     message::working(&format!(\"deleting {} key value pairs\", len));\n-    let progress_bar = if len > MAX_PAIRS {\n+\n+    let progress_bar = if len > BATCH_KEY_MAX {\n         let pb = ProgressBar::new(len as u64);\n         pb.set_style(ProgressStyle::default_bar().template(\"{wide_bar} {pos}/{len}\\n{msg}\"));\n         Some(pb)\ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -61,21 +62,7 @@ pub fn run(\n         None\n     };\n \n-    while !keys.is_empty() {\n-        let p: Vec<String> = if keys.len() > MAX_PAIRS {\n-            keys.drain(0..MAX_PAIRS).collect()\n-        } else {\n-            keys.drain(0..).collect()\n-        };\n-\n-        if let Err(e) = delete(target, user, namespace_id, p) {\n-            failure::bail!(\"{}\", e);\n-        }\n-\n-        if let Some(pb) = &progress_bar {\n-            pb.inc(keys.len() as u64);\n-        }\n-    }\n+    delete(target, user, namespace_id, keys, &progress_bar)?;\n \n     if let Some(pb) = &progress_bar {\n         pb.finish_with_message(&format!(\"deleted {} key value pairs\", len));\ndiff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -10,7 +10,7 @@ use indicatif::{ProgressBar, ProgressStyle};\n \n use crate::commands::kv::validate_target;\n use crate::kv::bulk::put;\n-use crate::kv::bulk::MAX_PAIRS;\n+use crate::kv::bulk::BATCH_KEY_MAX;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n use crate::terminal::message;\ndiff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -23,7 +23,7 @@ pub fn run(\n ) -> Result<(), failure::Error> {\n     validate_target(target)?;\n \n-    let mut pairs: Vec<KeyValuePair> = match &metadata(filename) {\n+    let pairs: Vec<KeyValuePair> = match &metadata(filename) {\n         Ok(file_type) if file_type.is_file() => {\n             let data = fs::read_to_string(filename)?;\n             let data_vec = serde_json::from_str(&data);\ndiff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -42,7 +42,7 @@ pub fn run(\n     let len = pairs.len();\n \n     message::working(&format!(\"uploading {} key value pairs\", len));\n-    let progress_bar = if len > MAX_PAIRS {\n+    let progress_bar = if len > BATCH_KEY_MAX {\n         let pb = ProgressBar::new(len as u64);\n         pb.set_style(ProgressStyle::default_bar().template(\"{wide_bar} {pos}/{len}\\n{msg}\"));\n         Some(pb)\ndiff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -50,19 +50,7 @@ pub fn run(\n         None\n     };\n \n-    while !pairs.is_empty() {\n-        let p: Vec<KeyValuePair> = if pairs.len() > MAX_PAIRS {\n-            pairs.drain(0..MAX_PAIRS).collect()\n-        } else {\n-            pairs.drain(0..).collect()\n-        };\n-\n-        put(target, &user, namespace_id, &p)?;\n-\n-        if let Some(pb) = &progress_bar {\n-            pb.inc(p.len() as u64);\n-        }\n-    }\n+    put(target, &user, namespace_id, pairs, &progress_bar)?;\n \n     if let Some(pb) = &progress_bar {\n         pb.finish_with_message(&format!(\"uploaded {} key value pairs\", len));\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -1,10 +1,12 @@\n use std::env;\n use std::path::{Path, PathBuf};\n \n+use indicatif::{ProgressBar, ProgressStyle};\n+\n use crate::build;\n use crate::deploy;\n use crate::http::{self, Feature};\n-use crate::kv::bulk::delete;\n+use crate::kv::bulk;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::{DeployConfig, Target};\n use crate::sites;\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -15,7 +17,6 @@ pub fn publish(\n     user: &GlobalUser,\n     target: &mut Target,\n     deploy_config: DeployConfig,\n-    verbose: bool,\n ) -> Result<(), failure::Error> {\n     validate_target_required_fields_present(target)?;\n \ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -33,10 +34,27 @@ pub fn publish(\n             sites::sync(target, user, &site_namespace.id, &path)?;\n \n         // First, upload all existing files in bucket directory\n-        if verbose {\n-            message::info(\"Preparing to upload updated files...\");\n+        message::working(\"Uploading site files\");\n+        let upload_progress_bar = if to_upload.len() > bulk::BATCH_KEY_MAX {\n+            let upload_progress_bar = ProgressBar::new(to_upload.len() as u64);\n+            upload_progress_bar\n+                .set_style(ProgressStyle::default_bar().template(\"{wide_bar} {pos}/{len}\\n{msg}\"));\n+            Some(upload_progress_bar)\n+        } else {\n+            None\n+        };\n+\n+        bulk::put(\n+            target,\n+            user,\n+            &site_namespace.id,\n+            to_upload,\n+            &upload_progress_bar,\n+        )?;\n+\n+        if let Some(pb) = upload_progress_bar {\n+            pb.finish_with_message(\"Done Uploading\");\n         }\n-        sites::upload_files(target, user, &site_namespace.id, to_upload)?;\n \n         let upload_client = http::featured_legacy_auth_client(user, Feature::Sites);\n \ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -47,11 +65,29 @@ pub fn publish(\n \n         // Finally, remove any stale files\n         if !to_delete.is_empty() {\n-            if verbose {\n-                message::info(\"Deleting stale files...\");\n+            message::info(\"Deleting stale files...\");\n+\n+            let delete_progress_bar = if to_delete.len() > bulk::BATCH_KEY_MAX {\n+                let delete_progress_bar = ProgressBar::new(to_delete.len() as u64);\n+                delete_progress_bar.set_style(\n+                    ProgressStyle::default_bar().template(\"{wide_bar} {pos}/{len}\\n{msg}\"),\n+                );\n+                Some(delete_progress_bar)\n+            } else {\n+                None\n+            };\n+\n+            bulk::delete(\n+                target,\n+                user,\n+                &site_namespace.id,\n+                to_delete,\n+                &delete_progress_bar,\n+            )?;\n+\n+            if let Some(pb) = delete_progress_bar {\n+                pb.finish_with_message(\"Done deleting\");\n             }\n-\n-            delete(target, user, &site_namespace.id, to_delete)?;\n         }\n     } else {\n         let upload_client = http::legacy_auth_client(user);\ndiff --git a/src/kv/bulk.rs b/src/kv/bulk.rs\n--- a/src/kv/bulk.rs\n+++ b/src/kv/bulk.rs\n@@ -1,5 +1,7 @@\n use std::time::Duration;\n \n+use indicatif::ProgressBar;\n+\n use cloudflare::endpoints::workerskv::delete_bulk::DeleteBulk;\n use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n use cloudflare::endpoints::workerskv::write_bulk::WriteBulk;\ndiff --git a/src/kv/bulk.rs b/src/kv/bulk.rs\n--- a/src/kv/bulk.rs\n+++ b/src/kv/bulk.rs\n@@ -12,7 +14,11 @@ use crate::http::feature::headers;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n \n-pub const MAX_PAIRS: usize = 10000;\n+const API_MAX_PAIRS: usize = 10000;\n+// The consts below are halved from the API's true capacity to help avoid\n+// hammering it with large requests.\n+pub const BATCH_KEY_MAX: usize = API_MAX_PAIRS / 2;\n+const UPLOAD_MAX_SIZE: usize = 50 * 1024 * 1024;\n \n // Create a special API client that has a longer timeout than usual, given that KV operations\n // can be lengthy if payloads are large.\ndiff --git a/src/kv/bulk.rs b/src/kv/bulk.rs\n--- a/src/kv/bulk.rs\n+++ b/src/kv/bulk.rs\n@@ -33,18 +39,27 @@ pub fn put(\n     target: &Target,\n     user: &GlobalUser,\n     namespace_id: &str,\n-    pairs: &[KeyValuePair],\n+    pairs: Vec<KeyValuePair>,\n+    progress_bar: &Option<ProgressBar>,\n ) -> Result<(), failure::Error> {\n     let client = bulk_api_client(user)?;\n \n-    match client.request(&WriteBulk {\n-        account_identifier: &target.account_id,\n-        namespace_identifier: namespace_id,\n-        bulk_key_value_pairs: pairs.to_owned(),\n-    }) {\n-        Ok(_) => Ok(()),\n-        Err(e) => failure::bail!(\"{}\", format_error(e)),\n+    for b in batch_keys_values(pairs) {\n+        match client.request(&WriteBulk {\n+            account_identifier: &target.account_id,\n+            namespace_identifier: namespace_id,\n+            bulk_key_value_pairs: b.to_owned(),\n+        }) {\n+            Ok(_) => {}\n+            Err(e) => failure::bail!(\"{}\", format_error(e)),\n+        }\n+\n+        if let Some(pb) = &progress_bar {\n+            pb.inc(b.len() as u64);\n+        }\n     }\n+\n+    Ok(())\n }\n \n pub fn delete(\ndiff --git a/src/kv/bulk.rs b/src/kv/bulk.rs\n--- a/src/kv/bulk.rs\n+++ b/src/kv/bulk.rs\n@@ -52,17 +67,78 @@ pub fn delete(\n     user: &GlobalUser,\n     namespace_id: &str,\n     keys: Vec<String>,\n+    progress_bar: &Option<ProgressBar>,\n ) -> Result<(), failure::Error> {\n     let client = bulk_api_client(user)?;\n \n-    let response = client.request(&DeleteBulk {\n-        account_identifier: &target.account_id,\n-        namespace_identifier: namespace_id,\n-        bulk_keys: keys,\n-    });\n+    for b in batch_keys(keys) {\n+        match client.request(&DeleteBulk {\n+            account_identifier: &target.account_id,\n+            namespace_identifier: namespace_id,\n+            bulk_keys: b.to_owned(),\n+        }) {\n+            Ok(_) => {}\n+            Err(e) => failure::bail!(\"{}\", format_error(e)),\n+        }\n+\n+        if let Some(pb) = &progress_bar {\n+            pb.inc(b.len() as u64);\n+        }\n+    }\n+\n+    Ok(())\n+}\n+\n+fn batch_keys_values(mut pairs: Vec<KeyValuePair>) -> Vec<Vec<KeyValuePair>> {\n+    let mut batches: Vec<Vec<KeyValuePair>> = Vec::new();\n \n-    match response {\n-        Ok(_) => Ok(()),\n-        Err(e) => failure::bail!(\"{}\", format_error(e)),\n+    if !pairs.is_empty() {\n+        // Iterate over all key-value pairs and create batches of uploads, each of which are\n+        // maximum 5K key-value pairs in size OR maximum ~50MB in size. Upload each batch\n+        // as it is created.\n+        let mut key_count = 0;\n+        let mut key_pair_bytes = 0;\n+        let mut key_value_batch: Vec<KeyValuePair> = Vec::new();\n+\n+        while !(pairs.is_empty() && key_value_batch.is_empty()) {\n+            if pairs.is_empty() {\n+                // Last batch to upload\n+                batches.push(key_value_batch.to_vec());\n+                key_value_batch.clear();\n+            } else {\n+                let pair = pairs.pop().unwrap();\n+                if key_count + 1 > BATCH_KEY_MAX\n+                // Keep upload size small to keep KV bulk API happy\n+                || key_pair_bytes + pair.key.len() + pair.value.len() > UPLOAD_MAX_SIZE\n+                {\n+                    batches.push(key_value_batch.to_vec());\n+                    key_count = 0;\n+                    key_pair_bytes = 0;\n+                    key_value_batch.clear();\n+                }\n+\n+                // Add the popped key-value pair to the running batch of key-value pair uploads\n+                key_count += 1;\n+                key_pair_bytes = key_pair_bytes + pair.key.len() + pair.value.len();\n+                key_value_batch.push(pair);\n+            }\n+        }\n+    }\n+\n+    batches\n+}\n+\n+fn batch_keys(mut keys: Vec<String>) -> Vec<Vec<String>> {\n+    let mut batches = Vec::new();\n+    while !keys.is_empty() {\n+        let k: Vec<String> = if keys.len() > BATCH_KEY_MAX {\n+            keys.drain(0..BATCH_KEY_MAX).collect()\n+        } else {\n+            keys.drain(0..).collect()\n+        };\n+\n+        batches.push(k);\n     }\n+\n+    batches\n }\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -514,7 +514,7 @@ fn run() -> Result<(), failure::Error> {\n                         .long(\"env\")\n                         .takes_value(true)\n                 )\n-                .arg(verbose_arg.clone())\n+                .arg(silent_verbose_arg.clone())\n                 .arg(\n                     Arg::with_name(\"release\")\n                         .hidden(true)\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -757,9 +757,7 @@ fn run() -> Result<(), failure::Error> {\n         let mut target = manifest.get_target(env, is_preview)?;\n         let deploy_config = manifest.deploy_config(env)?;\n \n-        let verbose = matches.is_present(\"verbose\");\n-\n-        commands::publish(&user, &mut target, deploy_config, verbose)?;\n+        commands::publish(&user, &mut target, deploy_config)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"subdomain\") {\n         log::info!(\"Getting project settings\");\n         let manifest = settings::toml::Manifest::new(config_path)?;\ndiff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -4,11 +4,10 @@ use reqwest::blocking::Client;\n use serde::Deserialize;\n \n use crate::http;\n-use crate::kv::bulk::delete;\n+use crate::kv::bulk;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n-use crate::sites;\n-use crate::sites::{sync, upload_files, AssetManifest};\n+use crate::sites::{add_namespace, sync, AssetManifest};\n use crate::terminal::{message, styles};\n use crate::upload;\n \ndiff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -59,7 +58,7 @@ pub fn upload(\n                 let client = http::legacy_auth_client(&user);\n \n                 if let Some(site_config) = target.site.clone() {\n-                    let site_namespace = sites::add_namespace(user, target, true)?;\n+                    let site_namespace = add_namespace(user, target, true)?;\n \n                     let path = Path::new(&site_config.bucket);\n                     let (to_upload, to_delete, asset_manifest) =\ndiff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -70,7 +69,7 @@ pub fn upload(\n                         message::info(\"Uploading updated files...\");\n                     }\n \n-                    upload_files(target, user, &site_namespace.id, to_upload)?;\n+                    bulk::put(target, user, &site_namespace.id, to_upload, &None)?;\n \n                     let preview = authenticated_upload(&client, &target, Some(asset_manifest))?;\n                     if !to_delete.is_empty() {\ndiff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -78,7 +77,7 @@ pub fn upload(\n                             message::info(\"Deleting stale files...\");\n                         }\n \n-                        delete(target, user, &site_namespace.id, to_delete)?;\n+                        bulk::delete(target, user, &site_namespace.id, to_delete, &None)?;\n                     }\n \n                     preview\ndiff --git a/src/sites/mod.rs b/src/sites/mod.rs\n--- a/src/sites/mod.rs\n+++ b/src/sites/mod.rs\n@@ -2,11 +2,9 @@ extern crate base64;\n \n mod manifest;\n mod sync;\n-mod upload;\n \n pub use manifest::AssetManifest;\n pub use sync::sync;\n-pub use upload::upload_files;\n \n use std::ffi::OsString;\n use std::fs;\ndiff --git a/src/sites/upload.rs /dev/null\n--- a/src/sites/upload.rs\n+++ /dev/null\n@@ -1,82 +0,0 @@\n-use indicatif::{ProgressBar, ProgressStyle};\n-\n-use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n-\n-use crate::kv::bulk::put;\n-use crate::settings::global_user::GlobalUser;\n-use crate::settings::toml::Target;\n-use crate::terminal::message;\n-\n-// The consts below are halved from the API's true capacity to help avoid\n-// hammering it with large requests.\n-const PAIRS_MAX_COUNT: usize = 5000;\n-const UPLOAD_MAX_SIZE: usize = 50 * 1024 * 1024;\n-\n-pub fn upload_files(\n-    target: &Target,\n-    user: &GlobalUser,\n-    namespace_id: &str,\n-    mut pairs: Vec<KeyValuePair>,\n-) -> Result<(), failure::Error> {\n-    if !pairs.is_empty() {\n-        // Iterate over all key-value pairs and create batches of uploads, each of which are\n-        // maximum 5K key-value pairs in size OR maximum ~50MB in size. Upload each batch\n-        // as it is created.\n-        let mut key_count = 0;\n-        let mut key_pair_bytes = 0;\n-        let mut key_value_batch: Vec<KeyValuePair> = Vec::new();\n-\n-        message::working(\"Uploading site files\");\n-        let pb = if pairs.len() > PAIRS_MAX_COUNT {\n-            let pb = ProgressBar::new(pairs.len() as u64);\n-            pb.set_style(ProgressStyle::default_bar().template(\"{wide_bar} {pos}/{len}\\n{msg}\"));\n-            Some(pb)\n-        } else {\n-            None\n-        };\n-        while !(pairs.is_empty() && key_value_batch.is_empty()) {\n-            if pairs.is_empty() {\n-                // Last batch to upload\n-                upload_batch(target, &user, namespace_id, &mut key_value_batch)?;\n-            } else {\n-                let pair = pairs.pop().unwrap();\n-                if key_count + 1 > PAIRS_MAX_COUNT\n-                // Keep upload size small to keep KV bulk API happy\n-                || key_pair_bytes + pair.key.len() + pair.value.len() > UPLOAD_MAX_SIZE\n-                {\n-                    upload_batch(target, &user, namespace_id, &mut key_value_batch)?;\n-                    if let Some(p) = &pb {\n-                        p.inc(key_value_batch.len() as u64);\n-                    }\n-\n-                    // If upload successful, reset counters\n-                    key_count = 0;\n-                    key_pair_bytes = 0;\n-                }\n-\n-                // Add the popped key-value pair to the running batch of key-value pair uploads\n-                key_count += 1;\n-                key_pair_bytes = key_pair_bytes + pair.key.len() + pair.value.len();\n-                key_value_batch.push(pair);\n-            }\n-        }\n-        if let Some(p) = pb {\n-            p.finish_with_message(\"Done Uploading\");\n-        }\n-    }\n-\n-    Ok(())\n-}\n-\n-fn upload_batch(\n-    target: &Target,\n-    user: &GlobalUser,\n-    namespace_id: &str,\n-    key_value_batch: &mut Vec<KeyValuePair>,\n-) -> Result<(), failure::Error> {\n-    // If partial upload fails (e.g. server error), return that error message\n-    put(target, user, namespace_id, &key_value_batch)?;\n-    // Can clear batch now that we've uploaded it\n-    key_value_batch.clear();\n-    Ok(())\n-}\n",
        "test_patch": "diff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -36,12 +36,13 @@ pub fn run(\n         Err(e) => failure::bail!(e),\n     }\n \n-    let pairs: Result<Vec<KeyValuePair>, failure::Error> = match &metadata(filename) {\n+    let keys: Vec<String> = match &metadata(filename) {\n         Ok(file_type) if file_type.is_file() => {\n             let data = fs::read_to_string(filename)?;\n-            let keys_vec = serde_json::from_str(&data);\n+            let keys_vec: Result<Vec<KeyValuePair>, serde_json::Error> =\n+                serde_json::from_str(&data);\n             match keys_vec {\n-                Ok(keys_vec) => Ok(keys_vec),\n+                Ok(keys_vec) => keys_vec.iter().map(|kv| { kv.key.to_owned() }).collect(),\n                 Err(_) => failure::bail!(\"Failed to decode JSON. Please make sure to follow the format, [{\\\"key\\\": \\\"test_key\\\", \\\"value\\\": \\\"test_value\\\"}, ...]\")\n             }\n         }\n",
        "problem_statement": "Critical: Error: Number of keys to delete (16010) exceeds max of 10000\n### \ud83d\udc1b Bug Report\r\n\r\n#### Environment\r\n\r\n* operating system:\r\n* output of `rustc -V`: rustc 1.41.0\r\n* output of `node -v`: v10.20.1\r\n* output of `wrangler -V`: wrangler 1.9.2\r\n* contents of `wrangler.toml`:\r\n\r\n```\r\nname = \"jwr-nuxt\"\r\ntype = \"webpack\"\r\naccount_id = \"0de41866465843875a6d452ca5bd6e1f\"\r\nworkers_dev = false\r\nroute = \"thejewelleryroom.com/*\"\r\nzone_id = \"5323273892234c0ce2ebcd182644e8fb\"\r\nkv-namespaces = [\r\n\t{ binding = \"REDIRECTS\", id = \"a79e38aac1fe464f99a8e8fc75d2b16f\" }\r\n]\r\n[site]\r\nbucket = \"dist\"\r\nentry-point = \"workers-site\"\r\n\r\n[env.beta]\r\nname = \"jwr-nuxt-beta\"\r\nentry-point = \"workers-site-beta\"\r\nbucket = \"dist\"\r\nroute = \"beta.thejewelleryroom.com/*\"\r\nkv-namespaces = [\r\n\t{ binding = \"REDIRECTS\", id = \"a79e38aac1fe464f99a8e8fc75d2b16f\" }\r\n]\r\n```\r\n\r\n#### Steps to reproduce\r\n\r\nRunning wrangler publish\r\n\r\n#### What did you expect to see?\r\n\r\nShould publish\r\n\r\n#### What did you see instead?\r\n\r\n    Error: Number of keys to delete (16010) exceeds max of 10000\r\n\r\nThis is pretty critical. Our site is currently down because I by mistake published our beta site to production, and now I cannot publish our production site anymore.\n",
        "hints_text": "I had to manually delete the whole namespace then reupload to get site up and running\nhey @simplenotezy - sorry for the inconvenience here. does this still happen with the latest version of wrangler? 1.10.1 is out and has some changes around this behavior\nYeah it does unfortunately. And it happens every re-deploy now.\r\n\r\n```\r\n Deployed to the following routes:\r\nthejewelleryroom.com/* => stayed the same\r\nError:  Code 10012: bulk remove keys: 'received 31905 keys, but max allowed per request is: 10000'\r\n Run `wrangler kv:namespace list` to see your existing namespaces with IDs\r\n```\ni see  where the bug lies. will correct asap.\nGreat news!",
        "created_at": "2020-06-19T19:00:01Z",
        "version": "1.10"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1358,
        "instance_id": "cloudflare__wrangler-legacy-1358",
        "issue_numbers": [
            "1240"
        ],
        "base_commit": "a7be253e3227b7b7afa8d2aa5a04acd5640e059c",
        "patch": "diff --git /dev/null b/src/install/dependencies.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/install/dependencies.rs\n@@ -0,0 +1,2 @@\n+pub const WASM_PACK_VERSION: &str = \"0.9.1\";\n+pub const GENERATE_VERSION: &str = \"0.5.0\";\ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -1,3 +1,4 @@\n+pub mod dependencies;\n mod krate;\n pub mod target;\n \ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -23,6 +24,22 @@ enum ToolDownload {\n     InstalledAt(Download),\n }\n \n+pub fn install_cargo_generate() -> Result<PathBuf, failure::Error> {\n+    let tool_name = \"cargo-generate\";\n+    let tool_author = \"ashleygwilliams\";\n+    let is_binary = true;\n+    let version = Version::parse(dependencies::GENERATE_VERSION)?;\n+    install(tool_name, tool_author, is_binary, version)?.binary(tool_name)\n+}\n+\n+pub fn install_wasm_pack() -> Result<PathBuf, failure::Error> {\n+    let tool_name = \"wasm-pack\";\n+    let tool_author = \"rustwasm\";\n+    let is_binary = true;\n+    let version = Version::parse(dependencies::WASM_PACK_VERSION)?;\n+    install(tool_name, tool_author, is_binary, version)?.binary(tool_name)\n+}\n+\n pub fn install(\n     tool_name: &str,\n     owner: &str,\ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -59,7 +76,9 @@ fn tool_needs_update(\n     // we shouldn't fail, we should just re-install for them\n     if let Ok(current_installation) = current_installation {\n         if let Some((installed_version, installed_location)) = current_installation {\n-            if installed_version == target_version {\n+            if installed_version.major == target_version.major\n+                && installed_version >= target_version\n+            {\n                 return Ok(ToolDownload::InstalledAt(Download::at(&installed_location)));\n             }\n         }\n",
        "test_patch": "diff --git a/src/build/mod.rs b/src/build/mod.rs\n--- a/src/build/mod.rs\n+++ b/src/build/mod.rs\n@@ -13,12 +13,7 @@ pub fn build(target: &Target) -> Result<(), failure::Error> {\n             message::info(\"JavaScript project found. Skipping unnecessary build!\")\n         }\n         TargetType::Rust => {\n-            let tool_name = \"wasm-pack\";\n-            let tool_author = \"rustwasm\";\n-            let is_binary = true;\n-            let version = install::get_latest_version(tool_name)?;\n-            let binary_path =\n-                install::install(tool_name, tool_author, is_binary, version)?.binary(tool_name)?;\n+            let binary_path = install::install_wasm_pack()?;\n             let args = [\"build\", \"--target\", \"no-modules\"];\n \n             let command = command(&args, &binary_path);\ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -52,12 +52,7 @@ pub fn generate(\n }\n \n pub fn run_generate(name: &str, template: &str) -> Result<(), failure::Error> {\n-    let tool_name = \"cargo-generate\";\n-    let tool_author = \"ashleygwilliams\";\n-    let is_binary = true;\n-    let version = install::get_latest_version(tool_name)?;\n-    let binary_path =\n-        install::install(tool_name, tool_author, is_binary, version)?.binary(tool_name)?;\n+    let binary_path = install::install_cargo_generate()?;\n \n     let args = [\"generate\", \"--git\", template, \"--name\", name, \"--force\"];\n \ndiff --git a/src/watch/mod.rs b/src/watch/mod.rs\n--- a/src/watch/mod.rs\n+++ b/src/watch/mod.rs\n@@ -55,12 +55,7 @@ pub fn watch_and_build(\n             });\n         }\n         TargetType::Rust => {\n-            let tool_name = \"wasm-pack\";\n-            let tool_author = \"rustwasm\";\n-            let is_binary = true;\n-            let version = install::get_latest_version(tool_name)?;\n-            let binary_path =\n-                install::install(tool_name, tool_author, is_binary, version)?.binary(tool_name)?;\n+            let binary_path = install::install_wasm_pack()?;\n             let args = [\"build\", \"--target\", \"no-modules\"];\n \n             thread::spawn(move || {\n",
        "problem_statement": "only check for updating installed tools once every 24 hours\nin #1003, we stopped reinstalling wasm-pack and wranglerjs on every change\r\n\r\nin #1190 we added messages if wrangler needs updating and stored when we last checked in `~/.wrangler/version.toml` so we only hit the crates.io api once every 24 hours\r\n\r\nwe should add when we last checked for the latest version of wasm-pack to `version.toml` in the same way we do for updating wrangler\n",
        "hints_text": "blocked on #1190 and #1003 \ncould we also make it optional? when working offline we shouldnt block the user because of not being able to check or update the version \nyeah that's probably not a bad idea ",
        "created_at": "2020-06-02T21:02:02Z",
        "version": "1.9"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1357,
        "instance_id": "cloudflare__wrangler-legacy-1357",
        "issue_numbers": [
            "1032"
        ],
        "base_commit": "d94aba60c630ec5738514a0fa63daca38d6890c7",
        "patch": "diff --git a/src/commands/build.rs b/src/commands/build.rs\n--- a/src/commands/build.rs\n+++ b/src/commands/build.rs\n@@ -12,6 +12,6 @@ pub fn run(matches: &ArgMatches) -> Result<(), failure::Error> {\n     let config_path = Path::new(DEFAULT_CONFIG_PATH);\n     let manifest = Manifest::new(&config_path)?;\n     let env = matches.value_of(\"env\");\n-    let target = &manifest.get_target(env)?;\n+    let target = &manifest.get_target(env, false)?;\n     build(&target)\n }\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -61,16 +61,15 @@ fn check_duplicate_namespaces(target: &Target) -> bool {\n     // HashSet for detecting duplicate namespace bindings\n     let mut binding_names: HashSet<String> = HashSet::new();\n \n-    if let Some(namespaces) = &target.kv_namespaces {\n-        for namespace in namespaces {\n-            // Check if this is a duplicate binding\n-            if binding_names.contains(&namespace.binding) {\n-                return true;\n-            } else {\n-                binding_names.insert(namespace.binding.clone());\n-            }\n+    for namespace in &target.kv_namespaces {\n+        // Check if this is a duplicate binding\n+        if binding_names.contains(&namespace.binding) {\n+            return true;\n+        } else {\n+            binding_names.insert(namespace.binding.clone());\n         }\n     }\n+\n     false\n }\n \ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -84,13 +83,12 @@ pub fn get_namespace_id(target: &Target, binding: &str) -> Result<String, failur\n         )\n     }\n \n-    if let Some(namespaces) = &target.kv_namespaces {\n-        for namespace in namespaces {\n-            if namespace.binding == binding {\n-                return Ok(namespace.id.to_string());\n-            }\n+    for namespace in &target.kv_namespaces {\n+        if namespace.binding == binding {\n+            return Ok(namespace.id.to_string());\n         }\n     }\n+\n     failure::bail!(\n         \"Namespace binding \\\"{}\\\" not found in \\\"{}\\\"\",\n         binding,\ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -4,16 +4,18 @@ use crate::commands::kv;\n use crate::http;\n use crate::kv::namespace::create;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::toml::Target;\n+use crate::settings::toml::{ConfigKvNamespace, KvNamespace, Manifest};\n use crate::terminal::message;\n \n pub fn run(\n-    target: &Target,\n+    manifest: &Manifest,\n+    is_preview: bool,\n     env: Option<&str>,\n     user: &GlobalUser,\n     binding: &str,\n ) -> Result<(), failure::Error> {\n-    kv::validate_target(target)?;\n+    let target = manifest.get_target(env, is_preview)?;\n+    kv::validate_target(&target)?;\n     validate_binding(binding)?;\n \n     let title = format!(\"{}-{}\", target.name, binding);\ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -21,39 +23,24 @@ pub fn run(\n     message::working(&msg);\n \n     let client = http::cf_v4_client(user)?;\n-    let result = create(&client, target, &title);\n+    let result = create(&client, &target, &title);\n \n     match result {\n         Ok(success) => {\n             let namespace = success.result;\n-            message::success(&format!(\"Success: {:#?}\", namespace));\n-            match target.kv_namespaces {\n-                None => {\n-                    match env {\n-                        Some(env) => message::success(&format!(\n-                            \"Add the following to your wrangler.toml under [env.{}]:\",\n-                            env\n-                        )),\n-                        None => message::success(\"Add the following to your wrangler.toml:\"),\n-                    };\n-                    println!(\n-                        \"kv-namespaces = [ \\n\\\n-                         \\t {{ binding = \\\"{}\\\", id = \\\"{}\\\" }} \\n\\\n-                         ]\",\n-                        binding, namespace.id\n-                    );\n-                }\n-                Some(_) => {\n-                    match env {\n-                        Some(env) => message::success(&format!(\n-                            \"Add the following to your wrangler.toml's \\\"kv-namespaces\\\" array in [env.{}]:\",\n-                            env\n-                        )),\n-                        None => message::success(\"Add the following to your wrangler.toml's \\\"kv-namespaces\\\" array:\"),\n-                    };\n-                    println!(\"{{ binding = \\\"{}\\\", id = \\\"{}\\\" }}\", binding, namespace.id);\n-                }\n-            }\n+            message::success(\"Success!\");\n+            println!(\n+                \"{}\",\n+                toml_modification_instructions(\n+                    KvNamespace {\n+                        binding: binding.to_string(),\n+                        id: namespace.id,\n+                    },\n+                    manifest.kv_namespaces.as_ref(),\n+                    env,\n+                    is_preview,\n+                )\n+            );\n         }\n         Err(e) => print!(\"{}\", kv::format_error(e)),\n     }\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -123,19 +123,14 @@ fn validate_target_required_fields_present(target: &Target) -> Result<(), failur\n         missing_fields.push(\"name\")\n     };\n \n-    match &target.kv_namespaces {\n-        Some(kv_namespaces) => {\n-            for kv in kv_namespaces {\n-                if kv.binding.is_empty() {\n-                    missing_fields.push(\"kv-namespace binding\")\n-                }\n-\n-                if kv.id.is_empty() {\n-                    missing_fields.push(\"kv-namespace id\")\n-                }\n-            }\n+    for kv in &target.kv_namespaces {\n+        if kv.binding.is_empty() {\n+            missing_fields.push(\"kv-namespace binding\")\n+        }\n+\n+        if kv.id.is_empty() {\n+            missing_fields.push(\"kv-namespace id\")\n         }\n-        None => {}\n     }\n \n     let (field_pluralization, is_are) = match missing_fields.len() {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -74,6 +74,10 @@ fn run() -> Result<(), failure::Error> {\n     let kv_namespace_specifier_group = ArgGroup::with_name(\"namespace-specifier\")\n         .args(&[\"binding\", \"namespace-id\"])\n         .required(true);\n+    let kv_preview_arg = Arg::with_name(\"preview\")\n+        .help(\"applies the command to the preview namespace when combined with --binding\")\n+        .long(\"preview\")\n+        .takes_value(false);\n \n     // This arg is for any action that uses environments (e.g. KV subcommands, publish)\n     let environment_arg = Arg::with_name(\"env\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -122,6 +126,7 @@ fn run() -> Result<(), failure::Error> {\n                             .required(true)\n                             .index(1)\n                         )\n+                        .arg(kv_preview_arg.clone())\n                         .arg(silent_verbose_arg.clone())\n                 )\n                 .subcommand(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -129,6 +134,7 @@ fn run() -> Result<(), failure::Error> {\n                         .about(\"Delete namespace\")\n                         .arg(kv_binding_arg.clone())\n                         .arg(kv_namespace_id_arg.clone())\n+                        .arg(kv_preview_arg.clone())\n                         .group(kv_namespace_specifier_group.clone())\n                         .arg(environment_arg.clone())\n                         .arg(silent_verbose_arg.clone())\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -153,6 +159,7 @@ fn run() -> Result<(), failure::Error> {\n                         .about(\"Put a key-value pair into a namespace\")\n                         .arg(kv_binding_arg.clone())\n                         .arg(kv_namespace_id_arg.clone())\n+                        .arg(kv_preview_arg.clone())\n                         .group(kv_namespace_specifier_group.clone())\n                         .arg(environment_arg.clone())\n                         .arg(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -197,6 +204,7 @@ fn run() -> Result<(), failure::Error> {\n                         .about(\"Get a key's value from a namespace\")\n                         .arg(kv_binding_arg.clone())\n                         .arg(kv_namespace_id_arg.clone())\n+                        .arg(kv_preview_arg.clone())\n                         .group(kv_namespace_specifier_group.clone())\n                         .arg(environment_arg.clone())\n                         .arg(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -212,6 +220,7 @@ fn run() -> Result<(), failure::Error> {\n                         .about(\"Delete a key and its value from a namespace\")\n                         .arg(kv_binding_arg.clone())\n                         .arg(kv_namespace_id_arg.clone())\n+                        .arg(kv_preview_arg.clone())\n                         .group(kv_namespace_specifier_group.clone())\n                         .arg(environment_arg.clone())\n                         .arg(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -227,6 +236,7 @@ fn run() -> Result<(), failure::Error> {\n                         .about(\"List all keys in a namespace. Produces JSON output\")\n                         .arg(kv_binding_arg.clone())\n                         .arg(kv_namespace_id_arg.clone())\n+                        .arg(kv_preview_arg.clone())\n                         .group(kv_namespace_specifier_group.clone())\n                         .arg(environment_arg.clone())\n                         .arg(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -253,6 +263,7 @@ fn run() -> Result<(), failure::Error> {\n                         .about(\"Upload multiple key-value pairs to a namespace\")\n                         .arg(kv_binding_arg.clone())\n                         .arg(kv_namespace_id_arg.clone())\n+                        .arg(kv_preview_arg.clone())\n                         .group(kv_namespace_specifier_group.clone())\n                         .arg(environment_arg.clone())\n                         .arg(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -268,6 +279,7 @@ fn run() -> Result<(), failure::Error> {\n                         .arg(kv_binding_arg.clone())\n                         .arg(kv_namespace_id_arg.clone())\n                         .group(kv_namespace_specifier_group.clone())\n+                        .arg(kv_preview_arg.clone())\n                         .arg(environment_arg.clone())\n                         .about(\"Delete multiple keys and their values from a namespace\")\n                         .arg(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -580,6 +592,7 @@ fn run() -> Result<(), failure::Error> {\n         .get_matches();\n \n     let config_path = Path::new(\"./wrangler.toml\");\n+    let mut is_preview = false;\n \n     let not_recommended_msg = styles::warning(\"(Not Recommended)\");\n     let recommended_cmd_msg = styles::highlight(\"`wrangler config --api-key`\");\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -661,7 +674,8 @@ fn run() -> Result<(), failure::Error> {\n         log::info!(\"Getting project settings\");\n         let manifest = settings::toml::Manifest::new(config_path)?;\n         let env = matches.value_of(\"env\");\n-        let target = manifest.get_target(env)?;\n+        is_preview = true;\n+        let target = manifest.get_target(env, is_preview)?;\n \n         // the preview command can be called with or without a Global User having been config'd\n         // so we convert this Result into an Option\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -711,7 +725,8 @@ fn run() -> Result<(), failure::Error> {\n         let ip = matches.value_of(\"ip\");\n         let manifest = settings::toml::Manifest::new(config_path)?;\n         let env = matches.value_of(\"env\");\n-        let target = manifest.get_target(env)?;\n+        is_preview = true;\n+        let target = manifest.get_target(env, is_preview)?;\n         let user = settings::global_user::GlobalUser::new().ok();\n         let verbose = matches.is_present(\"verbose\");\n         commands::dev::dev(target, user, host, port, ip, verbose)?;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -739,7 +754,7 @@ fn run() -> Result<(), failure::Error> {\n         log::info!(\"Getting project settings\");\n         let manifest = settings::toml::Manifest::new(config_path)?;\n         let env = matches.value_of(\"env\");\n-        let mut target = manifest.get_target(env)?;\n+        let mut target = manifest.get_target(env, is_preview)?;\n         let deploy_config = manifest.deploy_config(env)?;\n \n         let verbose = matches.is_present(\"verbose\");\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -749,7 +764,7 @@ fn run() -> Result<(), failure::Error> {\n         log::info!(\"Getting project settings\");\n         let manifest = settings::toml::Manifest::new(config_path)?;\n         let env = matches.value_of(\"env\");\n-        let target = manifest.get_target(env)?;\n+        let target = manifest.get_target(env, is_preview)?;\n \n         log::info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -803,7 +818,7 @@ fn run() -> Result<(), failure::Error> {\n             (\"put\", Some(create_matches)) => {\n                 let name = create_matches.value_of(\"name\");\n                 let env = create_matches.value_of(\"env\");\n-                let target = manifest.get_target(env)?;\n+                let target = manifest.get_target(env, is_preview)?;\n                 if let Some(name) = name {\n                     commands::secret::create_secret(&name, &user, &target)?;\n                 }\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -811,14 +826,14 @@ fn run() -> Result<(), failure::Error> {\n             (\"delete\", Some(delete_matches)) => {\n                 let name = delete_matches.value_of(\"name\");\n                 let env = delete_matches.value_of(\"env\");\n-                let target = manifest.get_target(env)?;\n+                let target = manifest.get_target(env, is_preview)?;\n                 if let Some(name) = name {\n                     commands::secret::delete_secret(&name, &user, &target)?;\n                 }\n             }\n             (\"list\", Some(list_matches)) => {\n                 let env = list_matches.value_of(\"env\");\n-                let target = manifest.get_target(env)?;\n+                let target = manifest.get_target(env, is_preview)?;\n                 commands::secret::list_secrets(&user, &target)?;\n             }\n             (\"\", None) => message::warn(\"secret expects a subcommand\"),\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -827,17 +842,17 @@ fn run() -> Result<(), failure::Error> {\n     } else if let Some(kv_matches) = matches.subcommand_matches(\"kv:namespace\") {\n         let manifest = settings::toml::Manifest::new(config_path)?;\n         let user = settings::global_user::GlobalUser::new()?;\n-\n         match kv_matches.subcommand() {\n             (\"create\", Some(create_matches)) => {\n+                is_preview = create_matches.is_present(\"preview\");\n                 let env = create_matches.value_of(\"env\");\n-                let target = manifest.get_target(env)?;\n                 let binding = create_matches.value_of(\"binding\").unwrap();\n-                commands::kv::namespace::create(&target, env, &user, binding)?;\n+                commands::kv::namespace::create(&manifest, is_preview, env, &user, binding)?;\n             }\n             (\"delete\", Some(delete_matches)) => {\n+                is_preview = delete_matches.is_present(\"preview\");\n                 let env = delete_matches.value_of(\"env\");\n-                let target = manifest.get_target(env)?;\n+                let target = manifest.get_target(env, is_preview)?;\n                 let namespace_id = match delete_matches.value_of(\"binding\") {\n                     Some(namespace_binding) => {\n                         commands::kv::get_namespace_id(&target, namespace_binding)?\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -851,7 +866,7 @@ fn run() -> Result<(), failure::Error> {\n             }\n             (\"list\", Some(list_matches)) => {\n                 let env = list_matches.value_of(\"env\");\n-                let target = manifest.get_target(env)?;\n+                let target = manifest.get_target(env, is_preview)?;\n                 commands::kv::namespace::list(&target, &user)?;\n             }\n             (\"\", None) => message::warn(\"kv:namespace expects a subcommand\"),\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -865,8 +880,9 @@ fn run() -> Result<(), failure::Error> {\n         let (subcommand, subcommand_matches) = kv_matches.subcommand();\n         let (target, namespace_id) = match subcommand_matches {\n             Some(subcommand_matches) => {\n+                is_preview = subcommand_matches.is_present(\"preview\");\n                 let env = subcommand_matches.value_of(\"env\");\n-                let target = manifest.get_target(env)?;\n+                let target = manifest.get_target(env, is_preview)?;\n                 let namespace_id = match subcommand_matches.value_of(\"binding\") {\n                     Some(namespace_binding) => {\n                         commands::kv::get_namespace_id(&target, namespace_binding)?\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -928,8 +944,9 @@ fn run() -> Result<(), failure::Error> {\n         let (subcommand, subcommand_matches) = kv_matches.subcommand();\n         let (target, namespace_id) = match subcommand_matches {\n             Some(subcommand_matches) => {\n+                is_preview = subcommand_matches.is_present(\"preview\");\n                 let env = subcommand_matches.value_of(\"env\");\n-                let target = manifest.get_target(env)?;\n+                let target = manifest.get_target(env, is_preview)?;\n                 let namespace_id = match subcommand_matches.value_of(\"binding\") {\n                     Some(namespace_binding) => {\n                         commands::kv::get_namespace_id(&target, namespace_binding)?\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -959,7 +976,7 @@ fn run() -> Result<(), failure::Error> {\n     } else if let Some(matches) = matches.subcommand_matches(\"tail\") {\n         let manifest = settings::toml::Manifest::new(config_path)?;\n         let env = matches.value_of(\"env\");\n-        let target = manifest.get_target(env)?;\n+        let target = manifest.get_target(env, is_preview)?;\n         let user = settings::global_user::GlobalUser::new()?;\n \n         let tunnel_port: Option<u16> = matches\ndiff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -128,19 +128,14 @@ fn validate(target: &Target) -> Vec<&str> {\n         missing_fields.push(\"name\")\n     };\n \n-    match &target.kv_namespaces {\n-        Some(kv_namespaces) => {\n-            for kv in kv_namespaces {\n-                if kv.binding.is_empty() {\n-                    missing_fields.push(\"kv-namespace binding\")\n-                }\n+    for kv in &target.kv_namespaces {\n+        if kv.binding.is_empty() {\n+            missing_fields.push(\"kv-namespace binding\")\n+        }\n \n-                if kv.id.is_empty() {\n-                    missing_fields.push(\"kv-namespace id\")\n-                }\n-            }\n+        if kv.id.is_empty() {\n+            missing_fields.push(\"kv-namespace id\")\n         }\n-        None => {}\n     }\n \n     missing_fields\ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -4,7 +4,7 @@ use serde::{Deserialize, Serialize};\n use serde_with::rust::string_empty_as_none;\n \n use crate::settings::toml::deploy_config::RouteConfig;\n-use crate::settings::toml::kv_namespace::KvNamespace;\n+use crate::settings::toml::kv_namespace::ConfigKvNamespace;\n use crate::settings::toml::site::Site;\n \n #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]\ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -22,7 +22,7 @@ pub struct Environment {\n     pub private: Option<bool>,\n     pub site: Option<Site>,\n     #[serde(rename = \"kv-namespaces\")]\n-    pub kv_namespaces: Option<Vec<KvNamespace>>,\n+    pub kv_namespaces: Option<Vec<ConfigKvNamespace>>,\n     pub vars: Option<HashMap<String, String>>,\n }\n \ndiff --git a/src/settings/toml/kv_namespace.rs b/src/settings/toml/kv_namespace.rs\n--- a/src/settings/toml/kv_namespace.rs\n+++ b/src/settings/toml/kv_namespace.rs\n@@ -5,6 +5,13 @@ use serde::{Deserialize, Serialize};\n use crate::settings::binding::Binding;\n \n #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]\n+pub struct ConfigKvNamespace {\n+    pub binding: String,\n+    pub id: Option<String>,\n+    pub preview_id: Option<String>,\n+}\n+\n+#[derive(Clone, Debug, PartialEq)]\n pub struct KvNamespace {\n     pub id: String,\n     pub binding: String,\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -12,7 +12,7 @@ use serde_with::rust::string_empty_as_none;\n use crate::commands::validate_worker_name;\n use crate::settings::toml::deploy_config::{DeployConfig, RouteConfig};\n use crate::settings::toml::environment::Environment;\n-use crate::settings::toml::kv_namespace::KvNamespace;\n+use crate::settings::toml::kv_namespace::{ConfigKvNamespace, KvNamespace};\n use crate::settings::toml::site::Site;\n use crate::settings::toml::target_type::TargetType;\n use crate::settings::toml::Target;\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -38,7 +38,7 @@ pub struct Manifest {\n     // as a TOML inline table (this would prevent confusion with environments too!)\n     pub site: Option<Site>,\n     #[serde(alias = \"kv-namespaces\")]\n-    pub kv_namespaces: Option<Vec<KvNamespace>>,\n+    pub kv_namespaces: Option<Vec<ConfigKvNamespace>>,\n     pub env: Option<HashMap<String, Environment>>,\n     pub vars: Option<HashMap<String, String>>,\n }\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -177,7 +177,11 @@ impl Manifest {\n         }\n     }\n \n-    pub fn get_target(&self, environment_name: Option<&str>) -> Result<Target, failure::Error> {\n+    pub fn get_target(\n+        &self,\n+        environment_name: Option<&str>,\n+        preview: bool,\n+    ) -> Result<Target, failure::Error> {\n         // Site projects are always webpack for now; don't let toml override this.\n         let target_type = match self.site {\n             Some(_) => TargetType::Webpack,\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -190,10 +194,10 @@ impl Manifest {\n             webpack_config: self.webpack_config.clone(), // MAY inherit\n             // importantly, the top level name will be modified\n             // to include the name of the environment\n-            name: self.name.clone(),                   // MAY inherit\n-            kv_namespaces: self.kv_namespaces.clone(), // MUST NOT inherit\n-            site: self.site.clone(),                   // MUST NOT inherit\n-            vars: self.vars.clone(),                   // MAY inherit\n+            name: self.name.clone(), // MAY inherit\n+            kv_namespaces: get_namespaces(self.kv_namespaces.clone(), preview)?, // MUST NOT inherit\n+            site: self.site.clone(), // MUST NOT inherit\n+            vars: self.vars.clone(), // MAY inherit,\n         };\n \n         let environment = self.get_environment(environment_name)?;\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -208,7 +212,7 @@ impl Manifest {\n             }\n \n             // don't inherit kv namespaces because it is an anti-pattern to use the same namespaces across multiple environments\n-            target.kv_namespaces = environment.kv_namespaces.clone();\n+            target.kv_namespaces = get_namespaces(environment.kv_namespaces.clone(), preview)?;\n \n             // don't inherit vars\n             target.vars = environment.vars.clone();\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -395,3 +399,37 @@ fn check_for_duplicate_names(manifest: &Manifest) -> Result<(), failure::Error>\n     }\n     Ok(())\n }\n+\n+fn get_namespaces(\n+    kv_namespaces: Option<Vec<ConfigKvNamespace>>,\n+    preview: bool,\n+) -> Result<Vec<KvNamespace>, failure::Error> {\n+    if let Some(namespaces) = kv_namespaces {\n+        namespaces.into_iter().map(|ns| {\n+            if preview {\n+                if let Some(preview_id) = &ns.preview_id {\n+                    if let Some(id) = &ns.id {\n+                        if preview_id == id {\n+                            message::warn(\"Specifying the same KV namespace ID for both preview and production sessions may cause bugs in your production worker! Proceed with caution.\");\n+                        }\n+                    }\n+                    Ok(KvNamespace {\n+                        id: preview_id.to_string(),\n+                        binding: ns.binding.to_string(),\n+                    })\n+                } else {\n+                    failure::bail!(\"In order to preview a worker with KV namespaces, you must designate a preview_id for each KV namespace you'd like to preview.\")\n+                }\n+            } else if let Some(id) = &ns.id {\n+                Ok(KvNamespace {\n+                    id: id.to_string(),\n+                    binding: ns.binding,\n+                })\n+            } else {\n+                failure::bail!(\"You must specify the namespace ID in the id field for the namespace with binding \\\"{}\\\"\", &ns.binding)\n+            }\n+        }).collect()\n+    } else {\n+        Ok(Vec::new())\n+    }\n+}\ndiff --git a/src/settings/toml/mod.rs b/src/settings/toml/mod.rs\n--- a/src/settings/toml/mod.rs\n+++ b/src/settings/toml/mod.rs\n@@ -9,7 +9,7 @@ mod target_type;\n \n pub use deploy_config::{DeployConfig, Zoned, Zoneless};\n pub use environment::Environment;\n-pub use kv_namespace::KvNamespace;\n+pub use kv_namespace::{ConfigKvNamespace, KvNamespace};\n pub use manifest::Manifest;\n pub use route::Route;\n pub use site::Site;\ndiff --git a/src/settings/toml/target.rs b/src/settings/toml/target.rs\n--- a/src/settings/toml/target.rs\n+++ b/src/settings/toml/target.rs\n@@ -7,15 +7,11 @@ use std::env;\n \n use std::path::PathBuf;\n \n-use serde::{Deserialize, Serialize};\n-\n-#[derive(Clone, Debug, Default, Deserialize, Serialize)]\n+#[derive(Clone, Debug, Default)]\n pub struct Target {\n     pub account_id: String,\n-    #[serde(rename = \"kv-namespaces\")]\n-    pub kv_namespaces: Option<Vec<KvNamespace>>,\n+    pub kv_namespaces: Vec<KvNamespace>,\n     pub name: String,\n-    #[serde(rename = \"type\")]\n     pub target_type: TargetType,\n     pub webpack_config: Option<String>,\n     pub site: Option<Site>,\ndiff --git a/src/settings/toml/target.rs b/src/settings/toml/target.rs\n--- a/src/settings/toml/target.rs\n+++ b/src/settings/toml/target.rs\n@@ -23,14 +19,8 @@ pub struct Target {\n }\n \n impl Target {\n-    pub fn kv_namespaces(&self) -> Vec<KvNamespace> {\n-        self.kv_namespaces.clone().unwrap_or_else(Vec::new)\n-    }\n-\n     pub fn add_kv_namespace(&mut self, kv_namespace: KvNamespace) {\n-        let mut updated_namespaces = self.kv_namespaces();\n-        updated_namespaces.push(kv_namespace);\n-        self.kv_namespaces = Some(updated_namespaces);\n+        self.kv_namespaces.push(kv_namespace);\n     }\n \n     pub fn build_dir(&self) -> Result<PathBuf, std::io::Error> {\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -27,7 +27,7 @@ pub fn build(\n     asset_manifest: Option<AssetManifest>,\n ) -> Result<Form, failure::Error> {\n     let target_type = &target.target_type;\n-    let kv_namespaces = target.kv_namespaces();\n+    let kv_namespaces = &target.kv_namespaces;\n     let mut text_blobs: Vec<TextBlob> = Vec::new();\n     let mut plain_texts: Vec<PlainText> = Vec::new();\n     let mut wasm_modules: Vec<WasmModule> = Vec::new();\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -55,7 +55,7 @@ pub fn build(\n             let assets = ProjectAssets::new(\n                 script_path,\n                 wasm_modules,\n-                kv_namespaces,\n+                kv_namespaces.to_vec(),\n                 text_blobs,\n                 plain_texts,\n             )?;\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -72,7 +72,7 @@ pub fn build(\n             let assets = ProjectAssets::new(\n                 script_path,\n                 wasm_modules,\n-                kv_namespaces,\n+                kv_namespaces.to_vec(),\n                 text_blobs,\n                 plain_texts,\n             )?;\ndiff --git a/src/upload/form/mod.rs b/src/upload/form/mod.rs\n--- a/src/upload/form/mod.rs\n+++ b/src/upload/form/mod.rs\n@@ -105,7 +105,7 @@ pub fn build(\n             let assets = ProjectAssets::new(\n                 script_path,\n                 wasm_modules,\n-                kv_namespaces,\n+                kv_namespaces.to_vec(),\n                 text_blobs,\n                 plain_texts,\n             )?;\n",
        "test_patch": "diff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -111,7 +109,7 @@ mod tests {\n     fn it_can_detect_duplicate_bindings() {\n         let target_with_dup_kv_bindings = Target {\n             account_id: \"\".to_string(),\n-            kv_namespaces: Some(vec![\n+            kv_namespaces: vec![\n                 KvNamespace {\n                     id: \"fake\".to_string(),\n                     binding: \"KV\".to_string(),\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -120,7 +118,7 @@ mod tests {\n                     id: \"fake\".to_string(),\n                     binding: \"KV\".to_string(),\n                 },\n-            ]),\n+            ],\n             name: \"test-target\".to_string(),\n             target_type: TargetType::Webpack,\n             webpack_config: None,\ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -71,10 +58,216 @@ fn validate_binding(binding: &str) -> Result<(), failure::Error> {\n     Ok(())\n }\n \n+fn toml_modification_instructions(\n+    new_namespace: KvNamespace,\n+    all_namespaces: Option<&Vec<ConfigKvNamespace>>,\n+    env: Option<&str>,\n+    is_preview: bool,\n+) -> String {\n+    let mut msg = \"Add the following to your wrangler.toml\".to_string();\n+\n+    if all_namespaces.is_some() {\n+        msg.push_str(\" in your kv_namespaces array\");\n+    }\n+\n+    if let Some(env) = env {\n+        msg.push_str(&format!(\" under [env.{}]\", env));\n+    }\n+\n+    msg.push_str(\":\\n\");\n+\n+    let existing_namespace = if let Some(all_namespaces) = all_namespaces {\n+        all_namespaces\n+            .iter()\n+            .find(|namespace| namespace.binding == new_namespace.binding)\n+    } else {\n+        None\n+    };\n+\n+    let mut inline_msg = format!(\"{{ binding = \\\"{}\\\", \", &new_namespace.binding);\n+    if let Some(existing_namespace) = existing_namespace {\n+        if is_preview {\n+            inline_msg.push_str(&format!(\"preview_id = \\\"{}\\\"\", new_namespace.id));\n+            if let Some(existing_namespace_id) = &existing_namespace.id {\n+                inline_msg.push_str(&format!(\", id = \\\"{}\\\"\", existing_namespace_id));\n+            }\n+        } else {\n+            inline_msg.push_str(&format!(\"id = \\\"{}\\\"\", new_namespace.id));\n+            if let Some(existing_namespace_preview_id) = &existing_namespace.preview_id {\n+                inline_msg.push_str(&format!(\n+                    \", preview_id = \\\"{}\\\"\",\n+                    existing_namespace_preview_id\n+                ));\n+            }\n+        }\n+    } else {\n+        if is_preview {\n+            inline_msg.push_str(\"preview_id\");\n+        } else {\n+            inline_msg.push_str(\"id\")\n+        }\n+        inline_msg.push_str(\" = \\\"\");\n+        inline_msg.push_str(&new_namespace.id);\n+        inline_msg.push_str(\"\\\"\");\n+    };\n+    inline_msg.push_str(\" }\");\n+\n+    if all_namespaces.is_some() {\n+        msg.push_str(&inline_msg);\n+    } else {\n+        msg.push_str(&format!(\"kv_namespaces = [ \\n\\t {}\\n]\", &inline_msg));\n+    }\n+\n+    msg\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n \n+    #[test]\n+    fn it_messages_about_env() {\n+        let new_namespace = KvNamespace {\n+            id: \"new_preview_id\".to_string(),\n+            binding: \"FOO\".to_string(),\n+        };\n+\n+        let all_namespaces = Some(vec![ConfigKvNamespace {\n+            binding: \"BAR\".to_string(),\n+            id: Some(\"production_id\".to_string()),\n+            preview_id: None,\n+        }]);\n+\n+        let env = Some(\"my_env\");\n+\n+        let is_preview = true;\n+\n+        let msg =\n+            toml_modification_instructions(new_namespace, all_namespaces.as_ref(), env, is_preview);\n+        assert!(msg.contains(\"[env.my_env]\"));\n+    }\n+\n+    #[test]\n+    fn it_messages_about_preview() {\n+        let new_namespace = KvNamespace {\n+            id: \"new_preview_id\".to_string(),\n+            binding: \"FOO\".to_string(),\n+        };\n+\n+        let all_namespaces = Some(vec![ConfigKvNamespace {\n+            binding: \"FOO\".to_string(),\n+            id: Some(\"existing_production_id\".to_string()),\n+            preview_id: None,\n+        }]);\n+\n+        let env = None;\n+\n+        let is_preview = true;\n+\n+        let msg =\n+            toml_modification_instructions(new_namespace, all_namespaces.as_ref(), env, is_preview);\n+        assert!(msg.contains(\"{ binding = \\\"FOO\\\", preview_id = \\\"new_preview_id\\\", id = \\\"existing_production_id\\\" }\"));\n+        assert!(!msg.contains(\"kv_namespaces = [\"));\n+    }\n+\n+    #[test]\n+    fn it_messages_about_namespaces() {\n+        let new_namespace = KvNamespace {\n+            id: \"new_id\".to_string(),\n+            binding: \"FOO\".to_string(),\n+        };\n+\n+        let all_namespaces = None;\n+\n+        let env = None;\n+\n+        let is_preview = false;\n+\n+        let msg =\n+            toml_modification_instructions(new_namespace, all_namespaces.as_ref(), env, is_preview);\n+        assert!(msg.contains(\"{ binding = \\\"FOO\\\", id = \\\"new_id\\\" }\"));\n+        assert!(msg.contains(\"kv_namespaces = [\"));\n+    }\n+\n+    #[test]\n+    fn it_doesnt_message_about_namespaces() {\n+        let new_namespace = KvNamespace {\n+            id: \"new_id\".to_string(),\n+            binding: \"FOO\".to_string(),\n+        };\n+\n+        let all_namespaces = Some(vec![]);\n+\n+        let env = None;\n+\n+        let is_preview = false;\n+\n+        let msg =\n+            toml_modification_instructions(new_namespace, all_namespaces.as_ref(), env, is_preview);\n+        assert!(msg.contains(\"{ binding = \\\"FOO\\\", id = \\\"new_id\\\" }\"));\n+        assert!(!msg.contains(\"kv_namespaces = [\"));\n+    }\n+\n+    #[test]\n+    fn it_messages_about_overridden_namespaces() {\n+        let new_namespace = KvNamespace {\n+            id: \"new_preview_id\".to_string(),\n+            binding: \"FOO\".to_string(),\n+        };\n+\n+        let all_namespaces = Some(vec![\n+            ConfigKvNamespace {\n+                binding: \"FOO\".to_string(),\n+                id: Some(\"existing_production_id\".to_string()),\n+                preview_id: Some(\"existing_preview_id\".to_string()),\n+            },\n+            ConfigKvNamespace {\n+                binding: \"BAR\".to_string(),\n+                id: Some(\"some_prod_id\".to_string()),\n+                preview_id: None,\n+            },\n+        ]);\n+\n+        let env = None;\n+\n+        let is_preview = true;\n+\n+        let msg =\n+            toml_modification_instructions(new_namespace, all_namespaces.as_ref(), env, is_preview);\n+        assert!(msg.contains(\"{ binding = \\\"FOO\\\", preview_id = \\\"new_preview_id\\\", id = \\\"existing_production_id\\\" }\"));\n+        assert!(!msg.contains(\"kv_namespaces = [\"));\n+    }\n+\n+    #[test]\n+    fn it_messages_when_no_existing_id() {\n+        let new_namespace = KvNamespace {\n+            id: \"new_preview_id\".to_string(),\n+            binding: \"FOO\".to_string(),\n+        };\n+\n+        let all_namespaces = Some(vec![\n+            ConfigKvNamespace {\n+                binding: \"FOO\".to_string(),\n+                id: None,\n+                preview_id: None,\n+            },\n+            ConfigKvNamespace {\n+                binding: \"BAR\".to_string(),\n+                id: Some(\"some_prod_id\".to_string()),\n+                preview_id: None,\n+            },\n+        ]);\n+\n+        let env = None;\n+\n+        let is_preview = true;\n+\n+        let msg =\n+            toml_modification_instructions(new_namespace, all_namespaces.as_ref(), env, is_preview);\n+        assert!(msg.contains(\"{ binding = \\\"FOO\\\", preview_id = \\\"new_preview_id\\\" }\"));\n+        assert!(!msg.contains(\"kv_namespaces = [\"));\n+    }\n+\n     #[test]\n     fn it_can_detect_invalid_binding() {\n         let invalid_bindings = vec![\"hi there\", \"1234\"];\ndiff --git a/src/preview/upload.rs b/src/preview/upload.rs\n--- a/src/preview/upload.rs\n+++ b/src/preview/upload.rs\n@@ -185,19 +180,17 @@ fn unauthenticated_upload(target: &Target) -> Result<Preview, failure::Error> {\n     let create_address = \"https://cloudflareworkers.com/script\";\n     log::info!(\"address: {}\", create_address);\n \n+    let mut target = target.clone();\n     // KV namespaces are not supported by the preview service unless you authenticate\n     // so we omit them and provide the user with a little guidance. We don't error out, though,\n     // because there are valid workarounds for this for testing purposes.\n-    let script_upload_form = if target.kv_namespaces.is_some() {\n+    if !target.kv_namespaces.is_empty() {\n         message::warn(\n             \"KV Namespaces are not supported in preview without setting API credentials and account_id\",\n         );\n-        let mut target = target.clone();\n-        target.kv_namespaces = None;\n-        upload::form::build(&target, None)?\n-    } else {\n-        upload::form::build(&target, None)?\n-    };\n+        target.kv_namespaces = Vec::new();\n+    }\n+    let script_upload_form = upload::form::build(&target, None)?;\n     let client = http::client();\n     let res = client\n         .post(create_address)\ndiff --git a/src/settings/toml/tests/mod.rs b/src/settings/toml/tests/mod.rs\n--- a/src/settings/toml/tests/mod.rs\n+++ b/src/settings/toml/tests/mod.rs\n@@ -15,8 +15,8 @@ fn it_builds_from_config() {\n \n     let manifest = Manifest::new(&toml_path).unwrap();\n \n-    let target = manifest.get_target(None).unwrap();\n-    assert!(target.kv_namespaces.is_none());\n+    let target = manifest.get_target(None, false).unwrap();\n+    assert!(target.kv_namespaces.is_empty());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/mod.rs b/src/settings/toml/tests/mod.rs\n--- a/src/settings/toml/tests/mod.rs\n+++ b/src/settings/toml/tests/mod.rs\n@@ -24,11 +24,11 @@ fn it_builds_from_environments_config() {\n     let toml_path = toml_fixture_path(\"environments\");\n     let manifest = Manifest::new(&toml_path).unwrap();\n \n-    let target = manifest.get_target(None).unwrap();\n-    assert!(target.kv_namespaces.is_none());\n+    let target = manifest.get_target(None, false).unwrap();\n+    assert!(target.kv_namespaces.is_empty());\n \n-    let target = manifest.get_target(Some(\"production\")).unwrap();\n-    assert!(target.kv_namespaces.is_none());\n+    let target = manifest.get_target(Some(\"production\"), false).unwrap();\n+    assert!(target.kv_namespaces.is_empty());\n }\n \n #[test]\ndiff --git a/src/settings/toml/tests/mod.rs b/src/settings/toml/tests/mod.rs\n--- a/src/settings/toml/tests/mod.rs\n+++ b/src/settings/toml/tests/mod.rs\n@@ -37,10 +37,10 @@ fn it_builds_from_environments_config_with_kv() {\n \n     let manifest = Manifest::new(&toml_path).unwrap();\n \n-    let target = manifest.get_target(None).unwrap();\n-    assert!(target.kv_namespaces.is_none());\n+    let target = manifest.get_target(None, false).unwrap();\n+    assert!(target.kv_namespaces.is_empty());\n \n-    let target = manifest.get_target(Some(\"production\")).unwrap();\n+    let target = manifest.get_target(Some(\"production\"), false).unwrap();\n     let kv_1 = KvNamespace {\n         id: \"somecrazylongidentifierstring\".to_string(),\n         binding: \"prodKV-1\".to_string(),\ndiff --git a/src/settings/toml/tests/mod.rs b/src/settings/toml/tests/mod.rs\n--- a/src/settings/toml/tests/mod.rs\n+++ b/src/settings/toml/tests/mod.rs\n@@ -50,16 +50,15 @@ fn it_builds_from_environments_config_with_kv() {\n         binding: \"prodKV-2\".to_string(),\n     };\n \n-    match target.kv_namespaces {\n-        Some(kv_namespaces) => {\n-            assert!(kv_namespaces.len() == 2);\n-            assert!(kv_namespaces.contains(&kv_1));\n-            assert!(kv_namespaces.contains(&kv_2));\n-        }\n-        None => panic!(\"found no kv namespaces\"),\n+    if target.kv_namespaces.is_empty() {\n+        panic!(\"found no kv namespaces\");\n+    } else {\n+        assert!(target.kv_namespaces.len() == 2);\n+        assert!(target.kv_namespaces.contains(&kv_1));\n+        assert!(target.kv_namespaces.contains(&kv_2));\n     }\n \n-    let target = manifest.get_target(Some(\"staging\")).unwrap();\n+    let target = manifest.get_target(Some(\"staging\"), false).unwrap();\n     let kv_1 = KvNamespace {\n         id: \"somecrazylongidentifierstring\".to_string(),\n         binding: \"stagingKV-1\".to_string(),\ndiff --git a/src/settings/toml/tests/mod.rs b/src/settings/toml/tests/mod.rs\n--- a/src/settings/toml/tests/mod.rs\n+++ b/src/settings/toml/tests/mod.rs\n@@ -68,13 +67,12 @@ fn it_builds_from_environments_config_with_kv() {\n         id: \"anotherwaytoolongidstring\".to_string(),\n         binding: \"stagingKV-2\".to_string(),\n     };\n-    match target.kv_namespaces {\n-        Some(kv_namespaces) => {\n-            assert!(kv_namespaces.len() == 2);\n-            assert!(kv_namespaces.contains(&kv_1));\n-            assert!(kv_namespaces.contains(&kv_2));\n-        }\n-        None => panic!(\"found no kv namespaces\"),\n+    if target.kv_namespaces.is_empty() {\n+        panic!(\"found no kv namespaces\");\n+    } else {\n+        assert!(target.kv_namespaces.len() == 2);\n+        assert!(target.kv_namespaces.contains(&kv_1));\n+        assert!(target.kv_namespaces.contains(&kv_2));\n     }\n }\n \ndiff --git a/src/sites/mod.rs b/src/sites/mod.rs\n--- a/src/sites/mod.rs\n+++ b/src/sites/mod.rs\n@@ -298,7 +298,7 @@ mod tests {\n     fn make_target(site: Site) -> Target {\n         Target {\n             account_id: \"\".to_string(),\n-            kv_namespaces: None,\n+            kv_namespaces: Vec::new(),\n             name: \"\".to_string(),\n             target_type: TargetType::JavaScript,\n             webpack_config: None,\n",
        "problem_statement": "[dev] Use preview namespace for regular workers\nFor Workers Sites, we create a separate preview KV namespace so that we do not impact production namespaces. We do not do this for regular workers and I believe we should.\r\n\r\nIn order for folks using `wrangler dev` or `wrangler preview` to safely interact with KV namespaces that are not automatically provisioned Workers Sites namespaces, we need to provide some sort of preview namespace.\r\n\r\nThe most straightforward option here that requires no changes to the Workers API is to do exactly what we already do for Workers Sites: provision a new KV namespace automatically for preview sessions. I've laid out the technical approach for this [here](https://github.com/cloudflare/wrangler/issues/1032#issuecomment-618578349).\r\n\r\nThis solves the immediate goal of stopping impact to production namespaces, but it is not a perfect solution.\r\n\r\n**Drawbacks**\r\n- Accounts with multiple developers may stomp on each other's preview namespaces during development\r\n- There may be a lot of churn of preview namespaces, and it will cost developers more money on their KV bill.\r\n- If we change our approach to preview namespaces in the future, Workers customers who used the feature will have unused preview namespaces lying around in their account, costing them money.\r\n\r\n---\r\n\r\nThe alternative to my proposed solution is to create a higher-level implementation of preview namespaces.\r\n\r\nThe best way to do this in my opinion would be to create a true local development environment that allows KV to be mocked and interacted with locally on the developer's machine. \r\n\r\nSince this is likely out of the question, the other alternative would be to create a first class idea of preview namespaces with the Workers KV API. This would mean each user (not each account) gets 1 preview namespace per production namespace (hopefully for free). They would be able to interact with those namespaces in the same way that they would with production namespaces. Likely would want to add a `--preview` flag to all `wrangler kv:namespace` commands, and when uploading preview workers, the config API would be in charge of replacing the uploaded KV namespace information with a preview namespace. I would guess that a full implementation would also require preview namespaces to be observable in the dashboard to provide a 1:1 developer experience.\r\n\r\n---\r\n\r\n**My recommendation is to start with the first approach since it is already possible with the API today, and since we already follow that approach for Workers Sites. This will allow us to quickly provide a significant improvement over the current development story, and keep folks from screwing up their production data.**\n",
        "hints_text": "The option to duplicate data into a new namespace would be great! It would be really useful to let developers spawn a development environment from production without needing to [@cloudflare/kv-worker-migrate](https://github.com/cloudflare/kv-worker-migrate).\n> 1. Start creating a namespace automatically on publish if it doesn't exist? We'll have to start doing this on preview and it seems... strange to have different behavior on preview/publish. If we're smart enough on preview, why not publish?\r\n\r\nthe reason we can do this for sites is that we control the title of the namespace; one mistake i think we made with KV was to use ID instead of Title in the wrangler.toml; Titles are unique per account and therefore would have been better. This particular point would work great if we remedied that by taking a `title` argument instead of an `id` argument in the toml, making kv-namespaces top level, and concatenating environment names for envs the way we do for site namespaces. if not, all we have is binding name, and this should not be coupled to title, as the user should be allowed to change it without unexpected effects on their namespace(s), tho perhaps the same could be said for envs.\r\n\r\n> 2. Add a --preview flag to all of the KV namespace commands?\r\n\r\nprobably couldn't hurt? tangent: what if `preview` was a reserved environment name? \ud83e\udd14 \r\n\r\n> 3. Seed the preview namespace from production data on startup (copy over all the data)?\r\n\r\nthis is complex and difficult for a few reasons. providing tools for users to do this i think could be valuable but doing so automatically might be overkill.\r\n\r\n> 4. Create a new namespace automatically on preview sessions based on namespaces defined in wrangler.toml?\r\n\r\nthis seems good, given the same constraints as my response to point 1\r\n\r\n> 5. Delete old values in the namespace when the process is killed?\r\n\r\ndepending on our concerns around churn, we could simply delete preview namespaces when the process is killed; this would be simplest but slowest. making the options around this configurable might be valuable.\n> This particular point would work great if we remedied that by taking a title argument instead of an id argument in the toml, making kv-namespaces top level, and concatenating environment names for envs the way we do for site namespaces.\r\n\r\nunfortunately this has some major backwards incompatibility issues - today we take id and binding and don't allow inheritance from top level. \r\n\r\n> probably couldn't hurt?\r\n\r\nprobably would be reasonable addition but would need some way to know if preview session currently exists\r\n\r\n> what if `preview` was a reserved environment name\r\n\r\nthis is an interesting thought, and one that we had discussed in the original environments proposal - dont think it's a good idea here though given backwards compatibility issues and also i'd assume you'd want to use wrangler dev across multiple environments\r\n\r\n> this is complex and difficult for a few reasons. providing tools for users to do this i think could be valuable but doing so automatically might be overkill.\r\n\r\ni think you're right and probably not necessary for mvp\r\n\r\n> depending on our concerns around churn, we could simply delete preview namespaces when the process is killed; this would be simplest but slowest. making the options around this configurable might be valuable.\r\n\r\nprobably makes sense just to delete entirely.\r\n\r\n---\r\n\r\nThe biggest concern I have here is backwards compatibility - changing the way we configure kv namespaces in the pursuit of wrangler dev feels... icky. Perhaps what we can do is\r\n\r\n1) fetch title of kv namespace from id in toml\r\n2) prepend `__preview_` to title and create new namespace\r\n3) use that namespace w/same binding for preview worker\r\n4) delete preview namespace when session ends\r\n\r\nI think `--preview` flag on kv commands is probably too complicated and error-prone to pursue, would likely want to print out the title of the namespace we're using and say something like \r\n\r\n`You can run kv commands using the --title __preview_your_namespace_id flag`\n> unfortunately this has some major backwards incompatibility issues - today we take id and binding and don't allow inheritance from top level.\r\n\r\nagreed; this might be a thing to stuff into a 2.0 milestone, which we may want to consider compiling.\r\n\r\nthe sequence you have is pretty good; it does rely on a clean up step and that really leaves room for odd state problems (what do you do if the preview namespace still exists?)\r\n\r\ni think it is worth exploring the use of kv prefixing for this...\nok so - when a preview session is started with an environment that contains kv-namespaces, we will \r\n\r\n1) fetch the title of the kv namespace from the id in the toml\r\n2) prepend the title with `__preview_` and create the new namespace if it doesn't exist\r\n3) print the name of the namespace we're using and make sure they know it is separate from production and they may need to repopulate it\r\n  - we don't want to be too prescriptive here because we dont know what they want to do - some users may want to keep the same data in their namespace for all preview sessions because they only write from the worker. some may be testing writes from the worker itself and want the namespace to be empty when it starts. we don't know what they want to do for preview namespaces just like we dont know what they want to do for deployed namespaces, so we need to inform them to run kv commands using the preview namespace we created.\r\n4) when uploading the worker to the preview api, use the same binding name for the namespace and new namespace id\r\n5) on teardown, inform the user that their preview namespace still exists and they can delete it if they want to\nI've updated the [top level comment](https://github.com/cloudflare/wrangler/issues/1032#issue-560622548) to reflect the current state of the discussion.\nGood feedback/question from @koeninger: \"What do I do if I want to preview my production KV namespace?\"\ncould we add an optional `preview` field to each kv namespace entry? i would suggest that we follow the steps above, but...\r\n\r\n* first check the namespace for a `preview`field and use that id if it exists. this solves the issue of \"what if i want to preview my production kv namespace?\" otherwise proceed with provisioning the preview namespace for them.\r\n* if we provision / use a convention-based namespace, include steps to optionally add the `preview` field to their toml.\r\n\r\nplaying devil's advocate against my own idea, this could make it look like if you _don't_ add this field we'll use the namespace specified by `id`. i still prefer having the toml config instead of just a flag though.\nok - i've kinda dropped the ball on actually starting implementation on this one/nailing down exact design.\r\n\r\n@ashleymichal I really like the idea of being explicit here and adding the idea of a preview namespace to `wrangler.toml`. i also think we could combine it with environment variables to allow individual developers to each have their own preview namespace, which would solve the problem of having multiple developers squashing each others namespaces.\r\n\r\ni think to start out with, we should just flat out refuse to preview if there is not a preview namespace specified for the environment they're using and make them handle the creation/deletion themselves. this makes it so we are not in charge of provisioning namespaces or causing a bunch of churn/inflating their KV billing.\r\n\r\nthe environment variable config could be added after the fact to add more explicit support for multiple developers, but at first we could just recommend a new environment for each dev.\r\n\r\nquestion becomes - should we also extend the `[site]` declaration to allow custom preview namespaces to override the one we auto-provision? this is probably out of scope of this particular change but worth revisiting if/when we add support for env variables for multiple devs.\n@EverlastingBugstopper this seems like a good call. we can keep our eyes  out for optimizations  and convenience features, but for solving the biggest problem this seems good.",
        "created_at": "2020-06-02T20:22:44Z",
        "version": "1.9"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1355,
        "instance_id": "cloudflare__wrangler-legacy-1355",
        "issue_numbers": [
            "1136"
        ],
        "base_commit": "1658b7653bfe25436b4db113906a71ec09092869",
        "patch": "diff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -8,7 +8,7 @@ use crate::kv::bulk::delete;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::{DeployConfig, Target};\n use crate::sites;\n-use crate::terminal::{emoji, message, styles};\n+use crate::terminal::{emoji, message};\n use crate::upload;\n \n pub fn publish(\ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -54,18 +54,7 @@ pub fn publish(\n             delete(target, user, &site_namespace.id, to_delete)?;\n         }\n     } else {\n-        let uses_kv_bucket = sync_non_site_buckets(target, user, verbose)?;\n-\n-        let upload_client = if uses_kv_bucket {\n-            let wrangler_toml = styles::highlight(\"`wrangler.toml`\");\n-            let issue_link = styles::url(\"https://github.com/cloudflare/wrangler/issues/1136\");\n-            let msg = format!(\"As of 1.10.0, you will no longer be able to specify a bucket for a kv namespace in your {}.\\nIf your application depends on this feature, please file an issue with your use case here:\\n{}\", wrangler_toml, issue_link);\n-            message::deprecation_warning(&msg);\n-\n-            http::featured_legacy_auth_client(user, Feature::Bucket)\n-        } else {\n-            http::legacy_auth_client(user)\n-        };\n+        let upload_client = http::legacy_auth_client(user);\n \n         upload::script(&upload_client, &target, None)?;\n \ndiff --git a/src/commands/publish.rs b/src/commands/publish.rs\n--- a/src/commands/publish.rs\n+++ b/src/commands/publish.rs\n@@ -124,46 +113,6 @@ pub fn validate_bucket_location(bucket: &PathBuf) -> Result<(), failure::Error>\n     Ok(())\n }\n \n-// This is broken into a separate step because the intended design does not\n-// necessarily intend for bucket support outside of the [site] usage, especially\n-// since assets are still hashed. In a subsequent release, we will either\n-// deprecate this step, or we will integrate it more closely and adapt to user\n-// feedback.\n-//\n-// In order to track usage of this \"feature\", this function returns a bool that\n-// indicates whether any non-site kv namespaces were specified / uploaded.\n-pub fn sync_non_site_buckets(\n-    target: &Target,\n-    user: &GlobalUser,\n-    verbose: bool,\n-) -> Result<bool, failure::Error> {\n-    let mut is_using_non_site_bucket = false;\n-\n-    for namespace in target.kv_namespaces() {\n-        if let Some(path) = &namespace.bucket {\n-            is_using_non_site_bucket = true;\n-            validate_bucket_location(path)?;\n-            let (to_upload, to_delete, _) = sites::sync(target, user, &namespace.id, path)?;\n-            // First, upload all existing files in bucket directory\n-            if verbose {\n-                message::info(\"Preparing to upload updated files...\");\n-            }\n-            sites::upload_files(target, user, &namespace.id, to_upload)?;\n-\n-            // Finally, remove any stale files\n-            if !to_delete.is_empty() {\n-                if verbose {\n-                    message::info(\"Deleting stale files...\");\n-                }\n-\n-                delete(target, user, &namespace.id, to_delete)?;\n-            }\n-        }\n-    }\n-\n-    Ok(is_using_non_site_bucket)\n-}\n-\n fn validate_target_required_fields_present(target: &Target) -> Result<(), failure::Error> {\n     let mut missing_fields = Vec::new();\n \ndiff --git a/src/settings/toml/kv_namespace.rs b/src/settings/toml/kv_namespace.rs\n--- a/src/settings/toml/kv_namespace.rs\n+++ b/src/settings/toml/kv_namespace.rs\n@@ -1,5 +1,4 @@\n use std::fmt;\n-use std::path::PathBuf;\n \n use serde::{Deserialize, Serialize};\n \ndiff --git a/src/settings/toml/kv_namespace.rs b/src/settings/toml/kv_namespace.rs\n--- a/src/settings/toml/kv_namespace.rs\n+++ b/src/settings/toml/kv_namespace.rs\n@@ -9,7 +8,6 @@ use crate::settings::binding::Binding;\n pub struct KvNamespace {\n     pub id: String,\n     pub binding: String,\n-    pub bucket: Option<PathBuf>,\n }\n \n impl fmt::Display for KvNamespace {\ndiff --git a/src/sites/mod.rs b/src/sites/mod.rs\n--- a/src/sites/mod.rs\n+++ b/src/sites/mod.rs\n@@ -57,19 +57,9 @@ pub fn add_namespace(\n         }\n     };\n \n-    // Check if namespace already is in namespace list\n-    for namespace in target.kv_namespaces() {\n-        if namespace.id == site_namespace.id {\n-            return Ok(namespace); // Sites binding already exists; ignore\n-        } else if namespace.bucket.is_some() {\n-            failure::bail!(\"your wrangler.toml includes a `bucket` as part of a kv_namespace but also has a `[site]` specifed; did you mean to put this under `[site]`?\");\n-        }\n-    }\n-\n     let site_namespace = KvNamespace {\n         binding: \"__STATIC_CONTENT\".to_string(),\n         id: site_namespace.id,\n-        bucket: Some(target.site.clone().unwrap().bucket),\n     };\n \n     target.add_kv_namespace(site_namespace.clone());\n",
        "test_patch": "diff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -115,12 +115,10 @@ mod tests {\n                 KvNamespace {\n                     id: \"fake\".to_string(),\n                     binding: \"KV\".to_string(),\n-                    bucket: None,\n                 },\n                 KvNamespace {\n                     id: \"fake\".to_string(),\n                     binding: \"KV\".to_string(),\n-                    bucket: None,\n                 },\n             ]),\n             name: \"test-target\".to_string(),\ndiff --git a/src/settings/toml/tests/mod.rs b/src/settings/toml/tests/mod.rs\n--- a/src/settings/toml/tests/mod.rs\n+++ b/src/settings/toml/tests/mod.rs\n@@ -44,12 +44,10 @@ fn it_builds_from_environments_config_with_kv() {\n     let kv_1 = KvNamespace {\n         id: \"somecrazylongidentifierstring\".to_string(),\n         binding: \"prodKV-1\".to_string(),\n-        bucket: None,\n     };\n     let kv_2 = KvNamespace {\n         id: \"anotherwaytoolongidstring\".to_string(),\n         binding: \"prodKV-2\".to_string(),\n-        bucket: None,\n     };\n \n     match target.kv_namespaces {\ndiff --git a/src/settings/toml/tests/mod.rs b/src/settings/toml/tests/mod.rs\n--- a/src/settings/toml/tests/mod.rs\n+++ b/src/settings/toml/tests/mod.rs\n@@ -65,12 +63,10 @@ fn it_builds_from_environments_config_with_kv() {\n     let kv_1 = KvNamespace {\n         id: \"somecrazylongidentifierstring\".to_string(),\n         binding: \"stagingKV-1\".to_string(),\n-        bucket: None,\n     };\n     let kv_2 = KvNamespace {\n         id: \"anotherwaytoolongidstring\".to_string(),\n         binding: \"stagingKV-2\".to_string(),\n-        bucket: None,\n     };\n     match target.kv_namespaces {\n         Some(kv_namespaces) => {\n",
        "problem_statement": "Deprecate KV Namespace bucket attribute\nthis feature (non-site kv buckets) was not intended to be released into the wild...and then was. The plan is to deprecate in 1.9.0, but I also  want folks to have a place to give feedback on this decision. If you think  we should not deprecate, please leave a comment on this issue stating  your use case.\n",
        "hints_text": "",
        "created_at": "2020-06-02T20:07:22Z",
        "version": "1.9"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1304,
        "instance_id": "cloudflare__wrangler-legacy-1304",
        "issue_numbers": [
            "1147"
        ],
        "base_commit": "12aa57997d2f813a5d8996b4da8c40295876afdf",
        "patch": "diff --git a/src/lib.rs b/src/lib.rs\n--- a/src/lib.rs\n+++ b/src/lib.rs\n@@ -16,3 +16,5 @@ pub mod terminal;\n pub mod upload;\n pub mod watch;\n pub mod wranglerjs;\n+\n+pub mod fixtures;\n",
        "test_patch": "diff --git a/src/settings/toml/tests/deploy_config.rs b/src/settings/toml/tests/deploy_config.rs\n--- a/src/settings/toml/tests/deploy_config.rs\n+++ b/src/settings/toml/tests/deploy_config.rs\n@@ -1,11 +1,11 @@\n-use super::wrangler_toml::{EnvConfig, WranglerToml, TEST_ENV_NAME};\n-\n use std::str::FromStr;\n \n use crate::settings::toml::route::Route;\n use crate::settings::toml::Manifest;\n use crate::settings::toml::{DeployConfig, Zoned, Zoneless};\n \n+use crate::fixtures::{EnvConfig, WranglerToml, TEST_ENV_NAME};\n+\n // Test consts\n const ZONE_ID: &str = \"samplezoneid\";\n const PATTERN: &str = \"hostname.tld/*\";\ndiff --git a/src/settings/toml/tests/mod.rs b/src/settings/toml/tests/mod.rs\n--- a/src/settings/toml/tests/mod.rs\n+++ b/src/settings/toml/tests/mod.rs\n@@ -1,7 +1,3 @@\n-#[path = \"../../../../tests/fixture/wrangler_toml.rs\"]\n-#[cfg(test)]\n-mod wrangler_toml;\n-\n mod deploy_config;\n \n use super::*;\ndiff --git a/src/settings/toml/tests/mod.rs b/src/settings/toml/tests/mod.rs\n--- a/src/settings/toml/tests/mod.rs\n+++ b/src/settings/toml/tests/mod.rs\n@@ -11,7 +7,7 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n \n-use wrangler_toml::{EnvConfig, WranglerToml, TEST_ENV_NAME};\n+use crate::fixtures::{EnvConfig, WranglerToml, TEST_ENV_NAME};\n \n #[test]\n fn it_builds_from_config() {\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -1,11 +1,9 @@\n-pub mod fixture;\n-\n use std::fs;\n use std::process::Command;\n use std::str;\n \n use assert_cmd::prelude::*;\n-use fixture::{Fixture, WranglerToml};\n+use wrangler::fixtures::{Fixture, WranglerToml};\n \n #[test]\n fn it_builds_webpack() {\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -1,6 +1,4 @@\n-pub mod fixture;\n-\n-use fixture::WranglerToml;\n+use wrangler::fixtures::{Fixture, WranglerToml};\n \n use std::collections::HashMap;\n use std::env;\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -9,8 +7,6 @@ use std::process::Command;\n use assert_cmd::prelude::*;\n use predicates::prelude::*;\n \n-use fixture::Fixture;\n-\n #[test]\n fn it_can_preview_js_project() {\n     let fixture = Fixture::new();\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -20,7 +16,7 @@ fn it_can_preview_js_project() {\n         addEventListener('fetch', event => {\n             event.respondWith(handleRequest(event.request))\n         })\n-        \n+\n         /**\n         * Fetch and log a request\n         * @param {Request} request\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -209,7 +205,7 @@ fn it_previews_with_config_text() {\n         addEventListener('fetch', event => {\n             event.respondWith(handleRequest(event.request))\n         })\n-        \n+\n         async function handleRequest(request) {\n             return new Response(CONFIG_TEST)\n         }\n",
        "problem_statement": "Remove unused code warnings\n```console\r\n$ cargo test\r\n   Compiling wrangler v1.8.2 (/Users/averyharnish/Documents/work/wrangler)\r\nwarning: method is never used: `webpack_build`\r\n   --> src/settings/toml/tests/../../../../tests/fixture/wrangler_toml.rs:185:5\r\n    |\r\n185 |     pub fn webpack_build(name: &'static str) -> WranglerToml {\r\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    |\r\n    = note: `#[warn(dead_code)]` on by default\r\n\r\nwarning: method is never used: `webpack_std_config`\r\n   --> src/settings/toml/tests/../../../../tests/fixture/wrangler_toml.rs:194:5\r\n    |\r\n194 |     pub fn webpack_std_config(name: &'static str) -> WranglerToml {\r\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nwarning: method is never used: `webpack_custom_config`\r\n   --> src/settings/toml/tests/../../../../tests/fixture/wrangler_toml.rs:201:5\r\n    |\r\n201 |     pub fn webpack_custom_config(name: &'static str, webpack_config: &'static str) -> WranglerToml {\r\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nwarning: method is never used: `rust`\r\n   --> src/settings/toml/tests/../../../../tests/fixture/wrangler_toml.rs:208:5\r\n    |\r\n208 |     pub fn rust(name: &'static str) -> WranglerToml {\r\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nwarning: method is never used: `javascript`\r\n   --> src/settings/toml/tests/../../../../tests/fixture/wrangler_toml.rs:217:5\r\n    |\r\n217 |     pub fn javascript(name: &'static str) -> WranglerToml {\r\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nwarning: method is never used: `site`\r\n   --> src/settings/toml/tests/../../../../tests/fixture/wrangler_toml.rs:226:5\r\n    |\r\n226 |     pub fn site(name: &'static str) -> WranglerToml {\r\n    | \r\n```\n",
        "hints_text": "Would adding ```#![allow(dead_code)]``` suffice here? because even though it says: \"method not used\", the methods are indeed used. And since this is for tests, I guess we could allow dead code.\r\n\r\nJust dont know if its acceptable in the codebase to allow dead code.\r\n\r\nReference: [Here](https://www.reddit.com/r/rust/comments/69bm0r/why_does_rust_warn_me_that_im_not_using_methods/) and [Here](https://stackoverflow.com/questions/32900809/how-to-suppress-function-is-never-used-warning-for-a-function-used-by-tests)\nHey @OAyomide - I think it's worth investigating to see if we can get the compiler to recognize that it isn't actually unused code, generally we try to avoid using `#![allow` in our codebase as it's easy for it to end up suppressing _actually_ unused code, and we don't want that! \r\n\r\nThere's gotta be some way to reorganize the code but i'm not sure how... it might need to be separated out into its own module outside of the tests folder or something? I'm not exactly sure.\nI figured. I'll try to refactor my PR and remove ```#[allow(dead_code)]```. Thanks!",
        "created_at": "2020-05-20T18:34:22Z",
        "version": "1.9"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 215,
        "instance_id": "cloudflare__wrangler-legacy-215",
        "issue_numbers": [
            "92"
        ],
        "base_commit": "ec7698a358e28e6858665a7fc942eb84e15b73a7",
        "patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -143,6 +143,9 @@ There are two types of configuration that `wrangler` uses: global user and per p\n         This key is optional if you are using a workers.dev subdomain and is only required for `publish --release`.\n     - `webpack_config`: This is the path to the webpack configuration file for your worker. This is optional and\n         defaults to `webpack.config.js`\n+    - `kv-namespaces`: Bind kv namespaces to your worker. Must be created in the dashboard before. An array of:\n+        - `binding`: name that will be used to bind the kv-namespace to your script, in JavaScript.\n+        - `id`: Identifer of the namespace (can be found on the Cloudflare dashboard).\n \n ## \u2693 Installation\n \ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -6,12 +6,13 @@ use std::fs::File;\n use std::io::prelude::*;\n use std::path::{Path, PathBuf};\n \n+use crate::terminal::message;\n use log::info;\n \n use crate::commands::build::wranglerjs::output::WranglerjsOutput;\n use crate::settings::binding::Binding;\n use crate::settings::metadata;\n-use crate::terminal::message;\n+use crate::settings::project::KvNamespace;\n \n // Directory where we should write the {Bundle}. It represents the built\n // artifact.\ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -34,7 +35,11 @@ impl Bundle {\n         Bundle { out }\n     }\n \n-    pub fn write(&self, wranglerjs_output: &WranglerjsOutput) -> Result<(), failure::Error> {\n+    pub fn write(\n+        &self,\n+        wranglerjs_output: &WranglerjsOutput,\n+        kv_namespaces: Vec<KvNamespace>,\n+    ) -> Result<(), failure::Error> {\n         let bundle_path = Path::new(&self.out);\n         if !bundle_path.exists() {\n             fs::create_dir(bundle_path)?;\ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -52,7 +57,7 @@ impl Bundle {\n \n         script_file.write_all(script.as_bytes())?;\n \n-        let metadata = create_metadata(self).expect(\"could not create metadata\");\n+        let metadata = create_metadata(self, &kv_namespaces).expect(\"could not create metadata\");\n         let mut metadata_file = File::create(self.metadata_path())?;\n         metadata_file.write_all(metadata.as_bytes())?;\n \ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -112,13 +117,23 @@ pub fn create_prologue() -> String {\n }\n \n // This metadata describe the bindings on the Worker.\n-fn create_metadata(bundle: &Bundle) -> Result<String, serde_json::error::Error> {\n+fn create_metadata(\n+    bundle: &Bundle,\n+    kv_namespaces: &Vec<KvNamespace>,\n+) -> Result<String, serde_json::error::Error> {\n     let mut bindings = vec![];\n \n     if bundle.has_wasm() {\n         bindings.push(Binding::new_wasm_module(\n-            bundle.get_wasm_binding(),\n-            bundle.get_wasm_binding(),\n+            bundle.get_wasm_binding(), // name\n+            bundle.get_wasm_binding(), // part\n+        ));\n+    }\n+\n+    for namespace in kv_namespaces {\n+        bindings.push(Binding::new_kv_namespace(\n+            namespace.binding.clone(), // local_binding\n+            namespace.id.clone(),      // namespace_id\n         ));\n     }\n \ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -45,8 +45,11 @@ pub fn run_build(project: &Project) -> Result<(), failure::Error> {\n             failure::bail!(\"Webpack returned an error\");\n         }\n \n+        let kv_namespaces = project.kv_namespaces.clone().unwrap_or(Vec::new());\n+        let kv_namespaces_len = kv_namespaces.clone().len();\n+\n         bundle\n-            .write(&wranglerjs_output)\n+            .write(&wranglerjs_output, kv_namespaces)\n             .expect(\"could not write bundle to disk\");\n \n         let mut msg = format!(\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -56,6 +59,9 @@ pub fn run_build(project: &Project) -> Result<(), failure::Error> {\n         if bundle.has_wasm() {\n             msg = format!(\"{} and Wasm size is {}\", msg, wranglerjs_output.wasm_size());\n         }\n+        if kv_namespaces_len > 0 {\n+            msg = format!(\"{} and has {} kv namespaces\", msg, kv_namespaces_len);\n+        }\n         message::success(&msg);\n         Ok(())\n     } else {\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -26,7 +26,6 @@ pub fn publish(user: &GlobalUser, project: &Project, release: bool) -> Result<()\n \n     validate_project(project, release)?;\n     commands::build(&project)?;\n-    create_kv_namespaces(user, &project)?;\n     publish_script(&user, &project, release)?;\n     if release {\n         info!(\"release mode detected, making a route...\");\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -43,43 +42,6 @@ pub fn publish(user: &GlobalUser, project: &Project, release: bool) -> Result<()\n     Ok(())\n }\n \n-pub fn create_kv_namespaces(user: &GlobalUser, project: &Project) -> Result<(), failure::Error> {\n-    let kv_addr = format!(\n-        \"https://api.cloudflare.com/client/v4/accounts/{}/storage/kv/namespaces\",\n-        project.account_id,\n-    );\n-\n-    let client = http::auth_client(user);\n-\n-    if let Some(namespaces) = &project.kv_namespaces {\n-        for namespace in namespaces {\n-            info!(\"Attempting to create namespace '{}'\", namespace);\n-\n-            let mut map = HashMap::new();\n-            map.insert(\"title\", namespace);\n-\n-            let request = client.post(&kv_addr).json(&map).send();\n-\n-            if let Err(error) = request {\n-                // A 400 is returned if the account already owns a namespace with this title.\n-                //\n-                // https://api.cloudflare.com/#workers-kv-namespace-create-a-namespace\n-                match error.status() {\n-                    Some(code) if code == 400 => {\n-                        info!(\"Namespace '{}' already exists, continuing.\", namespace)\n-                    }\n-                    _ => {\n-                        info!(\"Error when creating namespace '{}'\", namespace);\n-                        failure::bail!(\"\u26d4 Something went wrong! Error: {}\", error)\n-                    }\n-                }\n-            }\n-            info!(\"Namespace '{}' exists now\", namespace)\n-        }\n-    }\n-    Ok(())\n-}\n-\n fn publish_script(\n     user: &GlobalUser,\n     project: &Project,\ndiff --git a/src/settings/binding.rs b/src/settings/binding.rs\n--- a/src/settings/binding.rs\n+++ b/src/settings/binding.rs\n@@ -5,10 +5,18 @@ use serde::Serialize;\n pub enum Binding {\n     #[allow(non_camel_case_types)]\n     wasm_module { name: String, part: String },\n+    #[allow(non_camel_case_types)]\n+    kv_namespace { name: String, namespace_id: String },\n }\n \n impl Binding {\n     pub fn new_wasm_module(name: String, part: String) -> Binding {\n         Binding::wasm_module { name, part }\n     }\n+    pub fn new_kv_namespace(local_binding: String, namespace_id: String) -> Binding {\n+        Binding::kv_namespace {\n+            name: local_binding,\n+            namespace_id,\n+        }\n+    }\n }\ndiff --git a/src/settings/project.rs b/src/settings/project.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project.rs\n@@ -9,6 +9,14 @@ use log::info;\n use config::{Config, Environment, File};\n use serde::{Deserialize, Serialize};\n \n+#[derive(Deserialize, Serialize, Debug, Clone)]\n+pub struct KvNamespace {\n+    // name that will be used to bind the JavaScript value to the worker\n+    pub binding: String,\n+    // identifier of the KV namespace\n+    pub id: String,\n+}\n+\n #[derive(Clone, Debug, Deserialize, Serialize)]\n pub struct Project {\n     pub name: String,\ndiff --git a/src/settings/project.rs b/src/settings/project.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project.rs\n@@ -21,7 +29,7 @@ pub struct Project {\n     pub route: Option<String>,\n     pub routes: Option<HashMap<String, String>>,\n     #[serde(rename = \"kv-namespaces\")]\n-    pub kv_namespaces: Option<Vec<String>>,\n+    pub kv_namespaces: Option<Vec<KvNamespace>>,\n }\n \n #[derive(Clone, Debug, Deserialize, Serialize)]\n",
        "test_patch": "diff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -154,7 +169,7 @@ mod tests {\n         };\n         let bundle = Bundle::new_at(out.clone());\n \n-        bundle.write(&wranglerjs_output).unwrap();\n+        bundle.write(&wranglerjs_output, vec![]).unwrap();\n         assert!(Path::new(&bundle.metadata_path()).exists());\n         let contents =\n             fs::read_to_string(&bundle.metadata_path()).expect(\"could not read metadata\");\ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -175,7 +190,7 @@ mod tests {\n         };\n         let bundle = Bundle::new_at(out.clone());\n \n-        bundle.write(&wranglerjs_output).unwrap();\n+        bundle.write(&wranglerjs_output, vec![]).unwrap();\n         assert!(Path::new(&bundle.script_path()).exists());\n         assert!(!Path::new(&bundle.wasm_path()).exists());\n \ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -193,7 +208,7 @@ mod tests {\n         };\n         let bundle = Bundle::new_at(out.clone());\n \n-        bundle.write(&wranglerjs_output).unwrap();\n+        bundle.write(&wranglerjs_output, vec![]).unwrap();\n         assert!(Path::new(&bundle.wasm_path()).exists());\n         assert!(bundle.has_wasm());\n \ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -211,7 +226,7 @@ mod tests {\n         };\n         let bundle = Bundle::new_at(out.clone());\n \n-        bundle.write(&wranglerjs_output).unwrap();\n+        bundle.write(&wranglerjs_output, vec![]).unwrap();\n         assert!(Path::new(&bundle.metadata_path()).exists());\n         let contents =\n             fs::read_to_string(&bundle.metadata_path()).expect(\"could not read metadata\");\ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -224,6 +239,32 @@ mod tests {\n         cleanup(out);\n     }\n \n+    #[test]\n+    fn it_writes_the_bundle_kv_metadata() {\n+        let out = create_temp_dir(\"it_writes_the_bundle_kv_metadata\");\n+        let wranglerjs_output = WranglerjsOutput {\n+            errors: vec![],\n+            script: \"\".to_string(),\n+            wasm: None,\n+            dist_to_clean: None,\n+        };\n+        let bundle = Bundle::new_at(out.clone());\n+\n+        let kv_namespaces = vec![KvNamespace {\n+            binding: \"binding\".to_string(),\n+            id: \"id\".to_string(),\n+        }];\n+\n+        bundle.write(&wranglerjs_output, kv_namespaces).unwrap();\n+        assert!(Path::new(&bundle.metadata_path()).exists());\n+        let contents =\n+            fs::read_to_string(&bundle.metadata_path()).expect(\"could not read metadata\");\n+\n+        assert_eq!(contents, r#\"{\"body_part\":\"script\",\"bindings\":[{\"type\":\"kv_namespace\",\"name\":\"binding\",\"namespace_id\":\"id\"}]}\"#);\n+\n+        cleanup(out);\n+    }\n+\n     #[test]\n     fn it_has_errors() {\n         let wranglerjs_output = WranglerjsOutput {\n",
        "problem_statement": "`wrangler deploy` un-does KV namespace bindings\nIn three screenshots:\r\n\r\n![image](https://user-images.githubusercontent.com/27786/57802941-c6d2bc80-771c-11e9-9e5d-c42aa7e4a6c4.png)\r\n\r\n![image](https://user-images.githubusercontent.com/27786/57802950-cfc38e00-771c-11e9-8ef7-95d0231bdee7.png)\r\n\r\n![image](https://user-images.githubusercontent.com/27786/57802973-d94cf600-771c-11e9-8bf9-1dc6be6a18e3.png)\r\n\n",
        "hints_text": "Ideally we would use JavaScript Module syntax to detect what KV things needs to be declared:\r\n```js\r\nimport posts from \"cloudflare:kv/posts\".\r\n```\r\n\r\nAlternatively, we could fetch the current bindings, merge it with the local version and publish.\nIt looks like an update was merged but it doesn't seem to honor the addition of `kv_namespaces = [\"NAMESPACE\"]` in the wrangler.toml file. Am I missing something?\nThe change will create a kv-namespace when it doesnt already exists during the publishing. However, the bug here is that they are not defined in the Worker bindings.",
        "created_at": "2019-06-05T09:52:07Z",
        "version": "1.0"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 184,
        "instance_id": "cloudflare__wrangler-legacy-184",
        "issue_numbers": [
            "183"
        ],
        "base_commit": "9e3d74fd6c4052cafc806d7593415e64cc555420",
        "patch": "diff --git a/src/commands/build.rs b/src/commands/build.rs\n--- a/src/commands/build.rs\n+++ b/src/commands/build.rs\n@@ -24,7 +24,7 @@ pub fn build(cache: &Cache, project_type: &ProjectType) -> Result<(), failure::E\n             commands::run(command, &command_name)?;\n         }\n         ProjectType::Webpack => {\n-            for tool in vec![\"node\", \"npm\"] {\n+            for tool in &[\"node\", \"npm\"] {\n                 wranglerjs::env_dep_installed(tool)?;\n             }\n \ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -70,7 +70,7 @@ fn download_prebuilt(\n     info!(\"prebuilt artifact {}\", url);\n \n     // no binaries are expected; downloading it as an artifact\n-    let res = if binaries.len() > 0 {\n+    let res = if !binaries.is_empty() {\n         cache.download(true, tool_name, binaries, &url)?\n     } else {\n         cache.download_artifact(tool_name, &url)?\ndiff --git a/src/install/target.rs b/src/install/target.rs\n--- a/src/install/target.rs\n+++ b/src/install/target.rs\n@@ -9,4 +9,4 @@ pub const x86_64: bool = cfg!(target_arch = \"x86_64\");\n pub const DEBUG: bool = cfg!(feature = \"debug\");\n \n // Capture source location, only in debug mode.\n-pub const SOURCE_DIR: &'static str = env!(\"SOURCE_DIR\");\n+pub const SOURCE_DIR: &str = env!(\"SOURCE_DIR\");\ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -30,7 +30,7 @@ pub struct WranglerjsOutput {\n \n impl WranglerjsOutput {\n     pub fn has_errors(&self) -> bool {\n-        self.errors.len() != 0\n+        !self.errors.is_empty()\n     }\n \n     pub fn get_errors(&self) -> String {\n",
        "test_patch": "diff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -53,8 +53,10 @@ impl Bundle {\n             out: BUNDLE_OUT.to_string(),\n         }\n     }\n+\n+    #[cfg(test)]\n     fn new_at(out: String) -> Bundle {\n-        Bundle { out: out }\n+        Bundle { out }\n     }\n \n     pub fn write(&self, wranglerjs_output: WranglerjsOutput) -> Result<(), failure::Error> {\n",
        "problem_statement": "dead code warning in wranglerjs\n```\r\nwarning: method is never used: `new_at`\r\n  --> src/wranglerjs/mod.rs:56:5\r\n   |\r\n56 |     fn new_at(out: String) -> Bundle {\r\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: #[warn(dead_code)] on by default\r\n```\n",
        "hints_text": "The `new_at` function is used in `wranglerjs` tests, but not in normal mode. How could I signal that to the compiler?",
        "created_at": "2019-05-31T11:17:26Z",
        "version": "0.1"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 162,
        "instance_id": "cloudflare__wrangler-legacy-162",
        "issue_numbers": [
            "106"
        ],
        "base_commit": "7b4aa3687f46d29341759d53ed18bb742e3dc03f",
        "patch": "diff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -22,7 +22,7 @@ pub fn generate(\n     let command_name = format!(\"{:?}\", command);\n \n     commands::run(command, &command_name)?;\n-    Project::generate(name.to_string(), pt)?;\n+    Project::generate(name.to_string(), pt, false)?;\n     Ok(())\n }\n \ndiff --git /dev/null b/src/commands/init.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/init.rs\n@@ -0,0 +1,25 @@\n+use crate::emoji;\n+use crate::settings::project::{Project, ProjectType};\n+use std::path::Path;\n+\n+pub fn init(name: Option<&str>, project_type: Option<ProjectType>) -> Result<(), failure::Error> {\n+    if Path::new(\"./wrangler.toml\").exists() {\n+        failure::bail!(\"A wrangler.toml file already exists! Please remove it before running this command again.\");\n+    }\n+    let dirname = get_current_dirname()?;\n+    let name = name.unwrap_or_else(|| &dirname);\n+    let project_type = project_type.unwrap_or_default();\n+    Project::generate(name.to_string(), project_type, true)?;\n+    println!(\"{} Succesfully created a `wrangler.toml`\", emoji::SPARKLES);\n+    Ok(())\n+}\n+\n+fn get_current_dirname() -> Result<String, failure::Error> {\n+    let current_path = std::env::current_dir()?;\n+    let parent = current_path.parent();\n+    let dirname = match parent {\n+        Some(parent) => current_path.strip_prefix(parent)?.display().to_string(),\n+        None => \"worker\".to_string(),\n+    };\n+    Ok(dirname)\n+}\ndiff --git a/src/commands/mod.rs b/src/commands/mod.rs\n--- a/src/commands/mod.rs\n+++ b/src/commands/mod.rs\n@@ -5,6 +5,7 @@ use log::info;\n pub mod build;\n pub mod config;\n pub mod generate;\n+pub mod init;\n pub mod publish;\n pub mod subdomain;\n pub mod whoami;\ndiff --git a/src/commands/mod.rs b/src/commands/mod.rs\n--- a/src/commands/mod.rs\n+++ b/src/commands/mod.rs\n@@ -12,6 +13,7 @@ pub mod whoami;\n pub use self::config::global_config;\n pub use build::build;\n pub use generate::generate;\n+pub use init::init;\n pub use publish::preview::preview;\n pub use publish::preview::HTTPMethod;\n pub use publish::publish;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -62,6 +62,25 @@ fn main() -> Result<(), failure::Error> {\n                         .help(\"the type of project you want generated\"),\n                 ),\n         )\n+        .subcommand(\n+            SubCommand::with_name(\"init\")\n+                .about(&*format!(\n+                    \"{} Generates a wrangler.toml for an existing project\",\n+                    emoji::DANCERS\n+                ))\n+                .arg(\n+                    Arg::with_name(\"name\")\n+                        .help(\"the name of your worker! defaults to 'worker'\")\n+                        .index(1),\n+                )\n+                .arg(\n+                    Arg::with_name(\"type\")\n+                        .short(\"t\")\n+                        .long(\"type\")\n+                        .takes_value(true)\n+                        .help(\"the type of project you want generated\"),\n+                ),\n+        )\n         .subcommand(\n             SubCommand::with_name(\"preview\")\n                 .about(&*format!(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -134,6 +153,7 @@ fn main() -> Result<(), failure::Error> {\n \n     if matches.subcommand_matches(\"config\").is_some()\n         || matches.subcommand_matches(\"generate\").is_some()\n+        || matches.subcommand_matches(\"init\").is_some()\n     {\n         if let Some(matches) = matches.subcommand_matches(\"config\") {\n             let email = matches\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -160,6 +180,15 @@ fn main() -> Result<(), failure::Error> {\n             );\n             commands::generate(name, template, project_type, &cache)?;\n         }\n+\n+        if let Some(matches) = matches.subcommand_matches(\"init\") {\n+            let name = matches.value_of(\"name\");\n+            let project_type = match matches.value_of(\"type\") {\n+                Some(s) => Some(settings::project::ProjectType::from_str(&s.to_lowercase())?),\n+                None => None,\n+            };\n+            commands::init(name, project_type)?;\n+        }\n     } else if matches.subcommand_matches(\"build\").is_some()\n         || matches.subcommand_matches(\"preview\").is_some()\n     {\ndiff --git a/src/settings/project.rs b/src/settings/project.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project.rs\n@@ -1,7 +1,7 @@\n use std::collections::HashMap;\n use std::fmt;\n use std::fs;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::str::FromStr;\n \n use log::info;\ndiff --git a/src/settings/project.rs b/src/settings/project.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project.rs\n@@ -60,7 +60,11 @@ impl FromStr for ProjectType {\n }\n \n impl Project {\n-    pub fn generate(name: String, project_type: ProjectType) -> Result<Project, failure::Error> {\n+    pub fn generate(\n+        name: String,\n+        project_type: ProjectType,\n+        init: bool,\n+    ) -> Result<Project, failure::Error> {\n         let project = Project {\n             name: name.clone(),\n             project_type: project_type.clone(),\ndiff --git a/src/settings/project.rs b/src/settings/project.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project.rs\n@@ -72,7 +76,11 @@ impl Project {\n         };\n \n         let toml = toml::to_string(&project)?;\n-        let config_path = Path::new(\"./\").join(&name);\n+        let config_path = if init {\n+            PathBuf::from(\"./\")\n+        } else {\n+            Path::new(\"./\").join(&name)\n+        };\n         let config_file = config_path.join(\"wrangler.toml\");\n \n         info!(\"Writing a wrangler.toml file at {}\", config_file.display());\n",
        "test_patch": "diff --git a/tests/generate.rs b/tests/generate.rs\n--- a/tests/generate.rs\n+++ b/tests/generate.rs\n@@ -32,7 +32,7 @@ fn it_generates_with_arguments() {\n     cleanup(name);\n }\n \n-fn generate(name: Option<&str>, template: Option<&str>, project_type: Option<&str>) {\n+pub fn generate(name: Option<&str>, template: Option<&str>, project_type: Option<&str>) {\n     let mut wrangler = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n     if name.is_none() && template.is_none() && project_type.is_none() {\n         wrangler.arg(\"generate\").assert().success();\ndiff --git /dev/null b/tests/init.rs\nnew file mode 100644\n--- /dev/null\n+++ b/tests/init.rs\n@@ -0,0 +1,52 @@\n+use assert_cmd::prelude::*;\n+\n+use std::fs;\n+use std::path::Path;\n+use std::process::Command;\n+\n+#[test]\n+fn it_works() {\n+    let name = \"init1\";\n+    generate(Some(name));\n+\n+    let wranglertoml_path = format!(\"{}/wrangler.toml\", name);\n+    assert_eq!(Path::new(&wranglertoml_path).exists(), true);\n+    fs::remove_file(&wranglertoml_path).unwrap();\n+\n+    init().current_dir(Path::new(name)).assert().success();\n+\n+    cleanup(name);\n+}\n+\n+#[test]\n+fn init_fails_if_wrangler_toml_exists() {\n+    let name = \"init2\";\n+    generate(Some(name));\n+\n+    let wranglertoml_path = format!(\"{}/wrangler.toml\", name);\n+    assert_eq!(Path::new(&wranglertoml_path).exists(), true);\n+\n+    init().current_dir(Path::new(name)).assert().failure();\n+\n+    cleanup(name);\n+}\n+\n+fn init() -> Command {\n+    let mut wrangler = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n+    wrangler.arg(\"init\");\n+    wrangler\n+}\n+\n+fn generate(name: Option<&str>) {\n+    let mut wrangler = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n+    wrangler\n+        .arg(\"generate\")\n+        .arg(name.unwrap())\n+        .assert()\n+        .success();\n+}\n+\n+fn cleanup(name: &str) {\n+    fs::remove_dir_all(name).unwrap();\n+    assert_eq!(Path::new(name).exists(), false);\n+}\n",
        "problem_statement": "add wrangler.toml for existing project\nIf I have an existing project and I want to deploy it using wrangler, there should be a command for generating _just_ a `wrangler.toml` file, instead of using generate for a whole new directory. \r\n\r\nnote that i accidentally did this a hacky way by running `wrangler generate .`, which created a `wrangler.toml` locally and then bailed out:\r\n\r\n```\r\ncloudflare-workers-todos $ wrangler generate .\r\n\u2b07\ufe0f Installing cargo-generate...\r\n\ud83d\udc11 Generating a new js worker project with name '.'...\r\n\u26a0\ufe0f   Renaming project called `.` to ``...\r\n\ud83d\udd27   Creating project called ``...\r\n\u26d4   Target directory already exists, aborting!\r\n```\r\n\r\nmaybe `wrangler init` or something similar should exist?\r\n\r\n\n",
        "hints_text": "this is a great idea and not too hard to implement!!",
        "created_at": "2019-05-27T21:09:01Z",
        "version": "0.1"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 161,
        "instance_id": "cloudflare__wrangler-legacy-161",
        "issue_numbers": [
            "157"
        ],
        "base_commit": "9e3d74fd6c4052cafc806d7593415e64cc555420",
        "patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -35,6 +33,53 @@ Cloudflare Workers. This tool gives you the following commands:\n     wrangler config <email> <api_key>\n     ```\n \n+  - ### \u2601\ufe0f \ud83c\udd99 `publish`\n+\n+    Publish your Worker to Cloudflare. This uses several keys in your `wrangler.toml` depending on whether\n+    you are publishing to a workers.dev subdomain or your own domain, registered with Cloudflare.\n+\n+    ```\n+    wrangler publish\n+    ```\n+\n+    By default, `publish` will make your worker available at `<project-name>.<subdomain>.workers.dev`.\n+    To disable publishing to your workers.dev subdomain, set `private = true` in your `wrangler.toml`.\n+    This setting prevents the `publish` command from making your worker publicly available. To\n+    explicitly enable deployment to `<project-name>.<subdomain>.workers.dev`, you can set `private = false`. \n+\n+    To use this command, you'll need to have the following keys in your `wrangler.toml`:\n+\n+    - `name`\n+    - `type`\n+    - `account_id`\n+\n+    You'll also need to have a workers.dev subdomain registered. You can register a subdomain by using:\n+\n+    ```\n+    wrangler subdomain <name>\n+    ```\n+\n+    A `--release` can be optionally passed to publish your worker to a domain you have registered with\n+    Cloudflare. To use `--release` your `wrangler.toml` must include:\n+\n+    - `name`\n+    - `type`\n+    - `account_id`\n+    - `zone_id`\n+    - `route`\n+\n+  - ### \ud83d\udd2c `preview`\n+    Preview your project using the cloudflareworkers.com API.\n+\n+    You can optionally pass `get` or `post` and a `body` to this command. This will send a request to your\n+    worker on the preview service and return the response in your terminal. For example:\n+\n+    ```\n+    wrangler preview post hello=hello\n+    wrangler preview get // this is the default\n+    ```\n+\n+\n ## \ud83d\udd29 Configuration\n \n There are two types of configuration that `wrangler` uses: global user and per project.\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -62,21 +107,25 @@ There are two types of configuration that `wrangler` uses: global user and per p\n     edit this file to add these values before you can publish.\n \n     - `name`: This is the name of your project. It will be the name of your script.\n-    - `type`: The type of project this is. Can be one of the following:\n-        - `javascript`: this is the default: assumes a javascript worker that does not need a build step\n-        - `webpack`: this is a javascript worker that uses a webpack build step\n-        - `rust`: this is a Rust/WASM worker-- will compile Rust to WebAssembly and package worker on build step\n-    - `zone_id`: This is the ID of the \"zone\" or domain you want to run your script on.\n+    - `private`: This is a boolean. If set to `true`, when using `wrangler publish`, it will push your script but\n+        not make it publically available. This does not affect publishing in `--release` mode to a registered\n+        domain. Those pushes are *always* public. If this is not in your `wrangler.toml` it is assumed your\n+        project is public.\n+    - `type`: This key tells `wrangler build` how to build your project. There are currently 3 options, but we\n+        expect there to be more as the community grows.\n+        - `javascript`: This project contains a single JavaScript file, defined in `package.json`'s `main` key.\n+        - `rust`: This project contains a Rust crate that uses `wasm-bindgen`. It will be built with `wasm-pack`.\n+        - `webpack`: This project contains any number of JavaScript files or Rust/C/C++ files that compile to\n+            WebAssembly. Rust files will be built with `wasm-pack`. `C/C++` files will be build with `emscripten`.\n+            This project type uses webpack and webpack plugins in the background to build your worker.\n+    - `zone_id`: This is the ID of the \"zone\" or domain you want to run your script on. This is optional if you\n+        are using a workers.dev subdomain and is only reuqired for `publish --release`.\n     - `account_id`: This is the ID of the account associated with your zone. You might have more than one account,\n-        so make sure to use the ID of the account associated with the `zone_id` you provide.\n+        so make sure to use the ID of the account associated with the `zone_id` you provide, if you provide one.\n     - `route`: This is the route you'd like to use your worker on. You need to include the hostname. Examples:\n         - `*example.com/*`\n         - `http://example.com/hello`\n-        - `https://example.com/*/world`\n-\n-    Cloudflare templates automatically add the `wrangler.toml` file to `.gitignore`.\n-    \n-    \u26a0\ufe0f NEVER PUBLISH CREDENTIALS TO VERSION CONTROL! \u26a0\ufe0f\n+        This key is optional if you are using a workers.dev subdomain and is only required for `publish --release`.\n \n ## \u2693 Installation\n \ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -115,7 +164,7 @@ There are two types of configuration that `wrangler` uses: global user and per p\n 1. Move into the new project directory:\n \n     ```\n-    cd wasm-worker\n+    cd worker\n     ```\n \n 1. Build your project:\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -140,6 +189,12 @@ There are two types of configuration that `wrangler` uses: global user and per p\n     Cloudflare edge. If you don't configure, you can still use `wrangler` to generate, build, and preview\n     a Worker.\n \n+    Optionally, create a workers.dev subdomain:\n+\n+    ```\n+    wrangler subdomain <name>\n+    ```\n+\n 1. Check your configuration:\n \n     ```\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -148,6 +203,14 @@ There are two types of configuration that `wrangler` uses: global user and per p\n \n 1. Publish your project:\n \n+    To publish to a workers.dev subdomain:\n     ```\n     wrangler publish\n     ```\n+\n+    To publish to a domain you have registered with Cloudflare, add a `route` and a `zone_id` to your\n+    `wrangler.toml`. Then run:\n+\n+    ```\n+    wrangler publish --release\n+    ```\n",
        "test_patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -5,29 +5,27 @@\n [![crates.io](https://meritbadge.herokuapp.com/wrangler)](https://crates.io/crates/wrangler)\n [![Build Status](https://dev.azure.com/ashleygwilliams/wrangler/_apis/build/status/cloudflare.wrangler?branchName=master)](https://dev.azure.com/ashleygwilliams/wrangler/_build/latest?definitionId=1&branchName=master)\n \n-\u2728 CHECK OUT THE [TUTORIAL](https://developers.cloudflare.com/workers/webassembly/tutorial/) \u2728\n-\n ## \ud83c\udf99\ufe0f Commands\n \n-`wrangler` is a CLI tool designed for folks who are interested in using Rust-generated WebAssembly on\n-Cloudflare Workers. This tool gives you the following commands:\n+`wrangler` is a CLI tool designed for folks who are interested in using Cloudflare workers.\n \n   - ### \ud83d\udc6f `generate` \n     Scaffold a project, including boilerplate for a Rust library and a Cloudflare Worker.\n     You can pass a name and template to this command optionally. \n \n     ```\n-    wrangler generate <name> <template>\n+    wrangler generate <name> <template> --type=[\"webpack\", \"javascript\", \"rust\"]\n     ```\n \n-    It will default to the name `wasm-worker` and the [`rustwasm-worker-template`](https://github.com/cloudflare/rustwasm-worker-template).\n+    All of the arguments and flags to this command are optional:\n+        - `name`: defaults to `worker`\n+        - `template`: defaults to the [`https://github.com/cloudflare/worker-template`](https://github.com/cloudflare/worker-template)\n+        - `type`: defaults to \"webpack\"\n+\n   - ### \ud83e\udd80\u2699\ufe0f `build`\n-    Build your project using `wasm-pack`.\n-  - ### \ud83d\udd2c `preview`\n-    Preview your project using the cloudflareworkers.com API.\n-  - ### \u2601\ufe0f \ud83c\udd99 `publish`\n-    Publish your Worker and WebAssembly to Cloudflare. This uses the `account_id` and `zone_id`\n-    from the `wrangler.toml`.\n+    Build your project. This command looks at your `wrangler.toml` file and runs the build steps associated\n+    with the `\"type\"` declared there.\n+\n   - ### \ud83d\udd27 `config`\n     Configure your global Cloudflare user. You will need to pass your email and API key:\n \n",
        "problem_statement": "write docs\n\n",
        "hints_text": "",
        "created_at": "2019-05-27T19:34:42Z",
        "version": "0.1"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 146,
        "instance_id": "cloudflare__wrangler-legacy-146",
        "issue_numbers": [
            "135"
        ],
        "base_commit": "fa3bf9baa682e7791c52f0fbffc8214444ace94e",
        "patch": "diff --git a/src/commands/mod.rs b/src/commands/mod.rs\n--- a/src/commands/mod.rs\n+++ b/src/commands/mod.rs\n@@ -6,6 +6,7 @@ pub mod build;\n pub mod config;\n pub mod generate;\n pub mod publish;\n+pub mod subdomain;\n pub mod whoami;\n \n pub use self::config::global_config;\ndiff --git a/src/commands/mod.rs b/src/commands/mod.rs\n--- a/src/commands/mod.rs\n+++ b/src/commands/mod.rs\n@@ -14,6 +15,7 @@ pub use generate::generate;\n pub use publish::preview::preview;\n pub use publish::preview::HTTPMethod;\n pub use publish::publish;\n+pub use subdomain::subdomain;\n pub use whoami::whoami;\n \n /// Run the given command and return its stdout.\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -16,21 +16,21 @@ use crate::settings::global_user::GlobalUser;\n use crate::settings::project::{Project, ProjectType};\n use crate::wranglerjs::Bundle;\n \n-pub fn publish(user: GlobalUser, project: Project) -> Result<(), failure::Error> {\n+pub fn publish(user: &GlobalUser, project: &Project) -> Result<(), failure::Error> {\n     publish_script(&user, &project)?;\n     let route = Route::new(&project)?;\n-    Route::publish(&user, &project, route)?;\n+    Route::publish(&user, &project, &route)?;\n     println!(\n         \"\u2728 Success! Your worker was successfully published. You can view it at {}. \u2728\",\n-        project.route.expect(\"\u26a0\ufe0f There should be a route\")\n+        &route.pattern\n     );\n     Ok(())\n }\n \n fn publish_script(user: &GlobalUser, project: &Project) -> Result<(), failure::Error> {\n     let worker_addr = format!(\n-        \"https://api.cloudflare.com/client/v4/zones/{}/workers/scripts/{}\",\n-        project.zone_id, project.name,\n+        \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}\",\n+        project.account_id, project.name,\n     );\n \n     let client = reqwest::Client::new();\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -8,7 +8,7 @@ use log::info;\n #[derive(Deserialize, Serialize)]\n pub struct Route {\n     script: Option<String>,\n-    pattern: String,\n+    pub pattern: String,\n }\n \n #[derive(Deserialize)]\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -27,7 +27,7 @@ impl Route {\n     pub fn publish(\n         user: &GlobalUser,\n         project: &Project,\n-        route: Route,\n+        route: &Route,\n     ) -> Result<(), failure::Error> {\n         if route.exists(user, project)? {\n             return Ok(());\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -76,17 +76,13 @@ fn get_routes(user: &GlobalUser, project: &Project) -> Result<Vec<Route>, failur\n     Ok(routes_response.result)\n }\n \n-fn create(user: &GlobalUser, project: &Project, route: Route) -> Result<(), failure::Error> {\n+fn create(user: &GlobalUser, project: &Project, route: &Route) -> Result<(), failure::Error> {\n     let client = reqwest::Client::new();\n     let body = serde_json::to_string(&route)?;\n \n     let routes_addr = get_routes_addr(project)?;\n \n-    info!(\n-        \"Creating your route {} for script {}\",\n-        route.pattern,\n-        route.script.unwrap()\n-    );\n+    info!(\"Creating your route {:#?}\", &route.pattern,);\n     let mut res = client\n         .post(&routes_addr)\n         .header(\"X-Auth-Key\", &*user.api_key)\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -107,11 +103,11 @@ fn create(user: &GlobalUser, project: &Project, route: Route) -> Result<(), fail\n }\n \n fn get_routes_addr(project: &Project) -> Result<String, failure::Error> {\n-    if project.zone_id.is_empty() {\n-        failure::bail!(\"You much provide a zone_id in your wrangler.toml.\")\n+    if let Some(zone_id) = &project.zone_id {\n+        return Ok(format!(\n+            \"https://api.cloudflare.com/client/v4/zones/{}/workers/routes\",\n+            zone_id\n+        ));\n     }\n-    Ok(format!(\n-        \"https://api.cloudflare.com/client/v4/zones/{}/workers/routes\",\n-        project.zone_id\n-    ))\n+    failure::bail!(\"You much provide a zone_id in your wrangler.toml.\")\n }\ndiff --git /dev/null b/src/commands/subdomain.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/subdomain.rs\n@@ -0,0 +1,123 @@\n+use crate::emoji;\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::project::Project;\n+\n+use serde::{Deserialize, Serialize};\n+\n+#[derive(Serialize)]\n+struct Subdomain {\n+    subdomain: String,\n+}\n+\n+impl Subdomain {\n+    fn get(account_id: &str, user: &GlobalUser) -> Result<String, failure::Error> {\n+        let addr = subdomain_addr(account_id);\n+\n+        let client = reqwest::Client::new();\n+\n+        let mut res = client\n+            .get(&addr)\n+            .header(\"X-Auth-Key\", &*user.api_key)\n+            .header(\"X-Auth-Email\", &*user.email)\n+            .send()?;\n+\n+        if !res.status().is_success() {\n+            failure::bail!(\n+                \"\u26d4 There was an error fetching your subdomain.\\n Status Code: {}\\n Msg: {}\",\n+                res.status(),\n+                res.text()?,\n+            )\n+        }\n+\n+        let res: Response = serde_json::from_str(&res.text()?)?;\n+        Ok(res\n+            .result\n+            .expect(\"Oops! We expected a subdomain name, but found none.\")\n+            .subdomain)\n+    }\n+}\n+\n+#[derive(Deserialize)]\n+struct Response {\n+    errors: Vec<Error>,\n+    result: Option<SubdomainResult>,\n+}\n+\n+#[derive(Deserialize)]\n+struct Error {\n+    code: u32,\n+}\n+\n+#[derive(Deserialize)]\n+struct SubdomainResult {\n+    subdomain: String,\n+}\n+\n+fn subdomain_addr(account_id: &str) -> String {\n+    format!(\n+        \"https://api.cloudflare.com/client/v4/accounts/{}/workers/subdomain\",\n+        account_id\n+    )\n+}\n+\n+pub fn subdomain(name: &str, user: &GlobalUser, project: &Project) -> Result<(), failure::Error> {\n+    println!(\n+        \"{} Registering your subdomain, {}.workers.dev, this could take up to a minute.\",\n+        emoji::SNAIL,\n+        name\n+    );\n+    let account_id = &project.account_id;\n+    let addr = subdomain_addr(account_id);\n+    let sd = Subdomain {\n+        subdomain: name.to_string(),\n+    };\n+    let sd_request = serde_json::to_string(&sd)?;\n+\n+    let client = reqwest::Client::new();\n+\n+    let mut res = client\n+        .put(&addr)\n+        .header(\"X-Auth-Key\", &*user.api_key)\n+        .header(\"X-Auth-Email\", &*user.email)\n+        .body(sd_request)\n+        .send()?;\n+\n+    let msg;\n+    if !res.status().is_success() {\n+        let res_text = res.text()?;\n+        let res_json: Response = serde_json::from_str(&res_text)?;\n+        if already_has_subdomain(res_json.errors) {\n+            let sd = Subdomain::get(account_id, user)?;\n+            msg = format!(\n+                \"\u26d4 This account already has a registered subdomain. You can only register one subdomain per account. Your subdomain is {}.workers.dev \\n Status Code: {}\\n Msg: {}\",\n+                sd,\n+                res.status(),\n+                res_text,\n+            );\n+        } else if res.status() == 409 {\n+            msg = format!(\n+                \"\u26d4 Your requested subdomain is not available. Please pick another one.\\n Status Code: {}\\n Msg: {}\",\n+                res.status(),\n+                res_text\n+            );\n+        } else {\n+            msg = format!(\n+                \"\u26d4 There was an error creating your requested subdomain.\\n Status Code: {}\\n Msg: {}\",\n+                res.status(),\n+                res_text\n+            );\n+        }\n+        failure::bail!(msg)\n+    }\n+    println!(\"{} Success! You've registered {}.\", emoji::SPARKLES, name);\n+    Ok(())\n+}\n+\n+fn already_has_subdomain(errors: Vec<Error>) -> bool {\n+    for error in errors {\n+        if error.code == 10036 {\n+            return true;\n+        }\n+    }\n+    false\n+}\ndiff --git a/src/emoji.rs b/src/emoji.rs\n--- a/src/emoji.rs\n+++ b/src/emoji.rs\n@@ -24,3 +24,4 @@ pub static CONSTRUCTION: Emoji = Emoji(\"\ud83d\udea7 \", \"\");\n pub static UP: Emoji = Emoji(\"\ud83c\udd99 \", \"\");\n pub static SHEEP: Emoji = Emoji(\"\ud83d\udc11 \", \"\");\n pub static WAVING: Emoji = Emoji(\"\ud83d\udc4b \", \"\");\n+pub static SNAIL: Emoji = Emoji(\"\ud83d\udc0c \", \"\");\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -164,16 +177,29 @@ fn main() -> Result<(), failure::Error> {\n         info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\n \n-        commands::whoami(&user);\n-    } else if matches.subcommand_matches(\"publish\").is_some() {\n+        if matches.subcommand_matches(\"whoami\").is_some() {\n+            commands::whoami(&user);\n+        }\n+    } else if matches.subcommand_matches(\"publish\").is_some()\n+        || matches.subcommand_matches(\"subdomain\").is_some()\n+    {\n         info!(\"Getting project settings\");\n         let project = settings::project::Project::new()?;\n \n         info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\n \n-        commands::build(&cache, &project.project_type)?;\n-        commands::publish(user, project)?;\n+        if matches.subcommand_matches(\"publish\").is_some() {\n+            commands::build(&cache, &project.project_type)?;\n+            commands::publish(&user, &project)?;\n+        }\n+\n+        if let Some(matches) = matches.subcommand_matches(\"subdomain\") {\n+            let name = matches\n+                .value_of(\"name\")\n+                .expect(\"The subdomain name you are requesting must be provided.\");\n+            commands::subdomain(name, &user, &project)?;\n+        }\n     }\n     Ok(())\n }\ndiff --git a/src/settings/project.rs b/src/settings/project.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project.rs\n@@ -14,7 +14,8 @@ pub struct Project {\n     pub name: String,\n     #[serde(rename = \"type\")]\n     pub project_type: ProjectType,\n-    pub zone_id: String,\n+    pub zone_id: Option<String>,\n+    pub account_id: String,\n     pub route: Option<String>,\n     pub routes: Option<HashMap<String, String>>,\n }\ndiff --git a/src/settings/project.rs b/src/settings/project.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project.rs\n@@ -62,7 +63,8 @@ impl Project {\n         let project = Project {\n             name: name.clone(),\n             project_type: project_type.clone(),\n-            zone_id: String::new(),\n+            zone_id: Some(String::new()),\n+            account_id: String::new(),\n             route: Some(String::new()),\n             routes: None,\n         };\n",
        "test_patch": "diff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -105,6 +105,19 @@ fn main() -> Result<(), failure::Error> {\n                         .required(true),\n                 ),\n         )\n+        .subcommand(\n+            SubCommand::with_name(\"subdomain\")\n+                .about(&*format!(\n+                    \"{} Configure your workers.dev subdomain\",\n+                    emoji::WORKER\n+                ))\n+                .arg(\n+                    Arg::with_name(\"name\")\n+                        .help(\"the subdomain on workers.dev you'd like to reserve\")\n+                        .index(1)\n+                        .required(true),\n+                ),\n+        )\n         .subcommand(SubCommand::with_name(\"whoami\").about(&*format!(\n             \"{} Retrieve your user info and test your auth config\",\n             emoji::SLEUTH\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -17,6 +17,7 @@ macro_rules! settings {\n             r#\"\n             name = \"test\"\n             zone_id = \"\"\n+            account_id = \"\"\n             {}\n         \"#,\n             $x\n",
        "problem_statement": "Add subdomain registration call\nPer discussion, this could be configured with\r\n`wrangler config --subdomain banana`\r\nwhich would set it up as banana.workers.dev\r\n\r\nThis might take ~30 seconds, so we should let the user know. \r\n\r\nThe API call is:\r\n`PUT /accounts/<account id>/subdomain`\r\n\r\nUpon success, the API responds with:\r\n```\r\n{\r\n  \"success\": true,\r\n  \"errors\": [],\r\n  \"messages\": [],\r\n  \"result\": {\r\n    \"subdomain\": \"myname\"\r\n  }\r\n}\r\n```\r\n\r\nIf it's taken (or blacklisted), it will respond with a 409 --> we should handle this with a message like \"pls pick something different\". \r\n\r\n\n",
        "hints_text": "this reintroduces account id... i guess it was inevitable :P \r\n\r\nhow many people have multiple accounts? i'm not sure i can come up with a good strategy pre launch but i imagine it's a thing?",
        "created_at": "2019-05-25T16:19:23Z",
        "version": "0.1"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 392,
        "instance_id": "cloudflare__wrangler-legacy-392",
        "issue_numbers": [
            "340"
        ],
        "base_commit": "f3d492a11bc7561ba9da8a5140832a7ac2ca94a2",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -21,6 +21,11 @@ dependencies = [\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"arc-swap\"\n+version = \"0.3.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"argon2rs\"\n version = \"0.2.5\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -172,6 +177,18 @@ name = \"cfg-if\"\n version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"chrono\"\n+version = \"0.4.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-integer 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"clap\"\n version = \"2.33.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -205,6 +222,26 @@ dependencies = [\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"cloudflare\"\n+version = \"0.1.0\"\n+source = \"git+https://github.com/cloudflare/cloudflare-rs.git#566b3098ac3253f5a3d18583ea589e9521245e61\"\n+dependencies = [\n+ \"chrono 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"maplit 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"reqwest 0.9.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_yaml 0.8.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-term 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"sloggers 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"config\"\n version = \"0.9.3\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -298,6 +335,11 @@ dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"crossbeam\"\n+version = \"0.2.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"crossbeam-deque\"\n version = \"0.7.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -366,6 +408,11 @@ dependencies = [\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"data-encoding\"\n+version = \"2.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"difference\"\n version = \"2.0.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -761,6 +808,14 @@ dependencies = [\n  \"scopeguard 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"log\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"log\"\n version = \"0.4.6\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -769,6 +824,11 @@ dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"maplit\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"matches\"\n version = \"0.1.8\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -900,6 +960,15 @@ dependencies = [\n  \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"num-integer\"\n+version = \"0.1.41\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"num-traits\"\n version = \"0.1.43\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1464,6 +1544,17 @@ dependencies = [\n  \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"serde_yaml\"\n+version = \"0.8.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"dtoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"siphasher\"\n version = \"0.2.3\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1474,6 +1565,82 @@ name = \"slab\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"slog\"\n+version = \"2.5.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"slog-async\"\n+version = \"2.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"slog-kvfilter\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"regex 1.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"slog-scope\"\n+version = \"4.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"arc-swap 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"slog-stdlog\"\n+version = \"3.0.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"crossbeam 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-scope 4.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"slog-term\"\n+version = \"2.4.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chrono 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"sloggers\"\n+version = \"0.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"chrono 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libflate 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-async 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-kvfilter 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-scope 4.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-stdlog 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-term 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"trackable 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"smallvec\"\n version = \"0.6.10\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1529,6 +1696,11 @@ dependencies = [\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"take_mut\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"tar\"\n version = \"0.4.26\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1553,6 +1725,16 @@ dependencies = [\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"term\"\n+version = \"0.5.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"termcolor\"\n version = \"1.0.5\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1759,6 +1941,23 @@ dependencies = [\n  \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"trackable\"\n+version = \"0.2.22\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"trackable_derive 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"trackable_derive\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"treeline\"\n version = \"0.1.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1936,6 +2135,7 @@ dependencies = [\n  \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cloudflare 0.1.0 (git+https://github.com/cloudflare/cloudflare-rs.git)\",\n  \"config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"console 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2000,6 +2200,7 @@ dependencies = [\n \"checksum adler32 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e522997b529f05601e05166c07ed17789691f562762c7f3b987263d2dedee5c\"\n \"checksum aho-corasick 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e6f484ae0c99fec2e858eb6134949117399f222608d84cadb3f58c1f97c2364c\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n+\"checksum arc-swap 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc4662175ead9cd84451d5c35070517777949a2ed84551764129cedb88384841\"\n \"checksum argon2rs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f67b0b6a86dae6e67ff4ca2b6201396074996379fba2b92ff649126f37cb392\"\n \"checksum arrayvec 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92c7fb76bc8826a8b33b4ee5bb07a247a81e76764ab4d55e8f73e3a4d8808c71\"\n \"checksum assert_cmd 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2dc477793bd82ec39799b6f6b3df64938532fdf2ab0d49ef817eac65856a5a1e\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2018,9 +2219,11 @@ dependencies = [\n \"checksum bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6584aa36f5ad4c9247f5323b0a42f37802b37a836f0ad87084d7a33961abe25f\"\n \"checksum cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39f75544d7bbaf57560d2168f28fd649ff9c76153874db88bdbdfd839b1a7e7d\"\n \"checksum cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b486ce3ccf7ffd79fdeb678eac06a9e6c09fc88d33836340becb8fffe87c5e33\"\n+\"checksum chrono 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77d81f58b7301084de3b958691458a53c3f7e0b1d702f77e550b6a88e3a88abe\"\n \"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n \"checksum clicolors-control 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73abfd4c73d003a674ce5d2933fca6ce6c42480ea84a5ffe0a2dc39ed56300f9\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n+\"checksum cloudflare 0.1.0 (git+https://github.com/cloudflare/cloudflare-rs.git)\" = \"<none>\"\n \"checksum config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9107d78ed62b3fa5a86e7d18e647abed48cfd8f8fab6c72f4cdb982d196f7e6\"\n \"checksum console 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b11432ec626c0a221d0ff3914ea6887de61a12d89a814a4f1c49882fc3151a11\"\n \"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2030,12 +2233,14 @@ dependencies = [\n \"checksum core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b\"\n \"checksum crc 1.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d663548de7f5cca343f1e0a48d14dcfb0e9eb4e079ec58883b7251539fa10aeb\"\n \"checksum crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n+\"checksum crossbeam 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd66663db5a988098a89599d4857919b3acf7f61402e61365acfd3919857b9be\"\n \"checksum crossbeam-deque 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b18cd2e169ad86297e6bc0ad9aa679aee9daa4f19e8163860faf7c164e4f5a71\"\n \"checksum crossbeam-epoch 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"04c9e3102cc2d69cd681412141b390abd55a362afc1540965dad0ad4d34280b4\"\n \"checksum crossbeam-queue 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c979cd6cfe72335896575c6b5688da489e420d36a27a0b9eb0c73db574b4a4b\"\n \"checksum crossbeam-utils 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8306fcef4a7b563b76b7dd949ca48f52bc1141aa067d2ea09565f3e2652aa5c\"\n \"checksum curl 0.4.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8ed9a22aa8c4e49ac0c896279ef532a43a7df2f54fcd19fa36960de029f965f\"\n \"checksum curl-sys 0.4.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d91a0052d5b982887d8e829bee0faffc7218ea3c6ebd3d6c2c8f678a93c9a42\"\n+\"checksum data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f4f47ca1860a761136924ddd2422ba77b2ea54fe8cc75b9040804a0d9d32ad97\"\n \"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \"checksum dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\n \"checksum dtoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea57b42383d091c85abcc2706240b94ab2a8fa1fc81c10ff23c4de06e2a90b5e\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2083,7 +2288,9 @@ dependencies = [\n \"checksum linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\n \"checksum lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"62ebf1391f6acad60e5c8b43706dde4582df75c06698ab44511d15016bc2442c\"\n \"checksum lock_api 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ed946d4529956a20f2d63ebe1b69996d5a2137c91913fe3ebbeff957f5bca7ff\"\n+\"checksum log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n \"checksum log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c84ec4b527950aa83a329754b01dbe3f58361d1c5efacd1f6d68c494d08a17c6\"\n+\"checksum maplit 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"08cbb6b4fef96b6d77bfc40ec491b1690c779e77b05cd9f07f787ed376fd4c43\"\n \"checksum matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n \"checksum memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2efc7bc57c883d4a4d6e3246905283d8dae951bb3bd32f49d6ef297f546e1c39\"\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2098,6 +2305,7 @@ dependencies = [\n \"checksum net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42550d9fb7b6684a6d404d9fa7250c2eb2646df731d1c06afc06dcee9e1bcf88\"\n \"checksum nodrop 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f9667ddcc6cc8a43afc9b7917599d7216aa09c463919ea32c59ed6cac8bc945\"\n \"checksum nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2ad2a91a8e869eeb30b9cb3119ae87773a8f4ae617f41b1eb9c154b2905f7bd6\"\n+\"checksum num-integer 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b85e541ef8255f6cf42bbfe4ef361305c6c135d10919ecc26126c4e5ae94bc09\"\n \"checksum num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92e5113e9fd4cc14ded8e499429f396a20f98c772a47cc8622a736e1ec843c31\"\n \"checksum num-traits 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ba9a427cfca2be13aa6f6403b0b7e7368fe982bfa16fccc450ce74c46cd9b32\"\n \"checksum num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcef43580c035376c0705c42792c294b66974abbfd2789b511784023f71f3273\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2194,6 +2413,8 @@ dependencies = [\n \"checksum tokio-trace-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9c8a256d6956f7cb5e2bdfe8b1e8022f1a09206c6c2b1ba00f3b746b260c613\"\n \"checksum toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"758664fc71a3a69038656bee8b6be6477d2a6c315a6b81f7081f591bffa4111f\"\n \"checksum toml 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8c96d7873fa7ef8bdeb3a9cda3ac48389b4154f32b9803b4bc26220b677b039\"\n+\"checksum trackable 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"53bac9fc90c105013eebfdffa064a1fb36142fd8eb72a5f9783a99147290caaa\"\n+\"checksum trackable_derive 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f4062d54dd240bde289717d6b4af18048c3dd552f01a0fd93824f5fc4d2d084\"\n \"checksum treeline 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7f741b240f1a48843f9b8e0444fb55fb2a4ff67293b50a9179dfd5ea67f8d41\"\n \"checksum try-lock 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e604eb7b43c06650e854be16a2a03155743d3752dd1c943f6829e26b7a36e382\"\n \"checksum try_from 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"283d3b89e1368717881a9d51dad843cc435380d8109c9e47d38780a324698d8b\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -13,6 +13,7 @@ build = \"build.rs\"\n atty = \"0.2.11\"\n binary-install = \"0.0.3-alpha\"\n clap = \"2.32.0\"\n+cloudflare = { git = \"https://github.com/cloudflare/cloudflare-rs.git\" }\n config = \"0.9.2\"\n console = \"0.7.5\"\n dirs = \"1.0.5\"\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -95,6 +95,9 @@ cargo install wrangler\n     wrangler preview get // this is the default\n     ```\n \n+  - ### \ud83d\uddc2\ufe0f `kv`\n+    Interact with your Cloudflare Workers KV store. [Check out the docs.](./docs/content/kv)\n+\n \n ## \ud83d\udd29 Configuration\n \ndiff --git /dev/null b/docs/content/kv_commands.md\nnew file mode 100644\n--- /dev/null\n+++ b/docs/content/kv_commands.md\n@@ -0,0 +1,27 @@\n+# \ud83d\uddc2\ufe0f `kv`\n+\n+## Overview\n+\n+The `kv` subcommand allows you to store application data in the Cloudflare network to be accessed from Workers. KV operations are scoped to your account, so in order to use any of these commands, you need to:\n+\n+* have a Wrangler project set up with your `account_id` configured in the `wrangler.toml`\n+* call commands from within a Wrangler project directory.\n+\n+<!-- TODO: add gif of `wrangler generate` through `wrangler kv create` -->\n+\n+## Commands\n+\n+### \u2728 `create <namespace-title>`\n+\n+Creates a new namespace.\n+\n+#### Usage\n+\n+``` sh\n+$ wrangler kv create \"new kv namespace\"\n+\ud83c\udf00  Creating namespace with title \"new kv namespace\" \ud83c\udf00 \n+\u2728  Success: WorkersKVNamespace {\n+    id: \"f7b02e7fc70443149ac906dd81ec1791\",\n+    title: \"new kv namespace\",\n+}\n+```\ndiff --git /dev/null b/src/commands/kv/create_namespace.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/create_namespace.rs\n@@ -0,0 +1,25 @@\n+use cloudflare::apiclient::APIClient;\n+\n+use cloudflare::workerskv::create_namespace::CreateNamespace;\n+use cloudflare::workerskv::create_namespace::CreateNamespaceParams;\n+\n+use crate::terminal::message;\n+\n+pub fn create_namespace(title: &str) -> Result<(), failure::Error> {\n+    let client = super::api_client()?;\n+    let account_id = super::account_id()?;\n+\n+    let msg = format!(\"Creating namespace with title \\\"{}\\\"\", title);\n+    message::working(&msg);\n+\n+    let response = client.request(&CreateNamespace {\n+        account_identifier: &account_id,\n+        params: CreateNamespaceParams {\n+            title: title.to_string(),\n+        },\n+    });\n+\n+    super::print_response(response);\n+\n+    Ok(())\n+}\ndiff --git /dev/null b/src/commands/kv/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/mod.rs\n@@ -0,0 +1,66 @@\n+use cloudflare::auth::Credentials;\n+use cloudflare::response::APIFailure;\n+use cloudflare::response::APIResponse;\n+use cloudflare::response::APIResult;\n+use cloudflare::HTTPAPIClient;\n+\n+use crate::settings;\n+use crate::terminal::message;\n+\n+mod create_namespace;\n+\n+pub use create_namespace::create_namespace;\n+\n+fn api_client() -> Result<HTTPAPIClient, failure::Error> {\n+    let user = settings::global_user::GlobalUser::new()?;\n+\n+    Ok(HTTPAPIClient::new(Credentials::from(user)))\n+}\n+\n+fn account_id() -> Result<String, failure::Error> {\n+    let project = settings::project::Project::new()?;\n+    // we need to be certain that account id is present to make kv calls\n+    if project.account_id.is_empty() {\n+        panic!(\"Your wrangler.toml is missing the account_id field which is required to create KV namespaces!\");\n+    }\n+    Ok(project.account_id)\n+}\n+\n+fn print_response<T: APIResult>(response: APIResponse<T>) {\n+    match response {\n+        Ok(success) => message::success(&format!(\"Success: {:#?}\", success.result)),\n+        Err(e) => match e {\n+            APIFailure::Error(_status, errors) => {\n+                for error in errors {\n+                    message::warn(&format!(\"Error {}: {}\", error.code, error.message,));\n+\n+                    let suggestion = help(error.code);\n+                    if !suggestion.is_empty() {\n+                        message::help(suggestion);\n+                    }\n+                }\n+            }\n+            APIFailure::Invalid(reqwest_err) => message::warn(&format!(\"Error: {}\", reqwest_err)),\n+        },\n+    }\n+}\n+\n+fn help(error_code: u16) -> &'static str {\n+    // https://api.cloudflare.com/#workers-kv-namespace-errors\n+    match error_code {\n+        // namespace errors\n+        10010 | 10011 | 10012 | 10013 | 10014 | 10018 => {\n+            \"Run `wrangler kv list` to see your existing namespaces with IDs\"\n+        }\n+        10009 => \"Run `wrangler kv list <namespaceID>` to see your existing keys\", // key errors\n+        // TODO: link to more info\n+        // limit errors\n+        10022 | 10024 | 10030 => \"See documentation\",\n+        // TODO: link to tool for this?\n+        // legacy namespace errors\n+        10021 | 10035 | 10038 => \"Consider moving this namespace\",\n+        // cloudflare account errors\n+        10017 | 10026 => \"Check your account settings in the Cloudflare dashboard\",\n+        _ => \"\",\n+    }\n+}\ndiff --git a/src/commands/mod.rs b/src/commands/mod.rs\n--- a/src/commands/mod.rs\n+++ b/src/commands/mod.rs\n@@ -6,6 +6,7 @@ pub mod build;\n pub mod config;\n pub mod generate;\n pub mod init;\n+pub mod kv;\n pub mod publish;\n pub mod subdomain;\n pub mod whoami;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -21,6 +21,7 @@ mod terminal;\n use crate::settings::project::ProjectType;\n use exitfailure::ExitFailure;\n use terminal::emoji;\n+use terminal::message;\n \n fn main() -> Result<(), ExitFailure> {\n     env_logger::init();\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -45,6 +46,19 @@ fn run() -> Result<(), failure::Error> {\n         .author(\"ashley g williams <ashley666ashley@gmail.com>\")\n         .setting(AppSettings::ArgRequiredElseHelp)\n         .setting(AppSettings::DeriveDisplayOrder)\n+        .subcommand(\n+            SubCommand::with_name(\"kv\")\n+                .about(&*format!(\n+                    \"{} Interact with your Workers KV Store\",\n+                    emoji::KV\n+                ))\n+                .subcommand(\n+                    SubCommand::with_name(\"create\")\n+                        .arg(\n+                            Arg::with_name(\"title\")\n+                        )\n+                )\n+        )\n         .subcommand(\n             SubCommand::with_name(\"generate\")\n                 .about(&*format!(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -233,6 +247,15 @@ fn run() -> Result<(), failure::Error> {\n             .expect(\"The subdomain name you are requesting must be provided.\");\n \n         commands::subdomain(name, &user, &project)?;\n+    } else if let Some(kv_matches) = matches.subcommand_matches(\"kv\") {\n+        match kv_matches.subcommand() {\n+            (\"create\", Some(create_matches)) => {\n+                let title = create_matches.value_of(\"title\").unwrap();\n+                commands::kv::create_namespace(title)?;\n+            }\n+            (\"\", None) => message::warn(\"kv expects a subcommand\"),\n+            _ => unreachable!(),\n+        }\n     }\n     Ok(())\n }\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -1,6 +1,7 @@\n use std::env;\n use std::path::{Path, PathBuf};\n \n+use cloudflare::auth::Credentials;\n use log::info;\n use serde::{Deserialize, Serialize};\n \ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -19,6 +20,15 @@ impl GlobalUser {\n     }\n }\n \n+impl From<GlobalUser> for Credentials {\n+    fn from(user: GlobalUser) -> Credentials {\n+        Credentials::User {\n+            key: user.api_key,\n+            email: user.email,\n+        }\n+    }\n+}\n+\n fn get_global_config() -> Result<GlobalUser, failure::Error> {\n     let mut s = Config::new();\n \ndiff --git a/src/terminal/emoji.rs b/src/terminal/emoji.rs\n--- a/src/terminal/emoji.rs\n+++ b/src/terminal/emoji.rs\n@@ -18,10 +18,11 @@ pub static DANCERS: Emoji = Emoji(\"\ud83d\udc6f \", \"\");\n pub static EYES: Emoji = Emoji(\"\ud83d\udc40 \", \"\");\n pub static INBOX: Emoji = Emoji(\"\ud83d\udce5 \", \"\");\n pub static INFO: Emoji = Emoji(\"\ud83d\udc81\u200d \", \"\");\n+pub static KV: Emoji = Emoji(\"\ud83d\uddc2\ufe0f \", \"\");\n pub static MICROSCOPE: Emoji = Emoji(\"\ud83d\udd2c \", \"\");\n pub static SHEEP: Emoji = Emoji(\"\ud83d\udc11 \", \"\");\n-pub static SLEUTH: Emoji = Emoji(\"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f\", \"\");\n-pub static SPARKLES: Emoji = Emoji(\"\u2728  \", \"\");\n+pub static SLEUTH: Emoji = Emoji(\"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f \", \"\");\n+pub static SPARKLES: Emoji = Emoji(\"\u2728 \", \"\");\n pub static SWIRL: Emoji = Emoji(\"\ud83c\udf00 \", \"\");\n pub static UP: Emoji = Emoji(\"\ud83c\udd99 \", \"\");\n pub static WARN: Emoji = Emoji(\"\u26a0\ufe0f \", \"\");\n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1445,6 +1514,17 @@ dependencies = [\n  \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"serde_qs\"\n+version = \"0.4.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"serde_test\"\n version = \"0.8.23\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2161,10 +2369,19 @@ dependencies = [\n \"checksum serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b833c5ad67d52ced5f5938b2980f32a9c1c5ef047f0b4fb3127e7a423c76153\"\n \"checksum serde_derive 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46a3223d0c9ba936b61c0d2e3e559e3217dbfb8d65d06d26e8b3c25de38bae3e\"\n \"checksum serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5a23aa71d4a4d43fdbfaac00eff68ba8a06a51759a89ac3304323e800c4dd40d\"\n+\"checksum serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35965fa1d2413717053d67c2df1f5c3e1763fbf77200ea7e767523707bd5a0af\"\n \"checksum serde_test 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"110b3dbdf8607ec493c22d5d947753282f3bae73c0f56d322af1e8c78e4c23d5\"\n \"checksum serde_urlencoded 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"642dd69105886af2efd227f75a520ec9b44a820d65bc133a9131f7d229fd165a\"\n+\"checksum serde_yaml 0.8.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38b08a9a90e5260fe01c6480ec7c811606df6d3a660415808c3c3fa8ed95b582\"\n \"checksum siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b8de496cf83d4ed58b6be86c3a275b8602f6ffe98d3024a869e124147a9a3ac\"\n \"checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n+\"checksum slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1cc9c640a4adbfbcc11ffb95efe5aa7af7309e002adab54b185507dbf2377b99\"\n+\"checksum slog-async 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e544d16c6b230d84c866662fe55e31aacfca6ae71e6fc49ae9a311cb379bfc2f\"\n+\"checksum slog-kvfilter 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae939ed7d169eed9699f4f5cd440f046f5dc5dfc27c19e3cd311619594c175e0\"\n+\"checksum slog-scope 4.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1d3ec6214d46e57a7ec87c1972bbca66c59172a0cfffa5233c54726afb946bf\"\n+\"checksum slog-stdlog 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1c469573d1e3f36f9eee66cd132206caf47b50c94b1f6c6e7b4d8235e9ecf01\"\n+\"checksum slog-term 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cb9b3fd9a3c2c86580fce3558a98ed7c69039da0288b08a3f15b371635254e08\"\n+\"checksum sloggers 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2c9179872eb8ba4e69f58a16362145e2bb00768d7ae865b4282cca3805939121\"\n \"checksum smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab606a9c5e214920bb66c458cd7be8ef094f813f20fe77a54cc7dbfff220d4b7\"\n \"checksum socket2 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e626972d3593207547f14bf5fc9efa4d0e7283deb73fef1dff313dae9ab8878\"\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2172,8 +2389,10 @@ dependencies = [\n \"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n \"checksum syn 0.15.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8b4f551a91e2e3848aeef8751d0d4eec9489b6474c720fd4c55958d8d31a430c\"\n \"checksum synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02353edf96d6e4dc81aea2d8490a7e9db177bf8acb0e951c24940bf866cb313f\"\n+\"checksum take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f764005d11ee5f36500a149ace24e00e3da98b0158b3e2d53a7495660d3f4d60\"\n \"checksum tar 0.4.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3196bfbffbba3e57481b6ea32249fbaf590396a52505a2615adbb79d9d826d3\"\n \"checksum tempfile 3.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7dc4738f2e68ed2855de5ac9cdbe05c9216773ecde4739b2f095002ab03a13ef\"\n+\"checksum term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42\"\n \"checksum termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"96d6098003bde162e4277c70665bd87c326f5a0c3f3fbfb285787fa482d54e6e\"\n \"checksum termion 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a8fb22f7cde82c8220e5aeacb3258ed7ce996142c77cba193f203515e26c330\"\n \"checksum termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n",
        "problem_statement": "Add KV Command: Create Namespace\nAs a Workers KV user, I should be able to add a namespace to my KV store from Wrangler by typing\r\n\r\n``` sh\r\n$ wrangler kv add myNamespace\r\n```\n",
        "hints_text": "",
        "created_at": "2019-08-03T20:58:04Z",
        "version": "1.1"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 386,
        "instance_id": "cloudflare__wrangler-legacy-386",
        "issue_numbers": [
            "480"
        ],
        "base_commit": "24f2431fdfd4bba609357bb7e663128f8d561a9e",
        "patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -81,11 +81,6 @@ General documentation surrounding workers development and using `wrangler` can b\n     wrangler publish\n     ```\n \n-    By default, `publish` will make your worker available at `<project-name>.<subdomain>.workers.dev`.\n-    To disable publishing to your workers.dev subdomain, set `private = true` in your `wrangler.toml`.\n-    This setting prevents the `publish` command from making your worker publicly available. To\n-    explicitly enable deployment to `<project-name>.<subdomain>.workers.dev`, you can set `private = false`.\n-\n     To use this command, you'll need to have the following keys in your `wrangler.toml`:\n \n     - `name`\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -177,10 +172,6 @@ There are two types of configuration that `wrangler` uses: global user and per p\n     edit this file to add these values before you can publish.\n \n     - `name`: This is the name of your project. It will be the name of your script.\n-    - `private`: This is a boolean. If set to `true`, when using `wrangler publish`, it will push your script but\n-        not make it publically available. This does not affect publishing in `--release` mode to a registered\n-        domain. Those pushes are *always* public. If this is not in your `wrangler.toml` it is assumed your\n-        project is public.\n     - `type`: This key tells `wrangler build` how to build your project. There are currently 3 options, but we\n         expect there to be more as the community grows.\n         - `javascript`: This project contains a single JavaScript file, defined in `package.json`'s `main` key.\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -189,16 +180,17 @@ There are two types of configuration that `wrangler` uses: global user and per p\n             WebAssembly. Rust files will be built with `wasm-pack`.\n             This project type uses webpack and webpack plugins in the background to build your worker.\n     - `zone_id`: This is the ID of the \"zone\" or domain you want to run your script on. This is optional if you\n-        are using a workers.dev subdomain and is only reuqired for `publish --release`.\n+        are using a workers.dev subdomain and is only required when `workers_dot_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n     - `account_id`: This is the ID of the account associated with your zone. You might have more than one account,\n         so make sure to use the ID of the account associated with the `zone_id` you provide, if you provide one.\n     - `route`: This is the route you'd like to use your worker on. You need to include the hostname. Examples:\n         - `*example.com/*`\n         - `http://example.com/hello`\n         \n-        This key is optional if you are using a workers.dev subdomain and is only required for `publish --release`.\n+        This key is optional if you are using a workers.dev subdomain and is only required when `workers_dot_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md). \n     - `webpack_config`: This is the path to the webpack configuration file for your worker. This is optional and\n         defaults to `webpack.config.js`\n+    - `workers_dot_dev`: This is an optional (but recommended due to impending deprecation of the `--release` flag boolean that specifies whether your worker should be deployed to `<your-project>.<your-subdomain>.workers.dev`. For more information, please read the [environments documentation](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n     - `[[kv-namespaces]]`: These specify any [Workers KV](https://workers.cloudflare.com/docs/reference/storage/) namespaces you want to access from\n         inside your Worker. Each namespace you include should have an entry in your wrangler.toml that includes:\n \ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -214,6 +206,8 @@ There are two types of configuration that `wrangler` uses: global user and per p\n \n         Note: Creating your KV Namespaces should be handled either via the [api](https://workers.cloudflare.com/docs/reference/storage/writing-data/) or via your Cloudflare dashboard.\n \n+    Additionally, you can configure Wrangler to publish to multiple environments. This means that your same codebase can be deployed to multiple places on your [workers.dev](https://workers.dev) subdomain, across multiple accounts, zones, and routes. Read more [here](/docs/environments.md).\n+\n ## Additional Installation Instructions\n \n Wrangler can be installed both through [npm](https://www.npmjs.com/get-npm) and through Rust's package manager, [Cargo](https://github.com/rust-lang/cargo).\ndiff --git /dev/null b/docs/environments.md\nnew file mode 100644\n--- /dev/null\n+++ b/docs/environments.md\n@@ -0,0 +1,358 @@\n+# Environments\n+\n+Environments is a feature that allows you to deploy the same project to multiple places under multiple names. These environments are utilized with the `--env` or `-e` flag on `wrangler build`, `wrangler preview`, and `wrangler publish`.\n+\n+## Concepts\n+\n+\"top level configuration\" refers to the configuration values you specify at the top of your `wrangler.toml`\n+\"environment configuration\" refers to the configuration values you specify under an `[env.name]` in your `wrangler.toml`\n+\n+Here is an example `wrangler.toml` to illustrate\n+\n+```toml\n+# top level configruation\n+type = \"webpack\"\n+name = \"my-worker-dev\"\n+account_id = \"12345678901234567890\"\n+zone_id = \"09876543210987654321\"\n+route = \"dev.example.com/*\"\n+workers_dot_dev = false\n+\n+# environment configuration\n+[env.staging]\n+name = \"my-worker-staging\"\n+route = \"staging.example.com/*\"\n+\n+# environment configuration\n+[env.production]\n+name = \"my-worker\"\n+route = \"example.com/*\"\n+```\n+\n+## Usage\n+\n+The most common use case for environments is deploying to a staging subdomain before your production environment. `wrangler publish` will look at your top level configuration, and you can specify other environments beneath it. Each of these environments will inherit the values from the top level configuration if they are not specified, with the following caveats.\n+\n+* `type` will always be inherited from the top-level configuration; you cannot specify different types for different environments.\n+* Fields that can be inherited from the top level are `account_id`, `zone_id`, `workers_dot_dev`, and `webpack_config`. `kv_namespaces` and `route` must be defined for each environment and will not be inherited.\n+* `name` is inherited. If left out of the environment configuration, a Worker project named `my-worker` with an environment `[env.dev]` would become `my-worker-dev`.\n+\n+### Examples\n+\n+#### Top level configuration\n+\n+##### Routes\n+\n+This `wrangler.toml` has no environments defined and will publish `my-worker` to `example.com/*`\n+\n+```toml\n+type = \"webpack\"\n+name = \"my-worker\"\n+account_id = \"12345678901234567890\"\n+zone_id = \"09876543210987654321\"\n+route = \"example.com/*\"\n+workers_dot_dev = false # this field specifies that the worker should not be deployed to workers.dev\n+```\n+\n+```console\n+$ wrangler publish\n+\u2728  Built successfully, built project size is 517 bytes.\n+\u2728  Successfully published your script.\n+\u2728  Success! Your worker was successfully published. You can view it at example.com/*\n+```\n+\n+##### workers.dev\n+\n+This `wrangler.toml` has no environments defined and will publish `my-worker` to `my-worker.<your-subdomain>.workers.dev`\n+\n+```toml\n+type = \"webpack\"\n+name = \"my-worker\"\n+account_id = \"12345678901234567890\"\n+workers_dot_dev = true # this field specifies that the worker should be deployed to workers.dev\n+```\n+\n+```console\n+$ wrangler publish\n+\u2728  Built successfully, built project size is 517 bytes.\n+\u2728  Successfully published your script.\n+\u2728  Success! Your worker was successfully published. You can view it at https://my-worker.<your-subdomain>.workers.dev`\n+```\n+\n+#### Introducing Environments\n+\n+This `wrangler.toml` adds two environments to the base case.\n+\n+```toml\n+type = \"webpack\"\n+name = \"my-worker-dev\"\n+account_id = \"12345678901234567890\"\n+zone_id = \"09876543210987654321\"\n+route = \"dev.example.com/*\"\n+workers_dot_dev = false\n+\n+[env.staging]\n+name = \"my-worker-staging\"\n+route = \"staging.example.com/*\"\n+\n+[env.production]\n+name = \"my-worker\"\n+route = \"example.com/*\"\n+```\n+\n+In order to use environments with this configuration, you can pass the name of the environment via the `--env` flag.\n+\n+With this configuration, Wrangler will behave in the following manner:\n+\n+```console\n+$ wrangler publish\n+\u2728  Built successfully, built project size is 517 bytes.\n+\u2728  Successfully published your script.\n+\u2728  Success! Your worker was successfully published. You can view it at dev.example.com/*\n+```\n+\n+```console\n+$ wrangler publish --env staging\n+\u2728  Built successfully, built project size is 517 bytes.\n+\u2728  Successfully published your script.\n+\u2728  Success! Your worker was successfully published. You can view it at staging.example.com/*\n+```\n+\n+```console\n+$ wrangler publish --env production\n+\u2728  Built successfully, built project size is 517 bytes.\n+\u2728  Successfully published your script.\n+\u2728  Success! Your worker was successfully published. You can view it at example.com/*\n+```\n+\n+#### Staging Environment with workers.dev\n+\n+In order to deploy your code to workers.dev, you must include `workers_dot_dev = true` in the desired environment. Your `wrangler.toml` may look like this:\n+\n+```toml\n+name = \"my-worker\"\n+type = \"webpack\"\n+account_id = \"12345678901234567890\"\n+zone_id = \"09876543210987654321\"\n+route = \"example.com/*\"\n+workers_dot_dev = false\n+\n+[env.staging]\n+workers_dot_dev = true\n+```\n+\n+With this configuration, Wrangler will behave in the following manner:\n+\n+```console\n+$ wrangler publish\n+\u2728  Built successfully, built project size is 517 bytes.\n+\u2728  Successfully published your script.\n+\u2728  Success! Your worker was successfully published. You can view it at example.com/*\n+```\n+\n+```console\n+$ wrangler publish --env staging\n+\u2728  Built successfully, built project size is 517 bytes.\n+\u2728  Successfully published your script.\n+\u2728  Success! Your worker was successfully published. You can view it at https://my-worker-staging.<your-subdomain>.workers.dev\n+```\n+\n+#### workers.dev as a first class target\n+\n+If you only want to deploy to workers.dev you can configure Wrangler like so:\n+\n+```toml\n+name = \"my-worker-dev\"\n+type = \"webpack\"\n+account_id = \"12345678901234567890\"\n+workers_dot_dev = true\n+\n+[env.production]\n+name = \"my-worker\"\n+\n+[env.staging]\n+name = \"my-worker-staging\"\n+```\n+\n+With this configuration, Wrangler will behave in the following manner:\n+\n+```console\n+$ wrangler publish\n+\u2728  Built successfully, built project size is 517 bytes.\n+\u2728  Successfully published your script.\n+\u2728  Success! Your worker was successfully published. You can view it at https://my-worker-dev.<your-subdomain>.workers.dev\n+```\n+\n+```console\n+$ wrangler publish --env staging\n+\u2728  Built successfully, built project size is 517 bytes.\n+\u2728  Successfully published your script.\n+\u2728  Success! Your worker was successfully published. You can view it at https://my-worker-staging.<your-subdomain>.workers.dev\n+```\n+\n+```console\n+$ wrangler publish --env production\n+\u2728  Built successfully, built project size is 517 bytes.\n+\u2728  Successfully published your script.\n+\u2728  Success! Your worker was successfully published. You can view it at https://my-worker.<your-subdomain>.workers.dev\n+```\n+\n+### Custom webpack configurations\n+\n+You can specify different webpack configurations for different environments.\n+\n+```toml\n+name = \"my-worker-dev\"\n+type = \"webpack\"\n+account_id = \"12345678901234567890\"\n+workers_dot_dev = true\n+webpack_config = \"webpack.dev.js\"\n+\n+[env.production]\n+name = \"my-worker\"\n+webpack_config = \"webpack.config.js\"\n+\n+[env.staging]\n+name = \"my-worker-staging\"\n+```\n+\n+Your default `wrangler build`, `wrangler preview`, and `wrangler publish` commands will all build with `webpack.dev.js`, as will `wrangler build -e staging`, `wrangler preview -e staging`, and `wrangler publish -e staging`. `wrangler build -e production`, `wrangler preview -e production`, and `wrangler publish -e production` would all use your `webpack.config.js` file.\n+\n+## Invalid configurations\n+\n+### Multiple types\n+\n+You cannot specify a type for each environment, type must be specified at the top level of your `wrangler.toml`.\n+\n+```toml\n+name = \"my-worker\"\n+type = \"webpack\"\n+account_id = \"12345678901234567890\"\n+zone_id = \"09876543210987654321\"\n+route = \"example.com/*\"\n+workers_dot_dev = true\n+\n+[env.staging]\n+type = \"rust\"\n+```\n+\n+Wrangler will not error with this configuration, it will build with the `webpack` type.\n+\n+### Same name for multiple environments\n+\n+You cannot specify multiple environments with the same name. If this were allowed, publishing each environment would overwrite your previously deployed worker, and the behavior would not be clear.\n+\n+```toml\n+name = \"my-worker\"\n+type = \"webpack\"\n+account_id = \"12345678901234567890\"\n+zone_id = \"09876543210987654321\"\n+route = \"example.com/*\"\n+workers_dot_dev = false\n+\n+[env.staging]\n+name = \"my-worker\"\n+workers_dot_dev = true\n+```\n+\n+```console\n+$ wrangler publish\n+Error: \u26a0\ufe0f  Each name in your `wrangler.toml` must be unique, this name is duplicated: my-worker\n+```\n+\n+```console\n+$ wrangler publish --env staging\n+Error: \u26a0\ufe0f  Each name in your `wrangler.toml` must be unique, this name is duplicated: my-worker\n+```\n+\n+### Ambiguous top level configuration\n+\n+```toml\n+name = \"my-worker\"\n+type = \"webpack\"\n+account_id = \"12345678901234567890\"\n+zone_id = \"09876543210987654321\"\n+route = \"example.com/*\n+```\n+\n+You will be warned if `workers_dot_dev` is left out of the top level configuration because if it is not specified, it is unclear what the behavior of `wrangler publish` should be. See [the section on backwards compatibility](#Backwards-compatibility) for more information.\n+\n+```console\n+$ wrangler publish\n+\u26a0\ufe0f  Please specify the workers_dot_dev boolean in the top level of your wrangler.toml.\n+\u26a0\ufe0f  This command will fail in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\n+\u2728  Built successfully, built project size is 517 bytes.\n+\u2728  Successfully published your script.\n+\u2728  Success! Your worker was successfully published. You can view it at https://my-worker.avery.workers.dev\n+```\n+\n+### Defining workers_dot_dev and route\n+\n+```toml\n+name = \"my-worker\"\n+type = \"webpack\"\n+account_id = \"12345678901234567890\"\n+zone_id = \"09876543210987654321\"\n+route = \"example.com/*\"\n+workers_dot_dev = true\n+\n+[env.staging]\n+workers_dot_dev = true\n+route = \"staging.example.com/*\"\n+```\n+\n+Wrangler will fail to publish to an environment where `route` is defined alongside `workers_dot_dev = true`.\n+\n+```console\n+$ wrangler publish\n+Error: \u26a0\ufe0f  Your environment should only include `workers_dot_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dot_dev`.\n+```\n+\n+```console\n+$ wrangler publish --env staging\n+Error: \u26a0\ufe0f  Your environment should only include `workers_dot_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dot_dev`.\n+```\n+\n+## Backwards compatibility\n+\n+Legacy `wrangler.toml` files will still work as expected during the initial rollout of this feature, however you will notice warnings when your configuration is ambigious. One of the goals of environments is to make it more obvious when you are deploying to a traditional worker with routes, and when you are deploying to a subdomain on workers.dev.\n+\n+**\u26a0\ufe0f Please note that this behavior will not be supported past v1.5.0!! \u26a0\ufe0f**\n+\n+A `wrangler.toml` before this release looks like this:\n+\n+```toml\n+name = \"my-worker\"\n+type = \"webpack\"\n+account_id = \"12345678901234567890\"\n+zone_id = \"09876543210987654321\"\n+private = false\n+route = \"example.com/*\n+```\n+\n+With this configuration, Wrangler will behave in the following manner:\n+\n+```console\n+$ wrangler publish\n+\u26a0\ufe0f  The `private` field is deprecated; please use `workers_dot_dev` to toggle between publishing to your workers.dev subdomain and your own domain.\n+\u26a0\ufe0f  Please specify the workers_dot_dev boolean in the top level of your wrangler.toml.\n+\u26a0\ufe0f  This command will fail in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\n+\u2728  Built successfully, built project size is 517 bytes.\n+\u2728  Successfully published your script.\n+\u2728  Success! Your worker was successfully published. You can view it at https://my-worker.<your-subdomain>.workers.dev\n+```\n+\n+```console\n+$ wrangler publish --release\n+\u26a0\ufe0f  --release will be deprecated.\n+\u26a0\ufe0f  The `private` field is deprecated; please use `workers_dot_dev` to toggle between publishing to your workers.dev subdomain and your own domain.\n+\u26a0\ufe0f  Please specify the workers_dot_dev boolean in the top level of your wrangler.toml.\n+\u26a0\ufe0f  This command will fail in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\n+\u2728  Built successfully, built project size is 517 bytes.\n+\u2728  Successfully published your script.\n+\u2728  Success! Your worker was successfully published. You can view it at example.com/*\n+```\n+\n+This backwards compatibility is the reason that a warning is thrown if `workers_dot_dev` is not specified at the top of `wrangler.toml`.\n+\n+It is important to note that both of these commands will issue a deprecation warning. To remove these warnings, you can configure Wrangler with the `workers_dot_dev` boolean to separate deploys to workers.dev from deploys to workers routes.\ndiff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -3,15 +3,15 @@ pub mod wranglerjs;\n mod watch;\n pub use watch::watch_and_build;\n \n-use crate::settings::project::{Project, ProjectType};\n+use crate::settings::project::{ProjectType, Target};\n use crate::terminal::message;\n use crate::{commands, install};\n \n use std::path::PathBuf;\n use std::process::Command;\n \n-pub fn build(project: &Project) -> Result<(), failure::Error> {\n-    let project_type = &project.project_type;\n+pub fn build(target: &Target) -> Result<(), failure::Error> {\n+    let project_type = &target.project_type;\n     match project_type {\n         ProjectType::JavaScript => {\n             message::info(\"JavaScript project found. Skipping unnecessary build!\")\ndiff --git a/src/commands/build/mod.rs b/src/commands/build/mod.rs\n--- a/src/commands/build/mod.rs\n+++ b/src/commands/build/mod.rs\n@@ -27,7 +27,7 @@ pub fn build(project: &Project) -> Result<(), failure::Error> {\n             commands::run(command, &command_name)?;\n         }\n         ProjectType::Webpack => {\n-            wranglerjs::run_build(project)?;\n+            wranglerjs::run_build(target)?;\n         }\n     }\n \ndiff --git a/src/commands/build/watch/mod.rs b/src/commands/build/watch/mod.rs\n--- a/src/commands/build/watch/mod.rs\n+++ b/src/commands/build/watch/mod.rs\n@@ -2,7 +2,7 @@ mod watcher;\n pub use watcher::wait_for_changes;\n \n use crate::commands::build::{command, wranglerjs};\n-use crate::settings::project::{Project, ProjectType};\n+use crate::settings::project::{ProjectType, Target};\n use crate::terminal::message;\n use crate::{commands, install};\n \ndiff --git a/src/commands/build/watch/mod.rs b/src/commands/build/watch/mod.rs\n--- a/src/commands/build/watch/mod.rs\n+++ b/src/commands/build/watch/mod.rs\n@@ -18,10 +18,10 @@ const RUST_PATH: &str = \"./\";\n /// watch a project for changes and re-build it when necessary,\n /// outputting a build event to tx.\n pub fn watch_and_build(\n-    project: &Project,\n+    target: &Target,\n     tx: Option<mpsc::Sender<()>>,\n ) -> Result<(), failure::Error> {\n-    let project_type = &project.project_type;\n+    let project_type = &target.project_type;\n     match project_type {\n         ProjectType::JavaScript => {\n             thread::spawn(move || {\ndiff --git a/src/commands/build/watch/mod.rs b/src/commands/build/watch/mod.rs\n--- a/src/commands/build/watch/mod.rs\n+++ b/src/commands/build/watch/mod.rs\n@@ -74,7 +74,7 @@ pub fn watch_and_build(\n             });\n         }\n         ProjectType::Webpack => {\n-            wranglerjs::run_build_and_watch(project, tx)?;\n+            wranglerjs::run_build_and_watch(target, tx)?;\n         }\n     }\n \ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -20,7 +20,7 @@ use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use crate::settings::project::Project;\n+use crate::settings::project::Target;\n use crate::terminal::message;\n \n use notify::{self, RecursiveMode, Watcher};\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -34,8 +34,8 @@ use std::time::Duration;\n // executable and wait for completion. The file will receive the a serialized\n // {WranglerjsOutput} struct.\n // Note that the ability to pass a fd is platform-specific\n-pub fn run_build(project: &Project) -> Result<(), failure::Error> {\n-    let (mut command, temp_file, bundle) = setup_build(project)?;\n+pub fn run_build(target: &Target) -> Result<(), failure::Error> {\n+    let (mut command, temp_file, bundle) = setup_build(target)?;\n \n     info!(\"Running {:?}\", command);\n \ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -53,11 +53,8 @@ pub fn run_build(project: &Project) -> Result<(), failure::Error> {\n     }\n }\n \n-pub fn run_build_and_watch(\n-    project: &Project,\n-    tx: Option<Sender<()>>,\n-) -> Result<(), failure::Error> {\n-    let (mut command, temp_file, bundle) = setup_build(project)?;\n+pub fn run_build_and_watch(target: &Target, tx: Option<Sender<()>>) -> Result<(), failure::Error> {\n+    let (mut command, temp_file, bundle) = setup_build(target)?;\n     command.arg(\"--watch=1\");\n \n     info!(\"Running {:?} in watch mode\", command);\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -125,7 +122,7 @@ fn write_wranglerjs_output(\n }\n \n //setup a build to run wranglerjs, return the command, the ipc temp file, and the bundle\n-fn setup_build(project: &Project) -> Result<(Command, PathBuf, Bundle), failure::Error> {\n+fn setup_build(target: &Target) -> Result<(Command, PathBuf, Bundle), failure::Error> {\n     for tool in &[\"node\", \"npm\"] {\n         env_dep_installed(tool)?;\n     }\ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -157,7 +154,7 @@ fn setup_build(project: &Project) -> Result<(Command, PathBuf, Bundle), failure:\n     command.arg(format!(\"--wasm-binding={}\", bundle.get_wasm_binding()));\n \n     let webpack_config_path = PathBuf::from(\n-        &project\n+        &target\n             .webpack_config\n             .clone()\n             .unwrap_or_else(|| \"webpack.config.js\".to_string()),\ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -1,4 +1,4 @@\n-use crate::settings::project::{Project, ProjectType};\n+use crate::settings::project::{Manifest, ProjectType};\n use crate::{commands, install};\n use std::path::PathBuf;\n use std::process::Command;\ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -16,7 +16,7 @@ pub fn generate(name: &str, template: &str, pt: Option<ProjectType>) -> Result<(\n     let command_name = format!(\"{:?}\", command);\n \n     commands::run(command, &command_name)?;\n-    Project::generate(name.to_string(), pt, false)?;\n+    Manifest::generate(name.to_string(), pt, false)?;\n     Ok(())\n }\n \ndiff --git a/src/commands/init.rs b/src/commands/init.rs\n--- a/src/commands/init.rs\n+++ b/src/commands/init.rs\n@@ -1,4 +1,4 @@\n-use crate::settings::project::{Project, ProjectType};\n+use crate::settings::project::{Manifest, ProjectType};\n use crate::terminal::message;\n use std::path::Path;\n \ndiff --git a/src/commands/init.rs b/src/commands/init.rs\n--- a/src/commands/init.rs\n+++ b/src/commands/init.rs\n@@ -9,7 +9,7 @@ pub fn init(name: Option<&str>, project_type: Option<ProjectType>) -> Result<(),\n     let dirname = get_current_dirname()?;\n     let name = name.unwrap_or_else(|| &dirname);\n     let project_type = project_type.unwrap_or_default();\n-    Project::generate(name.to_string(), project_type, true)?;\n+    Manifest::generate(name.to_string(), project_type, true)?;\n     message::success(\"Succesfully created a `wrangler.toml`\");\n     Ok(())\n }\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -14,43 +14,27 @@ use crate::commands;\n use crate::commands::subdomain::Subdomain;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::project::Project;\n-use crate::terminal::message;\n-\n-pub fn publish(user: &GlobalUser, project: &Project, release: bool) -> Result<(), failure::Error> {\n-    info!(\"release = {}\", release);\n-\n-    validate_project(project, release)?;\n-    commands::build(&project)?;\n-    publish_script(&user, &project, release)?;\n-    if release {\n-        info!(\"release mode detected, making a route...\");\n-        let route = Route::new(&project)?;\n-        Route::publish(&user, &project, &route)?;\n-        let msg = format!(\n-            \"Success! Your worker was successfully published. You can view it at {}.\",\n-            &route.pattern\n-        );\n-        message::success(&msg);\n-    } else {\n-        message::success(\"Success! Your worker was successfully published.\");\n-    }\n+use crate::settings::project::Target;\n+use crate::terminal::{emoji, message};\n+\n+pub fn publish(user: &GlobalUser, target: &Target) -> Result<(), failure::Error> {\n+    info!(\"workers_dot_dev = {}\", target.workers_dot_dev);\n+\n+    validate_target(target)?;\n+    commands::build(&target)?;\n+    publish_script(&user, &target)?;\n     Ok(())\n }\n \n-fn publish_script(\n-    user: &GlobalUser,\n-    project: &Project,\n-    release: bool,\n-) -> Result<(), failure::Error> {\n+fn publish_script(user: &GlobalUser, target: &Target) -> Result<(), failure::Error> {\n     let worker_addr = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}\",\n-        project.account_id, project.name,\n+        target.account_id, target.name,\n     );\n \n     let client = http::auth_client(user);\n \n-    let script_upload_form = build_script_upload_form(project)?;\n+    let script_upload_form = build_script_upload_form(target)?;\n \n     let mut res = client\n         .put(&worker_addr)\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -67,28 +51,36 @@ fn publish_script(\n         )\n     }\n \n-    if !release {\n-        let private = project.private.unwrap_or(false);\n-        if !private {\n-            info!(\"--release not passed, publishing to subdomain\");\n-            make_public_on_subdomain(project, user)?;\n-        }\n-    }\n+    let pattern = if !target.workers_dot_dev {\n+        let route = Route::new(&target)?;\n+        Route::publish(&user, &target, &route)?;\n+        info!(\"publishing to route\");\n+        route.pattern\n+    } else {\n+        info!(\"publishing to subdomain\");\n+        publish_to_subdomain(target, user)?\n+    };\n+\n+    info!(\"{}\", &pattern);\n+    message::success(&format!(\n+        \"Success! Your worker was successfully published. You can view it at {}\",\n+        &pattern\n+    ));\n \n     Ok(())\n }\n \n fn build_subdomain_request() -> String {\n-    serde_json::json!({ \"enabled\":true}).to_string()\n+    serde_json::json!({ \"enabled\": true }).to_string()\n }\n \n-fn make_public_on_subdomain(project: &Project, user: &GlobalUser) -> Result<(), failure::Error> {\n+fn publish_to_subdomain(target: &Target, user: &GlobalUser) -> Result<String, failure::Error> {\n     info!(\"checking that subdomain is registered\");\n-    let subdomain = Subdomain::get(&project.account_id, user)?;\n+    let subdomain = Subdomain::get(&target.account_id, user)?;\n \n     let sd_worker_addr = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}/subdomain\",\n-        project.account_id, project.name,\n+        target.account_id, target.name,\n     );\n \n     let client = http::auth_client(user);\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -100,33 +92,27 @@ fn make_public_on_subdomain(project: &Project, user: &GlobalUser) -> Result<(),\n         .body(build_subdomain_request())\n         .send()?;\n \n-    if res.status().is_success() {\n-        let msg = format!(\n-            \"Successfully made your script available at https://{}.{}.workers.dev\",\n-            project.name, subdomain\n-        );\n-        message::success(&msg)\n-    } else {\n+    if !res.status().is_success() {\n         failure::bail!(\n             \"Something went wrong! Status: {}, Details {}\",\n             res.status(),\n             res.text()?\n         )\n     }\n-    Ok(())\n+    Ok(format!(\"https://{}.{}.workers.dev\", target.name, subdomain))\n }\n \n-fn validate_project(project: &Project, release: bool) -> Result<(), failure::Error> {\n+fn validate_target(target: &Target) -> Result<(), failure::Error> {\n     let mut missing_fields = Vec::new();\n \n-    if project.account_id.is_empty() {\n+    if target.account_id.is_empty() {\n         missing_fields.push(\"account_id\")\n     };\n-    if project.name.is_empty() {\n+    if target.name.is_empty() {\n         missing_fields.push(\"name\")\n     };\n \n-    match &project.kv_namespaces {\n+    match &target.kv_namespaces {\n         Some(kv_namespaces) => {\n             for kv in kv_namespaces {\n                 if kv.binding.is_empty() {\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -141,9 +127,9 @@ fn validate_project(project: &Project, release: bool) -> Result<(), failure::Err\n         None => {}\n     }\n \n-    let destination = if release {\n-        //check required fields for release\n-        if project\n+    let destination = if !target.workers_dot_dev {\n+        // check required fields for release\n+        if target\n             .zone_id\n             .as_ref()\n             .unwrap_or(&\"\".to_string())\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -151,13 +137,13 @@ fn validate_project(project: &Project, release: bool) -> Result<(), failure::Err\n         {\n             missing_fields.push(\"zone_id\")\n         };\n-        if project.route.as_ref().unwrap_or(&\"\".to_string()).is_empty() {\n+        if target.route.as_ref().unwrap_or(&\"\".to_string()).is_empty() {\n             missing_fields.push(\"route\")\n         };\n-        //zoned deploy destination\n+        // zoned deploy destination\n         \"a route\"\n     } else {\n-        //zoneless deploy destination\n+        // zoneless deploy destination\n         \"your subdomain\"\n     };\n \ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -169,7 +155,8 @@ fn validate_project(project: &Project, release: bool) -> Result<(), failure::Err\n \n     if !missing_fields.is_empty() {\n         failure::bail!(\n-            \"Your wrangler.toml is missing the {} {:?} which {} required to publish to {}!\",\n+            \"{} Your wrangler.toml is missing the {} {:?} which {} required to publish to {}!\",\n+            emoji::WARN,\n             field_pluralization,\n             missing_fields,\n             is_are,\ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -17,7 +17,7 @@ use log::info;\n \n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::project::Project;\n+use crate::settings::project::Target;\n use crate::terminal::message;\n \n use std::sync::mpsc::channel;\ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -28,14 +28,14 @@ use ws::{Sender, WebSocket};\n const PREVIEW_ADDRESS: &str = \"https://00000000000000000000000000000000.cloudflareworkers.com\";\n \n pub fn preview(\n-    project: Project,\n+    target: Target,\n     user: Option<GlobalUser>,\n     method: HTTPMethod,\n     body: Option<String>,\n     livereload: bool,\n ) -> Result<(), failure::Error> {\n-    commands::build(&project)?;\n-    let script_id = upload_and_get_id(&project, user.as_ref())?;\n+    commands::build(&target)?;\n+    let script_id = upload_and_get_id(&target, user.as_ref())?;\n \n     let session = Uuid::new_v4().to_simple();\n     let preview_host = \"example.com\";\ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -58,7 +58,7 @@ pub fn preview(\n \n         let broadcaster = server.broadcaster();\n         thread::spawn(move || server.run());\n-        watch_for_changes(&project, user.as_ref(), session.to_string(), broadcaster)?;\n+        watch_for_changes(&target, user.as_ref(), session.to_string(), broadcaster)?;\n     } else {\n         open_browser(&format!(\n             \"https://cloudflareworkers.com/?hide_editor#{0}:{1}{2}\",\ndiff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -125,16 +125,16 @@ fn post(\n }\n \n fn watch_for_changes(\n-    project: &Project,\n+    target: &Target,\n     user: Option<&GlobalUser>,\n     session_id: String,\n     broadcaster: Sender,\n ) -> Result<(), failure::Error> {\n     let (tx, rx) = channel();\n-    commands::watch_and_build(&project, Some(tx))?;\n+    commands::watch_and_build(&target, Some(tx))?;\n \n     while let Ok(_e) = rx.recv() {\n-        if let Ok(new_id) = upload_and_get_id(project, user) {\n+        if let Ok(new_id) = upload_and_get_id(target, user) {\n             let msg = FiddleMessage {\n                 session_id: session_id.clone(),\n                 data: FiddleMessageData::LiveReload { new_id },\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -1,7 +1,7 @@\n use crate::commands::publish;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::project::Project;\n+use crate::settings::project::Target;\n use crate::terminal::message;\n use reqwest::Client;\n use serde::Deserialize;\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -33,19 +33,19 @@ struct V4ApiResponse {\n }\n \n pub fn upload_and_get_id(\n-    project: &Project,\n+    target: &Target,\n     user: Option<&GlobalUser>,\n ) -> Result<String, failure::Error> {\n     let preview = match &user {\n         Some(user) => {\n             log::info!(\"GlobalUser set, running with authentication\");\n \n-            let missing_fields = validate(&project);\n+            let missing_fields = validate(&target);\n \n             if missing_fields.is_empty() {\n                 let client = http::auth_client(&user);\n \n-                authenticated_upload(&client, &project)?\n+                authenticated_upload(&client, &target)?\n             } else {\n                 message::warn(&format!(\n                     \"Your wrangler.toml is missing the following fields: {:?}\",\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -54,7 +54,7 @@ pub fn upload_and_get_id(\n                 message::warn(\"Falling back to unauthenticated preview.\");\n \n                 let client = http::client();\n-                unauthenticated_upload(&client, &project)?\n+                unauthenticated_upload(&client, &target)?\n             }\n         }\n         None => {\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -67,24 +67,24 @@ pub fn upload_and_get_id(\n \n             let client = http::client();\n \n-            unauthenticated_upload(&client, &project)?\n+            unauthenticated_upload(&client, &target)?\n         }\n     };\n \n     Ok(preview.id)\n }\n \n-fn validate(project: &Project) -> Vec<&str> {\n+fn validate(target: &Target) -> Vec<&str> {\n     let mut missing_fields = Vec::new();\n \n-    if project.account_id.is_empty() {\n+    if target.account_id.is_empty() {\n         missing_fields.push(\"account_id\")\n     };\n-    if project.name.is_empty() {\n+    if target.name.is_empty() {\n         missing_fields.push(\"name\")\n     };\n \n-    match &project.kv_namespaces {\n+    match &target.kv_namespaces {\n         Some(kv_namespaces) => {\n             for kv in kv_namespaces {\n                 if kv.binding.is_empty() {\ndiff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -102,14 +102,14 @@ fn validate(project: &Project) -> Vec<&str> {\n     missing_fields\n }\n \n-fn authenticated_upload(client: &Client, project: &Project) -> Result<Preview, failure::Error> {\n+fn authenticated_upload(client: &Client, target: &Target) -> Result<Preview, failure::Error> {\n     let create_address = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}/preview\",\n-        project.account_id, project.name\n+        target.account_id, target.name\n     );\n     log::info!(\"address: {}\", create_address);\n \n-    let script_upload_form = publish::build_script_upload_form(&project)?;\n+    let script_upload_form = publish::build_script_upload_form(&target)?;\n \n     let mut res = client\n         .post(&create_address)\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -1,6 +1,6 @@\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::project::Project;\n+use crate::settings::project::Target;\n use crate::terminal::emoji;\n use reqwest::header::CONTENT_TYPE;\n use serde::{Deserialize, Serialize};\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -19,8 +19,8 @@ struct RoutesResponse {\n }\n \n impl Route {\n-    pub fn new(project: &Project) -> Result<Route, failure::Error> {\n-        if project\n+    pub fn new(target: &Target) -> Result<Route, failure::Error> {\n+        if target\n             .route\n             .clone()\n             .expect(\"You must provide a zone_id in your wrangler.toml before publishing!\")\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -30,24 +30,24 @@ impl Route {\n         }\n         let msg_config_error = format!(\"{} Your project config has an error, check your `wrangler.toml`: `route` must be provided.\", emoji::WARN);\n         Ok(Route {\n-            script: Some(project.name.to_string()),\n-            pattern: project.route.clone().expect(&msg_config_error),\n+            script: Some(target.name.to_string()),\n+            pattern: target.route.clone().expect(&msg_config_error),\n         })\n     }\n \n     pub fn publish(\n         user: &GlobalUser,\n-        project: &Project,\n+        target: &Target,\n         route: &Route,\n     ) -> Result<(), failure::Error> {\n-        if route.exists(user, project)? {\n+        if route.exists(user, target)? {\n             return Ok(());\n         }\n-        create(user, project, route)\n+        create(user, target, route)\n     }\n \n-    pub fn exists(&self, user: &GlobalUser, project: &Project) -> Result<bool, failure::Error> {\n-        let routes = get_routes(user, project)?;\n+    pub fn exists(&self, user: &GlobalUser, target: &Target) -> Result<bool, failure::Error> {\n+        let routes = get_routes(user, target)?;\n \n         for route in routes {\n             if route.matches(self) {\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -62,8 +62,8 @@ impl Route {\n     }\n }\n \n-fn get_routes(user: &GlobalUser, project: &Project) -> Result<Vec<Route>, failure::Error> {\n-    let routes_addr = get_routes_addr(project)?;\n+fn get_routes(user: &GlobalUser, target: &Target) -> Result<Vec<Route>, failure::Error> {\n+    let routes_addr = get_routes_addr(target)?;\n \n     let client = http::auth_client(user);\n \ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -84,11 +84,11 @@ fn get_routes(user: &GlobalUser, project: &Project) -> Result<Vec<Route>, failur\n     Ok(routes_response.result)\n }\n \n-fn create(user: &GlobalUser, project: &Project, route: &Route) -> Result<(), failure::Error> {\n+fn create(user: &GlobalUser, target: &Target, route: &Route) -> Result<(), failure::Error> {\n     let client = http::auth_client(user);\n     let body = serde_json::to_string(&route)?;\n \n-    let routes_addr = get_routes_addr(project)?;\n+    let routes_addr = get_routes_addr(target)?;\n \n     info!(\"Creating your route {:#?}\", &route.pattern,);\n     let mut res = client\ndiff --git a/src/commands/publish/route.rs b/src/commands/publish/route.rs\n--- a/src/commands/publish/route.rs\n+++ b/src/commands/publish/route.rs\n@@ -109,8 +109,8 @@ fn create(user: &GlobalUser, project: &Project, route: &Route) -> Result<(), fai\n     Ok(())\n }\n \n-fn get_routes_addr(project: &Project) -> Result<String, failure::Error> {\n-    if let Some(zone_id) = &project.zone_id {\n+fn get_routes_addr(target: &Target) -> Result<String, failure::Error> {\n+    if let Some(zone_id) = &target.zone_id {\n         return Ok(format!(\n             \"https://api.cloudflare.com/client/v4/zones/{}/workers/routes\",\n             zone_id\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -11,16 +11,16 @@ use crate::commands::build::wranglerjs;\n use crate::settings::binding;\n use crate::settings::metadata::Metadata;\n use crate::settings::project::kv_namespace;\n-use crate::settings::project::{Project, ProjectType};\n+use crate::settings::project::{ProjectType, Target};\n \n use project_assets::ProjectAssets;\n use wasm_module::WasmModule;\n \n use super::{krate, Package};\n \n-pub fn build_script_upload_form(project: &Project) -> Result<Form, failure::Error> {\n-    let project_type = &project.project_type;\n-    let kv_namespaces = project.kv_namespaces();\n+pub fn build_script_upload_form(target: &Target) -> Result<Form, failure::Error> {\n+    let project_type = &target.project_type;\n+    let kv_namespaces = target.kv_namespaces();\n     match project_type {\n         ProjectType::Rust => {\n             info!(\"Rust project detected. Publishing...\");\ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -1,6 +1,6 @@\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n-use crate::settings::project::Project;\n+use crate::settings::project::Target;\n use crate::terminal::{emoji, message};\n \n use serde::{Deserialize, Serialize};\ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -58,8 +58,8 @@ fn subdomain_addr(account_id: &str) -> String {\n     )\n }\n \n-pub fn subdomain(name: &str, user: &GlobalUser, project: &Project) -> Result<(), failure::Error> {\n-    if project.account_id.is_empty() {\n+pub fn subdomain(name: &str, user: &GlobalUser, target: &Target) -> Result<(), failure::Error> {\n+    if target.account_id.is_empty() {\n         failure::bail!(format!(\n             \"{} You must provide an account_id in your wrangler.toml before creating a subdomain!\",\n             emoji::WARN\ndiff --git a/src/commands/subdomain.rs b/src/commands/subdomain.rs\n--- a/src/commands/subdomain.rs\n+++ b/src/commands/subdomain.rs\n@@ -70,7 +70,7 @@ pub fn subdomain(name: &str, user: &GlobalUser, project: &Project) -> Result<(),\n         name\n     );\n     message::working(&msg);\n-    let account_id = &project.account_id;\n+    let account_id = &target.account_id;\n     let addr = subdomain_addr(account_id);\n     let sd = Subdomain {\n         subdomain: name.to_string(),\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -4,6 +4,7 @@\n extern crate text_io;\n \n use std::env;\n+use std::path::Path;\n use std::str::FromStr;\n \n use clap::{App, AppSettings, Arg, SubCommand};\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -95,6 +96,13 @@ fn run() -> Result<(), failure::Error> {\n                     \"{} Build your worker\",\n                     emoji::CRAB\n                 ))\n+                .arg(\n+                    Arg::with_name(\"env\")\n+                        .help(\"environment to build\")\n+                        .short(\"e\")\n+                        .long(\"env\")\n+                        .takes_value(true)\n+                ),\n         )\n         .subcommand(\n             SubCommand::with_name(\"preview\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -112,24 +120,39 @@ fn run() -> Result<(), failure::Error> {\n                         .help(\"Body string to post to your preview worker request\")\n                         .index(2),\n                 )\n+                .arg(\n+                    Arg::with_name(\"env\")\n+                        .help(\"environment to preview\")\n+                        .short(\"e\")\n+                        .long(\"env\")\n+                        .takes_value(true)\n+                )\n                 .arg(\n                     Arg::with_name(\"watch\")\n                         .help(\"watch your project for changes and update the preview automagically\")\n                         .long(\"watch\")\n                         .takes_value(false),\n-                )\n+                ),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"publish\").about(&*format!(\n-                \"{} Publish your worker to the orange cloud\",\n-                emoji::UP\n-            ))\n-            .arg(\n-                Arg::with_name(\"release\")\n-                    .long(\"release\")\n-                    .takes_value(false)\n-                    .help(\"should this be published to a workers.dev subdomain or a domain name you have registered\"),\n-             ),\n+            SubCommand::with_name(\"publish\")\n+                .about(&*format!(\n+                    \"{} Publish your worker to the orange cloud\",\n+                    emoji::UP\n+                ))\n+                .arg(\n+                    Arg::with_name(\"release\")\n+                        .long(\"release\")\n+                        .takes_value(false)\n+                        .help(\"[planned deprecation in v1.5.0, use --env instead. see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information]\\nshould this be published to a workers.dev subdomain or a domain name you have registered\"),\n+                )\n+                .arg(\n+                    Arg::with_name(\"env\")\n+                        .help(\"environments to publish to\")\n+                        .short(\"e\")\n+                        .long(\"env\")\n+                        .takes_value(true)\n+                ),\n         )\n         .subcommand(\n             SubCommand::with_name(\"config\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -157,6 +180,8 @@ fn run() -> Result<(), failure::Error> {\n         )))\n         .get_matches();\n \n+    let config_path = Path::new(\"./wrangler.toml\");\n+\n     if let Some(_matches) = matches.subcommand_matches(\"config\") {\n         println!(\"Enter email: \");\n         let mut email: String = read!(\"{}\\n\");\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -194,14 +219,15 @@ fn run() -> Result<(), failure::Error> {\n             None => None,\n         };\n         commands::init(name, project_type)?;\n-    } else if matches.subcommand_matches(\"build\").is_some() {\n+    } else if let Some(matches) = matches.subcommand_matches(\"build\") {\n         info!(\"Getting project settings\");\n-        let project = settings::project::Project::new()?;\n-\n-        commands::build(&project)?;\n+        let manifest = settings::project::Manifest::new(config_path)?;\n+        let target = &manifest.get_target(matches.value_of(\"env\"), false)?;\n+        commands::build(&target)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"preview\") {\n         info!(\"Getting project settings\");\n-        let project = settings::project::Project::new()?;\n+        let manifest = settings::project::Manifest::new(config_path)?;\n+        let target = manifest.get_target(matches.value_of(\"env\"), false)?;\n \n         // the preview command can be called with or without a Global User having been config'd\n         // so we convert this Result into an Option\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -216,29 +242,35 @@ fn run() -> Result<(), failure::Error> {\n \n         let watch = matches.is_present(\"watch\");\n \n-        commands::preview(project, user, method, body, watch)?;\n+        commands::preview(target, user, method, body, watch)?;\n     } else if matches.subcommand_matches(\"whoami\").is_some() {\n         info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\n \n         commands::whoami(&user);\n     } else if let Some(matches) = matches.subcommand_matches(\"publish\") {\n-        info!(\"Getting project settings\");\n-        let project = settings::project::Project::new()?;\n-\n         info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\n \n-        info!(\"{}\", matches.occurrences_of(\"release\"));\n-        let release = match matches.occurrences_of(\"release\") {\n-            1 => true,\n-            _ => false,\n-        };\n-\n-        commands::publish(&user, &project, release)?;\n+        info!(\"Getting project settings\");\n+        if matches.is_present(\"env\") && matches.is_present(\"release\") {\n+            failure::bail!(\"You can only pass --env or --release, not both\")\n+        }\n+        let manifest = settings::project::Manifest::new(config_path)?;\n+        if matches.is_present(\"env\") {\n+            let target = manifest.get_target(matches.value_of(\"env\"), false)?;\n+            commands::publish(&user, &target)?;\n+        } else if matches.is_present(\"release\") {\n+            let target = manifest.get_target(None, true)?;\n+            commands::publish(&user, &target)?;\n+        } else {\n+            let target = manifest.get_target(None, false)?;\n+            commands::publish(&user, &target)?;\n+        }\n     } else if let Some(matches) = matches.subcommand_matches(\"subdomain\") {\n         info!(\"Getting project settings\");\n-        let project = settings::project::Project::new()?;\n+        let manifest = settings::project::Manifest::new(config_path)?;\n+        let target = manifest.get_target(matches.value_of(\"env\"), false)?;\n \n         info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -247,7 +279,7 @@ fn run() -> Result<(), failure::Error> {\n             .value_of(\"name\")\n             .expect(\"The subdomain name you are requesting must be provided.\");\n \n-        commands::subdomain(name, &user, &project)?;\n+        commands::subdomain(name, &user, &target)?;\n     }\n     Ok(())\n }\ndiff --git a/src/settings/project/mod.rs b/src/settings/project/mod.rs\n--- a/src/settings/project/mod.rs\n+++ b/src/settings/project/mod.rs\n@@ -7,49 +7,297 @@ pub use project_type::ProjectType;\n use crate::terminal::emoji;\n use crate::terminal::message;\n \n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::fs;\n use std::path::{Path, PathBuf};\n \n use log::info;\n \n-use config::{Config, Environment, File};\n+use config::{Config, File};\n use serde::{Deserialize, Serialize};\n \n #[derive(Clone, Debug, Deserialize, Serialize)]\n-pub struct Project {\n+pub struct Target {\n+    pub account_id: String,\n+    #[serde(rename = \"kv-namespaces\")]\n+    pub kv_namespaces: Option<Vec<KvNamespace>>,\n     pub name: String,\n     #[serde(rename = \"type\")]\n     pub project_type: ProjectType,\n+    pub route: Option<String>,\n+    pub routes: Option<HashMap<String, String>>,\n+    pub webpack_config: Option<String>,\n+    pub workers_dot_dev: bool,\n     pub zone_id: Option<String>,\n+}\n+\n+impl Target {\n+    pub fn kv_namespaces(&self) -> Vec<KvNamespace> {\n+        self.kv_namespaces.clone().unwrap_or_else(Vec::new)\n+    }\n+}\n+\n+#[derive(Clone, Debug, Deserialize, Serialize)]\n+pub struct Environment {\n+    pub account_id: Option<String>,\n+    #[serde(rename = \"kv-namespaces\")]\n+    pub kv_namespaces: Option<Vec<KvNamespace>>,\n+    pub name: Option<String>,\n     pub private: Option<bool>,\n-    pub webpack_config: Option<String>,\n-    pub account_id: String,\n     pub route: Option<String>,\n     pub routes: Option<HashMap<String, String>>,\n+    pub webpack_config: Option<String>,\n+    pub workers_dot_dev: Option<bool>,\n+    pub zone_id: Option<String>,\n+}\n+\n+#[derive(Clone, Debug, Deserialize, Serialize)]\n+pub struct Manifest {\n+    pub account_id: String,\n+    pub env: Option<HashMap<String, Environment>>,\n     #[serde(rename = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<KvNamespace>>,\n+    pub name: String,\n+    pub private: Option<bool>,\n+    #[serde(rename = \"type\")]\n+    pub project_type: ProjectType,\n+    pub route: Option<String>,\n+    pub routes: Option<HashMap<String, String>>,\n+    pub webpack_config: Option<String>,\n+    pub workers_dot_dev: Option<bool>,\n+    pub zone_id: Option<String>,\n }\n \n-impl Project {\n+impl Manifest {\n+    pub fn new(config_path: &Path) -> Result<Self, failure::Error> {\n+        let config = read_config(config_path)?;\n+\n+        // check for pre 1.1.0 KV namespace format\n+        let kv_namespaces: Result<Vec<config::Value>, config::ConfigError> =\n+            config.get(\"kv-namespaces\");\n+\n+        validate_kv_namespaces_config(kv_namespaces)?;\n+\n+        let manifest: Manifest = config.try_into()?;\n+\n+        check_for_duplicate_names(&manifest)?;\n+\n+        Ok(manifest)\n+    }\n+\n+    fn get_environment(\n+        &self,\n+        environment_name: Option<&str>,\n+    ) -> Result<Option<&Environment>, failure::Error> {\n+        // check for user-specified environment name\n+        if let Some(environment_name) = environment_name {\n+            if let Some(environment_table) = &self.env {\n+                if let Some(environment) = environment_table.get(environment_name) {\n+                    Ok(Some(environment))\n+                } else {\n+                    failure::bail!(format!(\n+                        \"{} Could not find environment with name {}\",\n+                        emoji::WARN,\n+                        environment_name\n+                    ))\n+                }\n+            } else {\n+                failure::bail!(format!(\n+                    \"{} There are no environments specified in your wrangler.toml\",\n+                    emoji::WARN\n+                ))\n+            }\n+        } else {\n+            Ok(None)\n+        }\n+    }\n+\n+    // TODO: when --release is deprecated, this will be much easier\n+    fn negotiate_zoneless(\n+        &self,\n+        environment: Option<&Environment>,\n+        release: bool,\n+    ) -> Result<(Option<String>, bool), failure::Error> {\n+        let use_dot_dev_failure =\n+            \"Please specify the workers_dot_dev boolean in the top level of your wrangler.toml.\";\n+        let use_dot_dev_warning =\n+            format!(\"{}\\n{} This command will fail in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\", use_dot_dev_failure, emoji::WARN);\n+        let wdd_failure = format!(\n+            \"{} Your environment should only include `workers_dot_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dot_dev`.\",\n+            emoji::WARN\n+        );\n+\n+        // TODO: deprecate --release, remove warnings and parsing\n+        // switch wrangler publish behavior to act the same at top level\n+        // and environments\n+        // brace yourself, this is hairy\n+        let workers_dot_dev = match environment {\n+            // top level configuration\n+            None => {\n+                if release {\n+                    match self.workers_dot_dev {\n+                        Some(_) => {\n+                            failure::bail!(format!(\"{} {}\", emoji::WARN, use_dot_dev_failure))\n+                        }\n+                        None => {\n+                            message::warn(&use_dot_dev_warning);\n+                            false // wrangler publish --release w/o workers_dot_dev is zoned deploy\n+                        }\n+                    }\n+                } else if let Some(wdd) = self.workers_dot_dev {\n+                    if wdd {\n+                        if let Some(route) = &self.route {\n+                            if !route.is_empty() {\n+                                failure::bail!(wdd_failure)\n+                            }\n+                        }\n+                    }\n+                    wdd\n+                } else {\n+                    message::warn(&use_dot_dev_warning);\n+                    true // wrangler publish w/o workers_dot_dev is zoneless deploy\n+                }\n+            }\n+\n+            // environment configuration\n+            Some(environment) => {\n+                if let Some(wdd) = environment.workers_dot_dev {\n+                    if wdd && environment.route.is_some() {\n+                        failure::bail!(wdd_failure)\n+                    }\n+                    wdd\n+                } else if let Some(wdd) = self.workers_dot_dev {\n+                    if wdd && environment.route.is_some() {\n+                        false // allow route to override workers_dot_dev = true if wdd is inherited\n+                    } else {\n+                        wdd // inherit from top level\n+                    }\n+                } else {\n+                    false // if absent -> false\n+                }\n+            }\n+        };\n+\n+        let route = if let Some(environment) = environment {\n+            if let Some(route) = &environment.route {\n+                if let Some(wdd) = environment.workers_dot_dev {\n+                    if wdd {\n+                        failure::bail!(wdd_failure);\n+                    }\n+                }\n+                Some(route.clone())\n+            } else {\n+                None\n+            }\n+        } else {\n+            self.route.clone()\n+        };\n+\n+        Ok((route, workers_dot_dev))\n+    }\n+\n+    fn check_private(&self, environment: Option<&Environment>) {\n+        let deprecate_private_warning = \"The `private` field is deprecated; please use \\\n+        `workers_dot_dev` to toggle between publishing to your workers.dev subdomain and your own domain.\";\n+\n+        // Check for the presence of the 'private' field in top-level config; if present, warn.\n+        if self.private.is_some() {\n+            message::warn(deprecate_private_warning);\n+        }\n+\n+        // Also check for presence of 'private' field in a provided environment; if present, warn\n+        if let Some(e) = environment {\n+            if e.private.is_some() {\n+                message::warn(deprecate_private_warning);\n+            }\n+        }\n+    }\n+\n+    pub fn get_target(\n+        &self,\n+        environment_name: Option<&str>,\n+        release: bool,\n+    ) -> Result<Target, failure::Error> {\n+        if release && self.workers_dot_dev.is_some() {\n+            failure::bail!(format!(\n+                \"{} The --release flag is not compatible with use of the workers_dot_dev field.\",\n+                emoji::WARN\n+            ))\n+        }\n+\n+        if release {\n+            message::warn(\"--release will be deprecated.\");\n+        }\n+\n+        let mut target = Target {\n+            project_type: self.project_type.clone(),     // MUST inherit\n+            account_id: self.account_id.clone(),         // MAY inherit\n+            webpack_config: self.webpack_config.clone(), // MAY inherit\n+            zone_id: self.zone_id.clone(),               // MAY inherit\n+            workers_dot_dev: true,                       // MAY inherit,\n+            // importantly, the top level name will be modified\n+            // to include the name of the environment\n+            name: self.name.clone(),                   // MAY inherit\n+            kv_namespaces: self.kv_namespaces.clone(), // MUST NOT inherit\n+            route: None,                               // MUST NOT inherit\n+            routes: self.routes.clone(),               // MUST NOT inherit\n+        };\n+\n+        let environment = self.get_environment(environment_name)?;\n+\n+        self.check_private(environment);\n+\n+        let (route, workers_dot_dev) = self.negotiate_zoneless(environment, release)?;\n+        target.route = route;\n+        target.workers_dot_dev = workers_dot_dev;\n+        if let Some(environment) = environment {\n+            target.name = if let Some(name) = &environment.name {\n+                name.clone()\n+            } else {\n+                match environment_name {\n+                    Some(environment_name) => format!(\"{}-{}\", self.name, environment_name),\n+                    None => failure::bail!(\"You must specify `name` in your wrangler.toml\"),\n+                }\n+            };\n+            if let Some(account_id) = &environment.account_id {\n+                target.account_id = account_id.clone();\n+            }\n+            if environment.routes.is_some() {\n+                target.routes = environment.routes.clone();\n+            }\n+            if environment.webpack_config.is_some() {\n+                target.webpack_config = environment.webpack_config.clone();\n+            }\n+            if environment.zone_id.is_some() {\n+                target.zone_id = environment.zone_id.clone();\n+            }\n+            // don't inherit kv namespaces because it is an anti-pattern to use the same namespaces across multiple environments\n+            target.kv_namespaces = environment.kv_namespaces.clone();\n+        }\n+\n+        Ok(target)\n+    }\n+\n     pub fn generate(\n         name: String,\n         project_type: ProjectType,\n         init: bool,\n-    ) -> Result<Project, failure::Error> {\n-        let project = Project {\n+    ) -> Result<Manifest, failure::Error> {\n+        let manifest = Manifest {\n+            account_id: String::new(),\n+            env: None,\n+            kv_namespaces: None,\n             name: name.clone(),\n+            private: None,\n             project_type: project_type.clone(),\n-            private: Some(false),\n-            zone_id: Some(String::new()),\n-            account_id: String::new(),\n             route: Some(String::new()),\n             routes: None,\n-            kv_namespaces: None,\n             webpack_config: None,\n+            workers_dot_dev: Some(true),\n+            zone_id: Some(String::new()),\n         };\n \n-        let toml = toml::to_string(&project)?;\n+        let toml = toml::to_string(&manifest)?;\n         let config_path = if init {\n             PathBuf::from(\"./\")\n         } else {\ndiff --git a/src/settings/project/mod.rs b/src/settings/project/mod.rs\n--- a/src/settings/project/mod.rs\n+++ b/src/settings/project/mod.rs\n@@ -59,34 +307,27 @@ impl Project {\n \n         info!(\"Writing a wrangler.toml file at {}\", config_file.display());\n         fs::write(&config_file, &toml)?;\n-        Ok(project)\n-    }\n-\n-    pub fn new() -> Result<Self, failure::Error> {\n-        let config_path = Path::new(\"./wrangler.toml\");\n-\n-        get_project_config(config_path)\n-    }\n-\n-    pub fn kv_namespaces(&self) -> Vec<KvNamespace> {\n-        self.kv_namespaces.clone().unwrap_or_else(Vec::new)\n+        Ok(manifest)\n     }\n }\n \n-fn get_project_config(config_path: &Path) -> Result<Project, failure::Error> {\n-    let mut s = Config::new();\n+fn read_config(config_path: &Path) -> Result<Config, failure::Error> {\n+    let mut config = Config::new();\n \n     let config_str = config_path\n         .to_str()\n         .expect(\"project config path should be a string\");\n-    s.merge(File::with_name(config_str))?;\n+    config.merge(File::with_name(config_str))?;\n \n     // Eg.. `CF_ACCOUNT_AUTH_KEY=farts` would set the `account_auth_key` key\n-    s.merge(Environment::with_prefix(\"CF\"))?;\n+    config.merge(config::Environment::with_prefix(\"CF\"))?;\n \n-    // check for pre 1.1.0 KV namespace format\n-    let kv_namespaces: Result<Vec<config::Value>, config::ConfigError> = s.get(\"kv-namespaces\");\n+    Ok(config)\n+}\n \n+fn validate_kv_namespaces_config(\n+    kv_namespaces: Result<Vec<config::Value>, config::ConfigError>,\n+) -> Result<(), failure::Error> {\n     if let Ok(values) = kv_namespaces {\n         let old_format = values.iter().any(|val| val.clone().into_str().is_ok());\n \n",
        "test_patch": "diff --git a/src/commands/publish/preview/upload.rs b/src/commands/publish/preview/upload.rs\n--- a/src/commands/publish/preview/upload.rs\n+++ b/src/commands/publish/preview/upload.rs\n@@ -126,22 +126,22 @@ fn authenticated_upload(client: &Client, project: &Project) -> Result<Preview, f\n     Ok(Preview::from(response.result))\n }\n \n-fn unauthenticated_upload(client: &Client, project: &Project) -> Result<Preview, failure::Error> {\n+fn unauthenticated_upload(client: &Client, target: &Target) -> Result<Preview, failure::Error> {\n     let create_address = \"https://cloudflareworkers.com/script\";\n     log::info!(\"address: {}\", create_address);\n \n     // KV namespaces are not supported by the preview service unless you authenticate\n     // so we omit them and provide the user with a little guidance. We don't error out, though,\n     // because there are valid workarounds for this for testing purposes.\n-    let script_upload_form = if project.kv_namespaces.is_some() {\n+    let script_upload_form = if target.kv_namespaces.is_some() {\n         message::warn(\n             \"KV Namespaces are not supported in preview without setting API credentials and account_id\",\n         );\n-        let mut project = project.clone();\n-        project.kv_namespaces = None;\n-        publish::build_script_upload_form(&project)?\n+        let mut target = target.clone();\n+        target.kv_namespaces = None;\n+        publish::build_script_upload_form(&target)?\n     } else {\n-        publish::build_script_upload_form(&project)?\n+        publish::build_script_upload_form(&target)?\n     };\n \n     let mut res = client\ndiff --git a/src/settings/project/mod.rs b/src/settings/project/mod.rs\n--- a/src/settings/project/mod.rs\n+++ b/src/settings/project/mod.rs\n@@ -109,20 +350,43 @@ id = \"0f2ac74b498b48028cb68387c421e279\"\n             failure::bail!(msg)\n         }\n     }\n+    Ok(())\n+}\n \n-    let project: Result<Project, config::ConfigError> = s.try_into();\n-    match project {\n-        Ok(s) => Ok(s),\n-        Err(e) => {\n-            let msg = format!(\n-                \"{} Your project config has an error, check your `wrangler.toml`: {}\",\n-                emoji::WARN,\n-                e\n-            );\n-\n-            failure::bail!(msg)\n+fn check_for_duplicate_names(manifest: &Manifest) -> Result<(), failure::Error> {\n+    let mut names: HashSet<String> = HashSet::new();\n+    let mut duplicate_names: HashSet<String> = HashSet::new();\n+    names.insert(manifest.name.to_string());\n+    if let Some(environments) = &manifest.env {\n+        for (_, environment) in environments.iter() {\n+            if let Some(name) = &environment.name {\n+                if names.contains(name) && !duplicate_names.contains(name) {\n+                    duplicate_names.insert(name.to_string());\n+                } else {\n+                    names.insert(name.to_string());\n+                }\n+            }\n         }\n     }\n+    let duplicate_name_string = duplicate_names\n+        .clone()\n+        .into_iter()\n+        .collect::<Vec<String>>()\n+        .join(\", \");\n+    let duplicate_message = match duplicate_names.len() {\n+        1 => Some(\"this name is duplicated\".to_string()),\n+        n if n >= 2 => Some(\"these names are duplicated\".to_string()),\n+        _ => None,\n+    };\n+    if let Some(message) = duplicate_message {\n+        failure::bail!(format!(\n+            \"{} Each name in your `wrangler.toml` must be unique, {}: {}\",\n+            emoji::WARN,\n+            message,\n+            duplicate_name_string\n+        ))\n+    }\n+    Ok(())\n }\n \n #[cfg(test)]\ndiff --git a/src/settings/project/tests/mod.rs b/src/settings/project/tests/mod.rs\n--- a/src/settings/project/tests/mod.rs\n+++ b/src/settings/project/tests/mod.rs\n@@ -7,16 +7,87 @@ use std::path::{Path, PathBuf};\n fn it_builds_from_config() {\n     let toml_path = toml_fixture_path(\"default\");\n \n-    let project = get_project_config(&toml_path).unwrap();\n+    let manifest = Manifest::new(&toml_path).unwrap();\n \n-    assert!(project.kv_namespaces.is_none());\n+    let target = manifest.get_target(None, false).unwrap();\n+    assert!(target.kv_namespaces.is_none());\n }\n \n #[test]\n-fn it_builds_from_config_with_kv() {\n+fn it_builds_from_environments_config() {\n+    let toml_path = toml_fixture_path(\"environments\");\n+    let manifest = Manifest::new(&toml_path).unwrap();\n+\n+    let target = manifest.get_target(None, false).unwrap();\n+    assert!(target.kv_namespaces.is_none());\n+\n+    let target = manifest.get_target(Some(\"production\"), false).unwrap();\n+    assert!(target.kv_namespaces.is_none());\n+}\n+\n+#[test]\n+fn it_builds_from_environments_config_with_kv() {\n     let toml_path = toml_fixture_path(\"kv_namespaces\");\n \n-    let project = get_project_config(&toml_path).unwrap();\n+    let manifest = Manifest::new(&toml_path).unwrap();\n+\n+    let target = manifest.get_target(None, false).unwrap();\n+    assert!(target.kv_namespaces.is_none());\n+\n+    let target = manifest.get_target(Some(\"production\"), false).unwrap();\n+    let kv_1 = KvNamespace {\n+        id: \"somecrazylongidentifierstring\".to_string(),\n+        binding: \"prodKV-1\".to_string(),\n+    };\n+    let kv_2 = KvNamespace {\n+        id: \"anotherwaytoolongidstring\".to_string(),\n+        binding: \"prodKV-2\".to_string(),\n+    };\n+\n+    match target.kv_namespaces {\n+        Some(kv_namespaces) => {\n+            assert!(kv_namespaces.len() == 2);\n+            assert!(kv_namespaces.contains(&kv_1));\n+            assert!(kv_namespaces.contains(&kv_2));\n+        }\n+        None => assert!(false),\n+    }\n+\n+    let target = manifest.get_target(Some(\"staging\"), false).unwrap();\n+    let kv_1 = KvNamespace {\n+        id: \"somecrazylongidentifierstring\".to_string(),\n+        binding: \"stagingKV-1\".to_string(),\n+    };\n+    let kv_2 = KvNamespace {\n+        id: \"anotherwaytoolongidstring\".to_string(),\n+        binding: \"stagingKV-2\".to_string(),\n+    };\n+    match target.kv_namespaces {\n+        Some(kv_namespaces) => {\n+            assert!(kv_namespaces.len() == 2);\n+            assert!(kv_namespaces.contains(&kv_1));\n+            assert!(kv_namespaces.contains(&kv_2));\n+        }\n+        None => assert!(false),\n+    }\n+}\n+\n+#[test]\n+fn it_builds_from_legacy_config() {\n+    let toml_path = legacy_toml_fixture_path(\"default\");\n+\n+    let manifest = Manifest::new(&toml_path).unwrap();\n+    let target = manifest.get_target(None, false).unwrap();\n+\n+    assert!(target.kv_namespaces.is_none());\n+}\n+\n+#[test]\n+fn it_builds_from_legacy_config_with_kv() {\n+    let toml_path = legacy_toml_fixture_path(\"kv_namespaces\");\n+\n+    let manifest = Manifest::new(&toml_path).unwrap();\n+    let target = manifest.get_target(None, false).unwrap();\n \n     let kv_1 = KvNamespace {\n         id: \"somecrazylongidentifierstring\".to_string(),\ndiff --git a/src/settings/project/tests/mod.rs b/src/settings/project/tests/mod.rs\n--- a/src/settings/project/tests/mod.rs\n+++ b/src/settings/project/tests/mod.rs\n@@ -27,7 +98,7 @@ fn it_builds_from_config_with_kv() {\n         binding: \"stagingKV\".to_string(),\n     };\n \n-    match project.kv_namespaces {\n+    match target.kv_namespaces {\n         Some(kv_namespaces) => {\n             assert!(kv_namespaces.len() == 2);\n             assert!(kv_namespaces.contains(&kv_1));\ndiff --git a/src/settings/project/tests/mod.rs b/src/settings/project/tests/mod.rs\n--- a/src/settings/project/tests/mod.rs\n+++ b/src/settings/project/tests/mod.rs\n@@ -37,15 +108,21 @@ fn it_builds_from_config_with_kv() {\n     }\n }\n \n-fn toml_fixture_path(fixture: &str) -> PathBuf {\n+fn base_fixture_path() -> PathBuf {\n     let current_dir = env::current_dir().unwrap();\n \n-    // TODO: This is kind of stupid but idk worth it for now?\n     Path::new(&current_dir)\n         .join(\"src\")\n         .join(\"settings\")\n         .join(\"project\")\n         .join(\"tests\")\n         .join(\"tomls\")\n-        .join(fixture)\n+}\n+\n+fn legacy_toml_fixture_path(fixture: &str) -> PathBuf {\n+    base_fixture_path().join(\"legacy\").join(fixture)\n+}\n+\n+fn toml_fixture_path(fixture: &str) -> PathBuf {\n+    base_fixture_path().join(fixture)\n }\ndiff --git a/src/settings/project/tests/tomls/default.toml b/src/settings/project/tests/tomls/default.toml\n--- a/src/settings/project/tests/tomls/default.toml\n+++ b/src/settings/project/tests/tomls/default.toml\n@@ -1,5 +1,5 @@\n-name = \"worker\"\n type = \"webpack\"\n+name = \"worker\"\n zone_id = \"\"\n private = false\n account_id = \"\"\ndiff --git /dev/null b/src/settings/project/tests/tomls/environments.toml\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/project/tests/tomls/environments.toml\n@@ -0,0 +1,13 @@\n+type = \"webpack\"\n+name = \"worker\"\n+zone_id = \"\"\n+account_id = \"\"\n+route = \"\"\n+\n+[env.production]\n+type = \"webpack\"\n+name = \"staging-worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\n\\ No newline at end of file\ndiff --git /dev/null b/src/settings/project/tests/tomls/invalid_environments.toml\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/project/tests/tomls/invalid_environments.toml\n@@ -0,0 +1,36 @@\n+type = \"webpack\"\n+name = \"worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\n+\n+[env.name_conflict]\n+name = \"worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\n+\n+[env.has_private]\n+name = \"worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\n+\n+[env.has_type]\n+type = \"webpack\"\n+name = \"worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\n+\n+[env.route_and_dot_dev]\n+name = \"worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"example.com/*\"\n+workersdotdev = true\n\\ No newline at end of file\ndiff --git a/src/settings/project/tests/tomls/kv_namespaces.toml b/src/settings/project/tests/tomls/kv_namespaces.toml\n--- a/src/settings/project/tests/tomls/kv_namespaces.toml\n+++ b/src/settings/project/tests/tomls/kv_namespaces.toml\n@@ -1,14 +1,33 @@\n-name = \"worker\"\n type = \"webpack\"\n+name = \"worker\"\n+zone_id = \"\"\n+account_id = \"\"\n+route = \"\"\n+\n+[env.production]\n+name = \"production-worker\"\n+zone_id = \"\"\n+account_id = \"\"\n+route = \"\"\n+\n+[[env.production.kv-namespaces]]\n+id = \"somecrazylongidentifierstring\"\n+binding = \"prodKV-1\"\n+\n+[[env.production.kv-namespaces]]\n+id = \"anotherwaytoolongidstring\"\n+binding = \"prodKV-2\"\n+\n+[env.staging]\n+name = \"staging-worker\"\n zone_id = \"\"\n-private = false\n account_id = \"\"\n route = \"\"\n \n-[[kv-namespaces]]\n+[[env.staging.kv-namespaces]]\n id = \"somecrazylongidentifierstring\"\n-binding = \"prodKV\"\n+binding = \"stagingKV-1\"\n \n-[[kv-namespaces]]\n+[[env.staging.kv-namespaces]]\n id = \"anotherwaytoolongidstring\"\n-binding = \"stagingKV\"\n+binding = \"stagingKV-2\"\n\\ No newline at end of file\ndiff --git /dev/null b/src/settings/project/tests/tomls/legacy/default.toml\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/project/tests/tomls/legacy/default.toml\n@@ -0,0 +1,6 @@\n+type = \"webpack\"\n+name = \"worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\ndiff --git /dev/null b/src/settings/project/tests/tomls/legacy/kv_namespaces.toml\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/project/tests/tomls/legacy/kv_namespaces.toml\n@@ -0,0 +1,14 @@\n+name = \"worker\"\n+type = \"webpack\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\n+\n+[[kv-namespaces]]\n+id = \"somecrazylongidentifierstring\"\n+binding = \"prodKV\"\n+\n+[[kv-namespaces]]\n+id = \"anotherwaytoolongidstring\"\n+binding = \"stagingKV\"\ndiff --git /dev/null b/src/settings/project/tests/tomls/no_default.toml\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/project/tests/tomls/no_default.toml\n@@ -0,0 +1,15 @@\n+[env.production]\n+type = \"webpack\"\n+name = \"staging-worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\n+\n+[env.staging]\n+type = \"webpack\"\n+name = \"staging-worker\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\n\\ No newline at end of file\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -10,7 +10,7 @@ use std::str;\n \n const BUNDLE_OUT: &str = \"./worker\";\n \n-macro_rules! settings {\n+macro_rules! single_env_settings {\n     ( $f:expr, $x:expr ) => {\n         let file_path = fixture_path($f).join(\"wrangler.toml\");\n         let mut file = File::create(file_path).unwrap();\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -31,8 +31,7 @@ macro_rules! settings {\n fn it_builds_with_webpack_single_js() {\n     let fixture = \"webpack_simple_js\";\n     create_temporary_copy(fixture);\n-\n-    settings! {fixture, r#\"\n+    single_env_settings! {fixture, r#\"\n         type = \"Webpack\"\n     \"#};\n \ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -46,7 +45,7 @@ fn it_builds_with_webpack_function_config_js() {\n     let fixture = \"webpack_function_config_js\";\n     create_temporary_copy(fixture);\n \n-    settings! {fixture, r#\"\n+    single_env_settings! {fixture, r#\"\n         type = \"Webpack\"\n     \"#};\n \ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -60,7 +59,7 @@ fn it_builds_with_webpack_promise_config_js() {\n     let fixture = \"webpack_promise_config_js\";\n     create_temporary_copy(fixture);\n \n-    settings! {fixture, r#\"\n+    single_env_settings! {fixture, r#\"\n         type = \"Webpack\"\n     \"#};\n \ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -74,7 +73,7 @@ fn it_builds_with_webpack_function_promise_config_js() {\n     let fixture = \"webpack_function_promise_config_js\";\n     create_temporary_copy(fixture);\n \n-    settings! {fixture, r#\"\n+    single_env_settings! {fixture, r#\"\n         type = \"Webpack\"\n     \"#};\n \ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -88,7 +87,7 @@ fn it_builds_with_webpack_single_js_use_package_main() {\n     let fixture = \"webpack_single_js_use_package_main\";\n     create_temporary_copy(fixture);\n \n-    settings! {fixture, r#\"\n+    single_env_settings! {fixture, r#\"\n         type = \"Webpack\"\n     \"#};\n \ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -102,7 +101,7 @@ fn it_builds_with_webpack_specify_configs() {\n     let fixture = \"webpack_specify_config\";\n     create_temporary_copy(fixture);\n \n-    settings! {fixture, r#\"\n+    single_env_settings! {fixture, r#\"\n         type = \"Webpack\"\n         webpack_config = \"webpack.worker.js\"\n     \"#};\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -117,7 +116,7 @@ fn it_builds_with_webpack_single_js_missing_package_main() {\n     let fixture = \"webpack_single_js_missing_package_main\";\n     create_temporary_copy(fixture);\n \n-    settings! {fixture, r#\"\n+    single_env_settings! {fixture, r#\"\n         type = \"Webpack\"\n     \"#};\n \ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -133,7 +132,7 @@ fn it_fails_with_multiple_webpack_configs() {\n     let fixture = \"webpack_multiple_config\";\n     create_temporary_copy(fixture);\n \n-    settings! {fixture, r#\"\n+    single_env_settings! {fixture, r#\"\n         type = \"Webpack\"\n     \"#};\n \ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -146,7 +145,7 @@ fn it_fails_with_multiple_specify_webpack_configs() {\n     let fixture = \"webpack_multiple_specify_config\";\n     create_temporary_copy(fixture);\n \n-    settings! {fixture, r#\"\n+    single_env_settings! {fixture, r#\"\n         type = \"Webpack\"\n         webpack_config = \"webpack.worker.js\"\n     \"#};\ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -160,7 +159,7 @@ fn it_builds_with_webpack_wast() {\n     let fixture = \"webpack_wast\";\n     create_temporary_copy(fixture);\n \n-    settings! {fixture, r#\"\n+    single_env_settings! {fixture, r#\"\n         type = \"Webpack\"\n     \"#};\n \ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -183,7 +182,7 @@ fn it_fails_with_webpack_target_web() {\n           target: \"node\",\n         }\"#,\n     );\n-    settings! {fixture, r#\"\n+    single_env_settings! {fixture, r#\"\n         type = \"webpack\"\n     \"#};\n \ndiff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -206,7 +205,7 @@ fn it_builds_with_webpack_target_webworker() {\n           target: \"webworker\",\n         }\"#,\n     );\n-    settings! {fixture, r#\"\n+    single_env_settings! {fixture, r#\"\n         type = \"webpack\"\n     \"#};\n \n",
        "problem_statement": "Disallow duplicate names in environments\nWe don't want people accidentally overwriting production workers when they think they're deploying to staging\n",
        "hints_text": "",
        "created_at": "2019-08-02T21:13:52Z",
        "version": "1.2"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 365,
        "instance_id": "cloudflare__wrangler-legacy-365",
        "issue_numbers": [
            "364"
        ],
        "base_commit": "40c16e93e5b7d859bc54332dc385bf8d60d3835c",
        "patch": "diff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -1,6 +1,7 @@\n use std::env;\n use std::path::{Path, PathBuf};\n \n+use log::info;\n use serde::{Deserialize, Serialize};\n \n use crate::terminal::emoji;\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -23,7 +24,7 @@ fn get_global_config() -> Result<GlobalUser, failure::Error> {\n \n     let config_path = get_global_config_dir()\n         .expect(\"could not find global config directory\")\n-        .join(\"default\");\n+        .join(\"default.toml\");\n     let config_str = config_path\n         .to_str()\n         .expect(\"global config path should be a string\");\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -31,6 +32,10 @@ fn get_global_config() -> Result<GlobalUser, failure::Error> {\n     // Skip reading global config if non existent\n     // because envs might be provided\n     if config_path.exists() {\n+        info!(\n+            \"Config path exists. Reading from config file, {}\",\n+            config_str\n+        );\n         s.merge(File::with_name(config_str))?;\n     }\n \ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -54,12 +59,15 @@ fn get_global_config() -> Result<GlobalUser, failure::Error> {\n \n pub fn get_global_config_dir() -> Result<PathBuf, failure::Error> {\n     let home_dir = if let Ok(value) = env::var(\"WRANGLER_HOME\") {\n+        info!(\"Using WRANGLER_HOME: {}\", value);\n         Path::new(&value).to_path_buf()\n     } else {\n+        info!(\"No WRANGLER_HOME detected\");\n         dirs::home_dir()\n             .expect(\"oops no home dir\")\n             .join(\".wrangler\")\n     };\n-\n-    Ok(home_dir.join(\"config\"))\n+    let global_config_dir = home_dir.join(\"config\");\n+    info!(\"Using global config dir: {:?}\", global_config_dir);\n+    Ok(global_config_dir)\n }\n",
        "test_patch": "diff --git a/tests/config.rs b/tests/config.rs\n--- a/tests/config.rs\n+++ b/tests/config.rs\n@@ -1,7 +1,6 @@\n use assert_cmd::prelude::*;\n use std::env;\n use std::fs;\n-use std::fs::File;\n use std::io::prelude::*;\n use std::process::{Child, Command, Stdio};\n \ndiff --git a/tests/config.rs b/tests/config.rs\n--- a/tests/config.rs\n+++ b/tests/config.rs\n@@ -13,15 +12,15 @@ fn it_generates_the_config() {\n     let cmd = config_with_wrangler_home(fake_home_dir.to_str().unwrap());\n     let mut stdin = cmd.stdin.unwrap();\n \n-    write!(stdin, \"a\\n\").unwrap(); // email\n-    write!(stdin, \"b\\n\").unwrap(); // api_key\n+    write!(stdin, \"email@example.com\\n\").unwrap();\n+    write!(stdin, \"apikeythisissecretandlong\\n\").unwrap();\n \n     let mut buffer = \"\".to_string();\n-    let mut stdout = cmd.stdout.unwrap();\n+    let mut stdout = cmd.stdout.expect(\"stdout\");\n     stdout\n         .read_to_string(&mut buffer)\n         .expect(\"could not read output\");\n-    assert!(buffer.contains(\"Enter email: \\nEnter api key: \\n Successfully configured.\"));\n+    assert!(buffer.contains(\"Successfully configured.\"));\n \n     let config_file = fake_home_dir.join(\"config\").join(\"default.toml\");\n \ndiff --git a/tests/config.rs b/tests/config.rs\n--- a/tests/config.rs\n+++ b/tests/config.rs\n@@ -29,13 +28,13 @@ fn it_generates_the_config() {\n         .expect(&format!(\"could not read config at {:?}\", &config_file));\n     assert_eq!(\n         config,\n-        r#\"email = \"a\"\n-api_key = \"b\"\n+        r#\"email = \"email@example.com\"\n+api_key = \"apikeythisissecretandlong\"\n \"#\n     );\n \n-    // check dir permissions (but not on windows)\n-    if !cfg!(target_os = \"windows\") {\n+    // check dir permissions (linux only)\n+    if cfg!(target_os = \"linux\") {\n         let mut command = Command::new(\"stat\");\n         command.arg(\"-c\");\n         command.arg(\"%a %n\");\n",
        "problem_statement": "wrangler config test fails on master locally\n\n",
        "hints_text": "also does not clean up after itself:\r\n![Screen Shot 2019-07-30 at 10 05 47 AM](https://user-images.githubusercontent.com/1163554/62141076-9fb67080-b2b1-11e9-8d4e-cfe80407503b.png)\r\n",
        "created_at": "2019-07-30T15:08:05Z",
        "version": "1.0"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 334,
        "instance_id": "cloudflare__wrangler-legacy-334",
        "issue_numbers": [
            "273"
        ],
        "base_commit": "0e0e4c283b671d30d9be66266064f7f3bf615738",
        "patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -25,9 +25,9 @@ cargo install wrangler\n \n ## \ud83c\udf99\ufe0f Commands\n \n-  - ### \ud83d\udc6f `generate` \n+  - ### \ud83d\udc6f `generate`\n     Scaffold a project, including boilerplate for a Rust library and a Cloudflare Worker.\n-    You can pass a name and template to this command optionally. \n+    You can pass a name and template to this command optionally.\n \n     ```\n     wrangler generate <name> <template> --type=[\"webpack\", \"javascript\", \"rust\"]\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -61,7 +61,7 @@ cargo install wrangler\n     By default, `publish` will make your worker available at `<project-name>.<subdomain>.workers.dev`.\n     To disable publishing to your workers.dev subdomain, set `private = true` in your `wrangler.toml`.\n     This setting prevents the `publish` command from making your worker publicly available. To\n-    explicitly enable deployment to `<project-name>.<subdomain>.workers.dev`, you can set `private = false`. \n+    explicitly enable deployment to `<project-name>.<subdomain>.workers.dev`, you can set `private = false`.\n \n     To use this command, you'll need to have the following keys in your `wrangler.toml`:\n \ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -143,6 +143,18 @@ There are two types of configuration that `wrangler` uses: global user and per p\n         This key is optional if you are using a workers.dev subdomain and is only required for `publish --release`.\n     - `webpack_config`: This is the path to the webpack configuration file for your worker. This is optional and\n         defaults to `webpack.config.js`\n+    - `[[kv-namespaces]]`: These specify any [Workers KV](https://workers.cloudflare.com/docs/reference/storage/) namespaces you want to access from\n+        inside your Worker. Each namespace you include should have an entry in your wrangler.toml that includes:\n+\n+        - `binding`: the name you want to bind to in your script\n+        - `id`: the namespace_id assigned to your kv namespace upon creation.\n+            e.g. (per namespace):\n+        ``` toml\n+        [[kv-namespaces]]\n+        binding = \"foo\"\n+        id = \"0f2ac74b498b48028cb68387c421e279\"\n+        ```\n+        Note: Creating your KV Namespaces should be handled either via the [api](https://workers.cloudflare.com/docs/reference/storage/writing-data/) or via your Cloudflare dashboard.\n \n ## \u2693 Installation\n \ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -10,8 +10,6 @@ use upload_form::build_script_upload_form;\n \n use log::info;\n \n-use std::collections::HashMap;\n-\n use crate::commands;\n use crate::commands::subdomain::Subdomain;\n use crate::http;\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -24,7 +22,6 @@ pub fn publish(user: &GlobalUser, project: &Project, release: bool) -> Result<()\n \n     validate_project(project, release)?;\n     commands::build(&project)?;\n-    create_kv_namespaces(user, &project)?;\n     publish_script(&user, &project, release)?;\n     if release {\n         info!(\"release mode detected, making a route...\");\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -41,43 +38,6 @@ pub fn publish(user: &GlobalUser, project: &Project, release: bool) -> Result<()\n     Ok(())\n }\n \n-pub fn create_kv_namespaces(user: &GlobalUser, project: &Project) -> Result<(), failure::Error> {\n-    let kv_addr = format!(\n-        \"https://api.cloudflare.com/client/v4/accounts/{}/storage/kv/namespaces\",\n-        project.account_id,\n-    );\n-\n-    let client = http::auth_client(user);\n-\n-    if let Some(namespaces) = &project.kv_namespaces {\n-        for namespace in namespaces {\n-            info!(\"Attempting to create namespace '{}'\", namespace);\n-\n-            let mut map = HashMap::new();\n-            map.insert(\"title\", namespace);\n-\n-            let request = client.post(&kv_addr).json(&map).send();\n-\n-            if let Err(error) = request {\n-                // A 400 is returned if the account already owns a namespace with this title.\n-                //\n-                // https://api.cloudflare.com/#workers-kv-namespace-create-a-namespace\n-                match error.status() {\n-                    Some(code) if code == 400 => {\n-                        info!(\"Namespace '{}' already exists, continuing.\", namespace)\n-                    }\n-                    _ => {\n-                        info!(\"Error when creating namespace '{}'\", namespace);\n-                        failure::bail!(\"\u26d4 Something went wrong! Error: {}\", error)\n-                    }\n-                }\n-            }\n-            info!(\"Namespace '{}' exists now\", namespace)\n-        }\n-    }\n-    Ok(())\n-}\n-\n fn publish_script(\n     user: &GlobalUser,\n     project: &Project,\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -166,6 +126,21 @@ fn validate_project(project: &Project, release: bool) -> Result<(), failure::Err\n         missing_fields.push(\"name\")\n     };\n \n+    match &project.kv_namespaces {\n+        Some(kv_namespaces) => {\n+            for kv in kv_namespaces {\n+                if kv.binding.is_empty() {\n+                    missing_fields.push(\"kv-namespace binding\")\n+                }\n+\n+                if kv.id.is_empty() {\n+                    missing_fields.push(\"kv-namespace id\")\n+                }\n+            }\n+        }\n+        None => {}\n+    }\n+\n     let destination = if release {\n         //check required fields for release\n         if project\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -10,6 +10,7 @@ use std::path::Path;\n use crate::commands::build::wranglerjs;\n use crate::settings::binding;\n use crate::settings::metadata::Metadata;\n+use crate::settings::project::kv_namespace;\n use crate::settings::project::{Project, ProjectType};\n \n use project_assets::ProjectAssets;\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -19,6 +20,7 @@ use super::{krate, Package};\n \n pub fn build_script_upload_form(project: &Project) -> Result<Form, failure::Error> {\n     let project_type = &project.project_type;\n+    let kv_namespaces = project.kv_namespaces();\n     match project_type {\n         ProjectType::Rust => {\n             info!(\"Rust project detected. Publishing...\");\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -33,7 +35,7 @@ pub fn build_script_upload_form(project: &Project) -> Result<Form, failure::Erro\n \n             let script_path = \"./worker/generated/script.js\".to_string();\n \n-            let assets = ProjectAssets::new(script_path, vec![wasm_module])?;\n+            let assets = ProjectAssets::new(script_path, vec![wasm_module], kv_namespaces)?;\n \n             build_form(&assets)\n         }\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -43,7 +45,7 @@ pub fn build_script_upload_form(project: &Project) -> Result<Form, failure::Erro\n \n             let script_path = package.main()?;\n \n-            let assets = ProjectAssets::new(script_path, Vec::new())?;\n+            let assets = ProjectAssets::new(script_path, Vec::new(), kv_namespaces)?;\n \n             build_form(&assets)\n         }\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -63,7 +65,7 @@ pub fn build_script_upload_form(project: &Project) -> Result<Form, failure::Erro\n                 wasm_modules.push(wasm_module)\n             }\n \n-            let assets = ProjectAssets::new(script_path, wasm_modules)?;\n+            let assets = ProjectAssets::new(script_path, wasm_modules, kv_namespaces)?;\n \n             build_form(&assets)\n         }\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -78,6 +80,8 @@ fn build_form(assets: &ProjectAssets) -> Result<Form, failure::Error> {\n     form = add_metadata(form, assets)?;\n     form = add_files(form, assets)?;\n \n+    info!(\"{:?}\", &form);\n+\n     Ok(form)\n }\n \ndiff --git a/src/commands/publish/upload_form/project_assets.rs b/src/commands/publish/upload_form/project_assets.rs\n--- a/src/commands/publish/upload_form/project_assets.rs\n+++ b/src/commands/publish/upload_form/project_assets.rs\n@@ -2,6 +2,7 @@ use failure::format_err;\n \n use super::binding::Binding;\n use super::filename_from_path;\n+use super::kv_namespace::KvNamespace;\n use super::wasm_module::WasmModule;\n \n #[derive(Debug)]\ndiff --git a/src/commands/publish/upload_form/project_assets.rs b/src/commands/publish/upload_form/project_assets.rs\n--- a/src/commands/publish/upload_form/project_assets.rs\n+++ b/src/commands/publish/upload_form/project_assets.rs\n@@ -9,10 +10,15 @@ pub struct ProjectAssets {\n     script_name: String,\n     script_path: String,\n     pub wasm_modules: Vec<WasmModule>,\n+    pub kv_namespaces: Vec<KvNamespace>,\n }\n \n impl ProjectAssets {\n-    pub fn new(script_path: String, wasm_modules: Vec<WasmModule>) -> Result<Self, failure::Error> {\n+    pub fn new(\n+        script_path: String,\n+        wasm_modules: Vec<WasmModule>,\n+        kv_namespaces: Vec<KvNamespace>,\n+    ) -> Result<Self, failure::Error> {\n         let script_name = filename_from_path(&script_path)\n             .ok_or(format_err!(\"filename should not be empty: {}\", script_path))?;\n \ndiff --git a/src/commands/publish/upload_form/project_assets.rs b/src/commands/publish/upload_form/project_assets.rs\n--- a/src/commands/publish/upload_form/project_assets.rs\n+++ b/src/commands/publish/upload_form/project_assets.rs\n@@ -20,6 +26,7 @@ impl ProjectAssets {\n             script_name,\n             script_path,\n             wasm_modules,\n+            kv_namespaces,\n         })\n     }\n \ndiff --git a/src/commands/publish/upload_form/project_assets.rs b/src/commands/publish/upload_form/project_assets.rs\n--- a/src/commands/publish/upload_form/project_assets.rs\n+++ b/src/commands/publish/upload_form/project_assets.rs\n@@ -27,8 +34,12 @@ impl ProjectAssets {\n         let mut bindings = Vec::new();\n \n         for wm in &self.wasm_modules {\n-            let wasm = wm.binding();\n-            bindings.push(wasm);\n+            let binding = wm.binding();\n+            bindings.push(binding);\n+        }\n+        for kv in &self.kv_namespaces {\n+            let binding = kv.binding();\n+            bindings.push(binding);\n         }\n \n         bindings\ndiff --git a/src/settings/binding.rs b/src/settings/binding.rs\n--- a/src/settings/binding.rs\n+++ b/src/settings/binding.rs\n@@ -3,15 +3,21 @@ use serde::Serialize;\n #[derive(Serialize, Debug)]\n #[serde(tag = \"type\")]\n pub enum Binding {\n-    #[allow(non_camel_case_types)]\n-    wasm_module { name: String, part: String },\n+    #[serde(rename = \"wasm_module\")]\n+    WasmModule { name: String, part: String },\n+    #[serde(rename = \"kv_namespace\")]\n+    KvNamespace { name: String, namespace_id: String },\n }\n \n impl Binding {\n     pub fn new_wasm_module(name: &str, part: &str) -> Binding {\n-        Binding::wasm_module {\n+        Binding::WasmModule {\n             name: name.to_string(),\n             part: part.to_string(),\n         }\n     }\n+\n+    pub fn new_kv_namespace(name: String, namespace_id: String) -> Binding {\n+        Binding::KvNamespace { name, namespace_id }\n+    }\n }\ndiff --git /dev/null b/src/settings/project/kv_namespace.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/project/kv_namespace.rs\n@@ -0,0 +1,22 @@\n+use crate::settings::binding::Binding;\n+use std::fmt;\n+\n+use serde::{Deserialize, Serialize};\n+\n+#[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]\n+pub struct KvNamespace {\n+    pub id: String,\n+    pub binding: String,\n+}\n+\n+impl fmt::Display for KvNamespace {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"id: {}, binding: {}\", self.id, self.binding)\n+    }\n+}\n+\n+impl KvNamespace {\n+    pub fn binding(&self) -> Binding {\n+        Binding::new_kv_namespace(self.binding.clone(), self.id.clone())\n+    }\n+}\ndiff --git a/src/settings/project.rs b/src/settings/project/mod.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project/mod.rs\n@@ -1,10 +1,14 @@\n+pub mod kv_namespace;\n+mod project_type;\n+\n+pub use kv_namespace::KvNamespace;\n+pub use project_type::ProjectType;\n+\n use crate::terminal::emoji;\n \n use std::collections::HashMap;\n-use std::fmt;\n use std::fs;\n use std::path::{Path, PathBuf};\n-use std::str::FromStr;\n \n use log::info;\n \ndiff --git a/src/settings/project.rs b/src/settings/project/mod.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project/mod.rs\n@@ -23,45 +27,7 @@ pub struct Project {\n     pub route: Option<String>,\n     pub routes: Option<HashMap<String, String>>,\n     #[serde(rename = \"kv-namespaces\")]\n-    pub kv_namespaces: Option<Vec<String>>,\n-}\n-\n-#[derive(Clone, Debug, Deserialize, Serialize)]\n-#[serde(rename_all = \"lowercase\")]\n-pub enum ProjectType {\n-    JavaScript,\n-    Rust,\n-    Webpack,\n-}\n-\n-impl Default for ProjectType {\n-    fn default() -> Self {\n-        ProjectType::Webpack\n-    }\n-}\n-\n-impl fmt::Display for ProjectType {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let printable = match *self {\n-            ProjectType::JavaScript => \"js\",\n-            ProjectType::Rust => \"rust\",\n-            ProjectType::Webpack => \"webpack\",\n-        };\n-        write!(f, \"{}\", printable)\n-    }\n-}\n-\n-impl FromStr for ProjectType {\n-    type Err = failure::Error;\n-\n-    fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        match s {\n-            \"javascript\" => Ok(ProjectType::JavaScript),\n-            \"rust\" => Ok(ProjectType::Rust),\n-            \"webpack\" => Ok(ProjectType::Webpack),\n-            _ => failure::bail!(\"{} is not a valid wrangler project type!\", s),\n-        }\n-    }\n+    pub kv_namespaces: Option<Vec<KvNamespace>>,\n }\n \n impl Project {\ndiff --git a/src/settings/project.rs b/src/settings/project/mod.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project/mod.rs\n@@ -96,14 +62,19 @@ impl Project {\n     }\n \n     pub fn new() -> Result<Self, failure::Error> {\n-        get_project_config()\n+        let config_path = Path::new(\"./wrangler.toml\");\n+\n+        get_project_config(config_path)\n+    }\n+\n+    pub fn kv_namespaces(&self) -> Vec<KvNamespace> {\n+        self.kv_namespaces.clone().unwrap_or_else(Vec::new)\n     }\n }\n \n-pub fn get_project_config() -> Result<Project, failure::Error> {\n+fn get_project_config(config_path: &Path) -> Result<Project, failure::Error> {\n     let mut s = Config::new();\n \n-    let config_path = Path::new(\"./wrangler.toml\");\n     let config_str = config_path\n         .to_str()\n         .expect(\"project config path should be a string\");\ndiff --git /dev/null b/src/settings/project/project_type.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/project/project_type.rs\n@@ -0,0 +1,42 @@\n+use std::fmt;\n+use std::str::FromStr;\n+\n+use serde::{Deserialize, Serialize};\n+\n+#[derive(Clone, Debug, Deserialize, Serialize)]\n+#[serde(rename_all = \"lowercase\")]\n+pub enum ProjectType {\n+    JavaScript,\n+    Rust,\n+    Webpack,\n+}\n+\n+impl Default for ProjectType {\n+    fn default() -> Self {\n+        ProjectType::Webpack\n+    }\n+}\n+\n+impl fmt::Display for ProjectType {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let printable = match *self {\n+            ProjectType::JavaScript => \"js\",\n+            ProjectType::Rust => \"rust\",\n+            ProjectType::Webpack => \"webpack\",\n+        };\n+        write!(f, \"{}\", printable)\n+    }\n+}\n+\n+impl FromStr for ProjectType {\n+    type Err = failure::Error;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"javascript\" => Ok(ProjectType::JavaScript),\n+            \"rust\" => Ok(ProjectType::Rust),\n+            \"webpack\" => Ok(ProjectType::Webpack),\n+            _ => failure::bail!(\"{} is not a valid wrangler project type!\", s),\n+        }\n+    }\n+}\n",
        "test_patch": "diff --git a/src/settings/project.rs b/src/settings/project/mod.rs\n--- a/src/settings/project.rs\n+++ b/src/settings/project/mod.rs\n@@ -126,3 +97,6 @@ pub fn get_project_config() -> Result<Project, failure::Error> {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests;\ndiff --git /dev/null b/src/settings/project/tests/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/project/tests/mod.rs\n@@ -0,0 +1,51 @@\n+use super::*;\n+\n+use std::env;\n+use std::path::{Path, PathBuf};\n+\n+#[test]\n+fn it_builds_from_config() {\n+    let toml_path = toml_fixture_path(\"default\");\n+\n+    let project = get_project_config(&toml_path).unwrap();\n+\n+    assert!(project.kv_namespaces.is_none());\n+}\n+\n+#[test]\n+fn it_builds_from_config_with_kv() {\n+    let toml_path = toml_fixture_path(\"kv_namespaces\");\n+\n+    let project = get_project_config(&toml_path).unwrap();\n+\n+    let kv_1 = KvNamespace {\n+        id: \"somecrazylongidentifierstring\".to_string(),\n+        binding: \"prodKV\".to_string(),\n+    };\n+    let kv_2 = KvNamespace {\n+        id: \"anotherwaytoolongidstring\".to_string(),\n+        binding: \"stagingKV\".to_string(),\n+    };\n+\n+    match project.kv_namespaces {\n+        Some(kv_namespaces) => {\n+            assert!(kv_namespaces.len() == 2);\n+            assert!(kv_namespaces.contains(&kv_1));\n+            assert!(kv_namespaces.contains(&kv_2));\n+        }\n+        None => assert!(false),\n+    }\n+}\n+\n+fn toml_fixture_path(fixture: &str) -> PathBuf {\n+    let current_dir = env::current_dir().unwrap();\n+\n+    // TODO: This is kind of stupid but idk worth it for now?\n+    Path::new(&current_dir)\n+        .join(\"src\")\n+        .join(\"settings\")\n+        .join(\"project\")\n+        .join(\"tests\")\n+        .join(\"tomls\")\n+        .join(fixture)\n+}\ndiff --git /dev/null b/src/settings/project/tests/tomls/default.toml\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/project/tests/tomls/default.toml\n@@ -0,0 +1,6 @@\n+name = \"worker\"\n+type = \"webpack\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\ndiff --git /dev/null b/src/settings/project/tests/tomls/kv_namespaces.toml\nnew file mode 100644\n--- /dev/null\n+++ b/src/settings/project/tests/tomls/kv_namespaces.toml\n@@ -0,0 +1,14 @@\n+name = \"worker\"\n+type = \"webpack\"\n+zone_id = \"\"\n+private = false\n+account_id = \"\"\n+route = \"\"\n+\n+[[kv-namespaces]]\n+id = \"somecrazylongidentifierstring\"\n+binding = \"prodKV\"\n+\n+[[kv-namespaces]]\n+id = \"anotherwaytoolongidstring\"\n+binding = \"stagingKV\"\n",
        "problem_statement": "Refactor Bindings to support all binding types\nWrangler should be able to support all binding types not just wasm and kv. In order to support future bindings and make bindings generation simpler, we should try to treat all bindings the same (kv, wasm, secrets, etc.).\n",
        "hints_text": "Thanks for your issue; could you please elaborate on why it's not the case already? Also see #217 \nI think #217 is a fine approach, but only adds support for wasm bindings, and there are many other binding types. Right now, kv_namespaces are treated as attributes of a project, but it might make more sense to have a list of bindings as an attribute of project including all wasm modules, KV namespaces, secret bindings, and others. I'm just getting into this code, so I could be off-base, but we currently generate and send bindings at publish time, but I think bindings are a good abstraction to use directly as an attribute of the `Project` struct. So instead of having a `kv_namespaces` and whatever future binding types get supported by Wrangler as attributes of a project, their bindings would get generated at `Project` init (read from config).\nThe webpack backend currently auto-generate the wasm binding, I don't see why we should ask the user to indicate it and in the future we could imagine the same for kv-namespaces. However, in #215 the kv config is still possible in `wrangler.toml`.\r\n\r\nOther bindings are different and, as far as I can tell, undocumented publicly (intentionally I suppose). I would suggest to wait until we have a use-case.",
        "created_at": "2019-07-19T19:43:48Z",
        "version": "1.0"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 307,
        "instance_id": "cloudflare__wrangler-legacy-307",
        "issue_numbers": [
            "255",
            "255"
        ],
        "base_commit": "d02a199b850fc828d61ffcfc8cb7a851cf76c57d",
        "patch": "diff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -6,8 +6,6 @@ use std::fs::File;\n use std::io::prelude::*;\n use std::path::{Path, PathBuf};\n \n-use log::info;\n-\n use crate::commands::build::wranglerjs::output::WranglerjsOutput;\n use crate::settings::binding::Binding;\n use crate::settings::metadata;\ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -57,12 +55,6 @@ impl Bundle {\n         let mut metadata_file = File::create(self.metadata_path())?;\n         metadata_file.write_all(metadata.as_bytes())?;\n \n-        // cleanup {Webpack} dist, if specified.\n-        if let Some(dist_to_clean) = &wranglerjs_output.dist_to_clean {\n-            info!(\"Remove {}\", dist_to_clean);\n-            fs::remove_dir_all(dist_to_clean).expect(\"could not clean Webpack dist.\");\n-        }\n-\n         Ok(())\n     }\n \ndiff --git a/src/commands/build/wranglerjs/mod.rs b/src/commands/build/wranglerjs/mod.rs\n--- a/src/commands/build/wranglerjs/mod.rs\n+++ b/src/commands/build/wranglerjs/mod.rs\n@@ -41,7 +41,7 @@ pub fn run_build(project: &Project) -> Result<(), failure::Error> {\n             serde_json::from_str(&output).expect(\"could not parse wranglerjs output\");\n \n         if wranglerjs_output.has_errors() {\n-            message::user_error(&format!(\"{}\", wranglerjs_output.get_errors()));\n+            message::user_error(wranglerjs_output.get_errors().as_str());\n             failure::bail!(\"Webpack returned an error\");\n         }\n \ndiff --git a/src/commands/build/wranglerjs/output.rs b/src/commands/build/wranglerjs/output.rs\n--- a/src/commands/build/wranglerjs/output.rs\n+++ b/src/commands/build/wranglerjs/output.rs\n@@ -11,10 +11,6 @@ use std::io::prelude::*;\n pub struct WranglerjsOutput {\n     pub wasm: Option<String>,\n     pub script: String,\n-    // {wranglerjs} will send us the path to the {dist} directory that {Webpack}\n-    // used; it's tedious to remove a directory with content in JavaScript so\n-    // let's do it in Rust!\n-    pub dist_to_clean: Option<String>,\n     // Errors emited by {wranglerjs}, if any\n     pub errors: Vec<String>,\n }\ndiff --git a/wranglerjs/index.js b/wranglerjs/index.js\n--- a/wranglerjs/index.js\n+++ b/wranglerjs/index.js\n@@ -75,7 +75,6 @@ compiler.run((err, stats) => {\n   const bundle = {\n     wasm: null,\n     script: \"\",\n-    dist_to_clean: fullConfig.output.path,\n     errors: jsonStats.errors\n   };\n \n",
        "test_patch": "diff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -150,7 +142,7 @@ mod tests {\n         let wranglerjs_output = WranglerjsOutput {\n             errors: vec![],\n             script: \"\".to_string(),\n-            dist_to_clean: None,\n+\n             wasm: None,\n         };\n         let bundle = Bundle::new_at(out.clone());\ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -171,7 +163,6 @@ mod tests {\n         let wranglerjs_output = WranglerjsOutput {\n             errors: vec![],\n             script: \"foo\".to_string(),\n-            dist_to_clean: None,\n             wasm: None,\n         };\n         let bundle = Bundle::new_at(out.clone());\ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -190,7 +181,6 @@ mod tests {\n             errors: vec![],\n             script: \"\".to_string(),\n             wasm: Some(\"abc\".to_string()),\n-            dist_to_clean: None,\n         };\n         let bundle = Bundle::new_at(out.clone());\n \ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -208,7 +198,6 @@ mod tests {\n             errors: vec![],\n             script: \"\".to_string(),\n             wasm: Some(\"abc\".to_string()),\n-            dist_to_clean: None,\n         };\n         let bundle = Bundle::new_at(out.clone());\n \ndiff --git a/src/commands/build/wranglerjs/bundle.rs b/src/commands/build/wranglerjs/bundle.rs\n--- a/src/commands/build/wranglerjs/bundle.rs\n+++ b/src/commands/build/wranglerjs/bundle.rs\n@@ -231,7 +220,6 @@ mod tests {\n             errors: vec![\"a\".to_string(), \"b\".to_string()],\n             script: \"\".to_string(),\n             wasm: None,\n-            dist_to_clean: None,\n         };\n         assert!(wranglerjs_output.has_errors());\n         assert!(wranglerjs_output.get_errors() == \"a\\nb\");\ndiff --git a/src/commands/build/wranglerjs/output.rs b/src/commands/build/wranglerjs/output.rs\n--- a/src/commands/build/wranglerjs/output.rs\n+++ b/src/commands/build/wranglerjs/output.rs\n@@ -58,7 +54,6 @@ mod tests {\n         let wranglerjs_output = WranglerjsOutput {\n             errors: vec![],\n             script: \"aaaa\".to_string(),\n-            dist_to_clean: None,\n             wasm: None,\n         };\n \ndiff --git a/src/commands/build/wranglerjs/output.rs b/src/commands/build/wranglerjs/output.rs\n--- a/src/commands/build/wranglerjs/output.rs\n+++ b/src/commands/build/wranglerjs/output.rs\n@@ -70,7 +65,6 @@ mod tests {\n         let wranglerjs_output = WranglerjsOutput {\n             errors: vec![],\n             script: \"\".to_string(),\n-            dist_to_clean: None,\n             wasm: Some(\"abc\".to_string()),\n         };\n \n",
        "problem_statement": "Remove dist_to_clean from wrangler cleanup steps\nHello! I attempted to run a preview on a project I was working on. This project has an independent webpack build, so I configured webpack to output to an index.js file in the root of the project and copied over a wrangler.toml file from the generator. When I went to preview, Wrangler deleted my dev directory, erasing any of the files I didn't have open elsewhere.\r\n\r\n![image](https://user-images.githubusercontent.com/55347/59542876-011aaf80-8ebd-11e9-994a-4e0bfffbebcb.png)\r\n\nRemove dist_to_clean from wrangler cleanup steps\nHello! I attempted to run a preview on a project I was working on. This project has an independent webpack build, so I configured webpack to output to an index.js file in the root of the project and copied over a wrangler.toml file from the generator. When I went to preview, Wrangler deleted my dev directory, erasing any of the files I didn't have open elsewhere.\r\n\r\n![image](https://user-images.githubusercontent.com/55347/59542876-011aaf80-8ebd-11e9-994a-4e0bfffbebcb.png)\r\n\n",
        "hints_text": "Which dev directory did you use? `./worker` will currently be removed I believe (that's a bug). \nThe project I copied the template from was called \"worker\", but this folder was named \"afs\".\n\nOn Sat, Jun 15 2019 at 2:39 AM, < notifications@github.com > wrote:\n\n> \n> \n> \n> Which dev directory did you use?./worker will currently be removed I\n> believe (that's a bug).\n> \n> \n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub (\n> https://github.com/cloudflare/wrangler/issues/255?email_source=notifications&email_token=AAANQMZVKE3IUIKNOZY2R6TP2S2FBA5CNFSM4HYNUDY2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODXYUOMI#issuecomment-502351665\n> ) , or mute the thread (\n> https://github.com/notifications/unsubscribe-auth/AAANQMYH2X43THTI7FFJJT3P2S2FBANCNFSM4HYNUDYQ\n> ).\n> \n> \n>\nThis is really strange, would we mind chatting on gchat?\nIs this resolved? it seemed the directory checked was `af` and not `afs` ?\nYou're actually seeing an artifact of my tab-completion attempt there, the folder was gone. Existing editor sessions couldn't save even after I recreated the folder. \n@xtuc Sure! I'll be around tomorrow or find a time on my calendar.\n@zackbloom can you link to a repo that we could use to reproduce? thanks!\nYes I can!\r\n\r\n1. Clone git@github.com:zackbloom/afs.git\r\n2. Run `npm install`\r\n3. Run `wrangler preview`\nThanks @zackbloom \r\n\r\nThe issue here is that your webpack configuration specifies the output path to be the root directory. I haven't dug into the source yet, but if you change your `webpack.config.js` to build your worker in a `dist` directory, it won't delete everything. My guess is that when wrangler builds for the preview, it builds the worker and then just deletes the directory that the built javascript is in without checking what directory that is.\r\n\r\nWhile we work on a fix, I'd recommend replacing your webpack config with the contents below\r\n\r\n```\r\nconst path = require('path');\r\n\r\nmodule.exports = {\r\n  entry: './src/index.js',\r\n  output: {\r\n    path: path.resolve(__dirname, \"dist\"),\r\n    filename: 'index.js'\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.css$/i,\r\n        use: 'raw-loader',\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n```\n@sevki Could you take a look at how we want to fix this? I'm happy to tackle a fix, I'm just not quite sure what approach we want to take here. I've confirmed that this is the issue. Wranglerjs is returning `fullConfig.output.path` which happens to be the development directory when the webpack configuration doesn't create a child directory.\nAs a user of Wrangler, I wasn't really exposed to webpack being used internally. I didn't think my webpack config would influence it's behavior at all, I just assumed I should put my output file at the location it expected.\r\n\r\n> My guess is that when wrangler builds for the preview, it builds the worker and then just deletes the directory that the built javascript is in without checking what directory that is.\r\n\r\nWould it be possible to add a check which stopped the build if the directory already exists before it has created it?\n@zackbloom that's a good point, we should make it clearer in the docs that wrangler uses `webpack.config.js` to build your script if the `type` field in `wrangler.toml` is `webpack`. That being said, we shouldn't change the behavior as we still want to allow custom webpack builds with wrangler projects. \r\n\r\nIt does seem like the default wrangler webpack template doesn't create a webpack.config file, and you would need to create your own if you wanted to do anything requiring a specific loader for things like es6 modules. We'll likely need to discuss what the right path is here before moving forward on a fix.\nThat's already a bug tracked here https://github.com/cloudflare/wrangler/issues/206. I think we can close this issue.\nHm, this seems like a separate bug. While wrangler generates a `./worker` directory for its own build, this particular case uses a preexisting `webpack.config.js` that causes the entire development directory to be deleted, not just `./worker`\r\n\r\nI think this issue points to a broader problem with how wrangler handles webpack builds. We allow custom webpack config files, but in our generated projects we do not expose the webpack configuration used to build their project. I think the correct way to do this is to create a sensible default webpack config that the user can then modify/replace. This would eliminate the need to do any cleanup at all, we could leave the build artifacts where they are. This would also allow users to interact with tools like cloudworker. \nGot you, that's right.\r\n\r\n> This would eliminate the need to do any cleanup at all, we could leave the build artifacts where they are. This would also allow users to interact with tools like cloudworker\r\n\r\nWe cleaned the webpack artifact, not the worker ones. I doubt cloudworker will be able to take advatange of webpack's output, however the watching might.\r\n\r\nI think the right solution is to implement #116 so that no webpack dist is only visible for the watch mode. It related to #206 because the worker output should be configurable, it's persistent already.\nOoh, we _don't_ clean the build artifact, got it. Is there any reason we don't just use the `output` specified in `webpack.config.js` to store the build artifacts rather than creating a separate directory? I don't think we should ask the user to configure the directory twice, and using webpack is something JavaScript devs are already familiar with. This would also (I think) eliminate the need to clean the webpack artifact. If we just used the webpack artifact itself rather than taking it and putting it in our own directory structure we wouldn't need to clean it. Does this sound right? I'm not entirely sure I understand everything going into the underlying architecture.\r\n\r\nEdit: Perhaps it would be good to sit down and discuss\nSome solutions I've thought of:\r\n\r\n- don't populate `dist_to_clean` if the user webpack configuration provided an output folder. This implies the output folder is important as they didn't want to use the default. Easy to do.\r\n\r\n- override any configured output folder in `wranglerjs/index.js` to use a folder inside the wrangler build directory (currently `./worker`). Easy to do.\r\n\r\n- replace `dist_to_clean` with `files_to_clean`, an array of filenames that are the webpack output asset files (we can get this from `stats.assets` in `wranglerjs`) and delete those individually rather than an entire directory. slightly more complex than other options but still not very difficult. I think this maintains the most compatibility with current wrangler projects as well.\r\n\r\n- don't even do `dist_to_clean`. Easy to do but ugly.\r\n\r\n\r\n\r\n\nI would suggest doing an RFC for this issue and #206.\nWhich dev directory did you use? `./worker` will currently be removed I believe (that's a bug). \nThe project I copied the template from was called \"worker\", but this folder was named \"afs\".\n\nOn Sat, Jun 15 2019 at 2:39 AM, < notifications@github.com > wrote:\n\n> \n> \n> \n> Which dev directory did you use?./worker will currently be removed I\n> believe (that's a bug).\n> \n> \n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub (\n> https://github.com/cloudflare/wrangler/issues/255?email_source=notifications&email_token=AAANQMZVKE3IUIKNOZY2R6TP2S2FBA5CNFSM4HYNUDY2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODXYUOMI#issuecomment-502351665\n> ) , or mute the thread (\n> https://github.com/notifications/unsubscribe-auth/AAANQMYH2X43THTI7FFJJT3P2S2FBANCNFSM4HYNUDYQ\n> ).\n> \n> \n>\nThis is really strange, would we mind chatting on gchat?\nIs this resolved? it seemed the directory checked was `af` and not `afs` ?\nYou're actually seeing an artifact of my tab-completion attempt there, the folder was gone. Existing editor sessions couldn't save even after I recreated the folder. \n@xtuc Sure! I'll be around tomorrow or find a time on my calendar.\n@zackbloom can you link to a repo that we could use to reproduce? thanks!\nYes I can!\r\n\r\n1. Clone git@github.com:zackbloom/afs.git\r\n2. Run `npm install`\r\n3. Run `wrangler preview`\nThanks @zackbloom \r\n\r\nThe issue here is that your webpack configuration specifies the output path to be the root directory. I haven't dug into the source yet, but if you change your `webpack.config.js` to build your worker in a `dist` directory, it won't delete everything. My guess is that when wrangler builds for the preview, it builds the worker and then just deletes the directory that the built javascript is in without checking what directory that is.\r\n\r\nWhile we work on a fix, I'd recommend replacing your webpack config with the contents below\r\n\r\n```\r\nconst path = require('path');\r\n\r\nmodule.exports = {\r\n  entry: './src/index.js',\r\n  output: {\r\n    path: path.resolve(__dirname, \"dist\"),\r\n    filename: 'index.js'\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.css$/i,\r\n        use: 'raw-loader',\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n```\n@sevki Could you take a look at how we want to fix this? I'm happy to tackle a fix, I'm just not quite sure what approach we want to take here. I've confirmed that this is the issue. Wranglerjs is returning `fullConfig.output.path` which happens to be the development directory when the webpack configuration doesn't create a child directory.\nAs a user of Wrangler, I wasn't really exposed to webpack being used internally. I didn't think my webpack config would influence it's behavior at all, I just assumed I should put my output file at the location it expected.\r\n\r\n> My guess is that when wrangler builds for the preview, it builds the worker and then just deletes the directory that the built javascript is in without checking what directory that is.\r\n\r\nWould it be possible to add a check which stopped the build if the directory already exists before it has created it?\n@zackbloom that's a good point, we should make it clearer in the docs that wrangler uses `webpack.config.js` to build your script if the `type` field in `wrangler.toml` is `webpack`. That being said, we shouldn't change the behavior as we still want to allow custom webpack builds with wrangler projects. \r\n\r\nIt does seem like the default wrangler webpack template doesn't create a webpack.config file, and you would need to create your own if you wanted to do anything requiring a specific loader for things like es6 modules. We'll likely need to discuss what the right path is here before moving forward on a fix.\nThat's already a bug tracked here https://github.com/cloudflare/wrangler/issues/206. I think we can close this issue.\nHm, this seems like a separate bug. While wrangler generates a `./worker` directory for its own build, this particular case uses a preexisting `webpack.config.js` that causes the entire development directory to be deleted, not just `./worker`\r\n\r\nI think this issue points to a broader problem with how wrangler handles webpack builds. We allow custom webpack config files, but in our generated projects we do not expose the webpack configuration used to build their project. I think the correct way to do this is to create a sensible default webpack config that the user can then modify/replace. This would eliminate the need to do any cleanup at all, we could leave the build artifacts where they are. This would also allow users to interact with tools like cloudworker. \nGot you, that's right.\r\n\r\n> This would eliminate the need to do any cleanup at all, we could leave the build artifacts where they are. This would also allow users to interact with tools like cloudworker\r\n\r\nWe cleaned the webpack artifact, not the worker ones. I doubt cloudworker will be able to take advatange of webpack's output, however the watching might.\r\n\r\nI think the right solution is to implement #116 so that no webpack dist is only visible for the watch mode. It related to #206 because the worker output should be configurable, it's persistent already.\nOoh, we _don't_ clean the build artifact, got it. Is there any reason we don't just use the `output` specified in `webpack.config.js` to store the build artifacts rather than creating a separate directory? I don't think we should ask the user to configure the directory twice, and using webpack is something JavaScript devs are already familiar with. This would also (I think) eliminate the need to clean the webpack artifact. If we just used the webpack artifact itself rather than taking it and putting it in our own directory structure we wouldn't need to clean it. Does this sound right? I'm not entirely sure I understand everything going into the underlying architecture.\r\n\r\nEdit: Perhaps it would be good to sit down and discuss\nSome solutions I've thought of:\r\n\r\n- don't populate `dist_to_clean` if the user webpack configuration provided an output folder. This implies the output folder is important as they didn't want to use the default. Easy to do.\r\n\r\n- override any configured output folder in `wranglerjs/index.js` to use a folder inside the wrangler build directory (currently `./worker`). Easy to do.\r\n\r\n- replace `dist_to_clean` with `files_to_clean`, an array of filenames that are the webpack output asset files (we can get this from `stats.assets` in `wranglerjs`) and delete those individually rather than an entire directory. slightly more complex than other options but still not very difficult. I think this maintains the most compatibility with current wrangler projects as well.\r\n\r\n- don't even do `dist_to_clean`. Easy to do but ugly.\r\n\r\n\r\n\r\n\nI would suggest doing an RFC for this issue and #206.",
        "created_at": "2019-07-08T15:55:56Z",
        "version": "1.0"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 445,
        "instance_id": "cloudflare__wrangler-legacy-445",
        "issue_numbers": [
            "346"
        ],
        "base_commit": "a1ff27a8bf4bc04b8073709fa581a0a3cd3cc6b5",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -61,7 +61,7 @@ dependencies = [\n \n [[package]]\n name = \"autocfg\"\n-version = \"0.1.5\"\n+version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -116,12 +116,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"blake2b_simd\"\n-version = \"0.5.6\"\n+version = \"0.5.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"arrayref 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"arrayvec 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"constant_time_eq 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -259,16 +259,18 @@ dependencies = [\n [[package]]\n name = \"cloudflare\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/cloudflare/cloudflare-rs.git#54b21d4f6fd2d48305f112a8e5e544918a28f87b\"\n+source = \"git+https://github.com/cloudflare/cloudflare-rs.git#12c17c27152ffabf20472a83be014e3919f63c5a\"\n dependencies = [\n  \"chrono 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"maplit 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"reqwest 0.9.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"reqwest 0.9.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.99 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.99 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_with 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_yaml 0.8.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slog-term 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -310,7 +312,7 @@ dependencies = [\n \n [[package]]\n name = \"constant_time_eq\"\n-version = \"0.1.3\"\n+version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -701,7 +703,7 @@ dependencies = [\n  \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"http 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indexmap 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -810,7 +812,7 @@ dependencies = [\n \n [[package]]\n name = \"indexmap\"\n-version = \"1.0.2\"\n+version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1114,7 +1116,7 @@ name = \"num-integer\"\n version = \"0.1.41\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1131,7 +1133,7 @@ name = \"num-traits\"\n version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1183,7 +1185,7 @@ name = \"openssl-sys\"\n version = \"0.9.49\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-src 111.5.0+1.1.1c (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1359,7 +1361,7 @@ name = \"rand\"\n version = \"0.6.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1389,7 +1391,7 @@ name = \"rand_chacha\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1475,7 +1477,7 @@ name = \"rand_pcg\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1545,7 +1547,7 @@ dependencies = [\n \n [[package]]\n name = \"reqwest\"\n-version = \"0.9.19\"\n+version = \"0.9.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1587,7 +1589,7 @@ version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"blake2b_simd 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"blake2b_simd 0.5.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1748,6 +1750,25 @@ dependencies = [\n  \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"serde_with\"\n+version = \"1.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 1.0.99 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_with_macros 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_with_macros\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"serde_yaml\"\n version = \"0.8.9\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2383,13 +2404,14 @@ dependencies = [\n  \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"prettytable-rs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"reqwest 0.9.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"reqwest 0.9.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.99 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"text_io 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 2.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"which 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ws 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2482,7 +2504,7 @@ dependencies = [\n \"checksum cloudflare 0.1.0 (git+https://github.com/cloudflare/cloudflare-rs.git)\" = \"<none>\"\n \"checksum config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9107d78ed62b3fa5a86e7d18e647abed48cfd8f8fab6c72f4cdb982d196f7e6\"\n \"checksum console 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ca57c2c14b8a2bf3105bc9d15574aad80babf6a9c44b1058034cdf8bd169628\"\n-\"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n+\"checksum constant_time_eq 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"995a44c877f9212528ccc74b21a232f66ad69001e40ede5bcee2ac9ef2657120\"\n \"checksum cookie 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"888604f00b3db336d2af898ec3c1d5d0ddf5e6d462220f2ededc33a87ac4bbd5\"\n \"checksum cookie_store 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46750b3f362965f197996c4448e4a0935e791bf7d6631bfce9ee0af3d24c919c\"\n \"checksum core-foundation 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25b9e03f145fd4f2bf705e07b900cd41fc636598fe5dc452fd0db1441c3f496d\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2538,7 +2560,7 @@ dependencies = [\n \"checksum hyper-tls 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a800d6aa50af4b5850b2b0f659625ce9504df908e9733b635720483be26174f\"\n \"checksum idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e\"\n \"checksum idna 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\n-\"checksum indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e81a7c05f79578dbc15793d8b619db9ba32b4577003ef3af1a91c416798c58d\"\n+\"checksum indexmap 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a4d6d89e0948bf10c08b9ecc8ac5b83f07f857ebe2c0cbe38de15b4e4f510356\"\n \"checksum inotify 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40b54539f3910d6f84fbf9a643efd6e3aa6e4f001426c0329576128255994718\"\n \"checksum inotify-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e74a1aa87c59aeff6ef2cc2fa62d41bc43f54952f55652656b18a02fd5e356c0\"\n \"checksum iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbe6e417e7d0975db6512b90796e8ce223145ac4e33c377e4a42882a0e88bb08\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2624,7 +2646,7 @@ dependencies = [\n \"checksum regex-automata 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92b73c2a1770c255c240eaa4ee600df1704a38dc3feaa6e949e7fcd4f8dc09f9\"\n \"checksum regex-syntax 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b143cceb2ca5e56d5671988ef8b15615733e7ee16cd348e064333b251b89343f\"\n \"checksum remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e\"\n-\"checksum reqwest 0.9.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d0777154c2c3eb54f5c480db01de845652d941e47191277cc673634c3853939\"\n+\"checksum reqwest 0.9.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f6d896143a583047512e59ac54a215cb203c29cc941917343edea3be8df9c78\"\n \"checksum rle-decode-fast 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cabe4fa914dec5870285fa7f71f602645da47c486e68486d2b4ceb4a343e90ac\"\n \"checksum rust-argon2 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ca4eaef519b494d1f2848fc602d18816fed808a981aedf4f1f00ceb7c9d32cf\"\n \"checksum rust-ini 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e52c148ef37f8c375d49d5a73aa70713125b7f19095948a923f80afdeb22ec2\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -40,6 +40,7 @@ prettytable-rs = \"0.8.0\"\n notify = \"4.0.12\"\n ws = \"0.9.0\"\n url = \"2.1.0\"\n+walkdir = \"2.2.9\"\n percent-encoding = \"1.0.1\"\n \n [dev-dependencies]\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -11,6 +11,7 @@ mod delete_namespace;\n mod list_namespaces;\n mod read_key;\n mod rename_namespace;\n+mod write_bulk;\n mod write_key;\n \n pub use create_namespace::create_namespace;\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -18,6 +19,7 @@ pub use delete_namespace::delete_namespace;\n pub use list_namespaces::list_namespaces;\n pub use read_key::read_key;\n pub use rename_namespace::rename_namespace;\n+pub use write_bulk::write_bulk;\n pub use write_key::write_key;\n \n fn api_client() -> Result<HttpApiClient, failure::Error> {\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -39,7 +41,7 @@ fn print_error(e: ApiFailure) {\n     match e {\n         ApiFailure::Error(_status, api_errors) => {\n             for error in api_errors.errors {\n-                message::warn(&format!(\"Error {}: {}\", error.code, error.message,));\n+                message::warn(&format!(\"Error {}: {}\", error.code, error.message));\n \n                 let suggestion = help(error.code);\n                 if !suggestion.is_empty() {\ndiff --git /dev/null b/src/commands/kv/write_bulk.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/write_bulk.rs\n@@ -0,0 +1,106 @@\n+extern crate base64;\n+\n+use cloudflare::framework::apiclient::ApiClient;\n+use walkdir::WalkDir;\n+\n+use std::ffi::OsString;\n+use std::fs;\n+use std::fs::metadata;\n+use std::path::Path;\n+\n+use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n+use cloudflare::endpoints::workerskv::write_bulk::WriteBulk;\n+use failure::bail;\n+\n+use crate::terminal::message;\n+\n+pub fn write_bulk(namespace_id: &str, filename: &Path) -> Result<(), failure::Error> {\n+    let client = super::api_client()?;\n+    let account_id = super::account_id()?;\n+\n+    // If the provided argument for write_bulk is a json file, parse it\n+    // and upload its contents. If the argument is a directory, create key-value\n+    // pairs where keys are the relative pathnames of files in the directory, and\n+    // values are the base64-encoded contents of those files.\n+    let mut data;\n+    let pairs: Result<Vec<KeyValuePair>, failure::Error> = match metadata(filename) {\n+        Ok(ref file_type) if file_type.is_file() => {\n+            data = fs::read_to_string(filename)?;\n+            Ok(serde_json::from_str(&data)?)\n+        }\n+        Ok(ref file_type) if file_type.is_dir() => parse_directory(filename),\n+        Ok(_file_type) => {\n+            // any other file types (namely, symlinks)\n+            bail!(\n+                \"Cannot upload a file that is a symlink: {}\",\n+                filename.display()\n+            )\n+        }\n+        Err(e) => bail!(e),\n+    };\n+\n+    let response = client.request(&WriteBulk {\n+        account_identifier: &account_id,\n+        namespace_identifier: namespace_id,\n+        bulk_key_value_pairs: pairs?,\n+    });\n+\n+    match response {\n+        Ok(_success) => message::success(\"Success\"),\n+        Err(e) => super::print_error(e),\n+    }\n+\n+    Ok(())\n+}\n+\n+fn parse_directory(directory: &Path) -> Result<Vec<KeyValuePair>, failure::Error> {\n+    let mut upload_vec: Vec<KeyValuePair> = Vec::new();\n+    for entry in WalkDir::new(directory) {\n+        let entry = entry.unwrap();\n+        let path = entry.path();\n+        if path.is_file() {\n+            let key = generate_key(path, directory)?;\n+\n+            let value = std::fs::read(path)?;\n+\n+            // Need to base64 encode value\n+            let b64_value = base64::encode(&value);\n+            message::working(&format!(\"Uploading {}...\", key.clone()));\n+            upload_vec.push(KeyValuePair {\n+                key: key,\n+                value: b64_value,\n+                expiration: None,\n+                expiration_ttl: None,\n+                base64: Some(true),\n+            });\n+        }\n+    }\n+    Ok(upload_vec)\n+}\n+\n+// Courtesy of Steve Kalabnik's PoC :)\n+fn generate_key(path: &Path, directory: &Path) -> Result<String, failure::Error> {\n+    let path = path.strip_prefix(directory).unwrap();\n+\n+    // next, we have to re-build the paths: if we're on Windows, we have paths with\n+    // `\\` as separators. But we want to use `/` as separators. Because that's how URLs\n+    // work.\n+    let mut path_with_forward_slash = OsString::new();\n+\n+    for (i, component) in path.components().enumerate() {\n+        // we don't want a leading `/`, so skip that\n+        if i > 0 {\n+            path_with_forward_slash.push(\"/\");\n+        }\n+\n+        path_with_forward_slash.push(component);\n+    }\n+\n+    // if we have a non-utf8 path here, it will fail, but that's not realistically going to happen\n+    let path = path_with_forward_slash.to_str().expect(&format!(\n+        \"found a non-UTF-8 path, {:?}\",\n+        path_with_forward_slash\n+    ));\n+\n+    Ok(path.to_string())\n+}\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -4,6 +4,7 @@\n extern crate text_io;\n \n use std::env;\n+use std::path::Path;\n use std::str::FromStr;\n \n use clap::{App, AppSettings, Arg, SubCommand};\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -121,6 +122,20 @@ fn run() -> Result<(), failure::Error> {\n                             .help(\"the value passed in is a filename; open and upload its contents\"),\n                         )\n                 )\n+                .subcommand(\n+                    SubCommand::with_name(\"write-bulk\")\n+                        .about(\"upload multiple key-value pairs at once\")\n+                        .arg(\n+                            Arg::with_name(\"id\")\n+                                .help(\"the id of your Workers KV namespace\")\n+                                .index(1),\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"path\")\n+                            .help(\"the json file of key-value pairs to upload, in form [{\\\"key\\\":..., \\\"value\\\":...}\\\"...] OR the directory of files to upload.\")\n+                            .index(2),\n+                        )\n+                )\n         )\n         .subcommand(\n             SubCommand::with_name(\"generate\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -339,7 +354,7 @@ fn run() -> Result<(), failure::Error> {\n                 let title = rename_matches.value_of(\"title\").unwrap();\n                 commands::kv::rename_namespace(id, title)?;\n             }\n-            (\"list\", Some(_create_matches)) => {\n+            (\"list\", Some(_list_matches)) => {\n                 commands::kv::list_namespaces()?;\n             }\n             (\"read-key\", Some(read_key_matches)) => {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -347,7 +362,6 @@ fn run() -> Result<(), failure::Error> {\n                 let user = settings::global_user::GlobalUser::new()?;\n                 let id = read_key_matches.value_of(\"id\").unwrap();\n                 let key = read_key_matches.value_of(\"key\").unwrap();\n-\n                 commands::kv::read_key(&project, &user, id, key)?;\n             }\n             (\"write-key\", Some(write_key_matches)) => {\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -362,9 +376,13 @@ fn run() -> Result<(), failure::Error> {\n                 };\n                 let expiration = write_key_matches.value_of(\"expiration\");\n                 let ttl = write_key_matches.value_of(\"expiration-ttl\");\n-\n                 commands::kv::write_key(&project, &user, id, key, value, is_file, expiration, ttl)?;\n             }\n+            (\"write-bulk\", Some(write_bulk_matches)) => {\n+                let id = write_bulk_matches.value_of(\"id\").unwrap();\n+                let filename = write_bulk_matches.value_of(\"path\").unwrap();\n+                commands::kv::write_bulk(id, Path::new(filename))?;\n+            }\n             (\"\", None) => message::warn(\"kv expects a subcommand\"),\n             _ => unreachable!(),\n         }\n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2457,13 +2479,13 @@ dependencies = [\n \"checksum arrayvec 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8d73f9beda665eaa98ab9e4f7442bd4e7de6652587de55b2525e52e29c1b0ba\"\n \"checksum assert_cmd 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2dc477793bd82ec39799b6f6b3df64938532fdf2ab0d49ef817eac65856a5a1e\"\n \"checksum atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1803c647a3ec87095e7ae7acfca019e98de5ec9a7d01343f611cf3152ed71a90\"\n-\"checksum autocfg 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"22130e92352b948e7e82a49cdb0aa94f2211761117f29e052dd397c1ac33542b\"\n+\"checksum autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b671c8fb71b457dd4ae18c4ba1e59aa81793daacc361d82fcd410cef0d491875\"\n \"checksum backtrace 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1371048253fa3bac6704bfd6bbfc922ee9bdcee8881330d40f308b81cc5adc55\"\n \"checksum backtrace-sys 0.1.31 (registry+https://github.com/rust-lang/crates.io-index)\" = \"82a830b4ef2d1124a711c71d263c5abdc710ef8e907bd508c88be475cebc422b\"\n \"checksum base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e\"\n \"checksum binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\" = \"a81dda17f2dbba8271cf61f2ea3e48e3da8aef31665731bce48818cc07863f06\"\n \"checksum bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d155346769a6855b86399e9bc3814ab343cd3d62c7e985113d46a0ec3c281fd\"\n-\"checksum blake2b_simd 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"461f4b879a8eb70c1debf7d0788a9a5ff15f1ea9d25925fea264ef4258bed6b2\"\n+\"checksum blake2b_simd 0.5.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf775a81bb2d464e20ff170ac20316c7b08a43d11dbc72f0f82e8e8d3d6d0499\"\n \"checksum block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b\"\n \"checksum block-padding 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d4dc3af3ee2e12f3e5d224e5e1e3d73668abbeb69e566d361f7d5563a4fdf09\"\n \"checksum bstr 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94cdf78eb7e94c566c1f5dbe2abf8fc70a548fc902942a48c4b3a98b48ca9ade\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2647,6 +2669,8 @@ dependencies = [\n \"checksum serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35965fa1d2413717053d67c2df1f5c3e1763fbf77200ea7e767523707bd5a0af\"\n \"checksum serde_test 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"110b3dbdf8607ec493c22d5d947753282f3bae73c0f56d322af1e8c78e4c23d5\"\n \"checksum serde_urlencoded 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"642dd69105886af2efd227f75a520ec9b44a820d65bc133a9131f7d229fd165a\"\n+\"checksum serde_with 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"32dc67e726b4b06ccf46860bef46fe713fffde11181d6c3c2f3104a670ceddb1\"\n+\"checksum serde_with_macros 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6304d92ad5493e340b95c353b8328c312d020f0eb5cb6df8506f160f5b7300d\"\n \"checksum serde_yaml 0.8.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38b08a9a90e5260fe01c6480ec7c811606df6d3a660415808c3c3fa8ed95b582\"\n \"checksum sha-1 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23962131a91661d643c98940b20fcaffe62d776a823247be80a48fcb8b6fce68\"\n \"checksum siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b8de496cf83d4ed58b6be86c3a275b8602f6ffe98d3024a869e124147a9a3ac\"\n",
        "problem_statement": "Add KV Command: Bulk Set Key/Value Pair on Namespace\nRelated to #343 - we should also support bulk upload\r\n\r\nAs a Workers KV user, I should be able to set many key/value pairs on my KV namespace from Wrangler at once.\r\n\r\nexample:\r\n``` sh\r\n$ wrangler kv write bulk path/to/assets\r\n```\r\nthe path should point to either:\r\n- a directory of assets to be uploaded with paths as keys OR\r\n- a `.json` file which defines an array of key/value pairs such as:\r\n``` json\r\n[\r\n  {\r\n    \"key\": \"hero\",\r\n    \"value\": \"batman\",\r\n    \"expiration\": 1565912132\r\n  },\r\n  {\r\n    \"key\": \"villain\",\r\n    \"value\": \"joker\",\r\n    \"expiration\": 1565912132\r\n  }\r\n]\r\n```\r\nwe should support all keys specified by the api documentation in these jsons, that is:\r\n* `expiration`\r\n* `expiration_ttl`\r\n* `base64`\n",
        "hints_text": "",
        "created_at": "2019-08-15T22:48:25Z",
        "version": "1.2"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 429,
        "instance_id": "cloudflare__wrangler-legacy-429",
        "issue_numbers": [
            "423"
        ],
        "base_commit": "fe10824dc21417ebf6ef631c6aca1e25e3fb7753",
        "patch": "diff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -96,32 +238,27 @@ fn open(preview_host: &str, https: u8, script_id: &str) -> Result<(), failure::E\n     Ok(())\n }\n \n-fn get(\n-    preview_address: &str,\n-    cookie: String,\n-    client: reqwest::Client,\n-) -> Result<String, failure::Error> {\n-    let res = client.get(preview_address).header(\"Cookie\", cookie).send();\n-    let msg = format!(\"GET {}\", preview_address);\n+fn get(cookie: String, client: &reqwest::Client) -> Result<String, failure::Error> {\n+    let res = client.get(PREVIEW_ADDRESS).header(\"Cookie\", cookie).send();\n+    let msg = format!(\"GET {}\", PREVIEW_ADDRESS);\n     message::preview(&msg);\n     Ok(res?.text()?)\n }\n \n fn post(\n-    preview_address: &str,\n     cookie: String,\n-    client: reqwest::Client,\n+    client: &reqwest::Client,\n     body: Option<String>,\n ) -> Result<String, failure::Error> {\n     let res = match body {\n         Some(s) => client\n-            .post(preview_address)\n+            .post(PREVIEW_ADDRESS)\n             .header(\"Cookie\", cookie)\n             .body(s)\n             .send(),\n-        None => client.post(preview_address).header(\"Cookie\", cookie).send(),\n+        None => client.post(PREVIEW_ADDRESS).header(\"Cookie\", cookie).send(),\n     };\n-    let msg = format!(\"POST {}\", preview_address);\n+    let msg = format!(\"POST {}\", PREVIEW_ADDRESS);\n     message::preview(&msg);\n     Ok(res?.text()?)\n }\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -196,14 +196,18 @@ fn run() -> Result<(), failure::Error> {\n         info!(\"Getting project settings\");\n         let project = settings::project::Project::new()?;\n \n-        let method = HTTPMethod::from_str(matches.value_of(\"method\").unwrap_or(\"get\"));\n+        // the preview command can be called with or without a Global User having been config'd\n+        // so we convert this Result into an Option\n+        let user = settings::global_user::GlobalUser::new().ok();\n+\n+        let method = HTTPMethod::from_str(matches.value_of(\"method\").unwrap_or(\"get\"))?;\n \n         let body = match matches.value_of(\"body\") {\n             Some(s) => Some(s.to_string()),\n             None => None,\n         };\n \n-        commands::preview(&project, method, body)?;\n+        commands::preview(project, user, method, body)?;\n     } else if matches.subcommand_matches(\"whoami\").is_some() {\n         info!(\"Getting User settings\");\n         let user = settings::global_user::GlobalUser::new()?;\ndiff --git a/src/terminal/emoji.rs b/src/terminal/emoji.rs\n--- a/src/terminal/emoji.rs\n+++ b/src/terminal/emoji.rs\n@@ -20,8 +20,8 @@ pub static INBOX: Emoji = Emoji(\"\ud83d\udce5 \", \"\");\n pub static INFO: Emoji = Emoji(\"\ud83d\udc81\u200d \", \"\");\n pub static MICROSCOPE: Emoji = Emoji(\"\ud83d\udd2c \", \"\");\n pub static SHEEP: Emoji = Emoji(\"\ud83d\udc11 \", \"\");\n-pub static SLEUTH: Emoji = Emoji(\"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f\", \"\");\n-pub static SPARKLES: Emoji = Emoji(\"\u2728  \", \"\");\n+pub static SLEUTH: Emoji = Emoji(\"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f \", \"\");\n+pub static SPARKLES: Emoji = Emoji(\"\u2728 \", \"\");\n pub static SWIRL: Emoji = Emoji(\"\ud83c\udf00 \", \"\");\n pub static UP: Emoji = Emoji(\"\ud83c\udd99 \", \"\");\n pub static WARN: Emoji = Emoji(\"\u26a0\ufe0f \", \"\");\n",
        "test_patch": "diff --git a/src/commands/publish/preview/mod.rs b/src/commands/publish/preview/mod.rs\n--- a/src/commands/publish/preview/mod.rs\n+++ b/src/commands/publish/preview/mod.rs\n@@ -10,63 +10,205 @@ use uuid::Uuid;\n \n use crate::commands;\n use crate::http;\n+use crate::settings::global_user::GlobalUser;\n use crate::settings::project::Project;\n use crate::terminal::message;\n+use reqwest::Client;\n+\n+// Using this instead of just `https://cloudflareworkers.com` returns just the worker response to the CLI\n+const PREVIEW_ADDRESS: &str = \"https://00000000000000000000000000000000.cloudflareworkers.com\";\n \n #[derive(Debug, Deserialize)]\n struct Preview {\n     pub id: String,\n }\n \n+impl From<ApiPreview> for Preview {\n+    fn from(api_preview: ApiPreview) -> Preview {\n+        Preview {\n+            id: api_preview.preview_id,\n+        }\n+    }\n+}\n+\n+// When making authenticated preview requests, we go through the v4 Workers API rather than\n+// hitting the preview service directly, so its response is formatted like a v4 API response.\n+// These structs are here to convert from this format into the Preview defined above.\n+#[derive(Debug, Deserialize)]\n+struct ApiPreview {\n+    pub preview_id: String,\n+}\n+\n+#[derive(Debug, Deserialize)]\n+struct V4ApiResponse {\n+    pub result: ApiPreview,\n+}\n+\n pub fn preview(\n-    project: &Project,\n-    method: Result<HTTPMethod, failure::Error>,\n+    mut project: Project,\n+    user: Option<GlobalUser>,\n+    method: HTTPMethod,\n     body: Option<String>,\n ) -> Result<(), failure::Error> {\n-    let create_address = \"https://cloudflareworkers.com/script\";\n+    let client: Client;\n+\n+    let preview = match &user {\n+        Some(user) => {\n+            log::info!(\"GlobalUser set, running with authentication\");\n+\n+            commands::build(&project)?;\n+\n+            let missing_fields = validate(&project);\n+\n+            if missing_fields.is_empty() {\n+                client = http::auth_client(&user);\n+\n+                authenticated_upload(&client, &project)?\n+            } else {\n+                message::warn(&format!(\n+                    \"Your wrangler.toml is missing the following fields: {:?}\",\n+                    missing_fields\n+                ));\n+                message::warn(\"Falling back to unauthenticated preview.\");\n+\n+                client = http::client();\n+                unauthenticated_upload(&client, &mut project)?\n+            }\n+        }\n+        None => {\n+            message::warn(\n+                \"You haven't run `wrangler config`. Running preview without authentication\",\n+            );\n+            message::help(\n+                \"Run `wrangler config` or set $CF_API_KEY and $CF_EMAIL to configure your user.\",\n+            );\n+\n+            commands::build(&project)?;\n+            client = http::client();\n+\n+            unauthenticated_upload(&client, &mut project)?\n+        }\n+    };\n+\n+    let worker_res = call_worker(&client, preview, method, body)?;\n+\n+    let msg = format!(\"Your worker responded with: {}\", worker_res);\n+    message::preview(&msg);\n+\n+    Ok(())\n+}\n+\n+fn validate(project: &Project) -> Vec<&str> {\n+    let mut missing_fields = Vec::new();\n+\n+    if project.account_id.is_empty() {\n+        missing_fields.push(\"account_id\")\n+    };\n+    if project.name.is_empty() {\n+        missing_fields.push(\"name\")\n+    };\n+\n+    match &project.kv_namespaces {\n+        Some(kv_namespaces) => {\n+            for kv in kv_namespaces {\n+                if kv.binding.is_empty() {\n+                    missing_fields.push(\"kv-namespace binding\")\n+                }\n+\n+                if kv.id.is_empty() {\n+                    missing_fields.push(\"kv-namespace id\")\n+                }\n+            }\n+        }\n+        None => {}\n+    }\n+\n+    missing_fields\n+}\n+\n+fn authenticated_upload(client: &Client, project: &Project) -> Result<Preview, failure::Error> {\n+    let create_address = format!(\n+        \"https://api.cloudflare.com/client/v4/accounts/{}/workers/scripts/{}/preview\",\n+        project.account_id, project.name\n+    );\n+    log::info!(\"address: {}\", create_address);\n+\n+    let script_upload_form = publish::build_script_upload_form(&project)?;\n+\n+    let mut res = client\n+        .post(&create_address)\n+        .multipart(script_upload_form)\n+        .send()?\n+        .error_for_status()?;\n+\n+    let text = &res.text()?;\n+    log::info!(\"Response from preview: {:#?}\", text);\n+\n+    let response: V4ApiResponse =\n+        serde_json::from_str(text).expect(\"could not create a script on cloudflareworkers.com\");\n+\n+    Ok(Preview::from(response.result))\n+}\n \n-    let client = http::client();\n+fn unauthenticated_upload(\n+    client: &Client,\n+    project: &mut Project,\n+) -> Result<Preview, failure::Error> {\n+    let create_address = \"https://cloudflareworkers.com/script\";\n+    log::info!(\"address: {}\", create_address);\n \n-    commands::build(&project)?;\n+    // KV namespaces are not supported by the preview service unless you authenticate\n+    // so we omit them and provide the user with a little guidance. We don't error out, though,\n+    // because there are valid workarounds for this for testing purposes.\n+    if project.kv_namespaces.is_some() {\n+        message::warn(\n+            \"KV Namespaces are not supported in preview without setting API credentials and account_id\",\n+        );\n+        project.kv_namespaces = None;\n+    }\n \n     let script_upload_form = publish::build_script_upload_form(project)?;\n \n-    let res = client\n+    let mut res = client\n         .post(create_address)\n         .multipart(script_upload_form)\n         .send()?\n-        .error_for_status();\n+        .error_for_status()?;\n \n-    let text = &res?.text()?;\n-    log::info!(\"Response from preview: {:?}\", text);\n+    let text = &res.text()?;\n+    log::info!(\"Response from preview: {:#?}\", text);\n \n-    let p: Preview =\n+    let preview: Preview =\n         serde_json::from_str(text).expect(\"could not create a script on cloudflareworkers.com\");\n \n+    Ok(preview)\n+}\n+\n+fn call_worker(\n+    client: &Client,\n+    preview: Preview,\n+    method: HTTPMethod,\n+    body: Option<String>,\n+) -> Result<String, failure::Error> {\n     let session = Uuid::new_v4().to_simple();\n \n     let preview_host = \"example.com\";\n     let https = 1;\n-    let script_id = &p.id;\n+    let script_id = &preview.id;\n \n-    let preview_address = \"https://00000000000000000000000000000000.cloudflareworkers.com\";\n     let cookie = format!(\n         \"__ew_fiddle_preview={}{}{}{}\",\n         script_id, session, https, preview_host\n     );\n \n-    let method = method.unwrap_or_default();\n-\n-    let worker_res = match method {\n-        HTTPMethod::Get => get(preview_address, cookie, client)?,\n-        HTTPMethod::Post => post(preview_address, cookie, client, body)?,\n+    let res = match method {\n+        HTTPMethod::Get => get(cookie, &client)?,\n+        HTTPMethod::Post => post(cookie, &client, body)?,\n     };\n-    let msg = format!(\"Your worker responded with: {}\", worker_res);\n-    message::preview(&msg);\n \n     open(preview_host, https, script_id)?;\n \n-    Ok(())\n+    Ok(res)\n }\n \n fn open(preview_host: &str, https: u8, script_id: &str) -> Result<(), failure::Error> {\n",
        "problem_statement": "Preview throws Server Error: 502 Bad Gateway\n### \ud83d\udc1b Bug Report\r\n\r\n#### Environment\r\n\r\n* operating system: macOS\r\n* output of `rustc -V`:\r\n* output of `node -v`:\r\n* output of `wrangler -V`:\r\n\r\n```\r\n\u279c rustc -V\r\nrustc 1.35.0 (3c235d560 2019-05-20)\r\n\r\n\u279c node -v                           \r\nv10.16.0\r\n\r\n\u279c RUST_LOG=info RUST_BACKTRACE=1 ./node_modules/.bin/wrangler --version\r\n\ud83d\udc77 \u2728   wrangler 1.1.1\r\n```\r\n\r\n#### Steps to reproduce\r\n\r\nRun `wrangler preview`\r\n\r\n#### What did you expect to see?\r\n\r\nClean build and display of preview.\r\n\r\n#### What did you see instead?\r\n\r\n```\r\n\u279c RUST_LOG=info RUST_BACKTRACE=1 ./node_modules/.bin/wrangler preview                    \r\n[2019-08-11T22:01:13Z INFO  wrangler] Getting project settings\r\n[2019-08-11T22:01:13Z INFO  wrangler::commands::build::wranglerjs] skipping npm install because node_modules exists\r\n[2019-08-11T22:01:13Z INFO  wrangler::install] prebuilt artifact https://github.com/cloudflare/wrangler/releases/download/v1.1.1/wranglerjs-v1.1.1.tar.gz\r\n\u2b07\ufe0f Installing wranglerjs...\r\n[2019-08-11T22:01:13Z INFO  wrangler::commands::build::wranglerjs] wranglerjs downloaded at: \"/Users/glenn/Library/Caches/.wrangler/wranglerjs-5b6f918ed4519a00\"\r\n[2019-08-11T22:01:13Z INFO  wrangler::commands::build::wranglerjs] skipping npm install because node_modules exists\r\n[2019-08-11T22:01:13Z INFO  wrangler::install] prebuilt artifact https://github.com/rustwasm/wasm-pack/releases/download/v0.8.1/wasm-pack-v0.8.1-x86_64-apple-darwin.tar.gz\r\n\u2b07\ufe0f Installing wasm-pack...\r\n[2019-08-11T22:01:13Z INFO  wrangler::commands::build::wranglerjs] Running \"/Users/glenn/.nvm/versions/node/v10.16.0/bin/node\" \"/Users/glenn/Library/Caches/.wrangler/wranglerjs-5b6f918ed4519a00\" \"--output-file=/var/folders/cg/q568zb_17fv6qx4r2lpl3g0w0000gn/T/.wranglerjs_outputwZuMa\" \"--wasm-binding=wasmprogram\" \"--no-webpack-config=1\" \"--use-entry=/Users/glenn/src/github.com/MYPROJ/MYPROJ-api-cloudflare/index.js\"\r\n\u2728   Built successfully, built project size is 22 KiB.\r\n[2019-08-11T22:01:15Z INFO  wrangler::commands::publish::upload_form] Webpack project detected. Publishing...\r\n[2019-08-11T22:01:15Z INFO  wrangler::commands::publish::upload_form] Form { boundary: \"145b6e631ed14205892b639eb78c6655\", parts: [(\"metadata\", Part { value: Body { kind: b\"{\\\"bindings\\\":[{\\\"name\\\":\\\"MYPROJ_API\\\",\\\"namespace_id\\\":\\\"REDACTED\\\",\\\"type\\\":\\\"kv_namespace\\\"}],\\\"body_part\\\":\\\"script\\\"}\" }, mime: Some(\"application/json\"), file_name: Some(\"metadata.json\"), headers: {} }), (\"script\", Part { value: Body { kind: Reader { length: 66475 } }, mime: Some(\"application/javascript\"), file_name: Some(\"script.js\"), headers: {} })] }\r\nError: https://cloudflareworkers.com/script: Server Error: 502 Bad Gateway\r\nstack backtrace:\r\n   0: backtrace::backtrace::trace::h22584d25fbba1826 (0x10cfeb72e)\r\n   1: backtrace::capture::Backtrace::new_unresolved::hfc9f84de61204b0b (0x10cfea818)\r\n   2: failure::backtrace::internal::InternalBacktrace::new::hba46b32ce7838972 (0x10cfea029)\r\n   3: <failure::backtrace::Backtrace as core::default::Default>::default::h24970bd4cf762182 (0x10cfea225)\r\n   4: wrangler::commands::publish::preview::preview::h38fb112a3adb7a96 (0x10ccc775b)\r\n   5: wrangler::run::h685661c5e5cdd2ad (0x10ccde593)\r\n   6: wrangler::main::h29514711cbac4433 (0x10ccdbe75)\r\n   7: std::rt::lang_start::{{closure}}::ha67eafa477c8744a (0x10ccdef56)\r\n   8: std::panicking::try::do_call::h8037d9f03e27d896 (0x10d0fe8b8)\r\n   9: __rust_maybe_catch_panic (0x10d1082ef)\r\n  10: std::rt::lang_start_internal::hc8e69e673740d4ae (0x10d0ff39e)\r\n  11: main (0x10ccded49)\r\n\r\n\u279c RUST_LOG=info RUST_BACKTRACE=1 ./node_modules/.bin/wrangler --version\r\n\ud83d\udc77 \u2728   wrangler 1.1.1\r\n\r\n```\r\n\r\nFYI, running `wrangler build`, or `wrangler publish` runs cleanly and works as expected.\n",
        "hints_text": "hi @grempe ! sorry you are running into this! can you tell me what sort of project this was? the preview service works on a basic js project for me- so it's possible you ran into something that was related to your script specifically- so any details around that would help me debug!\nhey @grempe ! It looks like your project includes KV namespaces, which are not supported by the preview service. This is an unfortunate bug, but we have a partial fix for it started here: https://github.com/cloudflare/wrangler/pull/424.\r\n\nHmmm. Well, that seems like a pretty critical miss after the most recent release of official support for k/v in wrangler.  It would certainly be better for developers if the preview service *did* support k/v. Even if it was mocked. Just declining to send k/v config (and adding conditional code for k/v as the PR seems to imply) doesn't seem like the right long term solution IMHO.\nI agree that is not the correct long term solution. We have a few, more robust ideas around how to improve Wrangler's interactions with the preview service, however they are not slated for work this quarter. I'll write up the start of the RFC and link it here so you can track its progress. For now, to unblock folks, the fix in the above PR is our short term solution.",
        "created_at": "2019-08-12T21:33:23Z",
        "version": "1.1"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 419,
        "instance_id": "cloudflare__wrangler-legacy-419",
        "issue_numbers": [
            "418"
        ],
        "base_commit": "f9c7e4d548bb21be789f841683578c7a4f97fe2d",
        "patch": "diff --git a/npm/README.md b/npm/README.md\n--- a/npm/README.md\n+++ b/npm/README.md\n@@ -25,11 +25,9 @@ cargo install wrangler\n \n ## \ud83c\udf99\ufe0f Commands\n \n-`wrangler` is a CLI tool designed for folks who are interested in using Cloudflare workers.\n-\n-  - ### \ud83d\udc6f `generate` \n+  - ### \ud83d\udc6f `generate`\n     Scaffold a project, including boilerplate for a Rust library and a Cloudflare Worker.\n-    You can pass a name and template to this command optionally. \n+    You can pass a name and template to this command optionally.\n \n     ```\n     wrangler generate <name> <template> --type=[\"webpack\", \"javascript\", \"rust\"]\ndiff --git a/npm/README.md b/npm/README.md\n--- a/npm/README.md\n+++ b/npm/README.md\n@@ -63,7 +61,7 @@ cargo install wrangler\n     By default, `publish` will make your worker available at `<project-name>.<subdomain>.workers.dev`.\n     To disable publishing to your workers.dev subdomain, set `private = true` in your `wrangler.toml`.\n     This setting prevents the `publish` command from making your worker publicly available. To\n-    explicitly enable deployment to `<project-name>.<subdomain>.workers.dev`, you can set `private = false`. \n+    explicitly enable deployment to `<project-name>.<subdomain>.workers.dev`, you can set `private = false`.\n \n     To use this command, you'll need to have the following keys in your `wrangler.toml`:\n \ndiff --git a/npm/README.md b/npm/README.md\n--- a/npm/README.md\n+++ b/npm/README.md\n@@ -111,8 +109,7 @@ There are two types of configuration that `wrangler` uses: global user and per p\n \n     To set up `wrangler` to work with your Cloudflare user, use the following commands:\n \n-    - \ud83d\udd27 `config`: an interactive command that asks you to pass your `email` and `api` key. Alternatively, \n-       you can use the flags `--email` and `--api-key` to the command to skip the interactive part.\n+    - \ud83d\udd27 `config`: a command that prompts you to enter your `email` and `api` key.\n     - \ud83d\udd75\ufe0f\u200d\u2640\ufe0f `whoami`: run this command to confirm that your configuration is appropriately set up.\n        When successful, this command will print out your user information, including the type of plan you\n        are currently on.\ndiff --git a/npm/README.md b/npm/README.md\n--- a/npm/README.md\n+++ b/npm/README.md\n@@ -134,7 +131,7 @@ There are two types of configuration that `wrangler` uses: global user and per p\n         - `javascript`: This project contains a single JavaScript file, defined in `package.json`'s `main` key.\n         - `rust`: This project contains a Rust crate that uses `wasm-bindgen`. It will be built with `wasm-pack`.\n         - `webpack`: This project contains any number of JavaScript files or Rust/C/C++ files that compile to\n-            WebAssembly. Rust files will be built with `wasm-pack`. `C/C++` files will be build with `emscripten`.\n+            WebAssembly. Rust files will be built with `wasm-pack`.\n             This project type uses webpack and webpack plugins in the background to build your worker.\n     - `zone_id`: This is the ID of the \"zone\" or domain you want to run your script on. This is optional if you\n         are using a workers.dev subdomain and is only reuqired for `publish --release`.\ndiff --git a/npm/README.md b/npm/README.md\n--- a/npm/README.md\n+++ b/npm/README.md\n@@ -144,12 +141,42 @@ There are two types of configuration that `wrangler` uses: global user and per p\n         - `*example.com/*`\n         - `http://example.com/hello`\n         This key is optional if you are using a workers.dev subdomain and is only required for `publish --release`.\n+    - `webpack_config`: This is the path to the webpack configuration file for your worker. This is optional and\n+        defaults to `webpack.config.js`\n+    - `[[kv-namespaces]]`: These specify any [Workers KV](https://workers.cloudflare.com/docs/reference/storage/) namespaces you want to access from\n+        inside your Worker. Each namespace you include should have an entry in your wrangler.toml that includes:\n+\n+        - `binding`: the name you want to bind to in your script\n+        - `id`: the namespace_id assigned to your kv namespace upon creation.\n+            e.g. (per namespace):\n+        ``` toml\n+        [[kv-namespaces]]\n+        binding = \"FOO\"\n+        id = \"0f2ac74b498b48028cb68387c421e279\"\n+        ```\n+        Note: Creating your KV Namespaces should be handled either via the [api](https://workers.cloudflare.com/docs/reference/storage/writing-data/) or via your Cloudflare dashboard.\n \n ## \u2693 Installation\n \n+Wrangler can be installed both through [npm](https://www.npmjs.com/get-npm) and through Rust's package manager, [Cargo](https://github.com/rust-lang/cargo).\n+\n+### Using `npm`:\n+\n+1. If you don't already have npm on your machine, install it using [npm's recommended method](https://www.npmjs.com/get-npm), a node.js version manager.\n+\n+    If you have already installed npm with a package manager, it is possible you will run into an `EACCES` error while installing wrangler. This is related to how many system packagers install npm. You can either uninstall npm and reinstall using the npm recommended install method (a version manager), or use one of our other install methods.\n+\n+1. Install Wrangler by running:\n+\n+    ```\n+    npm i @cloudflare/wrangler -g\n+    ```\n+\n+### Using `cargo`:\n+\n 1. Install `cargo`:\n \n-    Wrangler is installed through [Cargo](https://github.com/rust-lang/cargo#compiling-from-source), a Rust package manager. Rustup, a tool for installing Rust, will also install Cargo. On Linux and macOS systems, `rustup` can be installed as follows:\n+    Rustup, a tool for installing Rust, will also install Cargo. On Linux and macOS systems, `rustup` can be installed as follows:\n \n     ```\n     curl https://sh.rustup.rs -sSf | sh\n",
        "test_patch": "diff --git a/npm/README.md b/npm/README.md\n--- a/npm/README.md\n+++ b/npm/README.md\n@@ -2,10 +2,10 @@\n \n ![Banner](/banner.png)\n \n-[![crates.io](https://meritbadge.herokuapp.com/wrangler)](https://crates.io/crates/wrangler)\n+[![crates.io](https://meritbadge.herokuapp.com/wrangler)](https://crates.io/crates/wrangler) &nbsp;\n [![Build Status](https://dev.azure.com/ashleygwilliams/wrangler/_apis/build/status/cloudflare.wrangler?branchName=master)](https://dev.azure.com/ashleygwilliams/wrangler/_build/latest?definitionId=1&branchName=master)\n \n-Get started with Cloudflare Workers and Wrangler by reading the [documentation](https://workers.cloudflare.com/).\n+`wrangler` is a CLI tool designed for folks who are interested in using [Cloudflare Workers](https://workers.cloudflare.com/).\n \n ## Installation\n \ndiff --git a/npm/README.md b/npm/README.md\n--- a/npm/README.md\n+++ b/npm/README.md\n@@ -163,14 +190,33 @@ There are two types of configuration that `wrangler` uses: global user and per p\n     cargo install wrangler\n     ```\n \n-1. Troubleshooting OpenSSL errors\n-\n-    If you are on a Mac, you might encounter an OpenSSL error when attempting to generate a project. You can resolve that issue by installing OpenSSL v1.1 through Homebrew (need to install Homebrew? Instructions available [here](https://brew.sh/)).\n+    Installing wrangler on linux requires some [OpenSSL-related packages](https://docs.rs/openssl/0.10.24/openssl/#automatic) to be installed. If you don't want to deal with this, you can use vendored OpenSSL.\n \n     ```\n-    $ brew install openssl@1.1\n+    cargo install wrangler --features vendored-openssl\n     ```\n \n+### Manual Install:\n+\n+1. Download the binary tarball for your platform from our [releases page](https://github.com/cloudflare/wrangler/releases). You don't need to download wranglerjs, wrangler will install that for you.\n+\n+2. Unpack the tarball and place the binary `wrangler` somewhere on your `PATH`, preferably `/usr/local/bin` for linux/macOS or `Program Files` for windows.\n+\n+\n+## Updating `wrangler`:\n+\n+   To get the latest version of Wrangler, using Cargo, run:\n+\n+   ```\n+   cargo install wrangler --force\n+   ```\n+\n+   To get the latest version of Wrangler, using NPM, run:\n+\n+   ```\n+   npm install @cloudflare/wrangler\n+   ```\n+\n ## \u26a1 Quick Start\n \n 1. Generate a new project:\ndiff --git a/npm/install-wrangler.js b/npm/install-wrangler.js\n--- a/npm/install-wrangler.js\n+++ b/npm/install-wrangler.js\n@@ -10,8 +10,8 @@ const { homedir } = require('os');\n \n const cwd = join(homedir(), \".wrangler\");\n \n-function getLatestRelease() {\n-  return get(\"https://api.github.com/repos/cloudflare/wrangler/releases/latest\")\n+function getReleaseByTag(tag) {\n+  return get(`https://api.github.com/repos/cloudflare/wrangler/releases/tags/v${tag}`)\n     .then(res => get(res.data.assets_url))\n     .then(res => res.data);\n }\ndiff --git a/npm/install-wrangler.js b/npm/install-wrangler.js\n--- a/npm/install-wrangler.js\n+++ b/npm/install-wrangler.js\n@@ -60,7 +60,7 @@ if (!existsSync(cwd)) {\n   mkdirSync(cwd);\n }\n \n-getLatestRelease()\n+getReleaseByTag(\"1.1.1\")\n   .then(assets => {\n     const [compatibleAssets] = assets.filter(asset =>\n       asset.name.endsWith(getPlatform() + \".tar.gz\")\ndiff --git a/npm/install-wrangler.js b/npm/install-wrangler.js\n--- a/npm/install-wrangler.js\n+++ b/npm/install-wrangler.js\n@@ -75,6 +75,4 @@ getLatestRelease()\n   .then(() => {\n     console.log(\"Wrangler has been installed!\");\n   })\n-  .catch(err => {\n-    throw err;\n-  });\n+  .catch(e => { console.error(\"Error fetching release\", e.message); });\n",
        "problem_statement": "Wrangler Installer should point to a specific version of Wrangler\nRelated to #380.\n",
        "hints_text": "",
        "created_at": "2019-08-09T18:52:53Z",
        "version": "1.1"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 405,
        "instance_id": "cloudflare__wrangler-legacy-405",
        "issue_numbers": [
            "339",
            "406"
        ],
        "base_commit": "c8c674b7373a9636fbd00a876ae89c97b8f4bbcf",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -18,9 +18,14 @@ name = \"ansi_term\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"arc-swap\"\n+version = \"0.3.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"arrayref\"\n version = \"0.3.5\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -50,24 +55,24 @@ name = \"atty\"\n version = \"0.2.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"autocfg\"\n-version = \"0.1.5\"\n+version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.34\"\n+version = \"0.3.37\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"backtrace-sys 0.1.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -75,8 +80,8 @@ name = \"backtrace-sys\"\n version = \"0.1.31\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -92,16 +97,16 @@ name = \"binary-install\"\n version = \"0.0.3-alpha\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"curl 0.4.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl 0.4.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"is_executable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"zip 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"zip 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -111,12 +116,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"blake2b_simd\"\n-version = \"0.5.6\"\n+version = \"0.5.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"arrayref 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"arrayvec 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"constant_time_eq 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -138,6 +143,17 @@ dependencies = [\n  \"byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"bstr\"\n+version = \"0.2.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-automata 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"byte-tools\"\n version = \"0.3.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -164,7 +180,7 @@ version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -172,8 +188,8 @@ name = \"bzip2-sys\"\n version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -181,13 +197,13 @@ name = \"c2-chacha\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ppv-lite86 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.38\"\n+version = \"1.0.45\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -195,6 +211,18 @@ name = \"cfg-if\"\n version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"chrono\"\n+version = \"0.4.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-integer 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"clap\"\n version = \"2.33.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -205,19 +233,19 @@ dependencies = [\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"clicolors-control\"\n-version = \"1.0.0\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -228,15 +256,38 @@ dependencies = [\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"cloudflare\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"http 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"maplit 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"reqwest 0.9.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_with 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_yaml 0.8.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-term 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"sloggers 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"config\"\n version = \"0.9.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rust-ini 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -249,20 +300,20 @@ version = \"0.7.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"clicolors-control 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"encode_unicode 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"constant_time_eq\"\n-version = \"0.1.3\"\n+version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -283,8 +334,8 @@ dependencies = [\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"publicsuffix 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"publicsuffix 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"try_from 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -297,7 +348,7 @@ version = \"0.6.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -315,35 +366,8 @@ dependencies = [\n \n [[package]]\n name = \"crossbeam\"\n-version = \"0.5.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crossbeam-deque 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crossbeam-epoch 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"crossbeam-channel\"\n-version = \"0.3.9\"\n+version = \"0.2.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"crossbeam-deque\"\n-version = \"0.6.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"crossbeam-epoch 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n \n [[package]]\n name = \"crossbeam-deque\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -354,19 +378,6 @@ dependencies = [\n  \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"crossbeam-epoch\"\n-version = \"0.6.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"arrayvec 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"crossbeam-epoch\"\n version = \"0.7.2\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -375,7 +386,7 @@ dependencies = [\n  \"arrayvec 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memoffset 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scopeguard 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -394,38 +405,62 @@ version = \"0.6.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"csv\"\n+version = \"1.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bstr 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"csv-core 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ryu 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"csv-core\"\n+version = \"0.1.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"curl\"\n-version = \"0.4.22\"\n+version = \"0.4.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"curl-sys 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl-sys 0.4.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.48 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.49 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"schannel 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"socket2 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"curl-sys\"\n-version = \"0.4.20\"\n+version = \"0.4.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.48 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.49 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"data-encoding\"\n+version = \"2.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"difference\"\n version = \"2.0.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -444,9 +479,9 @@ name = \"dirs\"\n version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_users 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -461,12 +496,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"encode_unicode\"\n-version = \"0.3.5\"\n+version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"encoding_rs\"\n-version = \"0.8.17\"\n+version = \"0.8.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -478,9 +513,9 @@ version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"humantime 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"humantime 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -489,7 +524,7 @@ name = \"error-chain\"\n version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -498,9 +533,9 @@ name = \"escargot\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -517,7 +552,7 @@ name = \"failure\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -528,7 +563,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -543,19 +578,19 @@ version = \"0.2.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"flate2\"\n-version = \"1.0.9\"\n+version = \"1.0.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miniz-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"miniz_oxide_c_api 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"miniz_oxide 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -581,8 +616,8 @@ name = \"fs2\"\n version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -604,7 +639,7 @@ name = \"fsevent-sys\"\n version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -628,7 +663,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"futures\"\n-version = \"0.1.28\"\n+version = \"0.1.29\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -636,7 +671,7 @@ name = \"futures-cpupool\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -645,16 +680,17 @@ name = \"generic-array\"\n version = \"0.12.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"typenum 1.11.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"getrandom\"\n-version = \"0.1.8\"\n+version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasi 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -665,9 +701,9 @@ dependencies = [\n  \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"http 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indexmap 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -695,7 +731,7 @@ version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"http 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-buf 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -707,7 +743,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"humantime\"\n-version = \"1.2.0\"\n+version = \"1.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -715,11 +751,11 @@ dependencies = [\n \n [[package]]\n name = \"hyper\"\n-version = \"0.12.33\"\n+version = \"0.12.34\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"futures-cpupool 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"h2 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"http 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -748,8 +784,8 @@ version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper 0.12.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hyper 0.12.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -776,7 +812,7 @@ dependencies = [\n \n [[package]]\n name = \"indexmap\"\n-version = \"1.0.2\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -786,7 +822,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"inotify-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -794,7 +830,7 @@ name = \"inotify-sys\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -802,7 +838,7 @@ name = \"iovec\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -811,7 +847,7 @@ name = \"is_executable\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -835,7 +871,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"lazy_static\"\n-version = \"1.3.0\"\n+version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -845,12 +881,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.60\"\n+version = \"0.2.62\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libflate\"\n-version = \"0.1.26\"\n+version = \"0.1.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"adler32 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -864,9 +900,9 @@ name = \"libz-sys\"\n version = \"1.0.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -901,6 +937,14 @@ dependencies = [\n  \"scopeguard 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"log\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"log\"\n version = \"0.4.8\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -909,6 +953,11 @@ dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"maplit\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"matches\"\n version = \"0.1.8\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -918,11 +967,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"memchr\"\n version = \"2.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"memoffset\"\n-version = \"0.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"memoffset\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -934,19 +981,16 @@ dependencies = [\n \n [[package]]\n name = \"mime\"\n-version = \"0.3.13\"\n+version = \"0.3.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"unicase 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n \n [[package]]\n name = \"mime_guess\"\n version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"mime 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicase 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mime 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicase 2.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -954,29 +998,18 @@ name = \"miniz-sys\"\n version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"miniz_oxide\"\n-version = \"0.3.1\"\n+version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"adler32 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"miniz_oxide_c_api\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"cc 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"miniz_oxide 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"mio\"\n version = \"0.6.19\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -986,7 +1019,7 @@ dependencies = [\n  \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1021,12 +1054,12 @@ name = \"native-tls\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl 0.10.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.48 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.49 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"schannel 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"security-framework 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"security-framework-sys 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1039,8 +1072,8 @@ version = \"0.2.33\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1068,11 +1101,20 @@ dependencies = [\n  \"fsevent-sys 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"inotify 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio-extras 2.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 2.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num-integer\"\n+version = \"0.1.41\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1088,7 +1130,7 @@ name = \"num-traits\"\n version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1096,7 +1138,7 @@ name = \"num_cpus\"\n version = \"1.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1117,9 +1159,9 @@ dependencies = [\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.48 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.49 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1129,22 +1171,22 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"openssl-src\"\n-version = \"111.4.0+1.1.1c\"\n+version = \"111.6.0+1.1.1d\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"openssl-sys\"\n-version = \"0.9.48\"\n+version = \"0.9.49\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cc 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-src 111.4.0+1.1.1c (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-src 111.6.0+1.1.1d (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1156,15 +1198,6 @@ dependencies = [\n  \"stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"parking_lot\"\n-version = \"0.6.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"parking_lot\"\n version = \"0.7.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1184,28 +1217,16 @@ dependencies = [\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"parking_lot_core\"\n-version = \"0.3.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"parking_lot_core\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1215,11 +1236,11 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1234,7 +1255,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"pkg-config\"\n-version = \"0.3.15\"\n+version = \"0.3.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1270,6 +1291,19 @@ dependencies = [\n  \"treeline 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"prettytable-rs\"\n+version = \"0.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"csv 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"proc-macro2\"\n version = \"0.4.30\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1278,16 +1312,24 @@ dependencies = [\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"publicsuffix\"\n-version = \"1.5.2\"\n+version = \"1.5.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"idna 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1304,15 +1346,11 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"rand\"\n-version = \"0.5.6\"\n+name = \"quote\"\n+version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1320,8 +1358,8 @@ name = \"rand\"\n version = \"0.6.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1330,18 +1368,18 @@ dependencies = [\n  \"rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_pcg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_xorshift 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand\"\n-version = \"0.7.0\"\n+version = \"0.7.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"getrandom 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_chacha 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1350,7 +1388,7 @@ name = \"rand_chacha\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1360,7 +1398,7 @@ version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"c2-chacha 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1378,10 +1416,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rand_core\"\n-version = \"0.5.0\"\n+version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"getrandom 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1397,7 +1435,7 @@ name = \"rand_hc\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1413,9 +1451,9 @@ name = \"rand_jitter\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1425,10 +1463,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1436,7 +1474,7 @@ name = \"rand_pcg\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1469,23 +1507,31 @@ dependencies = [\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rust-argon2 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rust-argon2 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"regex\"\n-version = \"1.2.1\"\n+version = \"1.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"aho-corasick 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex-syntax 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"regex-automata\"\n+version = \"0.1.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"regex-syntax\"\n-version = \"0.6.11\"\n+version = \"0.6.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1493,29 +1539,29 @@ name = \"remove_dir_all\"\n version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"reqwest\"\n-version = \"0.9.19\"\n+version = \"0.9.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cookie 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cookie_store 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"encoding_rs 0.8.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"encoding_rs 0.8.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"http 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper 0.12.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hyper 0.12.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hyper-tls 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mime 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mime 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mime_guess 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_urlencoded 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1536,12 +1582,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rust-argon2\"\n-version = \"0.5.0\"\n+version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"blake2b_simd 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crossbeam 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"blake2b_simd 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1551,7 +1597,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-demangle\"\n-version = \"0.1.15\"\n+version = \"0.1.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1580,8 +1626,8 @@ name = \"schannel\"\n version = \"0.1.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1601,7 +1647,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"core-foundation 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"security-framework-sys 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1633,10 +1679,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.98\"\n+version = \"1.0.100\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde_derive 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1647,18 +1693,18 @@ dependencies = [\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"linked-hash-map 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.98\"\n+version = \"1.0.100\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1668,7 +1714,18 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ryu 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_qs\"\n+version = \"0.4.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1686,10 +1743,40 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"serde_with\"\n+version = \"1.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_with_macros 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_with_macros\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_yaml\"\n+version = \"0.8.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"dtoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"sha-1\"\n version = \"0.8.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1711,6 +1798,82 @@ name = \"slab\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"slog\"\n+version = \"2.5.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"slog-async\"\n+version = \"2.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"slog-kvfilter\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"slog-scope\"\n+version = \"4.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"arc-swap 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"slog-stdlog\"\n+version = \"3.0.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"crossbeam 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-scope 4.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"slog-term\"\n+version = \"2.4.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"sloggers\"\n+version = \"0.3.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libflate 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-async 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-kvfilter 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-scope 4.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-stdlog 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-term 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"trackable 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"smallvec\"\n version = \"0.6.10\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1722,9 +1885,9 @@ version = \"0.3.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1747,7 +1910,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"syn\"\n-version = \"0.15.43\"\n+version = \"0.15.44\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1755,6 +1918,16 @@ dependencies = [\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"syn\"\n+version = \"1.0.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"synstructure\"\n version = \"0.10.2\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1762,7 +1935,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1777,7 +1950,7 @@ version = \"0.4.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"filetime 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"xattr 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1788,11 +1961,21 @@ version = \"3.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"term\"\n+version = \"0.5.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1800,7 +1983,7 @@ name = \"termcolor\"\n version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"wincolor 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wincolor 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1808,7 +1991,7 @@ name = \"termios\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1821,7 +2004,7 @@ name = \"textwrap\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1829,7 +2012,7 @@ name = \"thread_local\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1837,9 +2020,9 @@ name = \"time\"\n version = \"0.1.42\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1848,7 +2031,7 @@ version = \"0.1.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-current-thread 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1867,7 +2050,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"either 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1875,7 +2058,7 @@ name = \"tokio-current-thread\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-executor 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1885,7 +2068,7 @@ version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1894,7 +2077,7 @@ version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1904,8 +2087,8 @@ version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1922,7 +2105,7 @@ version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1931,7 +2114,7 @@ version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1946,7 +2129,7 @@ dependencies = [\n  \"crossbeam-deque 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-queue 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1960,7 +2143,7 @@ version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-executor 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1970,15 +2153,32 @@ name = \"toml\"\n version = \"0.4.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"toml\"\n-version = \"0.5.1\"\n+version = \"0.5.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"trackable\"\n+version = \"0.2.23\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"trackable_derive 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"trackable_derive\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.44 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2001,12 +2201,12 @@ dependencies = [\n \n [[package]]\n name = \"typenum\"\n-version = \"1.10.0\"\n+version = \"1.11.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"unicase\"\n-version = \"2.4.0\"\n+version = \"2.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2030,7 +2230,7 @@ dependencies = [\n \n [[package]]\n name = \"unicode-width\"\n-version = \"0.1.5\"\n+version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2038,6 +2238,11 @@ name = \"unicode-xid\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"url\"\n version = \"1.7.2\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2087,7 +2292,7 @@ version = \"2.2.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"same-file 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2096,18 +2301,23 @@ name = \"want\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"try-lock 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"wasi\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"which\"\n version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2117,7 +2327,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"winapi\"\n-version = \"0.3.7\"\n+version = \"0.3.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2139,7 +2349,7 @@ name = \"winapi-util\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2149,10 +2359,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"wincolor\"\n-version = \"1.0.1\"\n+version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2161,7 +2371,7 @@ name = \"winreg\"\n version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2173,27 +2383,34 @@ dependencies = [\n  \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cloudflare 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"console 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"exitfailure 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"http 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"notify-forked 4.0.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl 0.10.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"prettytable-rs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"reqwest 0.9.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"reqwest 0.9.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"text_io 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 2.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"which 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ws 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2229,7 +2446,7 @@ name = \"xattr\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2242,12 +2459,12 @@ dependencies = [\n \n [[package]]\n name = \"zip\"\n-version = \"0.5.2\"\n+version = \"0.5.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bzip2 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libflate 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"podio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2313,7 +2534,7 @@ dependencies = [\n \"checksum failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea1063915fd7ef4309e222a5a07cf9c319fb9c7836b1f89b85458672dbb127e1\"\n \"checksum fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n \"checksum filetime 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f8c63033fcba1f51ef744505b3cad42510432b904c062afa67ad7ece008429d\"\n-\"checksum flate2 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"550934ad4808d5d39365e5d61727309bf18b3b02c6c56b729cb92e7dd84bc3d8\"\n+\"checksum flate2 1.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2adaffba6388640136149e18ed080b77a78611c1e1d6de75aedcdf78df5d4682\"\n \"checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \"checksum foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\n \"checksum foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2324,21 +2545,21 @@ dependencies = [\n \"checksum fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n \"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n \"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n-\"checksum futures 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"45dc39533a6cae6da2b56da48edae506bb767ec07370f86f70fc062e9d435869\"\n+\"checksum futures 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1b980f2816d6ee8673b6517b52cb0e808a180efc92e5c19d02cdda79066703ef\"\n \"checksum futures-cpupool 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab90cde24b3319636588d0c35fe03b1333857621051837ed769faefb4c2162e4\"\n \"checksum generic-array 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec\"\n-\"checksum getrandom 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34f33de6f0ae7c9cb5e574502a562e2b512799e32abb801cd1e79ad952b62b49\"\n+\"checksum getrandom 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"473a1265acc8ff1e808cd0a1af8cee3c2ee5200916058a2ca113c29f2d903571\"\n \"checksum h2 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a5b34c246847f938a410a03c5458c7fee2274436675e76d8b903c08efc29c462\"\n \"checksum hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n \"checksum http 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"372bcb56f939e449117fb0869c2e8fd8753a8223d92a172c6e808cf123a5b6e4\"\n \"checksum http-body 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6741c859c1b2463a423a1dbce98d418e6c3c3fc720fb0d45528657320920292d\"\n \"checksum httparse 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd179ae861f0c2e53da70d892f5f3029f9594be0c41dc5269cd371691b1dc2f9\"\n-\"checksum humantime 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ca7e5f2e110db35f93b837c81797f3714500b81d517bf20c431b16d3ca4f114\"\n-\"checksum hyper 0.12.33 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7cb44cbce9d8ee4fb36e4c0ad7b794ac44ebaad924b9c8291a63215bb44c2c8f\"\n+\"checksum humantime 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\n+\"checksum hyper 0.12.34 (registry+https://github.com/rust-lang/crates.io-index)\" = \"898a87371a3999b2f731b9af636cd76aa20de10e69c2daf3e71388326b619fe0\"\n \"checksum hyper-tls 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a800d6aa50af4b5850b2b0f659625ce9504df908e9733b635720483be26174f\"\n \"checksum idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e\"\n \"checksum idna 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\n-\"checksum indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e81a7c05f79578dbc15793d8b619db9ba32b4577003ef3af1a91c416798c58d\"\n+\"checksum indexmap 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a61202fbe46c4a951e9404a720a0180bcf3212c750d735cb5c4ba4dc551299f3\"\n \"checksum inotify 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40b54539f3910d6f84fbf9a643efd6e3aa6e4f001426c0329576128255994718\"\n \"checksum inotify-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e74a1aa87c59aeff6ef2cc2fa62d41bc43f54952f55652656b18a02fd5e356c0\"\n \"checksum iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbe6e417e7d0975db6512b90796e8ce223145ac4e33c377e4a42882a0e88bb08\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2419,14 +2641,15 @@ dependencies = [\n \"checksum rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\"\n \"checksum redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2439c63f3f6139d1b57529d16bc3b8bb855230c8efcc5d3a896c8bea7c3b1e84\"\n \"checksum redox_users 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ecedbca3bf205f8d8f5c2b44d83cd0690e39ee84b951ed649e9f1841132b66d\"\n-\"checksum regex 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88c3d9193984285d544df4a30c23a4e62ead42edf70a4452ceb76dac1ce05c26\"\n-\"checksum regex-syntax 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b143cceb2ca5e56d5671988ef8b15615733e7ee16cd348e064333b251b89343f\"\n+\"checksum regex 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dc220bd33bdce8f093101afe22a037b8eb0e5af33592e6a9caafff0d4cb81cbd\"\n+\"checksum regex-automata 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92b73c2a1770c255c240eaa4ee600df1704a38dc3feaa6e949e7fcd4f8dc09f9\"\n+\"checksum regex-syntax 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11a7e20d1cce64ef2fed88b66d347f88bd9babb82845b2b858f3edbf59a4f716\"\n \"checksum remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e\"\n-\"checksum reqwest 0.9.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d0777154c2c3eb54f5c480db01de845652d941e47191277cc673634c3853939\"\n+\"checksum reqwest 0.9.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f6d896143a583047512e59ac54a215cb203c29cc941917343edea3be8df9c78\"\n \"checksum rle-decode-fast 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cabe4fa914dec5870285fa7f71f602645da47c486e68486d2b4ceb4a343e90ac\"\n-\"checksum rust-argon2 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"81ed8d04228b44a740c8d46ff872a28e50fff3d659f307ab4da2cc502e019ff3\"\n+\"checksum rust-argon2 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ca4eaef519b494d1f2848fc602d18816fed808a981aedf4f1f00ceb7c9d32cf\"\n \"checksum rust-ini 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e52c148ef37f8c375d49d5a73aa70713125b7f19095948a923f80afdeb22ec2\"\n-\"checksum rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7f4dccf6f4891ebcc0c39f9b6eb1a83b9bf5d747cb439ec6fba4f3b977038af\"\n+\"checksum rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n \"checksum ryu 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c92464b447c0ee8c4fb3824ecc8383b81717b9f1e74ba2e72540aef7b9f82997\"\n \"checksum same-file 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"585e8ddcedc187886a30fa705c47985c3fa88d06624095856b36ca0b82ff4421\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2492,17 +2731,18 @@ dependencies = [\n \"checksum version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"914b1a6776c4c929a602fafd8bc742e06365d4bcbe48c30f9cca5824f70dc9dd\"\n \"checksum walkdir 2.2.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9658c94fa8b940eab2250bd5a457f9c48b748420d71293b165c8cdbe2f55f71e\"\n \"checksum want 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b6395efa4784b027708f7451087e647ec73cc74f5d9bc2e418404248d679a230\"\n+\"checksum wasi 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b89c3ce4ce14bdc6fb6beaf9ec7928ca331de5df7e5ea278375642a2f478570d\"\n \"checksum which 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b57acb10231b9493c8472b20cb57317d0679a49e0bdbee44b3b803a6473af164\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n-\"checksum winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f10e386af2b13e47c89e7236a7a14a086791a2b88ebad6df9bf42040195cf770\"\n+\"checksum winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8093091eeb260906a183e6ae1abdba2ef5ef2257a21801128899c3fc699229c6\"\n \"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n \"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n \"checksum winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7168bab6e1daee33b4557efd0e95d5ca70a03706d39fa5f3fe7a236f584b03c9\"\n \"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n-\"checksum wincolor 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"561ed901ae465d6185fa7864d63fbd5720d0ef718366c9a4dc83cf6170d7e9ba\"\n+\"checksum wincolor 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"96f5016b18804d24db43cebf3c77269e7569b8954a8464501c216cc5e070eaa9\"\n \"checksum winreg 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2986deb581c4fe11b621998a5e53361efe6b48a151178d0cd9eeffa4dc6acc9\"\n \"checksum ws 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8a6f5bb86663ff4d1639408410f50bf6050367a8525d644d49a6894cd618a631\"\n \"checksum ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\"\n \"checksum xattr 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"244c3741f4240ef46274860397c7c74e50eb23624996930e484c16679633a54c\"\n \"checksum yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"65923dd1784f44da1d2c3dbbc5e822045628c590ba72123e1c73d3c230c4434d\"\n-\"checksum zip 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c18fc320faf909036e46ac785ea827f72e485304877faf1a3a39538d3714dbc3\"\n+\"checksum zip 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c21bb410afa2bd823a047f5bda3adb62f51074ac7e06263b2c97ecdd47e9fc6\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -14,6 +14,7 @@ build = \"build.rs\"\n atty = \"0.2.11\"\n binary-install = \"0.0.3-alpha\"\n clap = \"2.32.0\"\n+cloudflare = \"0.3.1\"\n config = \"0.9.2\"\n console = \"0.7.5\"\n dirs = \"1.0.5\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -35,8 +36,14 @@ base64 = \"0.10.1\"\n lazy_static = \"1.3.0\"\n text_io = \"0.1.7\"\n exitfailure = \"0.5.1\"\n+prettytable-rs = \"0.8.0\"\n notify-forked = \"4.0.12\"\n ws = \"0.9.0\"\n+url = \"2.1.0\"\n+walkdir = \"2.2.9\"\n+percent-encoding = \"1.0.1\"\n+http = \"0.1.1\"\n+regex = \"1\"\n \n [dev-dependencies]\n assert_cmd = \"0.11.1\"\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -46,14 +46,18 @@ General documentation surrounding workers development and using `wrangler` can b\n   wrangler generate <name> <template> --type=[\"webpack\", \"javascript\", \"rust\"]\n   ```\n \n-  All of the arguments and flags to this command are optional: - `name`: defaults to `worker` - `template`: defaults to the [`https://github.com/cloudflare/worker-template`](https://github.com/cloudflare/worker-template) - `type`: defaults to \"webpack\"\n+  All of the arguments and flags to this command are optional:\n+\n+  - `name`: defaults to `worker`\n+  - `template`: defaults to the [`https://github.com/cloudflare/worker-template`](https://github.com/cloudflare/worker-template)\n+  - `type`: defaults to \"webpack\"\n \n - ### \ud83e\udd80\u2699\ufe0f `build`\n \n   Build your project. This command looks at your `wrangler.toml` file and runs the build steps associated\n   with the `\"type\"` declared there.\n \n-  Additionally, you can build different environments. This is useful if you have different builds for different environments, but typically isn't needed. For more information see the [environments documentation](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n+  Additionally, you can build different environments. This is useful if you have different builds for different environments, but typically isn't needed. For more information see the [environments documentation](https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md).\n \n - ### \ud83d\udd27 `config`\n \ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -113,7 +117,7 @@ If you would like to publish to your own domain, you will need to specify these\n \n #### Publishing the same code to multiple places\n \n-If you would like to be able to publish your code to multiple places, please see the documentation for [environments](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n+If you would like to be able to publish your code to multiple places, please see the documentation for [environments](https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md).\n \n - ### \ud83d\udd2c `preview`\n \ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -148,7 +152,10 @@ If you would like to be able to publish your code to multiple places, please see\n   wrangler preview post hello=hello\n   ```\n \n-  Additionally, you can preview different environments. This is useful if you have different builds for different environments (like staging vs. production), but typically isn't needed. For more information see the [environments documentation](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n+  Additionally, you can preview different environments. This is useful if you have different builds for different environments (like staging vs. production), but typically isn't needed. For more information see the [environments documentation](https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md).\n+\n+- ### \ud83d\uddc2\ufe0f `kv`\n+  Interact with your Cloudflare Workers KV store. [Check out the docs.](./docs/content/kv_commands.md)\n \n ## \ud83d\udd29 Configuration\n \ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -191,17 +198,17 @@ There are two types of configuration that `wrangler` uses: global user and per p\n         - `webpack`: This project contains any number of JavaScript files or Rust/C/C++ files that compile to\n             WebAssembly. Rust files will be built with `wasm-pack`.\n             This project type uses webpack and webpack plugins in the background to build your worker.\n-    - `zone_id`: This is the ID of the \"zone\" or domain you want to run your script on. This is optional if you are using a [workers.dev](https://workers.dev) subdomain and is only required when `workers_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md) configuration.\n+    - `zone_id`: This is the ID of the \"zone\" or domain you want to run your script on. This is optional if you are using a [workers.dev](https://workers.dev) subdomain and is only required when `workers_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md) configuration.\n     - `account_id`: This is the ID of the account associated with your zone. You might have more than one account, so make sure to use the ID of the account associated with the `zone_id` you provide, if you provide one.\n     - `route`: This is the route you'd like to use your worker on. You need to include the hostname. Examples:\n \n         - `*example.com/*`\n         - `http://example.com/hello`\n         \n-        This key is optional if you are using a [workers.dev](https://workers.dev) subdomain and is only required when `workers_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md). \n+        This key is optional if you are using a [workers.dev](https://workers.dev) subdomain and is only required when `workers_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md). \n \n     - `webpack_config`: This is the path to the webpack configuration file for your worker. This is optional and defaults to `webpack.config.js`\n-    - `workers_dev`: This is a boolean flag that specifies if your worker will be deployed to your [workers.dev](https://workers.dev) subdomain. For more information, please read the [environments documentation](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n+    - `workers_dev`: This is a boolean flag that specifies if your worker will be deployed to your [workers.dev](https://workers.dev) subdomain. For more information, please read the [environments documentation](https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md).\n     - `kv-namespaces`: These specify any [Workers KV](https://workers.cloudflare.com/docs/reference/storage/) Namespaces you want to access from\n         inside your Worker. Each namespace you include should have an entry in your `wrangler.toml` that includes:\n \ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -217,11 +224,13 @@ There are two types of configuration that `wrangler` uses: global user and per p\n         ]\n         ```\n \n-        Note: Creating your KV Namespaces should be handled either via the [api](https://workers.cloudflare.com/docs/reference/storage/writing-data/) or via your Cloudflare dashboard.\n+        Note: Creating your KV Namespaces should be handled using Wrangler's [KV Commands](./docs/content/kv_commands.md).\n+\n+    #### Environments\n \n     #### Environments\n \n-    Additionally, you can configure Wrangler to publish to multiple environments. This means that your same codebase can be deployed to multiple places on your [workers.dev](https://workers.dev) subdomain, across multiple accounts, zones, and routes. Read more [here](/docs/environments.md).\n+    Additionally, you can configure Wrangler to publish to multiple environments. This means that your same codebase can be deployed to multiple places on your [workers.dev](https://workers.dev) subdomain, across multiple accounts, zones, and routes. Read more [here](/docs/content/environments.md).\n \n ## Additional Installation Instructions\n \ndiff --git a/docs/environments.md b/docs/content/environments.md\n--- a/docs/environments.md\n+++ b/docs/content/environments.md\n@@ -289,7 +289,7 @@ You will be warned if `workers_dev` is left out of the top level configuration b\n ```console\n $ wrangler publish\n \u26a0\ufe0f  Please specify the workers_dev boolean in the top level of your wrangler.toml.\n-\u26a0\ufe0f  If you do not add workers_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\n+\u26a0\ufe0f  If you do not add workers_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md for more information.\n \u2728  Built successfully, built project size is 517 bytes.\n \u2728  Successfully published your script.\n \u2728  Success! Your worker was successfully published. You can view it at https://my-worker.<your-subdomain>.workers.dev\ndiff --git a/docs/environments.md b/docs/content/environments.md\n--- a/docs/environments.md\n+++ b/docs/content/environments.md\n@@ -345,7 +345,7 @@ With this configuration, Wrangler will behave in the following manner:\n $ wrangler publish\n \u26a0\ufe0f  The `private` field is deprecated; please use `workers_dev` to toggle between publishing to your workers.dev subdomain and your own domain.\n \u26a0\ufe0f  Please specify the workers_dev boolean in the top level of your wrangler.toml.\n-\u26a0\ufe0f  If you do not add workers_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\n+\u26a0\ufe0f  If you do not add workers_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md for more information.\n \u2728  Built successfully, built project size is 523 bytes.\n \u2728  Successfully published your script to https://my-worker.<your-subdomain>.workers.dev\n ```\ndiff --git a/docs/environments.md b/docs/content/environments.md\n--- a/docs/environments.md\n+++ b/docs/content/environments.md\n@@ -355,7 +355,7 @@ $ wrangler publish --release\n \u26a0\ufe0f  --release will be deprecated.\n \u26a0\ufe0f  The `private` field is deprecated; please use `workers_dev` to toggle between publishing to your workers.dev subdomain and your own domain.\n \u26a0\ufe0f  Please specify the workers_dev boolean in the top level of your wrangler.toml.\n-\u26a0\ufe0f  If you do not add workers_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\n+\u26a0\ufe0f  If you do not add workers_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md for more information.\n \u2728  Built successfully, built project size is 523 bytes.\n \u2728  Successfully published your script to example.com/*\n ```\ndiff --git /dev/null b/src/commands/kv/bulk/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/bulk/mod.rs\n@@ -0,0 +1,7 @@\n+mod delete;\n+mod put;\n+\n+pub use delete::delete;\n+pub use put::put;\n+\n+const MAX_PAIRS: usize = 10000;\ndiff --git /dev/null b/src/commands/kv/key/delete.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/key/delete.rs\n@@ -0,0 +1,41 @@\n+use cloudflare::endpoints::workerskv::delete_key::DeleteKey;\n+use cloudflare::framework::apiclient::ApiClient;\n+\n+use crate::commands::kv;\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::target::Target;\n+use crate::terminal::message;\n+\n+pub fn delete(\n+    target: &Target,\n+    user: GlobalUser,\n+    id: &str,\n+    key: &str,\n+) -> Result<(), failure::Error> {\n+    let client = kv::api_client(user)?;\n+\n+    match kv::interactive_delete(&format!(\"Are you sure you want to delete key \\\"{}\\\"?\", key)) {\n+        Ok(true) => (),\n+        Ok(false) => {\n+            message::info(&format!(\"Not deleting key \\\"{}\\\"\", key));\n+            return Ok(());\n+        }\n+        Err(e) => failure::bail!(e),\n+    }\n+\n+    let msg = format!(\"Deleting key \\\"{}\\\"\", key);\n+    message::working(&msg);\n+\n+    let response = client.request(&DeleteKey {\n+        account_identifier: &target.account_id,\n+        namespace_identifier: id,\n+        key, // this is url encoded within cloudflare-rs\n+    });\n+\n+    match response {\n+        Ok(_) => message::success(\"Success\"),\n+        Err(e) => kv::print_error(e),\n+    }\n+\n+    Ok(())\n+}\ndiff --git /dev/null b/src/commands/kv/key/get.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/key/get.rs\n@@ -0,0 +1,39 @@\n+// todo(gabbi): This file should use cloudflare-rs instead of our http::auth_client\n+// when https://github.com/cloudflare/cloudflare-rs/issues/26 is handled (this is\n+// because the GET key operation doesn't return json on success--just the raw\n+// value).\n+\n+use cloudflare::framework::response::ApiFailure;\n+\n+use crate::commands::kv;\n+use crate::http;\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::target::Target;\n+\n+pub fn get(target: &Target, user: GlobalUser, id: &str, key: &str) -> Result<(), failure::Error> {\n+    let api_endpoint = format!(\n+        \"https://api.cloudflare.com/client/v4/accounts/{}/storage/kv/namespaces/{}/values/{}\",\n+        target.account_id,\n+        id,\n+        kv::url_encode_key(key)\n+    );\n+\n+    let client = http::auth_client(&user);\n+\n+    let mut res = client.get(&api_endpoint).send()?;\n+\n+    if res.status().is_success() {\n+        let body_text = res.text()?;\n+        // We don't use message::success because we don't want to include the emoji/formatting\n+        // in case someone is piping this to stdin\n+        print!(\"{}\", &body_text);\n+    } else {\n+        // This is logic pulled from cloudflare-rs for pretty error formatting right now;\n+        // it will be redundant when we switch to using cloudflare-rs for all API requests.\n+        let parsed = res.json();\n+        let errors = parsed.unwrap_or_default();\n+        kv::print_error(ApiFailure::Error(res.status(), errors));\n+    }\n+\n+    Ok(())\n+}\ndiff --git /dev/null b/src/commands/kv/key/key_list.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/key/key_list.rs\n@@ -0,0 +1,116 @@\n+use cloudflare::endpoints::workerskv::list_namespace_keys::ListNamespaceKeys;\n+use cloudflare::endpoints::workerskv::list_namespace_keys::ListNamespaceKeysParams;\n+use cloudflare::endpoints::workerskv::Key;\n+use cloudflare::framework::apiclient::ApiClient;\n+use cloudflare::framework::response::ApiFailure;\n+use cloudflare::framework::HttpApiClient;\n+\n+use serde_json::value::Value as JsonValue;\n+\n+use crate::settings::target::Target;\n+\n+pub struct KeyList {\n+    keys_result: Option<Vec<Key>>,\n+    prefix: Option<String>,\n+    client: HttpApiClient,\n+    account_id: String,\n+    namespace_id: String,\n+    cursor: Option<String>,\n+    init_fetch: bool,\n+}\n+\n+impl KeyList {\n+    pub fn new(\n+        target: &Target,\n+        client: HttpApiClient,\n+        namespace_id: &str,\n+        prefix: Option<&str>,\n+    ) -> KeyList {\n+        KeyList {\n+            keys_result: None,\n+            prefix: prefix.map(str::to_string),\n+            client,\n+            account_id: target.account_id.to_owned(),\n+            namespace_id: namespace_id.to_string(),\n+            cursor: None,\n+            init_fetch: false,\n+        }\n+    }\n+\n+    fn request_params(&self) -> ListNamespaceKeys {\n+        let params = ListNamespaceKeysParams {\n+            limit: None, // Defaults to 1000 (the maximum)\n+            cursor: self.cursor.to_owned(),\n+            prefix: self.prefix.to_owned(),\n+        };\n+\n+        ListNamespaceKeys {\n+            account_identifier: &self.account_id,\n+            namespace_identifier: &self.namespace_id,\n+            params: params,\n+        }\n+    }\n+\n+    fn get_batch(&mut self) -> Result<Vec<Key>, ApiFailure> {\n+        let response = self.client.request(&self.request_params());\n+\n+        match response {\n+            Ok(success) => {\n+                self.cursor = extract_cursor(success.result_info.clone());\n+                log::info!(\"{:?}\", self.cursor);\n+                Ok(success.result)\n+            }\n+            Err(e) => Err(e),\n+        }\n+    }\n+}\n+\n+impl Iterator for KeyList {\n+    type Item = Result<Key, ApiFailure>;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        // Attempt to extract next key from vector of keys in KeyList.\n+        // If no key vector or no keys left, go to fallback case below to\n+        // attempt to fetch the next page of keys from the Workers KV API.\n+        if let Some(mut keys) = self.keys_result.to_owned() {\n+            let key = keys.pop();\n+            self.keys_result = Some(keys);\n+\n+            if let Some(k) = key {\n+                return Some(Ok(k));\n+            }\n+        }\n+        // Fallback case (if no remaining keys are found)\n+        if self.cursor.is_none() && self.init_fetch {\n+            None // Nothing left to fetch\n+        } else {\n+            if !self.init_fetch {\n+                // At this point, initial fetch is being performed.\n+                self.init_fetch = true;\n+            }\n+            match self.get_batch() {\n+                Ok(mut keys) => {\n+                    let key = keys.pop();\n+                    self.keys_result = Some(keys);\n+                    match key {\n+                        Some(k) => Some(Ok(k)),\n+                        None => None,\n+                    }\n+                }\n+                Err(e) => Some(Err(e)),\n+            }\n+        }\n+    }\n+}\n+\n+// Returns Some(cursor) if cursor is non-empty, otherwise returns None.\n+fn extract_cursor(result_info: Option<JsonValue>) -> Option<String> {\n+    let result_info = result_info.unwrap();\n+    let returned_cursor_value = &result_info[\"cursor\"];\n+    let returned_cursor = returned_cursor_value.as_str().unwrap().to_string();\n+    if returned_cursor.is_empty() {\n+        None\n+    } else {\n+        Some(returned_cursor)\n+    }\n+}\ndiff --git /dev/null b/src/commands/kv/key/list.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/key/list.rs\n@@ -0,0 +1,43 @@\n+extern crate serde_json;\n+\n+use crate::commands::kv;\n+use crate::commands::kv::key::KeyList;\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::target::Target;\n+\n+// Note: this function only prints keys in json form, given that\n+// the number of entries in each json blob is variable (so csv and tsv\n+// representation won't make sense)\n+pub fn list(\n+    target: &Target,\n+    user: GlobalUser,\n+    namespace_id: &str,\n+    prefix: Option<&str>,\n+) -> Result<(), failure::Error> {\n+    let client = kv::api_client(user)?;\n+\n+    let key_list = KeyList::new(target, client, namespace_id, prefix);\n+\n+    print!(\"[\"); // Open json list bracket\n+\n+    let mut first_key = true;\n+\n+    for key_result in key_list {\n+        match key_result {\n+            Ok(key) => {\n+                if first_key {\n+                    first_key = false;\n+                } else {\n+                    print!(\",\");\n+                }\n+\n+                print!(\"{}\", serde_json::to_string(&key)?);\n+            }\n+            Err(e) => kv::print_error(e),\n+        }\n+    }\n+\n+    print!(\"]\"); // Close json list bracket\n+\n+    Ok(())\n+}\ndiff --git /dev/null b/src/commands/kv/key/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/key/mod.rs\n@@ -0,0 +1,11 @@\n+mod delete;\n+mod get;\n+mod key_list;\n+mod list;\n+mod put;\n+\n+pub use delete::delete;\n+pub use get::get;\n+pub use key_list::KeyList;\n+pub use list::list;\n+pub use put::put;\ndiff --git /dev/null b/src/commands/kv/key/put.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/key/put.rs\n@@ -0,0 +1,76 @@\n+// todo(gabbi): This file should use cloudflare-rs instead of our http::auth_client\n+// when https://github.com/cloudflare/cloudflare-rs/issues/26 is handled (this is\n+// because the SET key request body is not json--it is the raw value).\n+\n+use std::fs;\n+use std::fs::metadata;\n+\n+use cloudflare::framework::response::ApiFailure;\n+use url::Url;\n+\n+use crate::commands::kv;\n+use crate::http;\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::target::Target;\n+use crate::terminal::message;\n+\n+pub fn put(\n+    target: &Target,\n+    user: GlobalUser,\n+    id: &str,\n+    key: &str,\n+    value: &str,\n+    is_file: bool,\n+    expiration: Option<&str>,\n+    expiration_ttl: Option<&str>,\n+) -> Result<(), failure::Error> {\n+    let api_endpoint = format!(\n+        \"https://api.cloudflare.com/client/v4/accounts/{}/storage/kv/namespaces/{}/values/{}\",\n+        target.account_id,\n+        id,\n+        kv::url_encode_key(key)\n+    );\n+\n+    // Add expiration and expiration_ttl query options as necessary.\n+    let mut query_params: Vec<(&str, &str)> = vec![];\n+    match expiration {\n+        Some(exp) => query_params.push((\"expiration\", exp)),\n+        None => (),\n+    }\n+    match expiration_ttl {\n+        Some(ttl) => query_params.push((\"expiration_ttl\", ttl)),\n+        None => (),\n+    }\n+    let url = Url::parse_with_params(&api_endpoint, query_params);\n+\n+    // If is_file is true, overwrite value to be the contents of the given\n+    // filename in the 'value' arg.\n+    let body_text = match is_file {\n+        true => match &metadata(value) {\n+            Ok(file_type) if file_type.is_file() => fs::read_to_string(value),\n+            Ok(file_type) if file_type.is_dir() => {\n+                failure::bail!(\"--path argument takes a file, {} is a directory\", value)\n+            }\n+            Ok(_) => failure::bail!(\"--path argument takes a file, {} is a symlink\", value), // last remaining value is symlink\n+            Err(e) => failure::bail!(\"{}\", e),\n+        },\n+        false => Ok(value.to_string()),\n+    };\n+\n+    let client = http::auth_client(&user);\n+\n+    let url_into_str = url?.into_string();\n+    let mut res = client.put(&url_into_str).body(body_text?).send()?;\n+\n+    if res.status().is_success() {\n+        message::success(\"Success\")\n+    } else {\n+        // This is logic pulled from cloudflare-rs for pretty error formatting right now;\n+        // it will be redundant when we switch to using cloudflare-rs for all API requests.\n+        let parsed = res.json();\n+        let errors = parsed.unwrap_or_default();\n+        kv::print_error(ApiFailure::Error(res.status(), errors));\n+    }\n+\n+    Ok(())\n+}\ndiff --git /dev/null b/src/commands/kv/namespace/delete.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/namespace/delete.rs\n@@ -0,0 +1,43 @@\n+use cloudflare::endpoints::workerskv::remove_namespace::RemoveNamespace;\n+use cloudflare::framework::apiclient::ApiClient;\n+\n+use crate::commands::kv;\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::target::Target;\n+use crate::terminal::message;\n+\n+pub fn delete(target: &Target, user: GlobalUser, id: &str) -> Result<(), failure::Error> {\n+    let client = kv::api_client(user)?;\n+\n+    match kv::interactive_delete(&format!(\n+        \"Are you sure you want to delete namespace {}?\",\n+        id\n+    )) {\n+        Ok(true) => (),\n+        Ok(false) => {\n+            message::info(&format!(\"Not deleting namespace {}\", id));\n+            return Ok(());\n+        }\n+        Err(e) => failure::bail!(e),\n+    }\n+\n+    let msg = format!(\"Deleting namespace {}\", id);\n+    message::working(&msg);\n+\n+    let response = client.request(&RemoveNamespace {\n+        account_identifier: &target.account_id,\n+        namespace_identifier: id,\n+    });\n+\n+    match response {\n+        Ok(_) => {\n+            message::success(\"Success\");\n+            message::warn(\n+                \"Make sure to remove this \\\"kv-namespace\\\" entry from your wrangler.toml!\",\n+            )\n+        }\n+        Err(e) => kv::print_error(e),\n+    }\n+\n+    Ok(())\n+}\ndiff --git /dev/null b/src/commands/kv/namespace/list.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/namespace/list.rs\n@@ -0,0 +1,24 @@\n+use cloudflare::endpoints::workerskv::list_namespaces::ListNamespaces;\n+use cloudflare::framework::apiclient::ApiClient;\n+\n+use crate::commands::kv;\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::target::Target;\n+\n+pub fn list(target: &Target, user: GlobalUser) -> Result<(), failure::Error> {\n+    let client = kv::api_client(user)?;\n+\n+    let response = client.request(&ListNamespaces {\n+        account_identifier: &target.account_id,\n+    });\n+\n+    match response {\n+        Ok(success) => {\n+            let result = serde_json::to_string(&success.result)?;\n+            println!(\"{}\", result);\n+        }\n+        Err(e) => kv::print_error(e),\n+    }\n+\n+    Ok(())\n+}\ndiff --git /dev/null b/src/commands/kv/namespace/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/namespace/mod.rs\n@@ -0,0 +1,7 @@\n+mod create;\n+mod delete;\n+mod list;\n+\n+pub use create::create;\n+pub use delete::delete;\n+pub use list::list;\ndiff --git a/src/commands/mod.rs b/src/commands/mod.rs\n--- a/src/commands/mod.rs\n+++ b/src/commands/mod.rs\n@@ -6,6 +6,7 @@ pub mod build;\n pub mod config;\n pub mod generate;\n pub mod init;\n+pub mod kv;\n pub mod publish;\n pub mod subdomain;\n pub mod whoami;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -7,7 +7,7 @@ use std::env;\n use std::path::Path;\n use std::str::FromStr;\n \n-use clap::{App, AppSettings, Arg, SubCommand};\n+use clap::{App, AppSettings, Arg, ArgGroup, SubCommand};\n use commands::HTTPMethod;\n \n use log::info;\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -23,6 +23,7 @@ mod util;\n use crate::settings::target::TargetType;\n use exitfailure::ExitFailure;\n use terminal::emoji;\n+use terminal::message;\n \n fn main() -> Result<(), ExitFailure> {\n     env_logger::init();\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -47,6 +48,256 @@ fn run() -> Result<(), failure::Error> {\n         .author(\"ashley g williams <ashley666ashley@gmail.com>\")\n         .setting(AppSettings::ArgRequiredElseHelp)\n         .setting(AppSettings::DeriveDisplayOrder)\n+        .subcommand(\n+            SubCommand::with_name(\"kv:namespace\")\n+                .about(&*format!(\n+                    \"{} Interact with your Workers KV Namespaces\",\n+                    emoji::KV\n+                ))\n+                .setting(AppSettings::SubcommandRequired)\n+                .subcommand(\n+                    SubCommand::with_name(\"create\")\n+                        .about(\"Create a new namespace\")\n+                        .arg(\n+                            Arg::with_name(\"env\")\n+                            .help(\"Environment to use\")\n+                            .short(\"e\")\n+                            .long(\"env\")\n+                            .takes_value(true)\n+                            .value_name(\"ENVIRONMENT NAME\")\n+                            .global(true)\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"binding\")\n+                            .help(\"The binding for your new namespace\")\n+                            .required(true)\n+                            .index(1)\n+                        )\n+                )\n+                .subcommand(\n+                    SubCommand::with_name(\"delete\")\n+                        .about(\"Delete namespace\")\n+                        .arg(\n+                            Arg::with_name(\"binding\")\n+                            .help(\"The binding of the namespace this action applies to\")\n+                            .short(\"b\")\n+                            .long(\"binding\")\n+                            .value_name(\"BINDING NAME\")\n+                            .takes_value(true)\n+                            .global(true)\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"namespace-id\")\n+                            .help(\"The id of the namespace this action applies to\")\n+                            .short(\"n\")\n+                            .long(\"namespace-id\")\n+                            .value_name(\"ID\")\n+                            .takes_value(true)\n+                            .global(true)\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"env\")\n+                            .help(\"Environment to use\")\n+                            .short(\"e\")\n+                            .long(\"env\")\n+                            .takes_value(true)\n+                            .value_name(\"ENVIRONMENT NAME\")\n+                            .global(true)\n+                        )\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n+                            .required(true)\n+                        )\n+                )\n+                .subcommand(\n+                    SubCommand::with_name(\"list\")\n+                        .about(\"List all namespaces on your Cloudflare account\")\n+                )\n+        )\n+            .subcommand(SubCommand::with_name(\"kv:key\")\n+                .about(&*format!(\n+                    \"{} Individually manage Workers KV key-value pairs\",\n+                    emoji::KV\n+                ))\n+                .setting(AppSettings::SubcommandRequired)\n+                .arg(\n+                    Arg::with_name(\"binding\")\n+                    .help(\"The binding of the namespace this action applies to\")\n+                    .short(\"b\")\n+                    .long(\"binding\")\n+                    .value_name(\"BINDING NAME\")\n+                    .takes_value(true)\n+                    .global(true)\n+                )\n+                .arg(\n+                    Arg::with_name(\"namespace-id\")\n+                    .help(\"The id of the namespace this action applies to\")\n+                    .short(\"n\")\n+                    .long(\"namespace-id\")\n+                    .value_name(\"ID\")\n+                    .takes_value(true)\n+                    .global(true)\n+                )\n+                .arg(\n+                    Arg::with_name(\"env\")\n+                    .help(\"Environment to use\")\n+                    .short(\"e\")\n+                    .long(\"env\")\n+                    .takes_value(true)\n+                    .value_name(\"ENVIRONMENT NAME\")\n+                    .global(true)\n+                )\n+                .subcommand(\n+                    SubCommand::with_name(\"put\")\n+                        .about(\"Put a key-value pair into a namespace\")\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n+                            .required(true)\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"key\")\n+                            .help(\"Key to write value to\")\n+                            .required(true)\n+                            .index(1)\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"value\")\n+                            .help(\"Value for key\")\n+                            .required(true)\n+                            .index(2)\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"expiration-ttl\")\n+                            .help(\"Number of seconds for which the entries should be visible before they expire. At least 60. Takes precedence over 'expiration' option\")\n+                            .short(\"t\")\n+                            .long(\"ttl\")\n+                            .value_name(\"SECONDS\")\n+                            .takes_value(true)\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"expiration\")\n+                            .help(\"Number of seconds since the UNIX epoch, indicating when the key-value pair should expire\")\n+                            .short(\"x\")\n+                            .long(\"expiration\")\n+                            .takes_value(true)\n+                            .value_name(\"SECONDS\")\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"path\")\n+                            .help(\"The value passed in is a path to a file; open and upload its contents\")\n+                            .short(\"p\")\n+                            .long(\"path\")\n+                            .takes_value(false)\n+                        )\n+                )\n+                .subcommand(\n+                    SubCommand::with_name(\"get\")\n+                        .about(\"Get a key's value from a namespace\")\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n+                            .required(true)\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"key\")\n+                            .help(\"Key whose value to get\")\n+                            .required(true)\n+                            .index(1)\n+                        )\n+                )\n+                .subcommand(\n+                    SubCommand::with_name(\"delete\")\n+                        .about(\"Delete a key and its value from a namespace\")\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n+                            .required(true)\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"key\")\n+                            .help(\"Key whose value to delete\")\n+                            .required(true)\n+                            .index(1)\n+                        )\n+                )\n+                .subcommand(\n+                    SubCommand::with_name(\"list\")\n+                        .about(\"List all keys in a namespace. Produces JSON output\")\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n+                            .required(true)\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"prefix\")\n+                            .help(\"The prefix for filtering listed keys\")\n+                            .short(\"p\")\n+                            .long(\"prefix\")\n+                            .value_name(\"STRING\")\n+                            .takes_value(true),\n+                        )\n+                )\n+        )\n+        .subcommand(\n+            SubCommand::with_name(\"kv:bulk\")\n+                .about(&*format!(\n+                    \"{} Interact with multiple Workers KV key-value pairs at once\",\n+                    emoji::KV\n+                ))\n+                .setting(AppSettings::SubcommandRequired)\n+                .arg(\n+                    Arg::with_name(\"binding\")\n+                    .help(\"The binding of the namespace this action applies to\")\n+                    .short(\"b\")\n+                    .long(\"binding\")\n+                    .value_name(\"BINDING NAME\")\n+                    .takes_value(true)\n+                    .global(true)\n+                )\n+                .arg(\n+                    Arg::with_name(\"namespace-id\")\n+                    .help(\"The id of the namespace this action applies to\")\n+                    .short(\"n\")\n+                    .long(\"namespace-id\")\n+                    .value_name(\"ID\")\n+                    .takes_value(true)\n+                    .global(true)\n+                )\n+                .arg(\n+                    Arg::with_name(\"env\")\n+                    .help(\"Environment to use\")\n+                    .short(\"e\")\n+                    .long(\"env\")\n+                    .takes_value(true)\n+                    .value_name(\"ENVIROMENT NAME\")\n+                    .global(true)\n+                )\n+                .subcommand(\n+                    SubCommand::with_name(\"put\")\n+                        .about(\"Upload multiple key-value pairs to a namespace\")\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n+                            .required(true)\n+                        )\n+                        .arg(\n+                            Arg::with_name(\"path\")\n+                            .help(\"the JSON file of key-value pairs to upload, in form [{\\\"key\\\":..., \\\"value\\\":...}\\\"...]\")\n+                            .required(true)\n+                            .index(1)\n+                        )\n+                )\n+                .subcommand(\n+                    SubCommand::with_name(\"delete\")\n+                        .group(ArgGroup::with_name(\"namespace-specifier\")\n+                            .args(&[\"binding\", \"namespace-id\"])\n+                            .required(true)\n+                        )\n+                        .about(\"Delete multiple keys and their values from a namespace\")\n+                        .arg(\n+                            Arg::with_name(\"path\")\n+                            .help(\"the JSON file of key-value pairs to upload, in form [\\\"<example-key>\\\", ...]\")\n+                            .required(true)\n+                            .index(1)\n+                        )\n+                )\n+        )\n         .subcommand(\n             SubCommand::with_name(\"generate\")\n                 .about(&*format!(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -144,7 +395,7 @@ fn run() -> Result<(), failure::Error> {\n                     Arg::with_name(\"release\")\n                         .long(\"release\")\n                         .takes_value(false)\n-                        .help(\"[planned deprecation in v1.5.0, use --env instead. see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information]\\nshould this be published to a workers.dev subdomain or a domain name you have registered\"),\n+                        .help(\"[planned deprecation in v1.5.0, use --env instead. see https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md for more information]\\nshould this be published to a workers.dev subdomain or a domain name you have registered\"),\n                 )\n                 .arg(\n                     Arg::with_name(\"env\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -280,6 +531,131 @@ fn run() -> Result<(), failure::Error> {\n             .expect(\"The subdomain name you are requesting must be provided.\");\n \n         commands::subdomain(name, &user, &target)?;\n+    } else if let Some(kv_matches) = matches.subcommand_matches(\"kv:namespace\") {\n+        let manifest = settings::target::Manifest::new(config_path)?;\n+        let user = settings::global_user::GlobalUser::new()?;\n+\n+        match kv_matches.subcommand() {\n+            (\"create\", Some(create_matches)) => {\n+                let env = create_matches.value_of(\"env\");\n+                let target = manifest.get_target(env, false)?;\n+                let binding = create_matches.value_of(\"binding\").unwrap();\n+                commands::kv::namespace::create(&target, env, user, binding)?;\n+            }\n+            (\"delete\", Some(delete_matches)) => {\n+                let target = manifest.get_target(delete_matches.value_of(\"env\"), false)?;\n+                let namespace_id = match delete_matches.value_of(\"binding\") {\n+                    Some(namespace_binding) => {\n+                        commands::kv::get_namespace_id(&target, namespace_binding)?\n+                    }\n+                    None => delete_matches\n+                        .value_of(\"namespace-id\")\n+                        .unwrap() // clap configs ensure that if \"binding\" isn't present,\"namespace-id\" must be.\n+                        .to_string(),\n+                };\n+                commands::kv::namespace::delete(&target, user, &namespace_id)?;\n+            }\n+            (\"list\", Some(list_matches)) => {\n+                let target = manifest.get_target(list_matches.value_of(\"env\"), false)?;\n+                commands::kv::namespace::list(&target, user)?;\n+            }\n+            (\"\", None) => message::warn(\"kv:namespace expects a subcommand\"),\n+            _ => unreachable!(),\n+        }\n+    } else if let Some(kv_matches) = matches.subcommand_matches(\"kv:key\") {\n+        let manifest = settings::target::Manifest::new(config_path)?;\n+        let user = settings::global_user::GlobalUser::new()?;\n+\n+        // Get environment and bindings\n+        let (subcommand, subcommand_matches) = kv_matches.subcommand();\n+        let (target, namespace_id) = match subcommand_matches {\n+            Some(subcommand_matches) => {\n+                let target = manifest.get_target(subcommand_matches.value_of(\"env\"), false)?;\n+                let namespace_id = match subcommand_matches.value_of(\"binding\") {\n+                    Some(namespace_binding) => {\n+                        commands::kv::get_namespace_id(&target, namespace_binding)?\n+                    }\n+                    None => subcommand_matches\n+                        .value_of(\"namespace-id\")\n+                        .unwrap() // clap configs ensure that if \"binding\" isn't present,\"namespace-id\" must be.\n+                        .to_string(),\n+                };\n+                (target, namespace_id.to_string())\n+            }\n+            None => unreachable!(), // this is unreachable because all kv:key commands have required arguments.\n+        };\n+\n+        match (subcommand, subcommand_matches) {\n+            (\"get\", Some(get_key_matches)) => {\n+                let key = get_key_matches.value_of(\"key\").unwrap();\n+                commands::kv::key::get(&target, user, &namespace_id, key)?\n+            }\n+            (\"put\", Some(put_key_matches)) => {\n+                let key = put_key_matches.value_of(\"key\").unwrap();\n+                let value = put_key_matches.value_of(\"value\").unwrap();\n+                let is_file = match put_key_matches.occurrences_of(\"path\") {\n+                    1 => true,\n+                    _ => false,\n+                };\n+                let expiration = put_key_matches.value_of(\"expiration\");\n+                let ttl = put_key_matches.value_of(\"expiration-ttl\");\n+                commands::kv::key::put(\n+                    &target,\n+                    user,\n+                    &namespace_id,\n+                    key,\n+                    value,\n+                    is_file,\n+                    expiration,\n+                    ttl,\n+                )?\n+            }\n+            (\"delete\", Some(delete_key_matches)) => {\n+                let key = delete_key_matches.value_of(\"key\").unwrap();\n+                commands::kv::key::delete(&target, user, &namespace_id, key)?\n+            }\n+            (\"list\", Some(list_key_matches)) => {\n+                let prefix = list_key_matches.value_of(\"prefix\");\n+                commands::kv::key::list(&target, user, &namespace_id, prefix)?\n+            }\n+            (\"\", None) => message::warn(\"kv:key expects a subcommand\"),\n+            _ => unreachable!(),\n+        }\n+    } else if let Some(kv_matches) = matches.subcommand_matches(\"kv:bulk\") {\n+        let manifest = settings::target::Manifest::new(config_path)?;\n+        let user = settings::global_user::GlobalUser::new()?;\n+\n+        // Get environment and bindings\n+        let (subcommand, subcommand_matches) = kv_matches.subcommand();\n+        let (target, namespace_id) = match subcommand_matches {\n+            Some(subcommand_matches) => {\n+                let target = manifest.get_target(subcommand_matches.value_of(\"env\"), false)?;\n+                let namespace_id = match subcommand_matches.value_of(\"binding\") {\n+                    Some(namespace_binding) => {\n+                        commands::kv::get_namespace_id(&target, namespace_binding)?\n+                    }\n+                    None => subcommand_matches\n+                        .value_of(\"namespace-id\")\n+                        .unwrap() // clap configs ensure that if \"binding\" isn't present,\"namespace-id\" must be.\n+                        .to_string(),\n+                };\n+                (target, namespace_id.to_string())\n+            }\n+            None => unreachable!(), // this is unreachable because all kv:key commands have required arguments.\n+        };\n+\n+        match (subcommand, subcommand_matches) {\n+            (\"put\", Some(put_bulk_matches)) => {\n+                let path = put_bulk_matches.value_of(\"path\").unwrap();\n+                commands::kv::bulk::put(&target, user, &namespace_id, Path::new(path))?\n+            }\n+            (\"delete\", Some(delete_bulk_matches)) => {\n+                let path = delete_bulk_matches.value_of(\"path\").unwrap();\n+                commands::kv::bulk::delete(&target, user, &namespace_id, Path::new(path))?\n+            }\n+            (\"\", None) => message::warn(\"kv:bulk expects a subcommand\"),\n+            _ => unreachable!(),\n+        }\n     }\n     Ok(())\n }\ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -1,6 +1,7 @@\n use std::env;\n use std::path::{Path, PathBuf};\n \n+use cloudflare::framework::auth::Credentials;\n use log::info;\n use serde::{Deserialize, Serialize};\n \ndiff --git a/src/settings/global_user.rs b/src/settings/global_user.rs\n--- a/src/settings/global_user.rs\n+++ b/src/settings/global_user.rs\n@@ -19,6 +20,15 @@ impl GlobalUser {\n     }\n }\n \n+impl From<GlobalUser> for Credentials {\n+    fn from(user: GlobalUser) -> Credentials {\n+        Credentials::UserAuthKey {\n+            key: user.api_key,\n+            email: user.email,\n+        }\n+    }\n+}\n+\n fn get_global_config() -> Result<GlobalUser, failure::Error> {\n     let mut s = Config::new();\n \ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -96,7 +96,7 @@ impl Manifest {\n                     Ok(Some(environment))\n                 } else {\n                     failure::bail!(format!(\n-                        \"{} Could not find environment with name {}\",\n+                        \"{} Could not find environment with name \\\"{}\\\"\",\n                         emoji::WARN,\n                         environment_name\n                     ))\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -121,7 +121,7 @@ impl Manifest {\n         let use_dot_dev_failure =\n             \"Please specify the workers_dev boolean in the top level of your wrangler.toml.\";\n         let use_dot_dev_warning =\n-            format!(\"{}\\n{} If you do not add workers_dot_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\", use_dot_dev_failure, emoji::WARN);\n+            format!(\"{}\\n{} If you do not add workers_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/content/environments.md for more information.\", use_dot_dev_failure, emoji::WARN);\n         let wdd_failure = format!(\n             \"{} Your environment should only include `workers_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dev`.\",\n             emoji::WARN\ndiff --git a/src/terminal/emoji.rs b/src/terminal/emoji.rs\n--- a/src/terminal/emoji.rs\n+++ b/src/terminal/emoji.rs\n@@ -18,6 +18,7 @@ pub static DANCERS: Emoji = Emoji(\"\ud83d\udc6f \", \"\");\n pub static EYES: Emoji = Emoji(\"\ud83d\udc40 \", \"\");\n pub static INBOX: Emoji = Emoji(\"\ud83d\udce5 \", \"\");\n pub static INFO: Emoji = Emoji(\"\ud83d\udc81 \", \"\");\n+pub static KV: Emoji = Emoji(\"\ud83d\uddc2\ufe0f \", \"\");\n pub static MICROSCOPE: Emoji = Emoji(\"\ud83d\udd2c \", \"\");\n pub static SHEEP: Emoji = Emoji(\"\ud83d\udc11 \", \"\");\n pub static SLEUTH: Emoji = Emoji(\"\ud83d\udd75\ufe0f \", \"\");\n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2256,55 +2473,59 @@ dependencies = [\n \"checksum adler32 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e522997b529f05601e05166c07ed17789691f562762c7f3b987263d2dedee5c\"\n \"checksum aho-corasick 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"58fb5e95d83b38284460a5fda7d6470aa0b8844d283a0b614b8535e880800d2d\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n+\"checksum arc-swap 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc4662175ead9cd84451d5c35070517777949a2ed84551764129cedb88384841\"\n \"checksum arrayref 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d382e583f07208808f6b1249e60848879ba3543f57c32277bf52d69c2f0f0ee\"\n \"checksum arrayvec 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8d73f9beda665eaa98ab9e4f7442bd4e7de6652587de55b2525e52e29c1b0ba\"\n \"checksum assert_cmd 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2dc477793bd82ec39799b6f6b3df64938532fdf2ab0d49ef817eac65856a5a1e\"\n \"checksum atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1803c647a3ec87095e7ae7acfca019e98de5ec9a7d01343f611cf3152ed71a90\"\n-\"checksum autocfg 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"22130e92352b948e7e82a49cdb0aa94f2211761117f29e052dd397c1ac33542b\"\n-\"checksum backtrace 0.3.34 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b5164d292487f037ece34ec0de2fcede2faa162f085dd96d2385ab81b12765ba\"\n+\"checksum autocfg 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b671c8fb71b457dd4ae18c4ba1e59aa81793daacc361d82fcd410cef0d491875\"\n+\"checksum backtrace 0.3.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5180c5a20655b14a819b652fd2378fa5f1697b6c9ddad3e695c2f9cedf6df4e2\"\n \"checksum backtrace-sys 0.1.31 (registry+https://github.com/rust-lang/crates.io-index)\" = \"82a830b4ef2d1124a711c71d263c5abdc710ef8e907bd508c88be475cebc422b\"\n \"checksum base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e\"\n \"checksum binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\" = \"a81dda17f2dbba8271cf61f2ea3e48e3da8aef31665731bce48818cc07863f06\"\n \"checksum bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d155346769a6855b86399e9bc3814ab343cd3d62c7e985113d46a0ec3c281fd\"\n-\"checksum blake2b_simd 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"461f4b879a8eb70c1debf7d0788a9a5ff15f1ea9d25925fea264ef4258bed6b2\"\n+\"checksum blake2b_simd 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5850aeee1552f495dd0250014cf64b82b7c8879a89d83b33bbdace2cc4f63182\"\n \"checksum block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b\"\n \"checksum block-padding 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d4dc3af3ee2e12f3e5d224e5e1e3d73668abbeb69e566d361f7d5563a4fdf09\"\n+\"checksum bstr 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8d6c2c5b58ab920a4f5aeaaca34b4488074e8cc7596af94e6f8c6ff247c60245\"\n \"checksum byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7\"\n \"checksum byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7c3dd8985a7111efc5c80b44e23ecdd8c007de8ade3b96595387e812b957cf5\"\n \"checksum bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"206fdffcfa2df7cbe15601ef46c813fce0965eb3286db6b56c583b814b51c81c\"\n \"checksum bzip2 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42b7c3cbf0fa9c1b82308d57191728ca0256cb821220f4e2fd410a72ade26e3b\"\n \"checksum bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6584aa36f5ad4c9247f5323b0a42f37802b37a836f0ad87084d7a33961abe25f\"\n \"checksum c2-chacha 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7d64d04786e0f528460fc884753cf8dddcc466be308f6026f8e355c41a0e4101\"\n-\"checksum cc 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ce400c638d48ee0e9ab75aef7997609ec57367ccfe1463f21bf53c3eca67bf46\"\n+\"checksum cc 1.0.45 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fc9a35e1f4290eb9e5fc54ba6cf40671ed2a2514c3eeb2b2a908dda2ea5a1be\"\n \"checksum cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b486ce3ccf7ffd79fdeb678eac06a9e6c09fc88d33836340becb8fffe87c5e33\"\n+\"checksum chrono 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8493056968583b0193c1bb04d6f7684586f3726992d6c573261941a895dbd68\"\n \"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n-\"checksum clicolors-control 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73abfd4c73d003a674ce5d2933fca6ce6c42480ea84a5ffe0a2dc39ed56300f9\"\n+\"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n+\"checksum cloudflare 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e92636dcd9b6f8271afd4ff9e830f48e060778ce1bee5c15ace3510c2486afba\"\n \"checksum config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9107d78ed62b3fa5a86e7d18e647abed48cfd8f8fab6c72f4cdb982d196f7e6\"\n \"checksum console 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ca57c2c14b8a2bf3105bc9d15574aad80babf6a9c44b1058034cdf8bd169628\"\n-\"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n+\"checksum constant_time_eq 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"995a44c877f9212528ccc74b21a232f66ad69001e40ede5bcee2ac9ef2657120\"\n \"checksum cookie 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"888604f00b3db336d2af898ec3c1d5d0ddf5e6d462220f2ededc33a87ac4bbd5\"\n \"checksum cookie_store 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46750b3f362965f197996c4448e4a0935e791bf7d6631bfce9ee0af3d24c919c\"\n \"checksum core-foundation 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25b9e03f145fd4f2bf705e07b900cd41fc636598fe5dc452fd0db1441c3f496d\"\n \"checksum core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b\"\n \"checksum crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n-\"checksum crossbeam 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1c92ff2d7a202d592f5a412d75cf421495c913817781c1cb383bf12a77e185f\"\n-\"checksum crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8ec7fcd21571dc78f96cc96243cab8d8f035247c3efd16c687be154c3fa9efa\"\n-\"checksum crossbeam-deque 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05e44b8cf3e1a625844d1750e1f7820da46044ff6d28f4d43e455ba3e5bb2c13\"\n+\"checksum crossbeam 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd66663db5a988098a89599d4857919b3acf7f61402e61365acfd3919857b9be\"\n \"checksum crossbeam-deque 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b18cd2e169ad86297e6bc0ad9aa679aee9daa4f19e8163860faf7c164e4f5a71\"\n-\"checksum crossbeam-epoch 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2449aaa4ec7ef96e5fb24db16024b935df718e9ae1cec0a1e68feeca2efca7b8\"\n \"checksum crossbeam-epoch 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fedcd6772e37f3da2a9af9bf12ebe046c0dfe657992377b4df982a2b54cd37a9\"\n \"checksum crossbeam-queue 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c979cd6cfe72335896575c6b5688da489e420d36a27a0b9eb0c73db574b4a4b\"\n \"checksum crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"04973fa96e96579258a5091af6003abde64af786b860f18622b82e026cca60e6\"\n-\"checksum curl 0.4.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8ed9a22aa8c4e49ac0c896279ef532a43a7df2f54fcd19fa36960de029f965f\"\n-\"checksum curl-sys 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5e90ae10f635645cba9cad1023535f54915a95c58c44751c6ed70dbaeb17a408\"\n+\"checksum csv 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"37519ccdfd73a75821cac9319d4fce15a81b9fcf75f951df5b9988aa3a0af87d\"\n+\"checksum csv-core 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9b5cadb6b25c77aeff80ba701712494213f4a8418fcda2ee11b6560c3ad0bf4c\"\n+\"checksum curl 0.4.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6458247e474561f731d5c13cb5c83c91f752eee770c431d50d22cb07d006e91\"\n+\"checksum curl-sys 0.4.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"520594da9914c1dc77ce3be450fc1c74fde67c82966d80f8e93c6d460eb0e9ae\"\n+\"checksum data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f4f47ca1860a761136924ddd2422ba77b2ea54fe8cc75b9040804a0d9d32ad97\"\n \"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \"checksum digest 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\n \"checksum dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\n \"checksum dtoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea57b42383d091c85abcc2706240b94ab2a8fa1fc81c10ff23c4de06e2a90b5e\"\n \"checksum either 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5527cfe0d098f36e3f8839852688e63c8fff1c90b2b405aef730615f9a7bcf7b\"\n-\"checksum encode_unicode 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90b2c9496c001e8cb61827acdefad780795c42264c137744cae6f7d9e3450abd\"\n-\"checksum encoding_rs 0.8.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4155785c79f2f6701f185eb2e6b4caf0555ec03477cb4c70db67b465311620ed\"\n+\"checksum encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n+\"checksum encoding_rs 0.8.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"79906e1ad1f7f8bc48864fcc6ffd58336fb5992e627bf61928099cb25fdf4314\"\n \"checksum env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\n \"checksum error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ab49e9dcb602294bc42f9a7dfc9bc6e936fca4418ea300dbfb84fe16de0b7d9\"\n \"checksum escargot 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ceb9adbf9874d5d028b5e4c5739d22b71988252b25c9c98fe7cf9738bee84597\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2346,25 +2567,25 @@ dependencies = [\n \"checksum itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"501266b7edd0174f8530248f87f99c88fbe60ca4ef3dd486835b8d8d53136f7f\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n-\"checksum lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc5729f27f159ddd61f4df6228e827e86643d4d3e7c32183cb30a1c08f604a14\"\n+\"checksum lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \"checksum lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b294d6fa9ee409a054354afc4352b0b9ef7ca222c69b8812cbea9e7d2bf3783f\"\n-\"checksum libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d44e80633f007889c7eff624b709ab43c92d708caad982295768a7b13ca3b5eb\"\n-\"checksum libflate 0.1.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"45c97cf62125b79dcac52d506acdc4799f21a198597806947fd5f40dc7b93412\"\n+\"checksum libc 0.2.62 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34fcd2c08d2f832f376f4173a231990fa5aef4e99fb569867318a227ef4c06ba\"\n+\"checksum libflate 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9135df43b1f5d0e333385cb6e7897ecd1a43d7d11b91ac003f4d2c2d2401fdd\"\n \"checksum libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2eb5e43362e38e2bca2fd5f5134c4d4564a23a5c28e9b95411652021a8675ebe\"\n \"checksum linked-hash-map 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d262045c5b87c0861b3f004610afd0e2c851e2908d08b6c870cbb9d5f494ecd\"\n \"checksum linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\n \"checksum lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"62ebf1391f6acad60e5c8b43706dde4582df75c06698ab44511d15016bc2442c\"\n \"checksum lock_api 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8912e782533a93a167888781b836336a6ca5da6175c05944c86cf28c31104dc\"\n+\"checksum log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n \"checksum log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n+\"checksum maplit 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e2e65a1a2e43cfcb47a895c4c8b10d1f4a61097f9f254f183aee60cad9c651d\"\n \"checksum matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n \"checksum memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88579771288728879b57485cc7d6b07d648c9f0141eb955f8ab7f9d45394468e\"\n-\"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n \"checksum memoffset 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ce6075db033bbbb7ee5a0bbd3a3186bbae616f57fb001c485c7ff77955f8177f\"\n-\"checksum mime 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e27ca21f40a310bd06d9031785f4801710d566c184a6e15bad4f1d9b65f9425\"\n+\"checksum mime 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd1d63acd1b78403cc0c325605908475dd9b9a3acbf65ed8bcab97e27014afcf\"\n \"checksum mime_guess 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1a0ed03949aef72dbdf3116a383d7b38b4768e6f960528cd6a6044aa9ed68599\"\n \"checksum miniz-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e9e3ae51cea1576ceba0dde3d484d30e6e5b86dee0b2d412fe3a16a15c98202\"\n-\"checksum miniz_oxide 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fe2959c5a0747a8d7a56b4444c252ffd2dda5d452cfd147cdfdda73b1c3ece5b\"\n-\"checksum miniz_oxide_c_api 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6c675792957b0d19933816c4e1d56663c341dd9bfa31cb2140ff2267c1d8ecf4\"\n+\"checksum miniz_oxide 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7108aff85b876d06f22503dcce091e29f76733b2bfdd91eebce81f5e68203a10\"\n \"checksum mio 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"83f51996a3ed004ef184e16818edc51fadffe8e7ca68be67f9dee67d84d0ff23\"\n \"checksum mio-extras 2.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46e73a04c2fa6250b8d802134d56d554a9ec2922bf977777c805ea5def61ce40\"\n \"checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2373,6 +2594,7 @@ dependencies = [\n \"checksum nodrop 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f9667ddcc6cc8a43afc9b7917599d7216aa09c463919ea32c59ed6cac8bc945\"\n \"checksum nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2ad2a91a8e869eeb30b9cb3119ae87773a8f4ae617f41b1eb9c154b2905f7bd6\"\n \"checksum notify-forked 4.0.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f23c70c408d37be38a49336b2243a69304dc6e2eabebc9a6e411c90bb76af294\"\n+\"checksum num-integer 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b85e541ef8255f6cf42bbfe4ef361305c6c135d10919ecc26126c4e5ae94bc09\"\n \"checksum num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92e5113e9fd4cc14ded8e499429f396a20f98c772a47cc8622a736e1ec843c31\"\n \"checksum num-traits 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ba9a427cfca2be13aa6f6403b0b7e7368fe982bfa16fccc450ce74c46cd9b32\"\n \"checksum num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcef43580c035376c0705c42792c294b66974abbfd2789b511784023f71f3273\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2380,35 +2602,35 @@ dependencies = [\n \"checksum opaque-debug 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n \"checksum openssl 0.10.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8152bb5a9b5b721538462336e3bef9a539f892715e5037fda0f984577311af15\"\n \"checksum openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\n-\"checksum openssl-src 111.4.0+1.1.1c (registry+https://github.com/rust-lang/crates.io-index)\" = \"783a3c5b3c1c28bdd7245e6b7a91de6168994948726b1dd4227199e9e6864383\"\n-\"checksum openssl-sys 0.9.48 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b5ba300217253bcc5dc68bed23d782affa45000193866e025329aa8a7a9f05b8\"\n+\"checksum openssl-src 111.6.0+1.1.1d (registry+https://github.com/rust-lang/crates.io-index)\" = \"b9c2da1de8a7a3f860919c01540b03a6db16de042405a8a07a5e9d0b4b825d9c\"\n+\"checksum openssl-sys 0.9.49 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f4fad9e54bd23bd4cbbe48fdc08a1b8091707ac869ef8508edea2fec77dcc884\"\n \"checksum owning_ref 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49a4b8ea2179e6a2e27411d3bca09ca6dd630821cf6894c6c7c8467a8ee7ef13\"\n-\"checksum parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0802bff09003b291ba756dc7e79313e51cc31667e94afbe847def490424cde5\"\n \"checksum parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab41b4aed082705d1056416ae4468b6ea99d52599ecf3169b00088d43113e337\"\n \"checksum parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f842b1982eb6c2fe34036a4fbfb06dd185a3f5c8edfaacdf7d1ea10b07de6252\"\n-\"checksum parking_lot_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad7f7e6ebdc79edff6fdcb87a55b620174f7a989e3eb31b65231f4af57f00b8c\"\n \"checksum parking_lot_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94c8c7923936b28d546dfd14d4472eaf34c99b14e1c973a32b3e6d4eb04298c9\"\n \"checksum parking_lot_core 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b876b1b9e7ac6e1a74a6da34d25c42e17e8862aa409cbbbdcfc8d86c6f3bc62b\"\n \"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \"checksum percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n-\"checksum pkg-config 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7c1d2cfa5a714db3b5f24f0915e74fcdf91d09d496ba61329705dda7774d2af\"\n+\"checksum pkg-config 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72d5370d90f49f70bd033c3d75e87fc529fbfff9d6f7cccef07d6170079d91ea\"\n \"checksum podio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"780fb4b6698bbf9cf2444ea5d22411cef2953f0824b98f33cf454ec5615645bd\"\n \"checksum ppv-lite86 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3cbf9f658cdb5000fcf6f362b8ea2ba154b9f146a61c7a20d647034c6b6561b\"\n \"checksum predicates 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"53e09015b0d3f5a0ec2d4428f7559bb7b3fff341b4e159fedd1d57fac8b939ff\"\n \"checksum predicates-core 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"06075c3a3e92559ff8929e7a280684489ea27fe44805174c3ebd9328dcb37178\"\n \"checksum predicates-tree 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8e63c4859013b38a76eca2414c64911fba30def9e3202ac461a2d22831220124\"\n+\"checksum prettytable-rs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0fd04b170004fa2daccf418a7f8253aaf033c27760b5f225889024cf66d7ac2e\"\n \"checksum proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf3d2011ab5c909338f7887f4fc896d35932e29146c12c8d01da6b22a80ba759\"\n-\"checksum publicsuffix 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5afecba86dcf1e4fd610246f89899d1924fe12e1e89f555eb7c7f710f3c5ad1d\"\n+\"checksum proc-macro2 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e98a83a9f9b331f54b924e68a66acb1bb35cb01fb0a23645139967abefb697e8\"\n+\"checksum publicsuffix 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9bf259a81de2b2eb9850ec990ec78e6a25319715584fd7652b9b26f96fcb1510\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ce23b6b870e8f94f81fb0a363d65d86675884b34a09043c81e5562f11c1f8e1\"\n-\"checksum rand 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c618c47cd3ebd209790115ab837de41425723956ad3ce2e6a7f09890947cacb9\"\n+\"checksum quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n \"checksum rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n-\"checksum rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d47eab0e83d9693d40f825f86948aa16eff6750ead4bdffc4ab95b8b3a7f052c\"\n+\"checksum rand 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59cea0d944b32347a1863e95942fd6ebdb486afb4f038119494f2860380c1d51\"\n \"checksum rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\"\n \"checksum rand_chacha 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03a2a90da8c7523f554344f921aa97283eadf6ac484a6d2a7d0212fa7f8d6853\"\n \"checksum rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\n \"checksum rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc\"\n-\"checksum rand_core 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"615e683324e75af5d43d8f7a39ffe3ee4a9dc42c5c701167a71dc59c3a493aca\"\n+\"checksum rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\n \"checksum rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b40677c7be09ae76218dc623efbf7b18e34bced3f38883af07bb75630a21bc4\"\n \"checksum rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\n \"checksum rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ded997c9d5f13925be2a6fd7e66bf1872597f759fd9dd93513dd7e92e5a5ee08\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2438,25 +2661,38 @@ dependencies = [\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \"checksum serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9dad3f759919b92c3068c696c15c3d17238234498bbdcc80f2c469606f948ac8\"\n-\"checksum serde 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7fe5626ac617da2f2d9c48af5515a21d5a480dbd151e01bb1c355e26a3e68113\"\n+\"checksum serde 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f4473e8506b213730ff2061073b48fa51dcc66349219e2e7c5608f0296a1d95a\"\n \"checksum serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b833c5ad67d52ced5f5938b2980f32a9c1c5ef047f0b4fb3127e7a423c76153\"\n-\"checksum serde_derive 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\" = \"01e69e1b8a631f245467ee275b8c757b818653c6d704cdbcaeb56b56767b529c\"\n+\"checksum serde_derive 1.0.100 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11e410fde43e157d789fc290d26bc940778ad0fdd47836426fbac36573710dbb\"\n \"checksum serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"051c49229f282f7c6f3813f8286cc1e3323e8051823fce42c7ea80fe13521704\"\n+\"checksum serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35965fa1d2413717053d67c2df1f5c3e1763fbf77200ea7e767523707bd5a0af\"\n \"checksum serde_test 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"110b3dbdf8607ec493c22d5d947753282f3bae73c0f56d322af1e8c78e4c23d5\"\n \"checksum serde_urlencoded 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"642dd69105886af2efd227f75a520ec9b44a820d65bc133a9131f7d229fd165a\"\n+\"checksum serde_with 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"32dc67e726b4b06ccf46860bef46fe713fffde11181d6c3c2f3104a670ceddb1\"\n+\"checksum serde_with_macros 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6304d92ad5493e340b95c353b8328c312d020f0eb5cb6df8506f160f5b7300d\"\n+\"checksum serde_yaml 0.8.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38b08a9a90e5260fe01c6480ec7c811606df6d3a660415808c3c3fa8ed95b582\"\n \"checksum sha-1 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23962131a91661d643c98940b20fcaffe62d776a823247be80a48fcb8b6fce68\"\n \"checksum siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b8de496cf83d4ed58b6be86c3a275b8602f6ffe98d3024a869e124147a9a3ac\"\n \"checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n+\"checksum slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1cc9c640a4adbfbcc11ffb95efe5aa7af7309e002adab54b185507dbf2377b99\"\n+\"checksum slog-async 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e544d16c6b230d84c866662fe55e31aacfca6ae71e6fc49ae9a311cb379bfc2f\"\n+\"checksum slog-kvfilter 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae939ed7d169eed9699f4f5cd440f046f5dc5dfc27c19e3cd311619594c175e0\"\n+\"checksum slog-scope 4.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1d3ec6214d46e57a7ec87c1972bbca66c59172a0cfffa5233c54726afb946bf\"\n+\"checksum slog-stdlog 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1c469573d1e3f36f9eee66cd132206caf47b50c94b1f6c6e7b4d8235e9ecf01\"\n+\"checksum slog-term 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cb9b3fd9a3c2c86580fce3558a98ed7c69039da0288b08a3f15b371635254e08\"\n+\"checksum sloggers 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1ea94386f073b0951c68678f0043e3646855f85e9deffefbb68784e6486cb35f\"\n \"checksum smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab606a9c5e214920bb66c458cd7be8ef094f813f20fe77a54cc7dbfff220d4b7\"\n \"checksum socket2 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8b74de517221a2cb01a53349cf54182acdc31a074727d3079068448c0676d85\"\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n \"checksum string 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d24114bfcceb867ca7f71a0d3fe45d45619ec47a6fbfa98cb14e14250bfa5d6d\"\n \"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n-\"checksum syn 0.15.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee06ea4b620ab59a2267c6b48be16244a3389f8bfa0986bdd15c35b890b00af3\"\n+\"checksum syn 0.15.44 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ca4b3b69a77cbe1ffc9e198781b7acb0c7365a883670e8f1c1bc66fba79a5c5\"\n+\"checksum syn 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"66850e97125af79138385e9b88339cbcd037e3f28ceab8c5ad98e64f0f1f80bf\"\n \"checksum synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02353edf96d6e4dc81aea2d8490a7e9db177bf8acb0e951c24940bf866cb313f\"\n \"checksum take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f764005d11ee5f36500a149ace24e00e3da98b0158b3e2d53a7495660d3f4d60\"\n \"checksum tar 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7201214ded95b34e3bc00c9557b6dcec34fd1af428d343143f5db67c661762f0\"\n \"checksum tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\n+\"checksum term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42\"\n \"checksum termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"96d6098003bde162e4277c70665bd87c326f5a0c3f3fbfb285787fa482d54e6e\"\n \"checksum termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n \"checksum text_io 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9658b61ebd1d2a40c276ba2335890b9eb6550b67458a6fbce2022e58c3350a50\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2474,16 +2710,19 @@ dependencies = [\n \"checksum tokio-threadpool 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90ca01319dea1e376a001e8dc192d42ebde6dd532532a5bad988ac37db365b19\"\n \"checksum tokio-timer 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2106812d500ed25a4f38235b9cae8f78a09edf43203e16e59c3b769a342a60e\"\n \"checksum toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"758664fc71a3a69038656bee8b6be6477d2a6c315a6b81f7081f591bffa4111f\"\n-\"checksum toml 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8c96d7873fa7ef8bdeb3a9cda3ac48389b4154f32b9803b4bc26220b677b039\"\n+\"checksum toml 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c7aabe75941d914b72bf3e5d3932ed92ce0664d49d8432305a8b547c37227724\"\n+\"checksum trackable 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11475c3c53b075360eac9794965822cb053996046545f91cf61d90e00b72efa5\"\n+\"checksum trackable_derive 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f4062d54dd240bde289717d6b4af18048c3dd552f01a0fd93824f5fc4d2d084\"\n \"checksum treeline 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7f741b240f1a48843f9b8e0444fb55fb2a4ff67293b50a9179dfd5ea67f8d41\"\n \"checksum try-lock 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e604eb7b43c06650e854be16a2a03155743d3752dd1c943f6829e26b7a36e382\"\n \"checksum try_from 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"283d3b89e1368717881a9d51dad843cc435380d8109c9e47d38780a324698d8b\"\n-\"checksum typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"612d636f949607bdf9b123b4a6f6d966dedf3ff669f7f045890d3a4a73948169\"\n-\"checksum unicase 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a84e5511b2a947f3ae965dcb29b13b7b1691b6e7332cf5dbc1744138d5acb7f6\"\n+\"checksum typenum 1.11.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d2783fe2d6b8c1101136184eb41be8b1ad379e4657050b8aaff0c79ee7575f9\"\n+\"checksum unicase 2.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e2e6bd1e59e56598518beb94fd6db628ded570326f0a98c679a304bd9f00150\"\n \"checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n \"checksum unicode-normalization 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"141339a08b982d942be2ca06ff8b076563cbe223d1befd5450716790d44e2426\"\n-\"checksum unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"882386231c45df4700b275c7ff55b6f3698780a650026380e72dabe76fa46526\"\n+\"checksum unicode-width 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7007dbd421b92cc6e28410fe7362e2e0a2503394908f417b68ec8d1c364c4e20\"\n \"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n+\"checksum unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n \"checksum url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd4e7c0d531266369519a4aa4f399d748bd37043b00bde1e4ff1f60a120b355a\"\n \"checksum url 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"75b414f6c464c879d7f9babf951f23bc3743fb7313c081b2e6ca719067ea9d61\"\n \"checksum uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90dbc611eb48397705a6b0f6e917da23ae517e4d127123d2cf7674206627d32a\"\ndiff --git /dev/null b/docs/content/kv_commands.md\nnew file mode 100644\n--- /dev/null\n+++ b/docs/content/kv_commands.md\n@@ -0,0 +1,333 @@\n+# \ud83d\uddc2\ufe0f `kv`\n+\n+## Overview\n+\n+The `kv` subcommand allows you to store application data in the Cloudflare network to be accessed from Workers, using\n+[Workers KV](https://www.cloudflare.com/products/workers-kv/).\n+KV operations are scoped to your account, so in order to use any of these commands, you need to:\n+\n+* have a Wrangler project set up with your `account_id` configured in the `wrangler.toml`\n+* call commands from within a Wrangler project directory.\n+\n+## Getting Started\n+\n+To use Workers KV with your Worker, the first thing you must do is create a KV namespace. This is done with\n+the `kv:namespace` subcommand.\n+\n+The `kv:namespace` subcommand takes as a new binding name as an argument. It will create a Worker KV namespace\n+whose title is a concatenation of your Worker's name (from `wrangler.toml`) and the binding name you provide:\n+```console\n+$ wrangler kv:namespace create \"MY_KV\"\n+\ud83c\udf00  Creating namespace with title \"worker-MY_KV\"\n+\u2728  Success: WorkersKvNamespace {\n+    id: \"e29b263ab50e42ce9b637fa8370175e8\",\n+    title: \"worker-MY_KV\",\n+}\n+\u2728  Add the following to your wrangler.toml:\n+kv-namespaces = [\n+         { binding = \"MY_KV\", id = \"e29b263ab50e42ce9b637fa8370175e8\" }\n+]\n+```\n+Make sure to add the `kv-namespaces` output above to your `wrangler.toml`. You can now\n+access it from a Worker with code like:\n+```js\n+let value = await MY_KV.get(\"my-key\");\n+```\n+The full KV API for Workers can be found [here](https://developers.cloudflare.com/workers/reference/storage/).\n+\n+To put a value to your KV namespace via Wrangler, use the `kv:key put` subcommand.\n+```console\n+$ wrangler kv:key put --binding=MY_KV \"key\" \"value\"\n+\u2728  Success\n+```\n+You can also specify which namespace to put your key-value pair into using `--namespace-id` instead of `--binding`:\n+```console\n+$ wrangler kv:key put --namespace-id=e29b263ab50e42ce9b637fa8370175e8 \"key\" \"value\"\n+\u2728  Success\n+```\n+\n+Additionally, KV namespaces can be used with [environments](./environments.md)! This is useful for when you have code that refers to\n+a KV binding like `MY_KV`, and you want to be able to have these bindings point to different namespaces (like\n+one for staging and one for production). So, if you have a `wrangler.toml` with two environments:\n+\n+```toml\n+[env.staging]\n+kv-namespaces = [\n+         { binding = \"MY_KV\", id = \"e29b263ab50e42ce9b637fa8370175e8\" }\n+]\n+\n+[env.production]\n+kv-namespaces = [\n+         { binding = \"MY_KV\", id = \"a825455ce00f4f7282403da85269f8ea\" }\n+]\n+```\n+\n+To insert a value into a specific KV namespace, you can use\n+```console\n+$ wrangler kv:key put --env=staging --binding=MY_MV \"key\" \"value\"\n+\u2728  Success\n+```\n+\n+Since `--namespace-id` is always unique (unlike binding names), you don't need to pass environment variables for them (they will be unused).\n+\n+There are way more helpful Wrangler subcommands for interacting with Workers KV, like ones for bulk uploads and deletes--check them out below!\n+\n+## Concepts\n+\n+Most `kv` commands require you to specify a namespace. A namespace can be specified in two ways:\n+\n+1. With a `--binding`:\n+    ```sh\n+    wrangler kv:key get --binding=KV \"my key\"\n+    ```\n+1. With a `--namespace_id`:\n+    ```sh\n+    wrangler kv:key get --namespace-id=06779da6940b431db6e566b4846d64db \"my key\"\n+    ```\n+\n+Most `kv` subcommands also allow you to specify an environment with the optional `--env` flag. This allows you to publish workers running the same code but with different namespaces. For example, you could use separate staging and production namespaces for KV data in your `wrangler.toml`:\n+\n+```toml\n+type = \"webpack\"\n+name = \"my-worker\"\n+account_id = \"<account id here>\"\n+route = \"staging.example.com/*\"\n+workers_dev = false\n+\n+kv-namespaces = [\n+    { binding = \"KV\", id = \"06779da6940b431db6e566b4846d64db\" }\n+]\n+\n+[env.production]\n+route = \"example.com/*\"\n+kv-namespaces = [\n+    { binding = \"KV\", id = \"07bc1f3d1f2a4fd8a45a7e026e2681c6\" }\n+]\n+```\n+\n+With the wrangler.toml above, you can specify `--env production` when you want to perform a KV action on\n+the namespace `KV` under `env.production`. For example, with the wrangler.toml above, you can get a value\n+out of a production KV instance with:\n+\n+```console\n+wrangler kv:key get --binding \"KV\" --env=production \"my key\"\n+```\n+\n+To learn more about environments, check out the [environments documentation](./environments.md).\n+\n+## `kv:namespace`\n+\n+### `create`\n+\n+Creates a new namespace.\n+\n+Takes an optional `--env` [environment](./environments.md) argument.\n+\n+#### Usage\n+\n+```console\n+$ wrangler kv:namespace create \"MY_KV\"\n+\ud83c\udf00  Creating namespace with title \"worker-MY_KV\"\n+\u2728  Success: WorkersKvNamespace {\n+    id: \"e29b263ab50e42ce9b637fa8370175e8\",\n+    title: \"worker-MY_KV\",\n+}\n+\u2728  Add the following to your wrangler.toml:\n+kv-namespaces = [\n+         { binding = \"MY_KV\", id = \"e29b263ab50e42ce9b637fa8370175e8\" }\n+]\n+```\n+\n+### `list`\n+\n+Outputs a list of all KV namespaces associated with your account id.\n+\n+#### Usage\n+The example below uses the `jq` command line tool to pretty-print output.\n+\n+```console\n+$ wrangler kv:namespace list | jq '.'\n+[\n+    {\n+        \"id\": \"06779da6940b431db6e566b4846d64db\",\n+        \"title\": \"TEST_NAMESPACE\"\n+    },\n+    {\n+        \"id\": \"32ac1b3c2ed34ed3b397268817dea9ea\",\n+        \"title\": \"STATIC_CONTENT\"\n+    }\n+]\n+```\n+\n+### `delete`\n+\n+Deletes a given namespace.\n+\n+Requires `--binding` or `--namespace-id` argument.\n+\n+Takes an optional `--env` [environment](./environments.md) argument.\n+\n+#### Usage\n+\n+```console\n+$ wrangler kv:namespace delete --binding=KV\n+Are you sure you want to delete namespace f7b02e7fc70443149ac906dd81ec1791? [y/n]\n+yes\n+\ud83c\udf00  Deleting namespace f7b02e7fc70443149ac906dd81ec1791\n+\u2728  Success\n+```\n+\n+## `kv:key`\n+\n+### `put`\n+\n+Writes a single key/value pair to the given namespace.\n+\n+Requires `--binding` or `--namespace-id` argument.\n+\n+Optional params include:\n+\n+1. `--env`: The [environment](./environments.md) argument.\n+1. `--ttl`: Number of seconds for which the entries should be visible before they expire. At least 60. Takes precedence over 'expiration' option.\n+1. `--expiration`: Number of seconds since the UNIX epoch, indicating when the key-value pair should expire.\n+1. `--path`: Read value from the file at a given path. *This is good for security-sensitive operations, like uploading keys to KV; uploading from a file prevents a key value from being saved in areas like your terminal history.*\n+\n+#### Usage\n+\n+```console\n+$ wrangler kv:key put --binding=KV \"key\" \"value\" --ttl=10000\n+\u2728  Success\n+```\n+\n+```console\n+$ wrangler kv:key put --binding=KV \"key\" value.txt --path\n+\u2728  Success\n+```\n+\n+### `list`\n+\n+Outputs a list of all keys in a given namespace. \n+\n+Requires `--binding` or `--namespace-id` argument.\n+\n+Optional params include:\n+\n+1. `--env`: The [environment](./environments.md) argument.\n+1. `--prefix`: A prefix to filter listed keys.\n+\n+#### Usage\n+\n+The example below uses the `jq` command line tool to pretty-print output.\n+\n+```console\n+$ wrangler kv:key list --binding=KV --prefix=\"public\" | jq '.'\n+[\n+    {\n+        \"name\": \"public_key\"\n+    },\n+    {\n+        \"name\": \"public_key_with_expiration\",\n+        \"expiration\": \"2019-09-10T23:18:58Z\"\n+    }\n+]\n+```\n+\n+### `get`\n+\n+Reads a single value by key from the given namespace.\n+\n+Requires `--binding` or `--namespace-id` argument.\n+\n+Takes an optional `--env` [environment](./environments.md) argument.\n+\n+#### Usage\n+\n+```console\n+$ wrangler kv:key get --binding=KV \"key\"\n+value\n+```\n+\n+### `delete`\n+\n+Removes a single key value pair from the given namespace.\n+\n+Requires `--binding` or `--namespace-id` argument.\n+\n+Takes an optional `--env` [environment](./environments.md) argument.\n+\n+#### Usage\n+\n+```console\n+$ wrangler kv:key delete --binding=KV \"key\"\n+Are you sure you want to delete key \"key\"? [y/n]\n+yes\n+\ud83c\udf00  Deleting key \"key\"\n+\u2728  Success\n+```\n+\n+## `kv:bulk`\n+\n+### `put`\n+\n+Requires `--binding` or `--namespace-id` argument.\n+\n+Writes a file full of key/value pairs to the given namespace. Takes as an argument a JSON file with a list of key-value pairs to upload (see JSON spec above). An example of JSON input:\n+\n+```json\n+[\n+    {\n+        \"key\": \"test_key\",\n+        \"value\": \"test_value\",\n+        \"expiration_ttl\": 3600\n+    }\n+]\n+```\n+\n+The schema below is the full schema for key-value entries uploaded via the bulk API:\n+\n+| **Name**                       | **Description**                                              | Optional |\n+| ------------------------------ | ------------------------------------------------------------ | -------- |\n+| `key`<br />(String)            | A key's name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid. | no       |\n+| `value`<br />(String)          | A UTF-8 encoded string to be stored, up to 2 MB in length.   | no       |\n+| `expiration`<br />(Number)     | The time, measured in number of seconds since the UNIX epoch, at which the key should expire. | yes      |\n+| `expiration_ttl`<br />(Number) | The number of seconds for which the key should be visible before it expires. At least 60. | yes      |\n+| `base64`<br />(Boolean)        | Whether or not the server should base64 decode the value before storing it. Useful for writing values that wouldn't otherwise be valid JSON strings, such as images. Defaults to `false` | yes      |\n+\n+If both `expiration` and `expiration_ttl` are specified for a given key, the API will prefer `expiration_ttl`.\n+\n+The `put` command also takes an optional `--env` [environment](./environments.md) argument.\n+\n+#### Usage\n+\n+```console\n+$ wrangler kv:bulk put --binding=KV allthethingsupload.json\n+\u2728  Success\n+```\n+\n+### `delete`\n+\n+Requires `--binding` or `--namespace-id` argument.\n+\n+Deletes all specified keys within a given namespace.\n+Takes as an argument a JSON file with a list of key-value pairs to delete (see JSON spec above). An example of JSON input:\n+\n+```json\n+[\n+    {\n+        \"key\": \"test_key\",\n+        \"value\": \"test_value\",\n+        \"expiration_ttl\": 3600\n+    }\n+]\n+```\n+\n+The `delete` command also takes an optional `--env` [environment](./environments.md) argument.\n+\n+#### Usage\n+\n+```console\n+$ wrangler kv:bulk delete --binding=KV allthethingsdelete.json\n+Are you sure you want to delete all keys in allthethingsdelete.json? [y/n]\n+yes\n+\u2728  Success\n+```\ndiff --git /dev/null b/src/commands/kv/bulk/delete.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -0,0 +1,83 @@\n+extern crate base64;\n+\n+use std::fs;\n+use std::fs::metadata;\n+use std::path::Path;\n+\n+use cloudflare::endpoints::workerskv::delete_bulk::DeleteBulk;\n+use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n+use cloudflare::framework::apiclient::ApiClient;\n+\n+use crate::commands::kv;\n+use crate::commands::kv::bulk::MAX_PAIRS;\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::target::Target;\n+use crate::terminal::message;\n+\n+pub fn delete(\n+    target: &Target,\n+    user: GlobalUser,\n+    namespace_id: &str,\n+    filename: &Path,\n+) -> Result<(), failure::Error> {\n+    match kv::interactive_delete(&format!(\n+        \"Are you sure you want to delete all keys in {}?\",\n+        filename.display()\n+    )) {\n+        Ok(true) => (),\n+        Ok(false) => {\n+            message::info(&format!(\"Not deleting keys in {}\", filename.display()));\n+            return Ok(());\n+        }\n+        Err(e) => failure::bail!(e),\n+    }\n+\n+    let pairs: Result<Vec<KeyValuePair>, failure::Error> = match &metadata(filename) {\n+        Ok(file_type) if file_type.is_file() => {\n+            let data = fs::read_to_string(filename)?;\n+            let keys_vec = serde_json::from_str(&data);\n+            if keys_vec.is_err() {\n+                failure::bail!(\"Failed to decode JSON. Please make sure to follow the format, [{\\\"key\\\": \\\"test_key\\\", \\\"value\\\": \\\"test_value\\\"}, ...]\")\n+            } else {\n+                Ok(keys_vec.unwrap())\n+            }\n+        }\n+        Ok(_) => failure::bail!(\"{} should be a JSON file, but is not\", filename.display()),\n+        Err(e) => failure::bail!(\"{}\", e),\n+    };\n+\n+    let keys: Vec<String> = pairs?.iter().map(|kv| kv.key.to_owned()).collect();\n+\n+    delete_bulk(target, user, namespace_id, keys)\n+}\n+\n+fn delete_bulk(\n+    target: &Target,\n+    user: GlobalUser,\n+    namespace_id: &str,\n+    keys: Vec<String>,\n+) -> Result<(), failure::Error> {\n+    let client = kv::api_client(user)?;\n+\n+    // Check number of pairs is under limit\n+    if keys.len() > MAX_PAIRS {\n+        failure::bail!(\n+            \"Number of keys to delete ({}) exceeds max of {}\",\n+            keys.len(),\n+            MAX_PAIRS\n+        );\n+    }\n+\n+    let response = client.request(&DeleteBulk {\n+        account_identifier: &target.account_id,\n+        namespace_identifier: namespace_id,\n+        bulk_keys: keys,\n+    });\n+\n+    match response {\n+        Ok(_) => message::success(\"Success\"),\n+        Err(e) => kv::print_error(e),\n+    }\n+\n+    Ok(())\n+}\ndiff --git /dev/null b/src/commands/kv/bulk/put.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/bulk/put.rs\n@@ -0,0 +1,69 @@\n+extern crate base64;\n+\n+use std::fs;\n+use std::fs::metadata;\n+use std::path::Path;\n+\n+use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n+use cloudflare::endpoints::workerskv::write_bulk::WriteBulk;\n+use cloudflare::framework::apiclient::ApiClient;\n+\n+use crate::commands::kv;\n+use crate::commands::kv::bulk::MAX_PAIRS;\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::target::Target;\n+use crate::terminal::message;\n+\n+pub fn put(\n+    target: &Target,\n+    user: GlobalUser,\n+    namespace_id: &str,\n+    filename: &Path,\n+) -> Result<(), failure::Error> {\n+    let pairs: Result<Vec<KeyValuePair>, failure::Error> = match &metadata(filename) {\n+        Ok(file_type) if file_type.is_file() => {\n+            let data = fs::read_to_string(filename)?;\n+            let data_vec = serde_json::from_str(&data);\n+            if data_vec.is_err() {\n+                failure::bail!(\"Failed to decode JSON. Please make sure to follow the format, [{\\\"key\\\": \\\"test_key\\\", \\\"value\\\": \\\"test_value\\\"}, ...]\")\n+            } else {\n+                Ok(data_vec.unwrap())\n+            }\n+        }\n+        Ok(_) => failure::bail!(\"{} should be a JSON file, but is not\", filename.display()),\n+        Err(e) => failure::bail!(\"{}\", e),\n+    };\n+\n+    put_bulk(target, user, namespace_id, pairs?)\n+}\n+\n+fn put_bulk(\n+    target: &Target,\n+    user: GlobalUser,\n+    namespace_id: &str,\n+    pairs: Vec<KeyValuePair>,\n+) -> Result<(), failure::Error> {\n+    let client = kv::api_client(user)?;\n+\n+    // Validate that bulk upload is within size constraints\n+    if pairs.len() > MAX_PAIRS {\n+        failure::bail!(\n+            \"Number of key-value pairs to upload ({}) exceeds max of {}\",\n+            pairs.len(),\n+            MAX_PAIRS\n+        );\n+    }\n+\n+    let response = client.request(&WriteBulk {\n+        account_identifier: &target.account_id,\n+        namespace_identifier: namespace_id,\n+        bulk_key_value_pairs: pairs,\n+    });\n+\n+    match response {\n+        Ok(_) => message::success(\"Success\"),\n+        Err(e) => kv::print_error(e),\n+    }\n+\n+    Ok(())\n+}\ndiff --git /dev/null b/src/commands/kv/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/mod.rs\n@@ -0,0 +1,162 @@\n+use cloudflare::framework::auth::Credentials;\n+use cloudflare::framework::response::ApiFailure;\n+use cloudflare::framework::HttpApiClient;\n+use http::status::StatusCode;\n+use percent_encoding::{percent_encode, PATH_SEGMENT_ENCODE_SET};\n+\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::target::Target;\n+use crate::terminal::message;\n+\n+use std::collections::HashSet;\n+\n+pub mod bulk;\n+pub mod key;\n+pub mod namespace;\n+\n+// Truncate all \"yes\", \"no\" responses for interactive delete prompt to just \"y\" or \"n\".\n+const INTERACTIVE_RESPONSE_LEN: usize = 1;\n+const YES: &str = \"y\";\n+const NO: &str = \"n\";\n+\n+fn check_duplicate_namespaces(target: &Target) -> bool {\n+    // HashSet for detecting duplicate namespace bindings\n+    let mut binding_names: HashSet<String> = HashSet::new();\n+\n+    if let Some(namespaces) = &target.kv_namespaces {\n+        for namespace in namespaces {\n+            // Check if this is a duplicate binding\n+            if binding_names.contains(&namespace.binding) {\n+                return true;\n+            } else {\n+                binding_names.insert(namespace.binding.clone());\n+            }\n+        }\n+    }\n+    false\n+}\n+\n+// Get namespace id for a given binding name.\n+pub fn get_namespace_id(target: &Target, binding: &str) -> Result<String, failure::Error> {\n+    if check_duplicate_namespaces(&target) {\n+        failure::bail!(\n+            \"Namespace binding \\\"{}\\\" is duplicated in \\\"{}\\\"\",\n+            binding,\n+            target.name\n+        )\n+    }\n+\n+    if let Some(namespaces) = &target.kv_namespaces {\n+        for namespace in namespaces {\n+            if namespace.binding == binding {\n+                return Ok(namespace.id.to_string());\n+            }\n+        }\n+    }\n+    failure::bail!(\n+        \"Namespace binding \\\"{}\\\" not found in \\\"{}\\\"\",\n+        binding,\n+        target.name\n+    )\n+}\n+\n+fn api_client(user: GlobalUser) -> Result<HttpApiClient, failure::Error> {\n+    Ok(HttpApiClient::new(Credentials::from(user)))\n+}\n+\n+fn print_error(e: ApiFailure) {\n+    match e {\n+        ApiFailure::Error(status, api_errors) => {\n+            give_status_code_context(status);\n+            for error in api_errors.errors {\n+                message::warn(&format!(\"Error {}: {}\", error.code, error.message));\n+\n+                let suggestion = help(error.code);\n+                if !suggestion.is_empty() {\n+                    message::help(suggestion);\n+                }\n+            }\n+        }\n+        ApiFailure::Invalid(reqwest_err) => message::warn(&format!(\"Error: {}\", reqwest_err)),\n+    }\n+}\n+\n+// For interactively handling deletes (and discouraging accidental deletes).\n+// Input like \"yes\", \"Yes\", \"no\", \"No\" will be accepted, thanks to the whitespace-stripping\n+// and lowercasing logic below.\n+fn interactive_delete(prompt_string: &str) -> Result<bool, failure::Error> {\n+    println!(\"{} [y/n]\", prompt_string);\n+    let mut response: String = read!(\"{}\\n\");\n+    response = response.split_whitespace().collect(); // remove whitespace\n+    response.make_ascii_lowercase(); // ensure response is all lowercase\n+    response.truncate(INTERACTIVE_RESPONSE_LEN); // at this point, all valid input will be \"y\" or \"n\"\n+    match response.as_ref() {\n+        YES => Ok(true),\n+        NO => Ok(false),\n+        _ => failure::bail!(\"Response must either be \\\"y\\\" for yes or \\\"n\\\" for no\"),\n+    }\n+}\n+\n+fn url_encode_key(key: &str) -> String {\n+    percent_encode(key.as_bytes(), PATH_SEGMENT_ENCODE_SET).to_string()\n+}\n+\n+// For handling cases where the API gateway returns errors via HTTP status codes\n+// (no KV error code is given).\n+fn give_status_code_context(status_code: StatusCode) {\n+    match status_code {\n+        StatusCode::PAYLOAD_TOO_LARGE => message::warn(\"Returned status code 413, Payload Too Large. Make sure your upload is less than 100MB in size\"),\n+        _ => (),\n+    }\n+}\n+\n+fn help(error_code: u16) -> &'static str {\n+    // https://api.cloudflare.com/#workers-kv-namespace-errors\n+    match error_code {\n+        // namespace errors\n+        10010 | 10011 | 10012 | 10013 | 10014 | 10018 => {\n+            \"Run `wrangler kv:namespace list` to see your existing namespaces with IDs\"\n+        }\n+        10009 => \"Run `wrangler kv:key list` to see your existing keys\", // key errors\n+        // TODO: link to more info\n+        // limit errors\n+        10022 | 10024 | 10030 => \"See documentation\",\n+        // TODO: link to tool for this?\n+        // legacy namespace errors\n+        10021 | 10035 | 10038 => \"Consider moving this namespace\",\n+        // cloudflare account errors\n+        10017 | 10026 => \"Workers KV is a paid feature, please upgrade your account (https://www.cloudflare.com/products/workers-kv/)\",\n+        _ => \"\",\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::commands::kv;\n+    use crate::settings::target::{KvNamespace, Target, TargetType};\n+\n+    #[test]\n+    fn it_can_detect_duplicate_bindings() {\n+        let target_with_dup_kv_bindings = Target {\n+            account_id: \"\".to_string(),\n+            kv_namespaces: Some(vec![\n+                KvNamespace {\n+                    id: \"fake\".to_string(),\n+                    binding: \"KV\".to_string(),\n+                },\n+                KvNamespace {\n+                    id: \"fake\".to_string(),\n+                    binding: \"KV\".to_string(),\n+                },\n+            ]),\n+            name: \"test-target\".to_string(),\n+            target_type: TargetType::Webpack,\n+            route: None,\n+            routes: None,\n+            webpack_config: None,\n+            workers_dev: false,\n+            zone_id: None,\n+        };\n+        assert!(kv::get_namespace_id(&target_with_dup_kv_bindings, \"\").is_err());\n+    }\n+}\ndiff --git /dev/null b/src/commands/kv/namespace/create.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/kv/namespace/create.rs\n@@ -0,0 +1,102 @@\n+use cloudflare::endpoints::workerskv::create_namespace::CreateNamespace;\n+use cloudflare::endpoints::workerskv::create_namespace::CreateNamespaceParams;\n+use cloudflare::framework::apiclient::ApiClient;\n+\n+use crate::commands::kv;\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::target::Target;\n+use crate::terminal::message;\n+\n+pub fn create(\n+    target: &Target,\n+    env: Option<&str>,\n+    user: GlobalUser,\n+    binding: &str,\n+) -> Result<(), failure::Error> {\n+    let client = kv::api_client(user)?;\n+\n+    if !validate_binding(binding) {\n+        failure::bail!(\n+            \"A binding can only have alphanumeric and _ characters, and cannot begin with a number\"\n+        );\n+    }\n+\n+    let title = format!(\"{}-{}\", target.name, binding);\n+    let msg = format!(\"Creating namespace with title \\\"{}\\\"\", title);\n+    message::working(&msg);\n+\n+    let response = client.request(&CreateNamespace {\n+        account_identifier: &target.account_id,\n+        params: CreateNamespaceParams {\n+            title: title.to_string(),\n+        },\n+    });\n+\n+    match response {\n+        Ok(success) => {\n+            message::success(&format!(\"Success: {:#?}\", success.result));\n+            match target.kv_namespaces {\n+                None => {\n+                    match env {\n+                        Some(env) => message::success(&format!(\n+                            \"Add the following to your wrangler.toml under [env.{}]:\",\n+                            env\n+                        )),\n+                        None => {\n+                            message::success(&format!(\"Add the following to your wrangler.toml:\"))\n+                        }\n+                    };\n+                    println!(\n+                        \"kv-namespaces = [ \\n\\\n+                         \\t {{ binding = \\\"{}\\\", id = \\\"{}\\\" }} \\n\\\n+                         ]\",\n+                        binding, success.result.id\n+                    );\n+                }\n+                Some(_) => {\n+                    match env {\n+                        Some(env) => message::success(&format!(\n+                            \"Add the following to your wrangler.toml's \\\"kv-namespaces\\\" array in [env.{}]:\",\n+                            env\n+                        )),\n+                        None => message::success(&format!(\"Add the following to your wrangler.toml's \\\"kv-namespaces\\\" array:\")),\n+                    };\n+                    println!(\n+                        \"{{ binding: \\\"{}\\\", id: \\\"{}\\\" }}\",\n+                        binding, success.result.id\n+                    );\n+                }\n+            }\n+        }\n+        Err(e) => kv::print_error(e),\n+    }\n+\n+    Ok(())\n+}\n+\n+fn validate_binding(binding: &str) -> bool {\n+    use regex::Regex;\n+    let re = Regex::new(r\"^[a-zA-Z_][a-zA-Z0-9_]*$\").unwrap();\n+    re.is_match(binding)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn it_can_detect_invalid_binding() {\n+        let invalid_bindings = vec![\"hi there\", \"1234\"];\n+        for binding in invalid_bindings {\n+            assert!(!validate_binding(binding));\n+        }\n+    }\n+\n+    #[test]\n+    fn it_can_detect_valid_binding() {\n+        let valid_bindings = vec![\"ONE\", \"TWO_TWO\", \"__private_variable\", \"rud3_var\"];\n+        for binding in valid_bindings {\n+            assert!(validate_binding(binding));\n+        }\n+    }\n+}\n",
        "problem_statement": "RFC - KV Commands / Queries\n# Overview\r\n\r\nProviding a fully CLI-driven experience for KV requires that users interact with the KV API in order to perform operations on and query namespaces and key value pairs for their account outside the context of a Worker project. Using Wrangler it should be possible for a developer to fully automate deploying and maintaining a Workers/KV project, complete with provisioning namespaces, writing key/value pairs, and pushing code (if necessary). This means providing basic commands for interacting with all of the documented KV endpoints:\r\n\r\n- Create namespace #340 \u2705 \r\n- Remove namespace #341 \u2705 \r\n- List all namespaces associated with your account #342 \u2705 \r\n- Rename namespace #348 \u2705 \r\n- Write value for key in a namespace (with or without expiration) #343 \r\n- Delete key value pair in a namespace #344 \r\n- List all keys for a namespace #345 \r\n- Read the value for a key within a namespace #349\r\n- bulk write/delete for key/value pairs. #346 #347 (needs design)\r\n\r\n## Interactions\r\n\r\n``` sh\r\n$ wrangler kv:namespace create <title> [--env]\r\n$ wrangler kv:namespace delete <binding> [--env]\r\n$ wrangler kv:namespace rename <binding> <new-title> [--env]\r\n$ wrangler kv:namespace list [--env]\r\n$ wrangler kv:key write <binding> <key>=<value> [--env | --ttl | --exp]\r\n$ wrangler kv:key delete <binding> <key> [--env]\r\n$ wrangler kv:key list <binding> [--env]\r\n$ wrangler kv:bulk write <binding> ./path/to/data.json [--env]\r\n$ wrangler kv:bulk delete <binding> ./path/to/data.json [--env]\r\n```\r\n\r\n~Stretch goal: bulk upload/delete~ these are required.\r\n\r\n## Pre-work - not necessary before, will be post-work.\r\n\r\n#63 would be a nice-to-have prior to this, but most of the work is in the http module right now so a big refactor is not necessary. Perhaps wrapping that and providing a `kv_client` with methods for each action would be appropriate. If that pattern is appreciated we can extend it to the existing workers calls with a `workers_client` and a `preview_client`.\r\n\r\n## Security\r\n\r\nOne security consideration: we should empower users to protect sensitive data. Leaving values as plain text arguments in the command will leak data into shell history wherever the data is written; we need to take this into consideration either in documentation, or in the design of the command.\nChore: Don't panic in KV command mods\nWe panic a lot across the code base, but there's no reason to do it in these new modules. let's clean it up before we go to master.\r\n\r\nPer https://github.com/cloudflare/wrangler/pull/405#discussion_r311120606\n",
        "hints_text": "One existing constraint: All KV commands require an account_id to make requests. We can either:\r\n\r\n1. Require that users run KV commands in the context of an existing Wrangler project.\r\n2. Partially implement #331 by asking for account id in `wrangler config`, which would allow kv subcommands to be run anywhere.\r\n\r\nGiven that most of our users will likely be using these subcommands in the context of a project, we can probably get away with the former for now and wait for user requests to make these commands global.\nRenaming a namespace adds a lot of complexity and confusion with low value imo. \r\n\r\nUnrelated idea: feedback from customers is the name of the bindings and the name namespace itself is confusing. It'd be cool if our CLI could simplify this by just having one name for a namespace/binding\n",
        "created_at": "2019-08-06T14:05:57Z",
        "version": "1.2"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 399,
        "instance_id": "cloudflare__wrangler-legacy-399",
        "issue_numbers": [
            "389"
        ],
        "base_commit": "d4be43d2ce0b308576a8bb4318fe0048b379a7b9",
        "patch": "diff --git a/src/commands/config.rs b/src/commands/config.rs\n--- a/src/commands/config.rs\n+++ b/src/commands/config.rs\n@@ -17,11 +17,8 @@ pub fn set_file_mode(file: &PathBuf) {\n         .expect(\"could not set permissions on file\");\n }\n \n-pub fn global_config(email: &str, api_key: &str) -> Result<(), failure::Error> {\n-    let s = GlobalUser {\n-        email: email.to_string(),\n-        api_key: api_key.to_string(),\n-    };\n+pub fn global_config(email: String, api_key: String) -> Result<(), failure::Error> {\n+    let s = GlobalUser { email, api_key };\n \n     let toml = toml::to_string(&s)?;\n \ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -153,11 +153,13 @@ fn run() -> Result<(), failure::Error> {\n \n     if let Some(_matches) = matches.subcommand_matches(\"config\") {\n         println!(\"Enter email: \");\n-        let email: String = read!(\"{}\\n\");\n+        let mut email: String = read!(\"{}\\n\");\n+        email.truncate(email.trim_end().len());\n         println!(\"Enter api key: \");\n-        let api_key: String = read!(\"{}\\n\");\n+        let mut api_key: String = read!(\"{}\\n\");\n+        api_key.truncate(api_key.trim_end().len());\n \n-        commands::global_config(&email, &api_key)?;\n+        commands::global_config(email, api_key)?;\n     } else if let Some(matches) = matches.subcommand_matches(\"generate\") {\n         let name = matches.value_of(\"name\").unwrap_or(\"worker\");\n         let project_type = match matches.value_of(\"type\") {\n",
        "test_patch": "diff --git a/tests/config.rs b/tests/config.rs\n--- a/tests/config.rs\n+++ b/tests/config.rs\n@@ -5,15 +5,24 @@ use std::io::prelude::*;\n use std::process::{Child, Command, Stdio};\n \n #[test]\n-fn it_generates_the_config() {\n+fn it_generates_the_config_unix_eol() {\n+    generate_config_with(\"\\n\");\n+}\n+\n+#[test]\n+fn it_generates_the_config_windows_eol() {\n+    generate_config_with(\"\\r\\n\");\n+}\n+\n+fn generate_config_with(eol: &str) {\n     let fake_home_dir = env::current_dir()\n         .expect(\"could not retrieve cwd\")\n-        .join(\".it_generates_the_config\");\n+        .join(format!(\".it_generates_the_config_{}\", random_chars(5)));\n     let cmd = config_with_wrangler_home(fake_home_dir.to_str().unwrap());\n     let mut stdin = cmd.stdin.unwrap();\n \n-    write!(stdin, \"email@example.com\\n\").unwrap();\n-    write!(stdin, \"apikeythisissecretandlong\\n\").unwrap();\n+    write!(stdin, \"email@example.com{}\", eol).unwrap();\n+    write!(stdin, \"apikeythisissecretandlong{}\", eol).unwrap();\n \n     let mut buffer = \"\".to_string();\n     let mut stdout = cmd.stdout.expect(\"stdout\");\ndiff --git a/tests/config.rs b/tests/config.rs\n--- a/tests/config.rs\n+++ b/tests/config.rs\n@@ -57,3 +66,14 @@ fn config_with_wrangler_home(home_dir: &str) -> Child {\n         .spawn()\n         .unwrap()\n }\n+\n+fn random_chars(n: usize) -> String {\n+    use rand::distributions::Alphanumeric;\n+    use rand::{thread_rng, Rng};\n+    use std::iter;\n+    let mut rng = thread_rng();\n+    iter::repeat(())\n+        .map(|()| rng.sample(Alphanumeric))\n+        .take(n)\n+        .collect()\n+}\n",
        "problem_statement": "Wrangler can panic if global user configuration contains non printable characters\nThese lines will read until `\\n`, which means on windows `email` and `api_key` will have `\\r` at the end\r\nhttps://github.com/cloudflare/wrangler/blob/1841a16b03435bf92a5766b4f36b8d748466265a/src/main.rs#L156\r\nhttps://github.com/cloudflare/wrangler/blob/1841a16b03435bf92a5766b4f36b8d748466265a/src/main.rs#L158\r\n\r\nwhich will cause a panic at these lines since `HeaderValue::from_str` requires its input to consist of solely printable ASCII characters.\r\nhttps://github.com/cloudflare/wrangler/blob/1841a16b03435bf92a5766b4f36b8d748466265a/src/http.rs#L37\r\nhttps://github.com/cloudflare/wrangler/blob/1841a16b03435bf92a5766b4f36b8d748466265a/src/http.rs#L38\n",
        "hints_text": "we should use `trim_end()` on `email` and `api_key` to handle the windows EOL, and then validate the fields and return an error if they aren't valid.",
        "created_at": "2019-08-05T18:23:26Z",
        "version": "1.1"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1112,
        "instance_id": "cloudflare__wrangler-legacy-1112",
        "issue_numbers": [
            "1109",
            "1109"
        ],
        "base_commit": "35f6352de1af5e0cd8713dcc6bc4c474a7ccf08c",
        "patch": "diff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -18,8 +18,7 @@ use wrangler::installer;\n use wrangler::settings;\n use wrangler::settings::global_user::GlobalUser;\n use wrangler::settings::toml::TargetType;\n-use wrangler::terminal::emoji;\n-use wrangler::terminal::message;\n+use wrangler::terminal::{emoji, interactive, message};\n \n fn main() -> Result<(), ExitFailure> {\n     env_logger::init();\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -518,19 +517,12 @@ fn run() -> Result<(), failure::Error> {\n             // API Tokens are the default\n             message::big_info(\"To find your API token, go to https://dash.cloudflare.com/profile/api-tokens\\n\\tand create it using the \\\"Edit Cloudflare Workers\\\" template\");\n             message::big_info(\"If you are trying to use your Global API Key instead of an API Token\\n\\t(Not Recommended), run \\\"wrangler config --api-key\\\".\\n\");\n-            println!(\"Enter API token: \");\n-            let mut api_token: String = read!(\"{}\\n\");\n-            api_token.truncate(api_token.trim_end().len());\n+            let api_token: String = interactive::get_user_input(\"Enter API token: \");\n             GlobalUser::TokenAuth { api_token }\n         } else {\n             message::big_info(\"We don't recommend using your Global API Key! Please consider using an\\n\\tAPI Token instead.\\n\\thttps://support.cloudflare.com/hc/en-us/articles/200167836-Managing-API-Tokens-and-Keys\\n\");\n-            println!(\"Enter email: \");\n-            let mut email: String = read!(\"{}\\n\");\n-            email.truncate(email.trim_end().len());\n-\n-            println!(\"Enter global API key: \");\n-            let mut api_key: String = read!(\"{}\\n\");\n-            api_key.truncate(api_key.trim_end().len());\n+            let email: String = interactive::get_user_input(\"Enter email: \");\n+            let api_key: String = interactive::get_user_input(\"Enter global API key: \");\n \n             GlobalUser::GlobalKeyAuth { email, api_key }\n         };\ndiff --git a/src/terminal/interactive.rs b/src/terminal/interactive.rs\n--- a/src/terminal/interactive.rs\n+++ b/src/terminal/interactive.rs\n@@ -1,7 +1,13 @@\n // For interactively handling reading in a string\n pub fn get_user_input(prompt_string: &str) -> String {\n     println!(\"{}\", prompt_string);\n-    let input: String = read!(\"{}\\n\");\n+    let mut input: String = read!(\"{}\\n\");\n+    input = strip_trailing_whitespace(input);\n+    input\n+}\n+\n+fn strip_trailing_whitespace(mut input: String) -> String {\n+    input.truncate(input.trim_end().len());\n     input\n }\n \n",
        "test_patch": "diff --git a/src/terminal/interactive.rs b/src/terminal/interactive.rs\n--- a/src/terminal/interactive.rs\n+++ b/src/terminal/interactive.rs\n@@ -24,3 +30,16 @@ pub fn delete(prompt_string: &str) -> Result<bool, failure::Error> {\n         _ => failure::bail!(\"Response must either be \\\"y\\\" for yes or \\\"n\\\" for no\"),\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn it_trims_user_input_right_whitespace_chars() {\n+        let test_str = \"mysecret\\r\".to_string();\n+\n+        let truncated_str = strip_trailing_whitespace(test_str);\n+        assert_eq!(truncated_str, \"mysecret\")\n+    }\n+}\n",
        "problem_statement": "Published secrets have unexpected carriage return appended to value\n### \ud83d\udc1b Bug Report\r\n\r\nWhen publishing secrets using `wrangler secret put API_KEY` for example, secrets are appended with an unnecessary carriage return such as `\\r` when accessed in a script.\r\n\r\n#### Environment\r\n\r\n* operating system: Windows 10\r\n* output of `rustc -V`: n/a\r\n* output of `node -v`: v12.16.1\r\n* output of `wrangler -V`: 1.8.0\r\n\r\n#### Steps to reproduce\r\n\r\n`wrangler put secret API_KEY` - enter `TEST`\r\n\r\nWorker script:\r\n```js\r\naddEventListener('fetch', event => {\r\n  event.respondWith(handleRequest(event.request))\r\n})\r\n/**\r\n * Respond with hello worker text\r\n * @param {Request} request\r\n */\r\nasync function handleRequest(request) {\r\n  return new Response(JSON.stringify(API_KEY), {\r\n    headers: { 'content-type': 'text/plain' },\r\n  })\r\n}\r\n```\r\n\r\n#### What did you expect to see?\r\n`TEST` was expected to be printed back.\r\n\r\n#### What did you see instead?\r\n`TEST\\r` was printed back. This can cause problems when API keys are appended to URLs for example, because it results in an encoded `%0d` in the URL.\r\n\r\nCan be seen at https://secrets-test.nodecraft.workers.dev/.\r\n\nPublished secrets have unexpected carriage return appended to value\n### \ud83d\udc1b Bug Report\r\n\r\nWhen publishing secrets using `wrangler secret put API_KEY` for example, secrets are appended with an unnecessary carriage return such as `\\r` when accessed in a script.\r\n\r\n#### Environment\r\n\r\n* operating system: Windows 10\r\n* output of `rustc -V`: n/a\r\n* output of `node -v`: v12.16.1\r\n* output of `wrangler -V`: 1.8.0\r\n\r\n#### Steps to reproduce\r\n\r\n`wrangler put secret API_KEY` - enter `TEST`\r\n\r\nWorker script:\r\n```js\r\naddEventListener('fetch', event => {\r\n  event.respondWith(handleRequest(event.request))\r\n})\r\n/**\r\n * Respond with hello worker text\r\n * @param {Request} request\r\n */\r\nasync function handleRequest(request) {\r\n  return new Response(JSON.stringify(API_KEY), {\r\n    headers: { 'content-type': 'text/plain' },\r\n  })\r\n}\r\n```\r\n\r\n#### What did you expect to see?\r\n`TEST` was expected to be printed back.\r\n\r\n#### What did you see instead?\r\n`TEST\\r` was printed back. This can cause problems when API keys are appended to URLs for example, because it results in an encoded `%0d` in the URL.\r\n\r\nCan be seen at https://secrets-test.nodecraft.workers.dev/.\r\n\n",
        "hints_text": "HI @Cherry! I'm really sorry you're running into this issue. This definitely looks like a bug. I'll investigate this today. My first hunch is that the interactive input form for `wrangler secret put` must accidentally append the `\\r` character to the secret input. \r\n\r\nA workaround you can use for now is to insert secrets via the Workers UI on the Cloudflare dashboard. Please let me know if that alternative works out for you!\nThanks @gabbifish. The work-around I'm using right now is to just wrap the secret in `String(API_KEY).trimEnd()`. It's not pretty and obviously has limitations, but works for our immediate use-case.\r\n\r\nLet me know if I can provide any more info to help the resolution here.\nWe think this may be a windows input quirk--I wasn't able to reproduce this extra `\\r` behavior on my linux machine, nor was he able to reproduce it on his Mac OSX machine. This must be why we didn't catch this in our testing phase, and we're sorry about that. We're working on a fix right now.\nHI @Cherry! I'm really sorry you're running into this issue. This definitely looks like a bug. I'll investigate this today. My first hunch is that the interactive input form for `wrangler secret put` must accidentally append the `\\r` character to the secret input. \r\n\r\nA workaround you can use for now is to insert secrets via the Workers UI on the Cloudflare dashboard. Please let me know if that alternative works out for you!\nThanks @gabbifish. The work-around I'm using right now is to just wrap the secret in `String(API_KEY).trimEnd()`. It's not pretty and obviously has limitations, but works for our immediate use-case.\r\n\r\nLet me know if I can provide any more info to help the resolution here.\nWe think this may be a windows input quirk--I wasn't able to reproduce this extra `\\r` behavior on my linux machine, nor was he able to reproduce it on his Mac OSX machine. This must be why we didn't catch this in our testing phase, and we're sorry about that. We're working on a fix right now.",
        "created_at": "2020-02-28T22:55:48Z",
        "version": "1.8"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1097,
        "instance_id": "cloudflare__wrangler-legacy-1097",
        "issue_numbers": [
            "1088"
        ],
        "base_commit": "1c24a4c34f9f4473f6a183dab7a51ea1ea7ecfea",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -512,9 +512,9 @@ dependencies = [\n \n [[package]]\n name = \"curl-sys\"\n-version = \"0.4.25\"\n+version = \"0.4.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0c38ca47d60b86d0cc9d42caa90a0885669c2abc9791f871c81f58cdf39e979b\"\n+checksum = \"0853fe2a575bb381b1f173610372c7722d9fa9bc4056512ed99fe6a644c388c6\"\n dependencies = [\n  \"cc\",\n  \"libc\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -615,12 +615,12 @@ dependencies = [\n \n [[package]]\n name = \"error-chain\"\n-version = \"0.12.1\"\n+version = \"0.12.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3ab49e9dcb602294bc42f9a7dfc9bc6e936fca4418ea300dbfb84fe16de0b7d9\"\n+checksum = \"d371106cc88ffdfb1eabd7111e432da544f16f3e2d7bf1dfe8bf575f1df045cd\"\n dependencies = [\n  \"backtrace\",\n- \"version_check 0.1.5\",\n+ \"version_check 0.9.1\",\n ]\n \n [[package]]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -937,9 +937,9 @@ dependencies = [\n \n [[package]]\n name = \"hermit-abi\"\n-version = \"0.1.6\"\n+version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eff2656d88f158ce120947499e971d743c05dbcbed62e5bd2f38f1698bbc3772\"\n+checksum = \"e2c55f143919fbc0bc77e427fe2d74cf23786d7c1875666f2fde3ac3c659bb67\"\n dependencies = [\n  \"libc\",\n ]\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2811,7 +2811,7 @@ dependencies = [\n \n [[package]]\n name = \"wrangler\"\n-version = \"1.8.0-rc.1\"\n+version = \"1.8.0-rc.2\"\n dependencies = [\n  \"assert_cmd\",\n  \"atty\",\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -1,6 +1,6 @@\n [package]\n name = \"wrangler\"\n-version = \"1.8.0-rc.1\"\n+version = \"1.8.0-rc.2\"\n authors = [\"Ashley Williams <ashley666ashley@gmail.com>\"]\n edition = \"2018\"\n license = \"MIT/Apache-2.0\"\ndiff --git a/npm/npm-shrinkwrap.json b/npm/npm-shrinkwrap.json\n--- a/npm/npm-shrinkwrap.json\n+++ b/npm/npm-shrinkwrap.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"@cloudflare/wrangler\",\n-  \"version\": \"1.8.0-rc.1\",\n+  \"version\": \"1.8.0-rc.2\",\n   \"lockfileVersion\": 1,\n   \"requires\": true,\n   \"dependencies\": {\ndiff --git a/npm/package.json b/npm/package.json\n--- a/npm/package.json\n+++ b/npm/package.json\n@@ -1,6 +1,6 @@\n {\n   \"name\": \"@cloudflare/wrangler\",\n-  \"version\": \"1.8.0-rc.1\",\n+  \"version\": \"1.8.0-rc.2\",\n   \"description\": \"Wrangle your Cloudflare Workers\",\n   \"main\": \"binary.js\",\n   \"scripts\": {\n",
        "test_patch": "diff --git a/npm/README.md b/npm/README.md\n--- a/npm/README.md\n+++ b/npm/README.md\n@@ -128,6 +128,26 @@ $ wrangler publish\n \n   Interact with your Workers KV store. This is actually a whole suite of subcommands. Read more about in [Wrangler KV Documentation](https://developers.cloudflare.com/workers/tooling/wrangler/kv_commands).\n \n+### \ud83d\udc42 `dev`\n+\n+  `wrangler dev` works very similarly to `wrangler preview` except that instead of opening your browser to preview your worker, it will start a server on localhost that will execute your worker on incoming HTTP requests. From there you can use cURL, Postman, your browser, or any other HTTP client to test the behavior of your worker before publishing it.\n+\n+  You should run wrangler dev from your worker directory, and if your worker makes any requests to a backend, you should specify the host with `--host example.com`.\n+\n+  From here you should be able to send HTTP requests to `localhost:8787` along with any headers and paths, and your worker should execute as expected. Additionally, you should see console.log messages and exceptions appearing in your terminal.\n+  \n+  ```bash\n+\ud83d\udc42 Listening on http://localhost:8787\n+  [2020-02-18 19:37:08] GET example.com/ HTTP/1.1 200 OK\n+  ```\n+\n+  All of the arguments and flags to this command are optional:\n+\n+  - `env`: environment to build\n+  - `host`: domain to test behind your worker. defaults to example.com\n+  - `ip`: ip to listen on. defaults to localhost\n+  - `port`: port to listen on. defaults to 8787\n+\n ## Additional Documentation\n \n All information regarding wrangler or Cloudflare Workers is located in the [Cloudflare Workers Developer Docs](https://developers.cloudflare.com/workers/). This includes:\n",
        "problem_statement": "wrangler list secrets produces broken output when list of secrets is empty\nIf I attempt to run `wrangler secret list` for a worker which has no secrets, I get unexpected output:\r\n\r\n```\r\n$ wrangler secret list\r\nError:  Error: error decoding response body: invalid type: null, expected a sequence at line 2 column 16\r\n```\r\n\r\nThis should ideally return no output (or maybe helpful text like `No secrets found for worker <worker-name>`).\r\n\r\nTagging @ashleymichal @victoriabernard92 :)\n",
        "hints_text": "this looks like potentially a cloudflare-rs or api issue; it should be returning an empty list, not `null`\nThis was an API problem. We now return empty lists instead of null if no bindings exist for a worker.",
        "created_at": "2020-02-20T20:11:51Z",
        "version": "0.10"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1045,
        "instance_id": "cloudflare__wrangler-legacy-1045",
        "issue_numbers": [
            "907"
        ],
        "base_commit": "c8d4ae5e5d4044f1d19e726a794f40656a52cb67",
        "patch": "diff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -17,7 +17,7 @@ binary-install = \"0.0.3-alpha\"\n chrome-devtools-rs = \"0.0.0-alpha.0\"\n chrono = \"0.4.9\"\n clap = \"2.32.0\"\n-cloudflare = \"0.6.2\"\n+cloudflare = \"0.6.4\"\n config = \"0.9.2\"\n console = \"0.9.1\"\n data-encoding = \"2.1.2\"\ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -12,6 +12,7 @@ use crate::commands::kv;\n use crate::commands::kv::bulk::MAX_PAIRS;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n+use crate::terminal::interactive;\n use crate::terminal::message;\n \n pub fn delete(\ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -22,7 +23,7 @@ pub fn delete(\n ) -> Result<(), failure::Error> {\n     kv::validate_target(target)?;\n \n-    match kv::interactive_delete(&format!(\n+    match interactive::delete(&format!(\n         \"Are you sure you want to delete all keys in {}?\",\n         filename.display()\n     )) {\ndiff --git a/src/commands/kv/key/delete.rs b/src/commands/kv/key/delete.rs\n--- a/src/commands/kv/key/delete.rs\n+++ b/src/commands/kv/key/delete.rs\n@@ -4,6 +4,7 @@ use cloudflare::framework::apiclient::ApiClient;\n use crate::commands::kv;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n+use crate::terminal::interactive;\n use crate::terminal::message;\n \n pub fn delete(\ndiff --git a/src/commands/kv/key/delete.rs b/src/commands/kv/key/delete.rs\n--- a/src/commands/kv/key/delete.rs\n+++ b/src/commands/kv/key/delete.rs\n@@ -15,7 +16,7 @@ pub fn delete(\n     kv::validate_target(target)?;\n     let client = kv::api_client(user)?;\n \n-    match kv::interactive_delete(&format!(\"Are you sure you want to delete key \\\"{}\\\"?\", key)) {\n+    match interactive::delete(&format!(\"Are you sure you want to delete key \\\"{}\\\"?\", key)) {\n         Ok(true) => (),\n         Ok(false) => {\n             message::info(&format!(\"Not deleting key \\\"{}\\\"\", key));\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -16,11 +16,6 @@ pub mod bulk;\n pub mod key;\n pub mod namespace;\n \n-// Truncate all \"yes\", \"no\" responses for interactive delete prompt to just \"y\" or \"n\".\n-const INTERACTIVE_RESPONSE_LEN: usize = 1;\n-const YES: &str = \"y\";\n-const NO: &str = \"n\";\n-\n // Create a special API client that has a longer timeout than usual, given that KV operations\n // can be lengthy if payloads are large.\n fn api_client(user: &GlobalUser) -> Result<HttpApiClient, failure::Error> {\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -121,22 +116,6 @@ pub fn get_namespace_id(target: &Target, binding: &str) -> Result<String, failur\n     )\n }\n \n-// For interactively handling deletes (and discouraging accidental deletes).\n-// Input like \"yes\", \"Yes\", \"no\", \"No\" will be accepted, thanks to the whitespace-stripping\n-// and lowercasing logic below.\n-fn interactive_delete(prompt_string: &str) -> Result<bool, failure::Error> {\n-    println!(\"{} [y/n]\", prompt_string);\n-    let mut response: String = read!(\"{}\\n\");\n-    response = response.split_whitespace().collect(); // remove whitespace\n-    response.make_ascii_lowercase(); // ensure response is all lowercase\n-    response.truncate(INTERACTIVE_RESPONSE_LEN); // at this point, all valid input will be \"y\" or \"n\"\n-    match response.as_ref() {\n-        YES => Ok(true),\n-        NO => Ok(false),\n-        _ => failure::bail!(\"Response must either be \\\"y\\\" for yes or \\\"n\\\" for no\"),\n-    }\n-}\n-\n fn url_encode_key(key: &str) -> String {\n     percent_encode(key.as_bytes(), PATH_SEGMENT_ENCODE_SET).to_string()\n }\ndiff --git a/src/commands/kv/namespace/delete.rs b/src/commands/kv/namespace/delete.rs\n--- a/src/commands/kv/namespace/delete.rs\n+++ b/src/commands/kv/namespace/delete.rs\n@@ -4,13 +4,14 @@ use cloudflare::framework::apiclient::ApiClient;\n use crate::commands::kv;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::toml::Target;\n+use crate::terminal::interactive;\n use crate::terminal::message;\n \n pub fn delete(target: &Target, user: &GlobalUser, id: &str) -> Result<(), failure::Error> {\n     kv::validate_target(target)?;\n     let client = kv::api_client(user)?;\n \n-    match kv::interactive_delete(&format!(\n+    match interactive::delete(&format!(\n         \"Are you sure you want to delete namespace {}?\",\n         id\n     )) {\ndiff --git a/src/commands/mod.rs b/src/commands/mod.rs\n--- a/src/commands/mod.rs\n+++ b/src/commands/mod.rs\n@@ -9,6 +9,7 @@ pub mod kv;\n pub mod preview;\n pub mod publish;\n pub mod route;\n+pub mod secret;\n pub mod subdomain;\n pub mod whoami;\n \ndiff --git a/src/commands/mod.rs b/src/commands/mod.rs\n--- a/src/commands/mod.rs\n+++ b/src/commands/mod.rs\n@@ -20,6 +21,7 @@ pub use generate::generate;\n pub use init::init;\n pub use preview::{preview, HTTPMethod};\n pub use publish::publish;\n+pub use secret::{create_secret, delete_secret, list_secrets};\n pub use subdomain::get_subdomain;\n pub use subdomain::set_subdomain;\n pub use whoami::whoami;\ndiff --git /dev/null b/src/commands/secret/mod.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/secret/mod.rs\n@@ -0,0 +1,140 @@\n+use cloudflare::endpoints::workers::{CreateSecret, CreateSecretParams, DeleteSecret, ListSecrets};\n+use cloudflare::framework::apiclient::ApiClient;\n+use cloudflare::framework::response::ApiFailure;\n+use cloudflare::framework::HttpApiClientConfig;\n+\n+use crate::http;\n+use crate::settings::global_user::GlobalUser;\n+use crate::settings::toml::Target;\n+use crate::terminal::{emoji, interactive, message};\n+\n+fn format_error(e: ApiFailure) -> String {\n+    http::format_error(e, Some(&secret_errors))\n+}\n+\n+fn validate_target(target: &Target) -> Result<(), failure::Error> {\n+    let mut missing_fields = Vec::new();\n+\n+    if target.account_id.is_empty() {\n+        missing_fields.push(\"account_id\")\n+    };\n+\n+    if !missing_fields.is_empty() {\n+        failure::bail!(\n+            \"{} Your wrangler.toml is missing the following field(s): {:?}\",\n+            emoji::WARN,\n+            missing_fields\n+        )\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+// secret_errors() provides more detailed explanations of Workers KV API error codes.\n+// See https://api.cloudflare.com/#workers-secrets ? for details.\n+fn secret_errors(error_code: u16) -> &'static str {\n+    match error_code {\n+        7003 | 7000 => {\n+            \"Your wrangler.toml is likely missing the field \\\"account_id\\\", which is required to write to Workers KV.\"\n+        }\n+        10053 => \"There is already another binding with a different type by this name. Check your wrangler.toml or your Cloudflare dashboard for conflicting bindings\",\n+        10054 => \"Your secret is too large, bindings must be 1kB or less\",\n+        10055 => \"You have exceeded the limit of 32 text bindings for this worker. Run `wrangler secret list` or go to your Cloudflare dashboard to clean up unused text/secret variables\",\n+        _ => \"\",\n+    }\n+}\n+\n+pub fn create_secret(name: &str, user: &GlobalUser, target: &Target) -> Result<(), failure::Error> {\n+    validate_target(target)?;\n+\n+    let secret_value = interactive::get_user_input(&format!(\n+        \"Enter the secret text you'd like assigned to the variable {} on the script named {}\",\n+        name, target.name\n+    ));\n+\n+    if secret_value.is_empty() {\n+        failure::bail!(\"Your secret cannot be empty\")\n+    }\n+\n+    message::working(&format!(\n+        \"Creating the secret for script name {}\",\n+        target.name\n+    ));\n+\n+    let client = http::cf_v4_api_client(user, HttpApiClientConfig::default())?;\n+\n+    let params = CreateSecretParams {\n+        name: name.to_string(),\n+        text: secret_value.to_string(),\n+        secret_type: \"secret_text\".to_string(),\n+    };\n+\n+    let response = client.request(&CreateSecret {\n+        account_identifier: &target.account_id,\n+        script_name: &target.name,\n+        params,\n+    });\n+\n+    match response {\n+        Ok(_) => message::success(&format!(\"Success! You've uploaded secret {}.\", name)),\n+        Err(e) => failure::bail!(format_error(e)),\n+    }\n+\n+    Ok(())\n+}\n+\n+pub fn delete_secret(name: &str, user: &GlobalUser, target: &Target) -> Result<(), failure::Error> {\n+    validate_target(target)?;\n+\n+    match interactive::delete(&format!(\n+        \"Are you sure you want to permanently delete the variable {} on the script named {}\",\n+        name, target.name\n+    )) {\n+        Ok(true) => (),\n+        Ok(false) => {\n+            message::info(&format!(\"Not deleting secret {}\", name));\n+            return Ok(());\n+        }\n+        Err(e) => failure::bail!(e),\n+    }\n+\n+    message::working(&format!(\n+        \"Deleting the secret {} on script {}.\",\n+        name, target.name\n+    ));\n+\n+    let client = http::cf_v4_api_client(user, HttpApiClientConfig::default())?;\n+\n+    let response = client.request(&DeleteSecret {\n+        account_identifier: &target.account_id,\n+        script_name: &target.name,\n+        secret_name: name,\n+    });\n+\n+    match response {\n+        Ok(_) => message::success(&format!(\"You've deleted the secret {}.\", name)),\n+        Err(e) => failure::bail!(format_error(e)),\n+    }\n+\n+    Ok(())\n+}\n+\n+pub fn list_secrets(user: &GlobalUser, target: &Target) -> Result<(), failure::Error> {\n+    validate_target(target)?;\n+    let client = http::cf_v4_api_client(user, HttpApiClientConfig::default())?;\n+\n+    let response = client.request(&ListSecrets {\n+        account_identifier: &target.account_id,\n+        script_name: &target.name,\n+    });\n+\n+    match response {\n+        Ok(success) => {\n+            let secrets = success.result;\n+            println!(\"{}\", serde_json::to_string(&secrets)?);\n+        }\n+        Err(e) => failure::bail!(format_error(e)),\n+    }\n+\n+    Ok(())\n+}\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -65,6 +65,15 @@ fn run() -> Result<(), failure::Error> {\n         .takes_value(true)\n         .value_name(\"ENVIRONMENT NAME\");\n \n+    let secret_name_arg = Arg::with_name(\"name\")\n+        .help(\"Name of the secret variable\")\n+        .short(\"n\")\n+        .long(\"name\")\n+        .required(true)\n+        .takes_value(true)\n+        .index(1)\n+        .value_name(\"VAR_NAME\");\n+\n     let matches = App::new(format!(\"{}{} wrangler\", emoji::WORKER, emoji::SPARKLES))\n         .version(env!(\"CARGO_PKG_VERSION\"))\n         .author(\"The Wrangler Team <wrangler@cloudflare.com>\")\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -257,6 +266,30 @@ fn run() -> Result<(), failure::Error> {\n                         )\n                 )\n         )\n+        .subcommand(\n+            SubCommand::with_name(\"secret\")\n+                .about(&*format!(\n+                    \"{} Generate a secret that can be referenced in the worker script\",\n+                    emoji::SECRET\n+                ))\n+                .subcommand(\n+                    SubCommand::with_name(\"put\")\n+                        .about(\"Create or update a secret variable for a script\")\n+                        .arg(secret_name_arg.clone())\n+                        .arg(environment_arg.clone())\n+                )\n+                .subcommand(\n+                    SubCommand::with_name(\"delete\")\n+                        .about(\"Delete a secret variable from a script\")\n+                        .arg(secret_name_arg.clone())\n+                        .arg(environment_arg.clone())\n+                )\n+                .subcommand(\n+                    SubCommand::with_name(\"list\")\n+                        .about(\"List all secrets for a script\")\n+                        .arg(environment_arg.clone())\n+                )\n+        )\n         .subcommand(\n             SubCommand::with_name(\"generate\")\n                 .about(&*format!(\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -662,6 +695,37 @@ fn run() -> Result<(), failure::Error> {\n             (\"\", None) => message::warn(\"route expects a subcommand\"),\n             _ => unreachable!(),\n         }\n+    } else if let Some(secrets_matches) = matches.subcommand_matches(\"secret\") {\n+        log::info!(\"Getting project settings\");\n+        let manifest = settings::toml::Manifest::new(config_path)?;\n+        log::info!(\"Getting User settings\");\n+        let user = settings::global_user::GlobalUser::new()?;\n+\n+        match secrets_matches.subcommand() {\n+            (\"put\", Some(create_matches)) => {\n+                let name = create_matches.value_of(\"name\");\n+                let env = create_matches.value_of(\"env\");\n+                let target = manifest.get_target(env)?;\n+                if let Some(name) = name {\n+                    commands::secret::create_secret(&name, &user, &target)?;\n+                }\n+            }\n+            (\"delete\", Some(delete_matches)) => {\n+                let name = delete_matches.value_of(\"name\");\n+                let env = delete_matches.value_of(\"env\");\n+                let target = manifest.get_target(env)?;\n+                if let Some(name) = name {\n+                    commands::secret::delete_secret(&name, &user, &target)?;\n+                }\n+            }\n+            (\"list\", Some(list_matches)) => {\n+                let env = list_matches.value_of(\"env\");\n+                let target = manifest.get_target(env)?;\n+                commands::secret::list_secrets(&user, &target)?;\n+            }\n+            (\"\", None) => message::warn(\"secret expects a subcommand\"),\n+            _ => unreachable!(),\n+        }\n     } else if let Some(kv_matches) = matches.subcommand_matches(\"kv:namespace\") {\n         let manifest = settings::toml::Manifest::new(config_path)?;\n         let user = settings::global_user::GlobalUser::new()?;\ndiff --git a/src/terminal/emoji.rs b/src/terminal/emoji.rs\n--- a/src/terminal/emoji.rs\n+++ b/src/terminal/emoji.rs\n@@ -25,6 +25,7 @@ pub static INFO: Emoji = Emoji(\"\ud83d\udc81 \", \"\");\n pub static KEY: Emoji = Emoji(\"\ud83d\udd11 \", \"\");\n pub static MICROSCOPE: Emoji = Emoji(\"\ud83d\udd2c \", \"\");\n pub static ROUTE: Emoji = Emoji(\"\u27a1\ufe0f \", \"\");\n+pub static SECRET: Emoji = Emoji(\"\ud83e\udd2b \", \"\");\n pub static SHEEP: Emoji = Emoji(\"\ud83d\udc11 \", \"\");\n pub static SLEUTH: Emoji = Emoji(\"\ud83d\udd75\ufe0f \", \"\");\n pub static SPARKLES: Emoji = Emoji(\"\u2728 \", \"\");\ndiff --git /dev/null b/src/terminal/interactive.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/terminal/interactive.rs\n@@ -0,0 +1,26 @@\n+// For interactively handling reading in a string\n+pub fn get_user_input(prompt_string: &str) -> String {\n+    println!(\"{}\", prompt_string);\n+    let input: String = read!(\"{}\\n\");\n+    input\n+}\n+\n+// Truncate all \"yes\", \"no\" responses for interactive delete prompt to just \"y\" or \"n\".\n+const INTERACTIVE_RESPONSE_LEN: usize = 1;\n+const YES: &str = \"y\";\n+const NO: &str = \"n\";\n+// For interactively handling deletes (and discouraging accidental deletes).\n+// Input like \"yes\", \"Yes\", \"no\", \"No\" will be accepted, thanks to the whitespace-stripping\n+// and lowercasing logic below.\n+pub fn delete(prompt_string: &str) -> Result<bool, failure::Error> {\n+    println!(\"{} [y/n]\", prompt_string);\n+    let mut response: String = read!(\"{}\\n\");\n+    response = response.split_whitespace().collect(); // remove whitespace\n+    response.make_ascii_lowercase(); // ensure response is all lowercase\n+    response.truncate(INTERACTIVE_RESPONSE_LEN); // at this point, all valid input will be \"y\" or \"n\"\n+    match response.as_ref() {\n+        YES => Ok(true),\n+        NO => Ok(false),\n+        _ => failure::bail!(\"Response must either be \\\"y\\\" for yes or \\\"n\\\" for no\"),\n+    }\n+}\ndiff --git a/src/terminal/mod.rs b/src/terminal/mod.rs\n--- a/src/terminal/mod.rs\n+++ b/src/terminal/mod.rs\n@@ -1,2 +1,3 @@\n pub mod emoji;\n+pub mod interactive;\n pub mod message;\n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -4,2840 +4,2842 @@\n name = \"adler32\"\n version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5d2e7343e7fc9de883d1b0341e0b13970f764c14101234857d2ddafa1cb1cac2\"\n \n [[package]]\n name = \"aho-corasick\"\n version = \"0.7.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"743ad5a418686aad3b87fd14c43badd828cf26e214a00f92a384291cf22e1811\"\n dependencies = [\n- \"memchr\",\n+ \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"ansi_term\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n dependencies = [\n- \"winapi 0.3.8\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"anyhow\"\n version = \"1.0.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7825f6833612eb2414095684fcf6c635becf3ce97fe48cf6421321e93bfbd53c\"\n \n [[package]]\n name = \"arc-swap\"\n version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d7b8a9123b8027467bce0099fe556c628a53c8d83df0507084c31e9ba2e39aff\"\n \n [[package]]\n name = \"arrayref\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a4c527152e37cf757a3f78aae5a06fbeefdb07ccc535c980a3208ee3060dd544\"\n \n [[package]]\n name = \"arrayvec\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cff77d8686867eceff3105329d4698d96c2391c176d5d03adc90c7389162b5b8\"\n \n [[package]]\n name = \"assert_cmd\"\n version = \"0.11.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2dc477793bd82ec39799b6f6b3df64938532fdf2ab0d49ef817eac65856a5a1e\"\n dependencies = [\n- \"escargot\",\n- \"predicates\",\n- \"predicates-core\",\n- \"predicates-tree\",\n+ \"escargot 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"predicates 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"predicates-core 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"predicates-tree 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"async-trait\"\n version = \"0.1.24\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"750b1c38a1dfadd108da0f01c08f4cdc7ff1bb39b325f9c82cc972361780a6e1\"\n dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n+ \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"atty\"\n version = \"0.2.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\n dependencies = [\n- \"hermit-abi\",\n- \"libc\",\n- \"winapi 0.3.8\",\n+ \"hermit-abi 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"autocfg\"\n version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\"\n \n [[package]]\n name = \"autocfg\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d\"\n \n [[package]]\n name = \"backtrace\"\n version = \"0.3.43\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7f80256bc78f67e7df7e36d77366f636ed976895d91fe2ab9efa3973e8fe8c4f\"\n dependencies = [\n- \"backtrace-sys\",\n- \"cfg-if\",\n- \"libc\",\n- \"rustc-demangle\",\n+ \"backtrace-sys 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"backtrace-sys\"\n version = \"0.1.32\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5d6575f128516de27e3ce99689419835fce9643a9b215a14d2b5b685be018491\"\n dependencies = [\n- \"cc\",\n- \"libc\",\n+ \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"base64\"\n version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e\"\n dependencies = [\n- \"byteorder\",\n+ \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"base64\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b41b7ea54a0c9d92199de89e20e58d49f02f8e699814ef3fdf266f6f748d15c7\"\n \n [[package]]\n name = \"binary-install\"\n version = \"0.0.3-alpha\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a81dda17f2dbba8271cf61f2ea3e48e3da8aef31665731bce48818cc07863f06\"\n dependencies = [\n- \"curl\",\n- \"dirs 1.0.5\",\n- \"failure\",\n- \"flate2\",\n- \"fs2\",\n- \"hex\",\n- \"is_executable\",\n- \"siphasher\",\n- \"tar\",\n- \"zip\",\n+ \"curl 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"is_executable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tar 0.4.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"zip 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"bitflags\"\n version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n \n [[package]]\n name = \"blake2b_simd\"\n version = \"0.5.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d8fb2d74254a3a0b5cac33ac9f8ed0e44aa50378d9dbb2e5d83bd21ed1dc2c8a\"\n dependencies = [\n- \"arrayref\",\n- \"arrayvec\",\n- \"constant_time_eq\",\n+ \"arrayref 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"arrayvec 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"constant_time_eq 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"block-buffer\"\n version = \"0.7.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b\"\n dependencies = [\n- \"block-padding\",\n- \"byte-tools\",\n- \"byteorder\",\n- \"generic-array\",\n+ \"block-padding 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"generic-array 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"block-padding\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5\"\n dependencies = [\n- \"byte-tools\",\n+ \"byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"bstr\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"502ae1441a0a5adb8fbd38a5955a6416b9493e92b465de5e4a9bde6a539c2c48\"\n dependencies = [\n- \"lazy_static 1.4.0\",\n- \"memchr\",\n- \"regex-automata\",\n- \"serde 1.0.104\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-automata 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"bumpalo\"\n-version = \"3.1.2\"\n+version = \"3.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5fb8038c1ddc0a5f73787b130f4cc75151e96ed33e417fde765eb5a81e3532f4\"\n \n [[package]]\n name = \"byte-tools\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7\"\n \n [[package]]\n name = \"byteorder\"\n-version = \"1.3.2\"\n+version = \"1.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a7c3dd8985a7111efc5c80b44e23ecdd8c007de8ade3b96595387e812b957cf5\"\n \n [[package]]\n name = \"bytes\"\n version = \"0.4.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"206fdffcfa2df7cbe15601ef46c813fce0965eb3286db6b56c583b814b51c81c\"\n dependencies = [\n- \"byteorder\",\n- \"iovec\",\n+ \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"bytes\"\n version = \"0.5.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"130aac562c0dd69c56b3b1cc8ffd2e17be31d0b6c25b61c96b76231aa23e39e1\"\n \n [[package]]\n name = \"bzip2\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"42b7c3cbf0fa9c1b82308d57191728ca0256cb821220f4e2fd410a72ade26e3b\"\n dependencies = [\n- \"bzip2-sys\",\n- \"libc\",\n+ \"bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"bzip2-sys\"\n version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6584aa36f5ad4c9247f5323b0a42f37802b37a836f0ad87084d7a33961abe25f\"\n dependencies = [\n- \"cc\",\n- \"libc\",\n+ \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"c2-chacha\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"214238caa1bf3a496ec3392968969cab8549f96ff30652c9e56885329315f6bb\"\n dependencies = [\n- \"ppv-lite86\",\n+ \"ppv-lite86 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cc\"\n version = \"1.0.50\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"95e28fa049fda1c330bcf9d723be7663a899c4679724b34c81e9f5a326aab8cd\"\n \n [[package]]\n name = \"cfg-if\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n [[package]]\n name = \"chrome-devtools-rs\"\n version = \"0.0.0-alpha.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dee9b8a1ad6b2382a01aad9f17b381544b2396173abac19c38ac7e8f0087d752\"\n dependencies = [\n- \"console\",\n- \"log 0.4.8\",\n- \"serde 1.0.104\",\n- \"serde_json\",\n+ \"console 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"chrono\"\n version = \"0.4.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"31850b4a4d6bae316f7a09e691c944c28299298837edc0a03f755618c23cbc01\"\n dependencies = [\n- \"num-integer\",\n- \"num-traits 0.2.11\",\n- \"serde 1.0.104\",\n- \"time\",\n+ \"num-integer 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"clap\"\n version = \"2.33.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n dependencies = [\n- \"ansi_term\",\n- \"atty\",\n- \"bitflags\",\n- \"strsim\",\n- \"textwrap\",\n- \"unicode-width\",\n- \"vec_map\",\n+ \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"clicolors-control\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n dependencies = [\n- \"atty\",\n- \"lazy_static 1.4.0\",\n- \"libc\",\n- \"winapi 0.3.8\",\n+ \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cloudabi\"\n version = \"0.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n dependencies = [\n- \"bitflags\",\n+ \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cloudflare\"\n-version = \"0.6.3\"\n+version = \"0.6.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b9ce184e2405391f7a967dbeb192a6ab103eba6bb919eab00331b0e18ed92c0a\"\n dependencies = [\n- \"async-trait\",\n- \"chrono\",\n- \"failure\",\n- \"http\",\n- \"percent-encoding 1.0.1\",\n- \"reqwest\",\n- \"serde 1.0.104\",\n- \"serde_json\",\n- \"serde_qs\",\n- \"serde_with\",\n- \"slog\",\n- \"slog-term\",\n- \"sloggers\",\n- \"url\",\n+ \"async-trait 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"reqwest 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_with 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-term 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"sloggers 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"config\"\n version = \"0.9.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f9107d78ed62b3fa5a86e7d18e647abed48cfd8f8fab6c72f4cdb982d196f7e6\"\n dependencies = [\n- \"lazy_static 1.4.0\",\n- \"nom\",\n- \"rust-ini\",\n- \"serde 1.0.104\",\n- \"serde-hjson\",\n- \"serde_json\",\n- \"toml 0.4.10\",\n- \"yaml-rust\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rust-ini 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"console\"\n version = \"0.9.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"45e0f3986890b3acbc782009e2629dfe2baa430ac091519ce3be26164a2ae6c0\"\n dependencies = [\n- \"clicolors-control\",\n- \"encode_unicode\",\n- \"lazy_static 1.4.0\",\n- \"libc\",\n- \"regex\",\n- \"termios\",\n- \"unicode-width\",\n- \"winapi 0.3.8\",\n+ \"clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"constant_time_eq\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"245097e9a4535ee1e3e3931fcfcd55a796a44c643e8596ff6566d68f09b87bbc\"\n \n [[package]]\n name = \"core-foundation\"\n version = \"0.6.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"25b9e03f145fd4f2bf705e07b900cd41fc636598fe5dc452fd0db1441c3f496d\"\n dependencies = [\n- \"core-foundation-sys\",\n- \"libc\",\n+ \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"core-foundation-sys\"\n version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b\"\n \n [[package]]\n name = \"crc32fast\"\n version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n dependencies = [\n- \"cfg-if\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"crossbeam\"\n version = \"0.2.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bd66663db5a988098a89599d4857919b3acf7f61402e61365acfd3919857b9be\"\n \n [[package]]\n name = \"crossbeam-channel\"\n version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c8ec7fcd21571dc78f96cc96243cab8d8f035247c3efd16c687be154c3fa9efa\"\n dependencies = [\n- \"crossbeam-utils 0.6.6\",\n+ \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"crossbeam-channel\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"acec9a3b0b3559f15aee4f90746c4e5e293b701c0f7d3925d24e01645267b68c\"\n dependencies = [\n- \"crossbeam-utils 0.7.0\",\n+ \"crossbeam-utils 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"crossbeam-utils\"\n version = \"0.6.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"04973fa96e96579258a5091af6003abde64af786b860f18622b82e026cca60e6\"\n dependencies = [\n- \"cfg-if\",\n- \"lazy_static 1.4.0\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"crossbeam-utils\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ce446db02cdc3165b94ae73111e570793400d0794e46125cc4056c81cbb039f4\"\n dependencies = [\n- \"autocfg 0.1.7\",\n- \"cfg-if\",\n- \"lazy_static 1.4.0\",\n+ \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"csv\"\n version = \"1.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"00affe7f6ab566df61b4be3ce8cf16bc2576bca0963ceb0955e45d514bf9a279\"\n dependencies = [\n- \"bstr\",\n- \"csv-core\",\n- \"itoa\",\n- \"ryu\",\n- \"serde 1.0.104\",\n+ \"bstr 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"csv-core 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ryu 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"csv-core\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9b5cadb6b25c77aeff80ba701712494213f4a8418fcda2ee11b6560c3ad0bf4c\"\n dependencies = [\n- \"memchr\",\n+ \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"curl\"\n version = \"0.4.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"06aa71e9208a54def20792d877bc663d6aae0732b9852e612c4a933177c31283\"\n dependencies = [\n- \"curl-sys\",\n- \"libc\",\n- \"openssl-probe\",\n- \"openssl-sys\",\n- \"schannel\",\n- \"socket2\",\n- \"winapi 0.3.8\",\n+ \"curl-sys 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"schannel 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"socket2 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"curl-sys\"\n version = \"0.4.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0c38ca47d60b86d0cc9d42caa90a0885669c2abc9791f871c81f58cdf39e979b\"\n dependencies = [\n- \"cc\",\n- \"libc\",\n- \"libz-sys\",\n- \"openssl-sys\",\n- \"pkg-config\",\n- \"vcpkg\",\n- \"winapi 0.3.8\",\n+ \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"vcpkg 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"data-encoding\"\n version = \"2.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f4f47ca1860a761136924ddd2422ba77b2ea54fe8cc75b9040804a0d9d32ad97\"\n \n [[package]]\n name = \"difference\"\n version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \n [[package]]\n name = \"digest\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\n dependencies = [\n- \"generic-array\",\n+ \"generic-array 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"dirs\"\n version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\n dependencies = [\n- \"libc\",\n- \"redox_users\",\n- \"winapi 0.3.8\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_users 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"dirs\"\n version = \"2.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"13aea89a5c93364a98e9b37b2fa237effbb694d5cfe01c5b70941f7eb087d5e3\"\n dependencies = [\n- \"cfg-if\",\n- \"dirs-sys\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dirs-sys 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"dirs-sys\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"afa0b23de8fd801745c471deffa6e12d248f962c9fd4b4c33787b055599bde7b\"\n dependencies = [\n- \"cfg-if\",\n- \"libc\",\n- \"redox_users\",\n- \"winapi 0.3.8\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_users 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"dtoa\"\n version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4358a9e11b9a09cf52383b451b49a169e8d797b68aa02301ff586d70d9661ea3\"\n \n [[package]]\n name = \"encode_unicode\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n \n [[package]]\n name = \"encoding_rs\"\n version = \"0.8.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cd8d03faa7fe0c1431609dfad7bbe827af30f82e1e2ae6f7ee4fca6bd764bc28\"\n dependencies = [\n- \"cfg-if\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"env_logger\"\n version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\n dependencies = [\n- \"atty\",\n- \"humantime\",\n- \"log 0.4.8\",\n- \"regex\",\n- \"termcolor\",\n+ \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"humantime 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termcolor 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"error-chain\"\n version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3ab49e9dcb602294bc42f9a7dfc9bc6e936fca4418ea300dbfb84fe16de0b7d9\"\n dependencies = [\n- \"backtrace\",\n- \"version_check 0.1.5\",\n+ \"backtrace 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"escargot\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ceb9adbf9874d5d028b5e4c5739d22b71988252b25c9c98fe7cf9738bee84597\"\n dependencies = [\n- \"lazy_static 1.4.0\",\n- \"log 0.4.8\",\n- \"serde 1.0.104\",\n- \"serde_json\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"exitfailure\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2ff5bd832af37f366c6c194d813a11cd90ac484f124f079294f28e357ae40515\"\n dependencies = [\n- \"failure\",\n+ \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"failure\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f8273f13c977665c5db7eb2b99ae520952fe5ac831ae4cd09d80c4c7042b5ed9\"\n dependencies = [\n- \"backtrace\",\n- \"failure_derive\",\n+ \"backtrace 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure_derive 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"failure_derive\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0bc225b78e0391e4b8683440bf2e63c2deeeb2ce5189eab46e2b68c6d3725d08\"\n dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n- \"synstructure\",\n+ \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synstructure 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"fake-simd\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n \n [[package]]\n name = \"filetime\"\n version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1ff6d4dab0aa0c8e6346d46052e93b13a16cf847b54ed357087c35011048cc7d\"\n dependencies = [\n- \"cfg-if\",\n- \"libc\",\n- \"redox_syscall\",\n- \"winapi 0.3.8\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"flate2\"\n version = \"1.0.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6bd6d6f4752952feb71363cffc9ebac9411b75b87c6ab6058c40c8900cf43c0f\"\n dependencies = [\n- \"cfg-if\",\n- \"crc32fast\",\n- \"libc\",\n- \"miniz_oxide\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"miniz_oxide 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"fnv\"\n version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \n [[package]]\n name = \"foreign-types\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\n dependencies = [\n- \"foreign-types-shared\",\n+ \"foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"foreign-types-shared\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n \n [[package]]\n name = \"fs2\"\n version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\n dependencies = [\n- \"libc\",\n- \"winapi 0.3.8\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"fs_extra\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5f2a4a2034423744d2cc7ca2068453168dcdb82c438419e639a26bd87839c674\"\n \n [[package]]\n name = \"fsevent\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5ab7d1bd1bd33cc98b0889831b72da23c0aa4df9cec7e0702f46ecea04b35db6\"\n dependencies = [\n- \"bitflags\",\n- \"fsevent-sys\",\n+ \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fsevent-sys 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"fsevent-sys\"\n version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f41b048a94555da0f42f1d632e2e19510084fb8e303b0daa2816e733fb3644a0\"\n dependencies = [\n- \"libc\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"fuchsia-cprng\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n \n [[package]]\n name = \"fuchsia-zircon\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n dependencies = [\n- \"bitflags\",\n- \"fuchsia-zircon-sys\",\n+ \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"fuchsia-zircon-sys\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n \n [[package]]\n name = \"futures\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ad6636318d07abeb4656157ef1936c64485f066c7f9ce5d7c5b879fcb6dd5ccb\"\n dependencies = [\n- \"futures-channel\",\n- \"futures-core\",\n- \"futures-executor\",\n- \"futures-io\",\n- \"futures-sink\",\n- \"futures-task\",\n- \"futures-util\",\n+ \"futures-channel 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-executor 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-io 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-sink 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-task 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"futures-channel\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7264eb65b194d2fa6ec31b898ead7c332854bfa42521659226e72a585fca5b85\"\n dependencies = [\n- \"futures-core\",\n- \"futures-sink\",\n+ \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-sink 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"futures-core\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b597b16aa1a19ce2dfde5128a7c656d75346b35601a640be2d9efd4e9c83609d\"\n \n [[package]]\n name = \"futures-executor\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"46a5e593d77bee52393c7f3b16b8b413214096d3f7dc4f5f4c57dee01ad2bdaf\"\n dependencies = [\n- \"futures-core\",\n- \"futures-task\",\n- \"futures-util\",\n+ \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-task 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"futures-io\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3d429f824b5e5dbd45fc8e54e1005a37e1f8c6d570cd64d0b59b24d3a80b8b8e\"\n \n [[package]]\n name = \"futures-macro\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a1d75b72904b78044e0091355fc49d29f48bff07a68a719a41cf059711e071b4\"\n dependencies = [\n- \"proc-macro-hack\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n+ \"proc-macro-hack 0.5.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"futures-sink\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"04299e123547ea7c56f3e1b376703142f5fc0b6700433eed549e9d0b8a75a66c\"\n \n [[package]]\n name = \"futures-task\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"86f9ceab4bce46555ee608b1ec7c414d6b2e76e196ef46fa5a8d4815a8571398\"\n \n [[package]]\n name = \"futures-util\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7d2f1296f7644d2cd908ebb2fa74645608e39f117c72bac251d40418c6d74c4f\"\n dependencies = [\n- \"futures-channel\",\n- \"futures-core\",\n- \"futures-io\",\n- \"futures-macro\",\n- \"futures-sink\",\n- \"futures-task\",\n- \"memchr\",\n- \"pin-utils\",\n- \"proc-macro-hack\",\n- \"proc-macro-nested\",\n- \"slab\",\n+ \"futures-channel 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-io 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-macro 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-sink 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-task 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pin-utils 0.1.0-alpha.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro-hack 0.5.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro-nested 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"generic-array\"\n version = \"0.12.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec\"\n dependencies = [\n- \"typenum\",\n+ \"typenum 1.11.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"getrandom\"\n version = \"0.1.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb\"\n dependencies = [\n- \"cfg-if\",\n- \"libc\",\n- \"wasi\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasi 0.9.0+wasi-snapshot-preview1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"globset\"\n version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"925aa2cac82d8834e2b2a4415b6f6879757fb5c0928fc445ae76461a12eed8f2\"\n dependencies = [\n- \"aho-corasick\",\n- \"bstr\",\n- \"fnv\",\n- \"log 0.4.8\",\n- \"regex\",\n+ \"aho-corasick 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bstr 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"h2\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b9433d71e471c1736fd5a61b671fc0b148d7a2992f666c958d03cd8feb3b88d1\"\n dependencies = [\n- \"bytes 0.5.4\",\n- \"fnv\",\n- \"futures-core\",\n- \"futures-sink\",\n- \"futures-util\",\n- \"http\",\n- \"indexmap\",\n- \"log 0.4.8\",\n- \"slab\",\n- \"tokio\",\n- \"tokio-util\",\n+ \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-sink 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indexmap 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio-util 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"heck\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n dependencies = [\n- \"unicode-segmentation\",\n+ \"unicode-segmentation 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"hermit-abi\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eff2656d88f158ce120947499e971d743c05dbcbed62e5bd2f38f1698bbc3772\"\n dependencies = [\n- \"libc\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"hex\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n \n [[package]]\n name = \"http\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b708cc7f06493459026f53b9a61a7a121a5d1ec6238dee58ea4941132b30156b\"\n dependencies = [\n- \"bytes 0.5.4\",\n- \"fnv\",\n- \"itoa\",\n+ \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"http-body\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"13d5ff830006f7646652e057693569bfe0d51760c0085a071769d142a205111b\"\n dependencies = [\n- \"bytes 0.5.4\",\n- \"http\",\n+ \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"httparse\"\n version = \"1.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cd179ae861f0c2e53da70d892f5f3029f9594be0c41dc5269cd371691b1dc2f9\"\n \n [[package]]\n name = \"humantime\"\n version = \"1.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\n dependencies = [\n- \"quick-error\",\n+ \"quick-error 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"hyper\"\n version = \"0.13.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fa1c527bbc634be72aa7ba31e4e4def9bbb020f5416916279b7c705cd838893e\"\n dependencies = [\n- \"bytes 0.5.4\",\n- \"futures-channel\",\n- \"futures-core\",\n- \"futures-util\",\n- \"h2\",\n- \"http\",\n- \"http-body\",\n- \"httparse\",\n- \"itoa\",\n- \"log 0.4.8\",\n- \"net2\",\n- \"pin-project\",\n- \"time\",\n- \"tokio\",\n- \"tower-service\",\n- \"want\",\n+ \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-channel 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"h2 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"http-body 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"httparse 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pin-project 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tower-service 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"want 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"hyper-tls\"\n version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3adcd308402b9553630734e9c36b77a7e48b3821251ca2493e8cd596763aafaa\"\n dependencies = [\n- \"bytes 0.5.4\",\n- \"hyper\",\n- \"native-tls\",\n- \"tokio\",\n- \"tokio-tls\",\n+ \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hyper 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio-tls 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"idna\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\n dependencies = [\n- \"matches\",\n- \"unicode-bidi\",\n- \"unicode-normalization\",\n+ \"matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-normalization 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"ignore\"\n version = \"0.4.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"522daefc3b69036f80c7d2990b28ff9e0471c683bad05ca258e0a01dd22c5a1e\"\n dependencies = [\n- \"crossbeam-channel 0.4.0\",\n- \"globset\",\n- \"lazy_static 1.4.0\",\n- \"log 0.4.8\",\n- \"memchr\",\n- \"regex\",\n- \"same-file\",\n- \"thread_local\",\n- \"walkdir\",\n- \"winapi-util\",\n+ \"crossbeam-channel 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"same-file 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 2.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"indexmap\"\n version = \"1.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"076f042c5b7b98f31d205f1249267e12a6518c1481e9dae9764af19b707d2292\"\n dependencies = [\n- \"autocfg 1.0.0\",\n+ \"autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"indicatif\"\n version = \"0.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8572bccfb0665e70b7faf44ee28841b8e0823450cd4ad562a76b5a3c4bf48487\"\n dependencies = [\n- \"console\",\n- \"lazy_static 1.4.0\",\n- \"number_prefix\",\n- \"regex\",\n+ \"console 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"inotify\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"24e40d6fd5d64e2082e0c796495c8ef5ad667a96d03e5aaa0becfd9d47bcbfb8\"\n dependencies = [\n- \"bitflags\",\n- \"inotify-sys\",\n- \"libc\",\n+ \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"inotify-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"inotify-sys\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e74a1aa87c59aeff6ef2cc2fa62d41bc43f54952f55652656b18a02fd5e356c0\"\n dependencies = [\n- \"libc\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"input_buffer\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"19a8a95243d5a0398cae618ec29477c6e3cb631152be5c19481f80bc71559754\"\n dependencies = [\n- \"bytes 0.5.4\",\n+ \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"iovec\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b2b3ea6ff95e175473f8ffe6a7eb7c00d054240321b84c57051175fe3c1e075e\"\n dependencies = [\n- \"libc\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"is_executable\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"302d553b8abc8187beb7d663e34c065ac4570b273bc9511a50e940e99409c577\"\n dependencies = [\n- \"winapi 0.3.8\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"itoa\"\n version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b8b7a7c0c47db5545ed3fef7468ee7bb5b74691498139e4b3f6a20685dc6dd8e\"\n \n [[package]]\n name = \"js-sys\"\n version = \"0.3.35\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7889c7c36282151f6bf465be4700359318aef36baa951462382eae49e9577cf9\"\n dependencies = [\n- \"wasm-bindgen\",\n+ \"wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"kernel32-sys\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n dependencies = [\n- \"winapi 0.2.8\",\n- \"winapi-build\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"lazy_static\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n \n [[package]]\n name = \"lazy_static\"\n version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \n [[package]]\n name = \"lazycell\"\n version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b294d6fa9ee409a054354afc4352b0b9ef7ca222c69b8812cbea9e7d2bf3783f\"\n \n [[package]]\n name = \"libc\"\n version = \"0.2.66\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d515b1f41455adea1313a4a2ac8a8a477634fbae63cc6100e3aebb207ce61558\"\n \n [[package]]\n name = \"libflate\"\n version = \"0.1.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d9135df43b1f5d0e333385cb6e7897ecd1a43d7d11b91ac003f4d2c2d2401fdd\"\n dependencies = [\n- \"adler32\",\n- \"crc32fast\",\n- \"rle-decode-fast\",\n- \"take_mut\",\n+ \"adler32 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rle-decode-fast 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"libz-sys\"\n version = \"1.0.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2eb5e43362e38e2bca2fd5f5134c4d4564a23a5c28e9b95411652021a8675ebe\"\n dependencies = [\n- \"cc\",\n- \"libc\",\n- \"pkg-config\",\n- \"vcpkg\",\n+ \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"vcpkg 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"linked-hash-map\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6d262045c5b87c0861b3f004610afd0e2c851e2908d08b6c870cbb9d5f494ecd\"\n dependencies = [\n- \"serde 0.8.23\",\n- \"serde_test\",\n+ \"serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_test 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"linked-hash-map\"\n version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\n \n [[package]]\n name = \"log\"\n version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n dependencies = [\n- \"log 0.4.8\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"log\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n dependencies = [\n- \"cfg-if\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"matches\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n \n [[package]]\n name = \"memchr\"\n version = \"2.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3197e20c7edb283f87c071ddfc7a2cca8f8e0b888c242959846a6fce03c72223\"\n dependencies = [\n- \"libc\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"mime\"\n version = \"0.3.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d\"\n \n [[package]]\n name = \"mime_guess\"\n version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1a0ed03949aef72dbdf3116a383d7b38b4768e6f960528cd6a6044aa9ed68599\"\n dependencies = [\n- \"mime\",\n- \"unicase\",\n+ \"mime 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicase 2.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"miniz_oxide\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aa679ff6578b1cddee93d7e82e263b94a575e0bfced07284eb0c037c1d2416a5\"\n dependencies = [\n- \"adler32\",\n+ \"adler32 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"mio\"\n version = \"0.6.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"302dec22bcf6bae6dfb69c647187f4b4d0fb6f535521f7bc022430ce8e12008f\"\n dependencies = [\n- \"cfg-if\",\n- \"fuchsia-zircon\",\n- \"fuchsia-zircon-sys\",\n- \"iovec\",\n- \"kernel32-sys\",\n- \"libc\",\n- \"log 0.4.8\",\n- \"miow\",\n- \"net2\",\n- \"slab\",\n- \"winapi 0.2.8\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"mio-extras\"\n version = \"2.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"52403fe290012ce777c4626790c8951324a2b9e3316b3143779c72b029742f19\"\n dependencies = [\n- \"lazycell\",\n- \"log 0.4.8\",\n- \"mio\",\n- \"slab\",\n+ \"lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"mio-uds\"\n version = \"0.6.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"966257a94e196b11bb43aca423754d87429960a768de9414f3691d6957abf125\"\n dependencies = [\n- \"iovec\",\n- \"libc\",\n- \"mio\",\n+ \"iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"miow\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\n dependencies = [\n- \"kernel32-sys\",\n- \"net2\",\n- \"winapi 0.2.8\",\n- \"ws2_32-sys\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"native-tls\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4b2df1a4c22fd44a62147fd8f13dd0f95c9d8ca7b2610299b2a2f9cf8964274e\"\n dependencies = [\n- \"lazy_static 1.4.0\",\n- \"libc\",\n- \"log 0.4.8\",\n- \"openssl\",\n- \"openssl-probe\",\n- \"openssl-sys\",\n- \"schannel\",\n- \"security-framework\",\n- \"security-framework-sys\",\n- \"tempfile\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl 0.10.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"schannel 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"security-framework 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"security-framework-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"net2\"\n version = \"0.2.33\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"42550d9fb7b6684a6d404d9fa7250c2eb2646df731d1c06afc06dcee9e1bcf88\"\n dependencies = [\n- \"cfg-if\",\n- \"libc\",\n- \"winapi 0.3.8\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"nom\"\n version = \"4.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2ad2a91a8e869eeb30b9cb3119ae87773a8f4ae617f41b1eb9c154b2905f7bd6\"\n dependencies = [\n- \"memchr\",\n- \"version_check 0.1.5\",\n+ \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"notify\"\n version = \"4.0.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"80ae4a7688d1fab81c5bf19c64fc8db920be8d519ce6336ed4e7efe024724dbd\"\n dependencies = [\n- \"bitflags\",\n- \"filetime\",\n- \"fsevent\",\n- \"fsevent-sys\",\n- \"inotify\",\n- \"libc\",\n- \"mio\",\n- \"mio-extras\",\n- \"walkdir\",\n- \"winapi 0.3.8\",\n+ \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"filetime 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fsevent 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fsevent-sys 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"inotify 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mio-extras 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 2.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"num-integer\"\n version = \"0.1.42\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3f6ea62e9d81a77cd3ee9a2a5b9b609447857f3d358704331e4ef39eb247fcba\"\n dependencies = [\n- \"autocfg 1.0.0\",\n- \"num-traits 0.2.11\",\n+ \"autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"num-traits\"\n version = \"0.1.43\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"92e5113e9fd4cc14ded8e499429f396a20f98c772a47cc8622a736e1ec843c31\"\n dependencies = [\n- \"num-traits 0.2.11\",\n+ \"num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"num-traits\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c62be47e61d1842b9170f0fdeec8eba98e60e90e5446449a0545e5152acd7096\"\n dependencies = [\n- \"autocfg 1.0.0\",\n+ \"autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"num_cpus\"\n version = \"1.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"46203554f085ff89c235cd12f7075f3233af9b11ed7c9e16dfe2560d03313ce6\"\n dependencies = [\n- \"hermit-abi\",\n- \"libc\",\n+ \"hermit-abi 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"number_prefix\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"17b02fc0ff9a9e4b35b3342880f48e896ebf69f2967921fe8646bf5b7125956a\"\n \n [[package]]\n name = \"opaque-debug\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n \n [[package]]\n name = \"openssl\"\n version = \"0.10.28\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"973293749822d7dd6370d6da1e523b0d1db19f06c459134c658b2a4261378b52\"\n dependencies = [\n- \"bitflags\",\n- \"cfg-if\",\n- \"foreign-types\",\n- \"lazy_static 1.4.0\",\n- \"libc\",\n- \"openssl-sys\",\n+ \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"openssl-probe\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\n \n [[package]]\n name = \"openssl-src\"\n version = \"111.6.1+1.1.1d\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c91b04cb43c1a8a90e934e0cd612e2a5715d976d2d6cff4490278a0cddf35005\"\n dependencies = [\n- \"cc\",\n+ \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"openssl-sys\"\n version = \"0.9.54\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1024c0a59774200a555087a6da3f253a9095a5f344e353b212ac4c8b8e450986\"\n dependencies = [\n- \"autocfg 1.0.0\",\n- \"cc\",\n- \"libc\",\n- \"openssl-src\",\n- \"pkg-config\",\n- \"vcpkg\",\n+ \"autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-src 111.6.1+1.1.1d (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"vcpkg 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"percent-encoding\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \n [[package]]\n name = \"percent-encoding\"\n version = \"2.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n \n [[package]]\n name = \"pin-project\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7804a463a8d9572f13453c516a5faea534a2403d7ced2f0c7e100eeff072772c\"\n dependencies = [\n- \"pin-project-internal\",\n+ \"pin-project-internal 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"pin-project-internal\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"385322a45f2ecf3410c68d2a549a4a2685e8051d0f278e39743ff4e451cb9b3f\"\n dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n+ \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"pin-project-lite\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"237844750cfbb86f67afe27eee600dfbbcb6188d734139b534cbfbf4f96792ae\"\n \n [[package]]\n name = \"pin-utils\"\n version = \"0.1.0-alpha.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5894c618ce612a3fa23881b152b608bafb8c56cfc22f434a3ba3120b40f7b587\"\n \n [[package]]\n name = \"pkg-config\"\n version = \"0.3.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"05da548ad6865900e60eaba7f589cc0783590a92e940c26953ff81ddbab2d677\"\n \n [[package]]\n name = \"podio\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"780fb4b6698bbf9cf2444ea5d22411cef2953f0824b98f33cf454ec5615645bd\"\n \n [[package]]\n name = \"ppv-lite86\"\n version = \"0.2.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"74490b50b9fbe561ac330df47c08f3f33073d2d00c150f719147d7c54522fa1b\"\n \n [[package]]\n name = \"predicates\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a9bfe52247e5cc9b2f943682a85a5549fb9662245caf094504e69a2f03fe64d4\"\n dependencies = [\n- \"difference\",\n- \"predicates-core\",\n+ \"difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"predicates-core 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"predicates-core\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"06075c3a3e92559ff8929e7a280684489ea27fe44805174c3ebd9328dcb37178\"\n \n [[package]]\n name = \"predicates-tree\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8e63c4859013b38a76eca2414c64911fba30def9e3202ac461a2d22831220124\"\n dependencies = [\n- \"predicates-core\",\n- \"treeline\",\n+ \"predicates-core 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"treeline 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"prettytable-rs\"\n version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0fd04b170004fa2daccf418a7f8253aaf033c27760b5f225889024cf66d7ac2e\"\n dependencies = [\n- \"atty\",\n- \"csv\",\n- \"encode_unicode\",\n- \"lazy_static 1.4.0\",\n- \"term 0.5.2\",\n- \"unicode-width\",\n+ \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"csv 1.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"proc-macro-hack\"\n version = \"0.5.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ecd45702f76d6d3c75a80564378ae228a85f0b59d2f3ed43c91b4a69eb2ebfc5\"\n dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n+ \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"proc-macro-nested\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"369a6ed065f249a159e06c45752c780bda2fb53c995718f9e484d08daa9eb42e\"\n \n [[package]]\n name = \"proc-macro2\"\n version = \"1.0.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3acb317c6ff86a4e579dfa00fc5e6cca91ecbb4e7eb2df0468805b674eb88548\"\n dependencies = [\n- \"unicode-xid\",\n+ \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"quick-error\"\n version = \"1.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\n \n [[package]]\n name = \"quote\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n dependencies = [\n- \"proc-macro2\",\n+ \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand\"\n version = \"0.6.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n dependencies = [\n- \"autocfg 0.1.7\",\n- \"libc\",\n- \"rand_chacha 0.1.1\",\n- \"rand_core 0.4.2\",\n- \"rand_hc 0.1.0\",\n- \"rand_isaac\",\n- \"rand_jitter\",\n- \"rand_os\",\n- \"rand_pcg\",\n- \"rand_xorshift\",\n- \"winapi 0.3.8\",\n+ \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_jitter 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_pcg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_xorshift 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand\"\n version = \"0.7.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\n dependencies = [\n- \"getrandom\",\n- \"libc\",\n- \"rand_chacha 0.2.1\",\n- \"rand_core 0.5.1\",\n- \"rand_hc 0.2.0\",\n+ \"getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_chacha 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_chacha\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\"\n dependencies = [\n- \"autocfg 0.1.7\",\n- \"rand_core 0.3.1\",\n+ \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_chacha\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"03a2a90da8c7523f554344f921aa97283eadf6ac484a6d2a7d0212fa7f8d6853\"\n dependencies = [\n- \"c2-chacha\",\n- \"rand_core 0.5.1\",\n+ \"c2-chacha 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_core\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\n dependencies = [\n- \"rand_core 0.4.2\",\n+ \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_core\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc\"\n \n [[package]]\n name = \"rand_core\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\n dependencies = [\n- \"getrandom\",\n+ \"getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_hc\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7b40677c7be09ae76218dc623efbf7b18e34bced3f38883af07bb75630a21bc4\"\n dependencies = [\n- \"rand_core 0.3.1\",\n+ \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_hc\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\n dependencies = [\n- \"rand_core 0.5.1\",\n+ \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_isaac\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ded997c9d5f13925be2a6fd7e66bf1872597f759fd9dd93513dd7e92e5a5ee08\"\n dependencies = [\n- \"rand_core 0.3.1\",\n+ \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_jitter\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1166d5c91dc97b88d1decc3285bb0a99ed84b05cfd0bc2341bdf2d43fc41e39b\"\n dependencies = [\n- \"libc\",\n- \"rand_core 0.4.2\",\n- \"winapi 0.3.8\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_os\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7b75f676a1e053fc562eafbb47838d67c84801e38fc1ba459e8f180deabd5071\"\n dependencies = [\n- \"cloudabi\",\n- \"fuchsia-cprng\",\n- \"libc\",\n- \"rand_core 0.4.2\",\n- \"rdrand\",\n- \"winapi 0.3.8\",\n+ \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_pcg\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"abf9b09b01790cfe0364f52bf32995ea3c39f4d2dd011eac241d2914146d0b44\"\n dependencies = [\n- \"autocfg 0.1.7\",\n- \"rand_core 0.4.2\",\n+ \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand_xorshift\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cbf7e9e623549b0e21f6e97cf8ecf247c1a8fd2e8a992ae265314300b2455d5c\"\n dependencies = [\n- \"rand_core 0.3.1\",\n+ \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rdrand\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\"\n dependencies = [\n- \"rand_core 0.3.1\",\n+ \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"redox_syscall\"\n version = \"0.1.56\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2439c63f3f6139d1b57529d16bc3b8bb855230c8efcc5d3a896c8bea7c3b1e84\"\n \n [[package]]\n name = \"redox_users\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"09b23093265f8d200fa7b4c2c76297f47e681c655f6f1285a8780d6a022f7431\"\n dependencies = [\n- \"getrandom\",\n- \"redox_syscall\",\n- \"rust-argon2\",\n+ \"getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rust-argon2 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"regex\"\n version = \"1.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"322cf97724bea3ee221b78fe25ac9c46114ebb51747ad5babd51a2fc6a8235a8\"\n dependencies = [\n- \"aho-corasick\",\n- \"memchr\",\n- \"regex-syntax\",\n- \"thread_local\",\n+ \"aho-corasick 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"regex-automata\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"92b73c2a1770c255c240eaa4ee600df1704a38dc3feaa6e949e7fcd4f8dc09f9\"\n dependencies = [\n- \"byteorder\",\n+ \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"regex-syntax\"\n version = \"0.6.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b28dfe3fe9badec5dbf0a79a9cccad2cfc2ab5484bdb3e44cbd1ae8b3ba2be06\"\n \n [[package]]\n name = \"remove_dir_all\"\n version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e\"\n dependencies = [\n- \"winapi 0.3.8\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"reqwest\"\n version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c0e798e19e258bf6c30a304622e3e9ac820e483b06a1857a026e1f109b113fe4\"\n-dependencies = [\n- \"base64 0.11.0\",\n- \"bytes 0.5.4\",\n- \"encoding_rs\",\n- \"futures-core\",\n- \"futures-util\",\n- \"http\",\n- \"http-body\",\n- \"hyper\",\n- \"hyper-tls\",\n- \"js-sys\",\n- \"lazy_static 1.4.0\",\n- \"log 0.4.8\",\n- \"mime\",\n- \"mime_guess\",\n- \"native-tls\",\n- \"percent-encoding 2.1.0\",\n- \"pin-project-lite\",\n- \"serde 1.0.104\",\n- \"serde_json\",\n- \"serde_urlencoded\",\n- \"time\",\n- \"tokio\",\n- \"tokio-tls\",\n- \"url\",\n- \"wasm-bindgen\",\n- \"wasm-bindgen-futures\",\n- \"web-sys\",\n- \"winreg\",\n+dependencies = [\n+ \"base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"encoding_rs 0.8.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"http-body 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hyper 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hyper-tls 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"js-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mime 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mime_guess 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pin-project-lite 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_urlencoded 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio-tls 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasm-bindgen-futures 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"web-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winreg 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rle-decode-fast\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cabe4fa914dec5870285fa7f71f602645da47c486e68486d2b4ceb4a343e90ac\"\n \n [[package]]\n name = \"rust-argon2\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2bc8af4bda8e1ff4932523b94d3dd20ee30a87232323eda55903ffd71d2fb017\"\n dependencies = [\n- \"base64 0.11.0\",\n- \"blake2b_simd\",\n- \"constant_time_eq\",\n- \"crossbeam-utils 0.7.0\",\n+ \"base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"blake2b_simd 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"constant_time_eq 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-utils 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rust-ini\"\n version = \"0.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3e52c148ef37f8c375d49d5a73aa70713125b7f19095948a923f80afdeb22ec2\"\n \n [[package]]\n name = \"rustc-demangle\"\n version = \"0.1.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n \n [[package]]\n name = \"ryu\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bfa8506c1de11c9c4e4c38863ccbe02a305c8188e85a05a784c9e11e1c3910c8\"\n \n [[package]]\n name = \"same-file\"\n version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\n dependencies = [\n- \"winapi-util\",\n+ \"winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"schannel\"\n version = \"0.1.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"507a9e6e8ffe0a4e0ebb9a10293e62fdf7657c06f1b8bb07a8fcf697d2abf295\"\n dependencies = [\n- \"lazy_static 1.4.0\",\n- \"winapi 0.3.8\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"security-framework\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8ef2429d7cefe5fd28bd1d2ed41c944547d4ff84776f5935b456da44593a16df\"\n dependencies = [\n- \"core-foundation\",\n- \"core-foundation-sys\",\n- \"libc\",\n- \"security-framework-sys\",\n+ \"core-foundation 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"security-framework-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"security-framework-sys\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e31493fc37615debb8c5090a7aeb4a9730bc61e77ab10b9af59f1a202284f895\"\n dependencies = [\n- \"core-foundation-sys\",\n+ \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde\"\n version = \"0.8.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9dad3f759919b92c3068c696c15c3d17238234498bbdcc80f2c469606f948ac8\"\n \n [[package]]\n name = \"serde\"\n version = \"1.0.104\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"414115f25f818d7dfccec8ee535d76949ae78584fc4f79a6f45a904bf8ab4449\"\n dependencies = [\n- \"serde_derive\",\n+ \"serde_derive 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde-hjson\"\n version = \"0.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0b833c5ad67d52ced5f5938b2980f32a9c1c5ef047f0b4fb3127e7a423c76153\"\n dependencies = [\n- \"lazy_static 0.2.11\",\n- \"linked-hash-map 0.3.0\",\n- \"num-traits 0.1.43\",\n- \"regex\",\n- \"serde 0.8.23\",\n+ \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"linked-hash-map 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n version = \"1.0.104\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"128f9e303a5a29922045a830221b8f78ec74a5f544944f3d5984f8ec3895ef64\"\n dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n+ \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.46\"\n+version = \"1.0.47\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"21b01d7f0288608a01dca632cf1df859df6fd6ffa885300fc275ce2ba6221953\"\n dependencies = [\n- \"itoa\",\n- \"ryu\",\n- \"serde 1.0.104\",\n+ \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ryu 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_qs\"\n version = \"0.4.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"35965fa1d2413717053d67c2df1f5c3e1763fbf77200ea7e767523707bd5a0af\"\n dependencies = [\n- \"data-encoding\",\n- \"error-chain\",\n- \"percent-encoding 1.0.1\",\n- \"serde 1.0.104\",\n+ \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_test\"\n version = \"0.8.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"110b3dbdf8607ec493c22d5d947753282f3bae73c0f56d322af1e8c78e4c23d5\"\n dependencies = [\n- \"serde 0.8.23\",\n+ \"serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_urlencoded\"\n version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9ec5d77e2d4c73717816afac02670d5c4f534ea95ed430442cad02e7a6e32c97\"\n dependencies = [\n- \"dtoa\",\n- \"itoa\",\n- \"serde 1.0.104\",\n- \"url\",\n+ \"dtoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_with\"\n version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"89d3d595d64120bbbc70b7f6d5ae63298b62a3d9f373ec2f56acf5365ca8a444\"\n dependencies = [\n- \"serde 1.0.104\",\n- \"serde_with_macros\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_with_macros 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_with_macros\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4070d2c9b9d258465ad1d82aabb985b84cd9a3afa94da25ece5a9938ba5f1606\"\n dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n+ \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"sha-1\"\n version = \"0.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df\"\n dependencies = [\n- \"block-buffer\",\n- \"digest\",\n- \"fake-simd\",\n- \"opaque-debug\",\n+ \"block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"digest 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"opaque-debug 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"sha2\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"27044adfd2e1f077f649f59deb9490d3941d674002f7d062870a60ebe9bd47a0\"\n dependencies = [\n- \"block-buffer\",\n- \"digest\",\n- \"fake-simd\",\n- \"opaque-debug\",\n+ \"block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"digest 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"opaque-debug 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"siphasher\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0b8de496cf83d4ed58b6be86c3a275b8602f6ffe98d3024a869e124147a9a3ac\"\n \n [[package]]\n name = \"slab\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n \n [[package]]\n name = \"slog\"\n version = \"2.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1cc9c640a4adbfbcc11ffb95efe5aa7af7309e002adab54b185507dbf2377b99\"\n \n [[package]]\n name = \"slog-async\"\n version = \"2.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"78ca925b180da88ccc595cbe4a3d378d79cb49fe5906c2cbc2488eaf700913ee\"\n dependencies = [\n- \"crossbeam-channel 0.3.9\",\n- \"slog\",\n- \"take_mut\",\n- \"thread_local\",\n+ \"crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"slog-kvfilter\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ae939ed7d169eed9699f4f5cd440f046f5dc5dfc27c19e3cd311619594c175e0\"\n dependencies = [\n- \"regex\",\n- \"slog\",\n+ \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"slog-scope\"\n version = \"4.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7c44c89dd8b0ae4537d1ae318353eaf7840b4869c536e31c41e963d1ea523ee6\"\n dependencies = [\n- \"arc-swap\",\n- \"lazy_static 1.4.0\",\n- \"slog\",\n+ \"arc-swap 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"slog-stdlog\"\n version = \"3.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f1c469573d1e3f36f9eee66cd132206caf47b50c94b1f6c6e7b4d8235e9ecf01\"\n dependencies = [\n- \"crossbeam\",\n- \"log 0.3.9\",\n- \"slog\",\n- \"slog-scope\",\n+ \"crossbeam 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-scope 4.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"slog-term\"\n version = \"2.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"124501187c410b6a46fe8a47a48435ae462fae4e02d03c558d358f40b17308cb\"\n dependencies = [\n- \"atty\",\n- \"chrono\",\n- \"slog\",\n- \"term 0.6.1\",\n- \"thread_local\",\n+ \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"sloggers\"\n version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d41aa58f9a02e205e21117ffa08e94c37f06e1f1009be2639b621f351a75796d\"\n dependencies = [\n- \"chrono\",\n- \"libflate\",\n- \"regex\",\n- \"serde 1.0.104\",\n- \"serde_derive\",\n- \"slog\",\n- \"slog-async\",\n- \"slog-kvfilter\",\n- \"slog-scope\",\n- \"slog-stdlog\",\n- \"slog-term\",\n- \"trackable\",\n+ \"chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libflate 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-async 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-kvfilter 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-scope 4.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-stdlog 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slog-term 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"trackable 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"smallvec\"\n version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5c2fb2ec9bcd216a5b0d0ccf31ab17b5ed1d627960edff65bbe95d3ce221cefc\"\n \n [[package]]\n name = \"socket2\"\n version = \"0.3.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e8b74de517221a2cb01a53349cf54182acdc31a074727d3079068448c0676d85\"\n dependencies = [\n- \"cfg-if\",\n- \"libc\",\n- \"redox_syscall\",\n- \"winapi 0.3.8\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"sourcefile\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4bf77cb82ba8453b42b6ae1d692e4cdc92f9a47beaf89a847c8be83f4e328ad3\"\n \n [[package]]\n name = \"strsim\"\n version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n \n [[package]]\n name = \"syn\"\n version = \"1.0.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"af6f3550d8dff9ef7dc34d384ac6f107e5d31c8f57d9f28e0081503f547ac8f5\"\n dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-xid\",\n+ \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"synstructure\"\n version = \"0.12.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"67656ea1dc1b41b1451851562ea232ec2e5a80242139f7e679ceccfb5d61f545\"\n dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n- \"unicode-xid\",\n+ \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"take_mut\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f764005d11ee5f36500a149ace24e00e3da98b0158b3e2d53a7495660d3f4d60\"\n \n [[package]]\n name = \"tar\"\n version = \"0.4.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b3196bfbffbba3e57481b6ea32249fbaf590396a52505a2615adbb79d9d826d3\"\n dependencies = [\n- \"filetime\",\n- \"libc\",\n- \"redox_syscall\",\n- \"xattr\",\n+ \"filetime 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"xattr 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"tempfile\"\n version = \"3.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\n dependencies = [\n- \"cfg-if\",\n- \"libc\",\n- \"rand 0.7.3\",\n- \"redox_syscall\",\n- \"remove_dir_all\",\n- \"winapi 0.3.8\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"term\"\n version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42\"\n dependencies = [\n- \"byteorder\",\n- \"dirs 1.0.5\",\n- \"winapi 0.3.8\",\n+ \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"term\"\n version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5\"\n dependencies = [\n- \"dirs 2.0.2\",\n- \"winapi 0.3.8\",\n+ \"dirs 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"termcolor\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bb6bfa289a4d7c5766392812c0a1f4c1ba45afa1ad47803c11e1f407d846d75f\"\n dependencies = [\n- \"winapi-util\",\n+ \"winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"termios\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n dependencies = [\n- \"libc\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"text_io\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6cb170b4f47dc48835fbc56259c12d8963e542b05a24be2e3a1f5a6c320fd2d4\"\n \n [[package]]\n name = \"textwrap\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n dependencies = [\n- \"unicode-width\",\n+ \"unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"thread_local\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d40c6d1b69745a6ec6fb1ca717914848da4b44ae29d9b3080cbee91d72a69b14\"\n dependencies = [\n- \"lazy_static 1.4.0\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"time\"\n version = \"0.1.42\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f\"\n dependencies = [\n- \"libc\",\n- \"redox_syscall\",\n- \"winapi 0.3.8\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"tokio\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8fdd17989496f49cdc57978c96f0c9fe5e4a58a8bddc6813c449a4624f6a030b\"\n dependencies = [\n- \"bytes 0.5.4\",\n- \"fnv\",\n- \"iovec\",\n- \"lazy_static 1.4.0\",\n- \"libc\",\n- \"memchr\",\n- \"mio\",\n- \"mio-uds\",\n- \"num_cpus\",\n- \"pin-project-lite\",\n- \"slab\",\n+ \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mio-uds 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pin-project-lite 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"tokio-tls\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7bde02a3a5291395f59b06ec6945a3077602fac2b07eeeaf0dee2122f3619828\"\n dependencies = [\n- \"native-tls\",\n- \"tokio\",\n+ \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"tokio-tungstenite\"\n version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b8b8fe88007ebc363512449868d7da4389c9400072a3f666f212c7280082882a\"\n dependencies = [\n- \"futures\",\n- \"log 0.4.8\",\n- \"native-tls\",\n- \"pin-project\",\n- \"tokio\",\n- \"tokio-tls\",\n- \"tungstenite\",\n+ \"futures 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pin-project 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio-tls 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tungstenite 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"tokio-util\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"571da51182ec208780505a32528fc5512a8fe1443ab960b3f2f3ef093cd16930\"\n dependencies = [\n- \"bytes 0.5.4\",\n- \"futures-core\",\n- \"futures-sink\",\n- \"log 0.4.8\",\n- \"pin-project-lite\",\n- \"tokio\",\n+ \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-sink 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pin-project-lite 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"toml\"\n version = \"0.4.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"758664fc71a3a69038656bee8b6be6477d2a6c315a6b81f7081f591bffa4111f\"\n dependencies = [\n- \"serde 1.0.104\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"toml\"\n version = \"0.5.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ffc92d160b1eef40665be3a05630d003936a3bc7da7421277846c2613e92c71a\"\n dependencies = [\n- \"serde 1.0.104\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"tower-service\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e987b6bf443f4b5b3b6f38704195592cca41c5bb7aedd3c3693c7081f8289860\"\n \n [[package]]\n name = \"trackable\"\n version = \"0.2.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"11475c3c53b075360eac9794965822cb053996046545f91cf61d90e00b72efa5\"\n dependencies = [\n- \"trackable_derive\",\n+ \"trackable_derive 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"trackable_derive\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"edcf0b9b2caa5f4804ef77aeee1b929629853d806117c48258f402b69737e65c\"\n dependencies = [\n- \"quote\",\n- \"syn\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"treeline\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a7f741b240f1a48843f9b8e0444fb55fb2a4ff67293b50a9179dfd5ea67f8d41\"\n \n [[package]]\n name = \"try-lock\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e604eb7b43c06650e854be16a2a03155743d3752dd1c943f6829e26b7a36e382\"\n \n [[package]]\n name = \"tungstenite\"\n version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cfea31758bf674f990918962e8e5f07071a3161bd7c4138ed23e416e1ac4264e\"\n dependencies = [\n- \"base64 0.11.0\",\n- \"byteorder\",\n- \"bytes 0.5.4\",\n- \"http\",\n- \"httparse\",\n- \"input_buffer\",\n- \"log 0.4.8\",\n- \"native-tls\",\n- \"rand 0.7.3\",\n- \"sha-1\",\n- \"url\",\n- \"utf-8\",\n+ \"base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"httparse 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"input_buffer 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"sha-1 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"utf-8 0.7.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"typenum\"\n version = \"1.11.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6d2783fe2d6b8c1101136184eb41be8b1ad379e4657050b8aaff0c79ee7575f9\"\n \n [[package]]\n name = \"unicase\"\n version = \"2.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"\n dependencies = [\n- \"version_check 0.9.1\",\n+ \"version_check 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"unicode-bidi\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n dependencies = [\n- \"matches\",\n+ \"matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"unicode-normalization\"\n version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5479532badd04e128284890390c1e876ef7a993d0570b3597ae43dfa1d59afa4\"\n dependencies = [\n- \"smallvec\",\n+ \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"unicode-segmentation\"\n version = \"1.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e83e153d1053cbb5a118eeff7fd5be06ed99153f00dbcd8ae310c5fb2b22edc0\"\n \n [[package]]\n name = \"unicode-width\"\n version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"caaa9d531767d1ff2150b9332433f32a24622147e5ebb1f26409d5da67afd479\"\n \n [[package]]\n name = \"unicode-xid\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n \n [[package]]\n name = \"url\"\n version = \"2.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"829d4a8476c35c9bf0bbce5a3b23f4106f79728039b726d292bb93bc106787cb\"\n dependencies = [\n- \"idna\",\n- \"matches\",\n- \"percent-encoding 2.1.0\",\n+ \"idna 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"utf-8\"\n version = \"0.7.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"05e42f7c18b8f902290b009cde6d651262f956c98bc51bca4cd1d511c9cd85c7\"\n \n [[package]]\n name = \"uuid\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9fde2f6a4bea1d6e007c4ad38c6839fa71cbb63b6dbf5b595aa38dc9b1093c11\"\n dependencies = [\n- \"rand 0.7.3\",\n+ \"rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"vcpkg\"\n version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3fc439f2794e98976c88a2a2dafce96b930fe8010b0a256b3c2199a773933168\"\n \n [[package]]\n name = \"vec_map\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n \n [[package]]\n name = \"version_check\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"914b1a6776c4c929a602fafd8bc742e06365d4bcbe48c30f9cca5824f70dc9dd\"\n \n [[package]]\n name = \"version_check\"\n version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"078775d0255232fb988e6fccf26ddc9d1ac274299aaedcedce21c6f72cc533ce\"\n \n [[package]]\n name = \"walkdir\"\n version = \"2.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"777182bc735b6424e1a57516d35ed72cb8019d85c8c9bf536dccb3445c1a2f7d\"\n dependencies = [\n- \"same-file\",\n- \"winapi 0.3.8\",\n- \"winapi-util\",\n+ \"same-file 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"want\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0\"\n dependencies = [\n- \"log 0.4.8\",\n- \"try-lock\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"try-lock 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"wasi\"\n version = \"0.9.0+wasi-snapshot-preview1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n \n [[package]]\n name = \"wasm-bindgen\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5205e9afdf42282b192e2310a5b463a6d1c1d774e30dc3c791ac37ab42d2616c\"\n dependencies = [\n- \"cfg-if\",\n- \"serde 1.0.104\",\n- \"serde_json\",\n- \"wasm-bindgen-macro\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasm-bindgen-macro 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-backend\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"11cdb95816290b525b32587d76419facd99662a07e59d3cdb560488a819d9a45\"\n dependencies = [\n- \"bumpalo\",\n- \"lazy_static 1.4.0\",\n- \"log 0.4.8\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n- \"wasm-bindgen-shared\",\n+ \"bumpalo 3.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasm-bindgen-shared 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-futures\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8bbdd49e3e28b40dec6a9ba8d17798245ce32b019513a845369c641b275135d9\"\n dependencies = [\n- \"cfg-if\",\n- \"js-sys\",\n- \"wasm-bindgen\",\n- \"web-sys\",\n+ \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"js-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"web-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-macro\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"574094772ce6921576fb6f2e3f7497b8a76273b6db092be18fc48a082de09dc3\"\n dependencies = [\n- \"quote\",\n- \"wasm-bindgen-macro-support\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasm-bindgen-macro-support 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-macro-support\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e85031354f25eaebe78bb7db1c3d86140312a911a106b2e29f9cc440ce3e7668\"\n dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n- \"wasm-bindgen-backend\",\n- \"wasm-bindgen-shared\",\n+ \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasm-bindgen-backend 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasm-bindgen-shared 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-shared\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f5e7e61fc929f4c0dddb748b102ebf9f632e2b8d739f2016542b4de2965a9601\"\n \n [[package]]\n name = \"wasm-bindgen-webidl\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ef012a0d93fc0432df126a8eaf547b2dce25a8ce9212e1d3cbeef5c11157975d\"\n dependencies = [\n- \"anyhow\",\n- \"heck\",\n- \"log 0.4.8\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n- \"wasm-bindgen-backend\",\n- \"weedle\",\n+ \"anyhow 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasm-bindgen-backend 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"weedle 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"web-sys\"\n version = \"0.3.35\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aaf97caf6aa8c2b1dac90faf0db529d9d63c93846cca4911856f78a83cebf53b\"\n dependencies = [\n- \"anyhow\",\n- \"js-sys\",\n- \"sourcefile\",\n- \"wasm-bindgen\",\n- \"wasm-bindgen-webidl\",\n+ \"anyhow 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"js-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"sourcefile 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasm-bindgen-webidl 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"weedle\"\n version = \"0.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3bb43f70885151e629e2a19ce9e50bd730fd436cfd4b666894c9ce4de9141164\"\n dependencies = [\n- \"nom\",\n+ \"nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"which\"\n version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b57acb10231b9493c8472b20cb57317d0679a49e0bdbee44b3b803a6473af164\"\n dependencies = [\n- \"failure\",\n- \"libc\",\n+ \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"winapi\"\n version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \n [[package]]\n name = \"winapi\"\n version = \"0.3.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8093091eeb260906a183e6ae1abdba2ef5ef2257a21801128899c3fc699229c6\"\n dependencies = [\n- \"winapi-i686-pc-windows-gnu\",\n- \"winapi-x86_64-pc-windows-gnu\",\n+ \"winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"winapi-build\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n \n [[package]]\n name = \"winapi-i686-pc-windows-gnu\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n \n [[package]]\n name = \"winapi-util\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4ccfbf554c6ad11084fb7517daca16cfdcaccbdadba4fc336f032a8b12c2ad80\"\n dependencies = [\n- \"winapi 0.3.8\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"winapi-x86_64-pc-windows-gnu\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n \n [[package]]\n name = \"winreg\"\n version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b2986deb581c4fe11b621998a5e53361efe6b48a151178d0cd9eeffa4dc6acc9\"\n dependencies = [\n- \"winapi 0.3.8\",\n+ \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"wrangler\"\n version = \"1.7.0\"\n dependencies = [\n- \"assert_cmd\",\n- \"atty\",\n- \"base64 0.10.1\",\n- \"binary-install\",\n- \"chrome-devtools-rs\",\n- \"chrono\",\n- \"clap\",\n- \"cloudflare\",\n- \"config\",\n- \"console\",\n- \"data-encoding\",\n- \"dirs 1.0.5\",\n- \"env_logger\",\n- \"exitfailure\",\n- \"failure\",\n- \"flate2\",\n- \"fs2\",\n- \"fs_extra\",\n- \"futures\",\n- \"futures-util\",\n- \"http\",\n- \"hyper\",\n- \"hyper-tls\",\n- \"ignore\",\n- \"indicatif\",\n- \"lazy_static 1.4.0\",\n- \"log 0.4.8\",\n- \"notify\",\n- \"number_prefix\",\n- \"openssl\",\n- \"percent-encoding 1.0.1\",\n- \"prettytable-rs\",\n- \"rand 0.6.5\",\n- \"regex\",\n- \"reqwest\",\n- \"serde 1.0.104\",\n- \"serde_json\",\n- \"serde_with\",\n- \"sha2\",\n- \"tempfile\",\n- \"text_io\",\n- \"tokio\",\n- \"tokio-tungstenite\",\n- \"toml 0.5.6\",\n- \"url\",\n- \"uuid\",\n- \"which\",\n- \"ws\",\n+ \"assert_cmd 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chrome-devtools-rs 0.0.0-alpha.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cloudflare 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"console 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"exitfailure 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hyper 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hyper-tls 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ignore 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indicatif 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"notify 4.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl 0.10.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"prettytable-rs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"reqwest 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_with 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"sha2 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"text_io 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tokio-tungstenite 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"uuid 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"which 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ws 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"ws\"\n version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c51a2c47b5798ccc774ffb93ff536aec7c4275d722fd9c740c83cdd1af1f2d94\"\n dependencies = [\n- \"byteorder\",\n- \"bytes 0.4.12\",\n- \"httparse\",\n- \"log 0.4.8\",\n- \"mio\",\n- \"mio-extras\",\n- \"rand 0.7.3\",\n- \"sha-1\",\n- \"slab\",\n- \"url\",\n+ \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"httparse 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mio-extras 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"sha-1 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"ws2_32-sys\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\"\n dependencies = [\n- \"winapi 0.2.8\",\n- \"winapi-build\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"xattr\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"244c3741f4240ef46274860397c7c74e50eb23624996930e484c16679633a54c\"\n dependencies = [\n- \"libc\",\n+ \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"yaml-rust\"\n version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"65923dd1784f44da1d2c3dbbc5e822045628c590ba72123e1c73d3c230c4434d\"\n dependencies = [\n- \"linked-hash-map 0.5.2\",\n+ \"linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"zip\"\n version = \"0.5.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e41ff37ba788e2169b19fa70253b70cb53d9f2db9fb9aea9bcfc5047e02c3bae\"\n dependencies = [\n- \"bzip2\",\n- \"crc32fast\",\n- \"flate2\",\n- \"podio\",\n- \"time\",\n-]\n+ \"bzip2 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"podio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[metadata]\n+\"checksum adler32 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d2e7343e7fc9de883d1b0341e0b13970f764c14101234857d2ddafa1cb1cac2\"\n+\"checksum aho-corasick 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"743ad5a418686aad3b87fd14c43badd828cf26e214a00f92a384291cf22e1811\"\n+\"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n+\"checksum anyhow 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7825f6833612eb2414095684fcf6c635becf3ce97fe48cf6421321e93bfbd53c\"\n+\"checksum arc-swap 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d7b8a9123b8027467bce0099fe556c628a53c8d83df0507084c31e9ba2e39aff\"\n+\"checksum arrayref 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a4c527152e37cf757a3f78aae5a06fbeefdb07ccc535c980a3208ee3060dd544\"\n+\"checksum arrayvec 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cff77d8686867eceff3105329d4698d96c2391c176d5d03adc90c7389162b5b8\"\n+\"checksum assert_cmd 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2dc477793bd82ec39799b6f6b3df64938532fdf2ab0d49ef817eac65856a5a1e\"\n+\"checksum async-trait 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"750b1c38a1dfadd108da0f01c08f4cdc7ff1bb39b325f9c82cc972361780a6e1\"\n+\"checksum atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\n+\"checksum autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\"\n+\"checksum autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d\"\n+\"checksum backtrace 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7f80256bc78f67e7df7e36d77366f636ed976895d91fe2ab9efa3973e8fe8c4f\"\n+\"checksum backtrace-sys 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d6575f128516de27e3ce99689419835fce9643a9b215a14d2b5b685be018491\"\n+\"checksum base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e\"\n+\"checksum base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b41b7ea54a0c9d92199de89e20e58d49f02f8e699814ef3fdf266f6f748d15c7\"\n+\"checksum binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\" = \"a81dda17f2dbba8271cf61f2ea3e48e3da8aef31665731bce48818cc07863f06\"\n+\"checksum bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n+\"checksum blake2b_simd 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8fb2d74254a3a0b5cac33ac9f8ed0e44aa50378d9dbb2e5d83bd21ed1dc2c8a\"\n+\"checksum block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b\"\n+\"checksum block-padding 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5\"\n+\"checksum bstr 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"502ae1441a0a5adb8fbd38a5955a6416b9493e92b465de5e4a9bde6a539c2c48\"\n+\"checksum bumpalo 3.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f359dc14ff8911330a51ef78022d376f25ed00248912803b58f00cb1c27f742\"\n+\"checksum byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7\"\n+\"checksum byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de\"\n+\"checksum bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"206fdffcfa2df7cbe15601ef46c813fce0965eb3286db6b56c583b814b51c81c\"\n+\"checksum bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"130aac562c0dd69c56b3b1cc8ffd2e17be31d0b6c25b61c96b76231aa23e39e1\"\n+\"checksum bzip2 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42b7c3cbf0fa9c1b82308d57191728ca0256cb821220f4e2fd410a72ade26e3b\"\n+\"checksum bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6584aa36f5ad4c9247f5323b0a42f37802b37a836f0ad87084d7a33961abe25f\"\n+\"checksum c2-chacha 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"214238caa1bf3a496ec3392968969cab8549f96ff30652c9e56885329315f6bb\"\n+\"checksum cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\" = \"95e28fa049fda1c330bcf9d723be7663a899c4679724b34c81e9f5a326aab8cd\"\n+\"checksum cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n+\"checksum chrome-devtools-rs 0.0.0-alpha.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dee9b8a1ad6b2382a01aad9f17b381544b2396173abac19c38ac7e8f0087d752\"\n+\"checksum chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31850b4a4d6bae316f7a09e691c944c28299298837edc0a03f755618c23cbc01\"\n+\"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n+\"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n+\"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n+\"checksum cloudflare 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0ce60d3492dc5dd86054ac002eed08580cb509bc4f23121f20081aec964302b8\"\n+\"checksum config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9107d78ed62b3fa5a86e7d18e647abed48cfd8f8fab6c72f4cdb982d196f7e6\"\n+\"checksum console 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"45e0f3986890b3acbc782009e2629dfe2baa430ac091519ce3be26164a2ae6c0\"\n+\"checksum constant_time_eq 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"245097e9a4535ee1e3e3931fcfcd55a796a44c643e8596ff6566d68f09b87bbc\"\n+\"checksum core-foundation 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25b9e03f145fd4f2bf705e07b900cd41fc636598fe5dc452fd0db1441c3f496d\"\n+\"checksum core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b\"\n+\"checksum crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n+\"checksum crossbeam 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd66663db5a988098a89599d4857919b3acf7f61402e61365acfd3919857b9be\"\n+\"checksum crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8ec7fcd21571dc78f96cc96243cab8d8f035247c3efd16c687be154c3fa9efa\"\n+\"checksum crossbeam-channel 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"acec9a3b0b3559f15aee4f90746c4e5e293b701c0f7d3925d24e01645267b68c\"\n+\"checksum crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"04973fa96e96579258a5091af6003abde64af786b860f18622b82e026cca60e6\"\n+\"checksum crossbeam-utils 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ce446db02cdc3165b94ae73111e570793400d0794e46125cc4056c81cbb039f4\"\n+\"checksum csv 1.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00affe7f6ab566df61b4be3ce8cf16bc2576bca0963ceb0955e45d514bf9a279\"\n+\"checksum csv-core 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9b5cadb6b25c77aeff80ba701712494213f4a8418fcda2ee11b6560c3ad0bf4c\"\n+\"checksum curl 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"06aa71e9208a54def20792d877bc663d6aae0732b9852e612c4a933177c31283\"\n+\"checksum curl-sys 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c38ca47d60b86d0cc9d42caa90a0885669c2abc9791f871c81f58cdf39e979b\"\n+\"checksum data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f4f47ca1860a761136924ddd2422ba77b2ea54fe8cc75b9040804a0d9d32ad97\"\n+\"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n+\"checksum digest 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\n+\"checksum dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\n+\"checksum dirs 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13aea89a5c93364a98e9b37b2fa237effbb694d5cfe01c5b70941f7eb087d5e3\"\n+\"checksum dirs-sys 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afa0b23de8fd801745c471deffa6e12d248f962c9fd4b4c33787b055599bde7b\"\n+\"checksum dtoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4358a9e11b9a09cf52383b451b49a169e8d797b68aa02301ff586d70d9661ea3\"\n+\"checksum encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n+\"checksum encoding_rs 0.8.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd8d03faa7fe0c1431609dfad7bbe827af30f82e1e2ae6f7ee4fca6bd764bc28\"\n+\"checksum env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\n+\"checksum error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ab49e9dcb602294bc42f9a7dfc9bc6e936fca4418ea300dbfb84fe16de0b7d9\"\n+\"checksum escargot 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ceb9adbf9874d5d028b5e4c5739d22b71988252b25c9c98fe7cf9738bee84597\"\n+\"checksum exitfailure 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2ff5bd832af37f366c6c194d813a11cd90ac484f124f079294f28e357ae40515\"\n+\"checksum failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8273f13c977665c5db7eb2b99ae520952fe5ac831ae4cd09d80c4c7042b5ed9\"\n+\"checksum failure_derive 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0bc225b78e0391e4b8683440bf2e63c2deeeb2ce5189eab46e2b68c6d3725d08\"\n+\"checksum fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n+\"checksum filetime 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1ff6d4dab0aa0c8e6346d46052e93b13a16cf847b54ed357087c35011048cc7d\"\n+\"checksum flate2 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6bd6d6f4752952feb71363cffc9ebac9411b75b87c6ab6058c40c8900cf43c0f\"\n+\"checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n+\"checksum foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\n+\"checksum foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n+\"checksum fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\n+\"checksum fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5f2a4a2034423744d2cc7ca2068453168dcdb82c438419e639a26bd87839c674\"\n+\"checksum fsevent 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5ab7d1bd1bd33cc98b0889831b72da23c0aa4df9cec7e0702f46ecea04b35db6\"\n+\"checksum fsevent-sys 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f41b048a94555da0f42f1d632e2e19510084fb8e303b0daa2816e733fb3644a0\"\n+\"checksum fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n+\"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n+\"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n+\"checksum futures 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5c329ae8753502fb44ae4fc2b622fa2a94652c41e795143765ba0927f92ab780\"\n+\"checksum futures-channel 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0c77d04ce8edd9cb903932b608268b3fffec4163dc053b3b402bf47eac1f1a8\"\n+\"checksum futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f25592f769825e89b92358db00d26f965761e094951ac44d3663ef25b7ac464a\"\n+\"checksum futures-executor 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f674f3e1bcb15b37284a90cedf55afdba482ab061c407a9c0ebbd0f3109741ba\"\n+\"checksum futures-io 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a638959aa96152c7a4cddf50fcb1e3fede0583b27157c26e67d6f99904090dc6\"\n+\"checksum futures-macro 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a5081aa3de1f7542a794a397cde100ed903b0630152d0973479018fd85423a7\"\n+\"checksum futures-sink 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3466821b4bc114d95b087b850a724c6f83115e929bc88f1fa98a3304a944c8a6\"\n+\"checksum futures-task 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b0a34e53cf6cdcd0178aa573aed466b646eb3db769570841fda0c7ede375a27\"\n+\"checksum futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"22766cf25d64306bedf0384da004d05c9974ab104fcc4528f1236181c18004c5\"\n+\"checksum generic-array 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec\"\n+\"checksum getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb\"\n+\"checksum globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925aa2cac82d8834e2b2a4415b6f6879757fb5c0928fc445ae76461a12eed8f2\"\n+\"checksum h2 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b9433d71e471c1736fd5a61b671fc0b148d7a2992f666c958d03cd8feb3b88d1\"\n+\"checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n+\"checksum hermit-abi 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eff2656d88f158ce120947499e971d743c05dbcbed62e5bd2f38f1698bbc3772\"\n+\"checksum hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n+\"checksum http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b708cc7f06493459026f53b9a61a7a121a5d1ec6238dee58ea4941132b30156b\"\n+\"checksum http-body 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13d5ff830006f7646652e057693569bfe0d51760c0085a071769d142a205111b\"\n+\"checksum httparse 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd179ae861f0c2e53da70d892f5f3029f9594be0c41dc5269cd371691b1dc2f9\"\n+\"checksum humantime 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\n+\"checksum hyper 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa1c527bbc634be72aa7ba31e4e4def9bbb020f5416916279b7c705cd838893e\"\n+\"checksum hyper-tls 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3adcd308402b9553630734e9c36b77a7e48b3821251ca2493e8cd596763aafaa\"\n+\"checksum idna 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\n+\"checksum ignore 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"522daefc3b69036f80c7d2990b28ff9e0471c683bad05ca258e0a01dd22c5a1e\"\n+\"checksum indexmap 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"076f042c5b7b98f31d205f1249267e12a6518c1481e9dae9764af19b707d2292\"\n+\"checksum indicatif 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8572bccfb0665e70b7faf44ee28841b8e0823450cd4ad562a76b5a3c4bf48487\"\n+\"checksum inotify 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"24e40d6fd5d64e2082e0c796495c8ef5ad667a96d03e5aaa0becfd9d47bcbfb8\"\n+\"checksum inotify-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e74a1aa87c59aeff6ef2cc2fa62d41bc43f54952f55652656b18a02fd5e356c0\"\n+\"checksum input_buffer 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"19a8a95243d5a0398cae618ec29477c6e3cb631152be5c19481f80bc71559754\"\n+\"checksum iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2b3ea6ff95e175473f8ffe6a7eb7c00d054240321b84c57051175fe3c1e075e\"\n+\"checksum is_executable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"302d553b8abc8187beb7d663e34c065ac4570b273bc9511a50e940e99409c577\"\n+\"checksum itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8b7a7c0c47db5545ed3fef7468ee7bb5b74691498139e4b3f6a20685dc6dd8e\"\n+\"checksum js-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7889c7c36282151f6bf465be4700359318aef36baa951462382eae49e9577cf9\"\n+\"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n+\"checksum lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n+\"checksum lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n+\"checksum lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b294d6fa9ee409a054354afc4352b0b9ef7ca222c69b8812cbea9e7d2bf3783f\"\n+\"checksum libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d515b1f41455adea1313a4a2ac8a8a477634fbae63cc6100e3aebb207ce61558\"\n+\"checksum libflate 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9135df43b1f5d0e333385cb6e7897ecd1a43d7d11b91ac003f4d2c2d2401fdd\"\n+\"checksum libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2eb5e43362e38e2bca2fd5f5134c4d4564a23a5c28e9b95411652021a8675ebe\"\n+\"checksum linked-hash-map 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d262045c5b87c0861b3f004610afd0e2c851e2908d08b6c870cbb9d5f494ecd\"\n+\"checksum linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\n+\"checksum log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n+\"checksum log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n+\"checksum matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n+\"checksum memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3197e20c7edb283f87c071ddfc7a2cca8f8e0b888c242959846a6fce03c72223\"\n+\"checksum mime 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d\"\n+\"checksum mime_guess 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1a0ed03949aef72dbdf3116a383d7b38b4768e6f960528cd6a6044aa9ed68599\"\n+\"checksum miniz_oxide 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa679ff6578b1cddee93d7e82e263b94a575e0bfced07284eb0c037c1d2416a5\"\n+\"checksum mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"302dec22bcf6bae6dfb69c647187f4b4d0fb6f535521f7bc022430ce8e12008f\"\n+\"checksum mio-extras 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"52403fe290012ce777c4626790c8951324a2b9e3316b3143779c72b029742f19\"\n+\"checksum mio-uds 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"966257a94e196b11bb43aca423754d87429960a768de9414f3691d6957abf125\"\n+\"checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\n+\"checksum native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b2df1a4c22fd44a62147fd8f13dd0f95c9d8ca7b2610299b2a2f9cf8964274e\"\n+\"checksum net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42550d9fb7b6684a6d404d9fa7250c2eb2646df731d1c06afc06dcee9e1bcf88\"\n+\"checksum nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2ad2a91a8e869eeb30b9cb3119ae87773a8f4ae617f41b1eb9c154b2905f7bd6\"\n+\"checksum notify 4.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80ae4a7688d1fab81c5bf19c64fc8db920be8d519ce6336ed4e7efe024724dbd\"\n+\"checksum num-integer 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f6ea62e9d81a77cd3ee9a2a5b9b609447857f3d358704331e4ef39eb247fcba\"\n+\"checksum num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92e5113e9fd4cc14ded8e499429f396a20f98c772a47cc8622a736e1ec843c31\"\n+\"checksum num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c62be47e61d1842b9170f0fdeec8eba98e60e90e5446449a0545e5152acd7096\"\n+\"checksum num_cpus 1.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46203554f085ff89c235cd12f7075f3233af9b11ed7c9e16dfe2560d03313ce6\"\n+\"checksum number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17b02fc0ff9a9e4b35b3342880f48e896ebf69f2967921fe8646bf5b7125956a\"\n+\"checksum opaque-debug 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n+\"checksum openssl 0.10.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"973293749822d7dd6370d6da1e523b0d1db19f06c459134c658b2a4261378b52\"\n+\"checksum openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\n+\"checksum openssl-src 111.6.1+1.1.1d (registry+https://github.com/rust-lang/crates.io-index)\" = \"c91b04cb43c1a8a90e934e0cd612e2a5715d976d2d6cff4490278a0cddf35005\"\n+\"checksum openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1024c0a59774200a555087a6da3f253a9095a5f344e353b212ac4c8b8e450986\"\n+\"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n+\"checksum percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n+\"checksum pin-project 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7804a463a8d9572f13453c516a5faea534a2403d7ced2f0c7e100eeff072772c\"\n+\"checksum pin-project-internal 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"385322a45f2ecf3410c68d2a549a4a2685e8051d0f278e39743ff4e451cb9b3f\"\n+\"checksum pin-project-lite 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"237844750cfbb86f67afe27eee600dfbbcb6188d734139b534cbfbf4f96792ae\"\n+\"checksum pin-utils 0.1.0-alpha.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5894c618ce612a3fa23881b152b608bafb8c56cfc22f434a3ba3120b40f7b587\"\n+\"checksum pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05da548ad6865900e60eaba7f589cc0783590a92e940c26953ff81ddbab2d677\"\n+\"checksum podio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"780fb4b6698bbf9cf2444ea5d22411cef2953f0824b98f33cf454ec5615645bd\"\n+\"checksum ppv-lite86 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74490b50b9fbe561ac330df47c08f3f33073d2d00c150f719147d7c54522fa1b\"\n+\"checksum predicates 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9bfe52247e5cc9b2f943682a85a5549fb9662245caf094504e69a2f03fe64d4\"\n+\"checksum predicates-core 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"06075c3a3e92559ff8929e7a280684489ea27fe44805174c3ebd9328dcb37178\"\n+\"checksum predicates-tree 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8e63c4859013b38a76eca2414c64911fba30def9e3202ac461a2d22831220124\"\n+\"checksum prettytable-rs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0fd04b170004fa2daccf418a7f8253aaf033c27760b5f225889024cf66d7ac2e\"\n+\"checksum proc-macro-hack 0.5.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ecd45702f76d6d3c75a80564378ae228a85f0b59d2f3ed43c91b4a69eb2ebfc5\"\n+\"checksum proc-macro-nested 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"369a6ed065f249a159e06c45752c780bda2fb53c995718f9e484d08daa9eb42e\"\n+\"checksum proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3acb317c6ff86a4e579dfa00fc5e6cca91ecbb4e7eb2df0468805b674eb88548\"\n+\"checksum quick-error 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\n+\"checksum quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n+\"checksum rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n+\"checksum rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\n+\"checksum rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\"\n+\"checksum rand_chacha 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03a2a90da8c7523f554344f921aa97283eadf6ac484a6d2a7d0212fa7f8d6853\"\n+\"checksum rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\n+\"checksum rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc\"\n+\"checksum rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\n+\"checksum rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b40677c7be09ae76218dc623efbf7b18e34bced3f38883af07bb75630a21bc4\"\n+\"checksum rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\n+\"checksum rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ded997c9d5f13925be2a6fd7e66bf1872597f759fd9dd93513dd7e92e5a5ee08\"\n+\"checksum rand_jitter 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1166d5c91dc97b88d1decc3285bb0a99ed84b05cfd0bc2341bdf2d43fc41e39b\"\n+\"checksum rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b75f676a1e053fc562eafbb47838d67c84801e38fc1ba459e8f180deabd5071\"\n+\"checksum rand_pcg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abf9b09b01790cfe0364f52bf32995ea3c39f4d2dd011eac241d2914146d0b44\"\n+\"checksum rand_xorshift 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cbf7e9e623549b0e21f6e97cf8ecf247c1a8fd2e8a992ae265314300b2455d5c\"\n+\"checksum rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\"\n+\"checksum redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2439c63f3f6139d1b57529d16bc3b8bb855230c8efcc5d3a896c8bea7c3b1e84\"\n+\"checksum redox_users 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09b23093265f8d200fa7b4c2c76297f47e681c655f6f1285a8780d6a022f7431\"\n+\"checksum regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"322cf97724bea3ee221b78fe25ac9c46114ebb51747ad5babd51a2fc6a8235a8\"\n+\"checksum regex-automata 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92b73c2a1770c255c240eaa4ee600df1704a38dc3feaa6e949e7fcd4f8dc09f9\"\n+\"checksum regex-syntax 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b28dfe3fe9badec5dbf0a79a9cccad2cfc2ab5484bdb3e44cbd1ae8b3ba2be06\"\n+\"checksum remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e\"\n+\"checksum reqwest 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0e798e19e258bf6c30a304622e3e9ac820e483b06a1857a026e1f109b113fe4\"\n+\"checksum rle-decode-fast 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cabe4fa914dec5870285fa7f71f602645da47c486e68486d2b4ceb4a343e90ac\"\n+\"checksum rust-argon2 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2bc8af4bda8e1ff4932523b94d3dd20ee30a87232323eda55903ffd71d2fb017\"\n+\"checksum rust-ini 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e52c148ef37f8c375d49d5a73aa70713125b7f19095948a923f80afdeb22ec2\"\n+\"checksum rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n+\"checksum ryu 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bfa8506c1de11c9c4e4c38863ccbe02a305c8188e85a05a784c9e11e1c3910c8\"\n+\"checksum same-file 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\n+\"checksum schannel 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"507a9e6e8ffe0a4e0ebb9a10293e62fdf7657c06f1b8bb07a8fcf697d2abf295\"\n+\"checksum security-framework 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ef2429d7cefe5fd28bd1d2ed41c944547d4ff84776f5935b456da44593a16df\"\n+\"checksum security-framework-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e31493fc37615debb8c5090a7aeb4a9730bc61e77ab10b9af59f1a202284f895\"\n+\"checksum serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9dad3f759919b92c3068c696c15c3d17238234498bbdcc80f2c469606f948ac8\"\n+\"checksum serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\" = \"414115f25f818d7dfccec8ee535d76949ae78584fc4f79a6f45a904bf8ab4449\"\n+\"checksum serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b833c5ad67d52ced5f5938b2980f32a9c1c5ef047f0b4fb3127e7a423c76153\"\n+\"checksum serde_derive 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\" = \"128f9e303a5a29922045a830221b8f78ec74a5f544944f3d5984f8ec3895ef64\"\n+\"checksum serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15913895b61e0be854afd32fd4163fcd2a3df34142cf2cb961b310ce694cbf90\"\n+\"checksum serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35965fa1d2413717053d67c2df1f5c3e1763fbf77200ea7e767523707bd5a0af\"\n+\"checksum serde_test 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"110b3dbdf8607ec493c22d5d947753282f3bae73c0f56d322af1e8c78e4c23d5\"\n+\"checksum serde_urlencoded 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ec5d77e2d4c73717816afac02670d5c4f534ea95ed430442cad02e7a6e32c97\"\n+\"checksum serde_with 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89d3d595d64120bbbc70b7f6d5ae63298b62a3d9f373ec2f56acf5365ca8a444\"\n+\"checksum serde_with_macros 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4070d2c9b9d258465ad1d82aabb985b84cd9a3afa94da25ece5a9938ba5f1606\"\n+\"checksum sha-1 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df\"\n+\"checksum sha2 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"27044adfd2e1f077f649f59deb9490d3941d674002f7d062870a60ebe9bd47a0\"\n+\"checksum siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b8de496cf83d4ed58b6be86c3a275b8602f6ffe98d3024a869e124147a9a3ac\"\n+\"checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n+\"checksum slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1cc9c640a4adbfbcc11ffb95efe5aa7af7309e002adab54b185507dbf2377b99\"\n+\"checksum slog-async 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"78ca925b180da88ccc595cbe4a3d378d79cb49fe5906c2cbc2488eaf700913ee\"\n+\"checksum slog-kvfilter 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae939ed7d169eed9699f4f5cd440f046f5dc5dfc27c19e3cd311619594c175e0\"\n+\"checksum slog-scope 4.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c44c89dd8b0ae4537d1ae318353eaf7840b4869c536e31c41e963d1ea523ee6\"\n+\"checksum slog-stdlog 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1c469573d1e3f36f9eee66cd132206caf47b50c94b1f6c6e7b4d8235e9ecf01\"\n+\"checksum slog-term 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"124501187c410b6a46fe8a47a48435ae462fae4e02d03c558d358f40b17308cb\"\n+\"checksum sloggers 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d41aa58f9a02e205e21117ffa08e94c37f06e1f1009be2639b621f351a75796d\"\n+\"checksum smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5c2fb2ec9bcd216a5b0d0ccf31ab17b5ed1d627960edff65bbe95d3ce221cefc\"\n+\"checksum socket2 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8b74de517221a2cb01a53349cf54182acdc31a074727d3079068448c0676d85\"\n+\"checksum sourcefile 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4bf77cb82ba8453b42b6ae1d692e4cdc92f9a47beaf89a847c8be83f4e328ad3\"\n+\"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n+\"checksum syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"af6f3550d8dff9ef7dc34d384ac6f107e5d31c8f57d9f28e0081503f547ac8f5\"\n+\"checksum synstructure 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"67656ea1dc1b41b1451851562ea232ec2e5a80242139f7e679ceccfb5d61f545\"\n+\"checksum take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f764005d11ee5f36500a149ace24e00e3da98b0158b3e2d53a7495660d3f4d60\"\n+\"checksum tar 0.4.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3196bfbffbba3e57481b6ea32249fbaf590396a52505a2615adbb79d9d826d3\"\n+\"checksum tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\n+\"checksum term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42\"\n+\"checksum term 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5\"\n+\"checksum termcolor 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb6bfa289a4d7c5766392812c0a1f4c1ba45afa1ad47803c11e1f407d846d75f\"\n+\"checksum termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n+\"checksum text_io 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6cb170b4f47dc48835fbc56259c12d8963e542b05a24be2e3a1f5a6c320fd2d4\"\n+\"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n+\"checksum thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d40c6d1b69745a6ec6fb1ca717914848da4b44ae29d9b3080cbee91d72a69b14\"\n+\"checksum time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f\"\n+\"checksum tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8fdd17989496f49cdc57978c96f0c9fe5e4a58a8bddc6813c449a4624f6a030b\"\n+\"checksum tokio-tls 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7bde02a3a5291395f59b06ec6945a3077602fac2b07eeeaf0dee2122f3619828\"\n+\"checksum tokio-tungstenite 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8b8fe88007ebc363512449868d7da4389c9400072a3f666f212c7280082882a\"\n+\"checksum tokio-util 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"571da51182ec208780505a32528fc5512a8fe1443ab960b3f2f3ef093cd16930\"\n+\"checksum toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"758664fc71a3a69038656bee8b6be6477d2a6c315a6b81f7081f591bffa4111f\"\n+\"checksum toml 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffc92d160b1eef40665be3a05630d003936a3bc7da7421277846c2613e92c71a\"\n+\"checksum tower-service 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e987b6bf443f4b5b3b6f38704195592cca41c5bb7aedd3c3693c7081f8289860\"\n+\"checksum trackable 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11475c3c53b075360eac9794965822cb053996046545f91cf61d90e00b72efa5\"\n+\"checksum trackable_derive 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edcf0b9b2caa5f4804ef77aeee1b929629853d806117c48258f402b69737e65c\"\n+\"checksum treeline 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7f741b240f1a48843f9b8e0444fb55fb2a4ff67293b50a9179dfd5ea67f8d41\"\n+\"checksum try-lock 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e604eb7b43c06650e854be16a2a03155743d3752dd1c943f6829e26b7a36e382\"\n+\"checksum tungstenite 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cfea31758bf674f990918962e8e5f07071a3161bd7c4138ed23e416e1ac4264e\"\n+\"checksum typenum 1.11.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d2783fe2d6b8c1101136184eb41be8b1ad379e4657050b8aaff0c79ee7575f9\"\n+\"checksum unicase 2.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"\n+\"checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n+\"checksum unicode-normalization 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5479532badd04e128284890390c1e876ef7a993d0570b3597ae43dfa1d59afa4\"\n+\"checksum unicode-segmentation 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e83e153d1053cbb5a118eeff7fd5be06ed99153f00dbcd8ae310c5fb2b22edc0\"\n+\"checksum unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"caaa9d531767d1ff2150b9332433f32a24622147e5ebb1f26409d5da67afd479\"\n+\"checksum unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n+\"checksum url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"829d4a8476c35c9bf0bbce5a3b23f4106f79728039b726d292bb93bc106787cb\"\n+\"checksum utf-8 0.7.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05e42f7c18b8f902290b009cde6d651262f956c98bc51bca4cd1d511c9cd85c7\"\n+\"checksum uuid 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9fde2f6a4bea1d6e007c4ad38c6839fa71cbb63b6dbf5b595aa38dc9b1093c11\"\n+\"checksum vcpkg 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fc439f2794e98976c88a2a2dafce96b930fe8010b0a256b3c2199a773933168\"\n+\"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n+\"checksum version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"914b1a6776c4c929a602fafd8bc742e06365d4bcbe48c30f9cca5824f70dc9dd\"\n+\"checksum version_check 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"078775d0255232fb988e6fccf26ddc9d1ac274299aaedcedce21c6f72cc533ce\"\n+\"checksum walkdir 2.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"777182bc735b6424e1a57516d35ed72cb8019d85c8c9bf536dccb3445c1a2f7d\"\n+\"checksum want 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0\"\n+\"checksum wasi 0.9.0+wasi-snapshot-preview1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n+\"checksum wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5205e9afdf42282b192e2310a5b463a6d1c1d774e30dc3c791ac37ab42d2616c\"\n+\"checksum wasm-bindgen-backend 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11cdb95816290b525b32587d76419facd99662a07e59d3cdb560488a819d9a45\"\n+\"checksum wasm-bindgen-futures 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8bbdd49e3e28b40dec6a9ba8d17798245ce32b019513a845369c641b275135d9\"\n+\"checksum wasm-bindgen-macro 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"574094772ce6921576fb6f2e3f7497b8a76273b6db092be18fc48a082de09dc3\"\n+\"checksum wasm-bindgen-macro-support 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e85031354f25eaebe78bb7db1c3d86140312a911a106b2e29f9cc440ce3e7668\"\n+\"checksum wasm-bindgen-shared 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5e7e61fc929f4c0dddb748b102ebf9f632e2b8d739f2016542b4de2965a9601\"\n+\"checksum wasm-bindgen-webidl 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef012a0d93fc0432df126a8eaf547b2dce25a8ce9212e1d3cbeef5c11157975d\"\n+\"checksum web-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aaf97caf6aa8c2b1dac90faf0db529d9d63c93846cca4911856f78a83cebf53b\"\n+\"checksum weedle 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3bb43f70885151e629e2a19ce9e50bd730fd436cfd4b666894c9ce4de9141164\"\n+\"checksum which 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b57acb10231b9493c8472b20cb57317d0679a49e0bdbee44b3b803a6473af164\"\n+\"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n+\"checksum winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8093091eeb260906a183e6ae1abdba2ef5ef2257a21801128899c3fc699229c6\"\n+\"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n+\"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n+\"checksum winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ccfbf554c6ad11084fb7517daca16cfdcaccbdadba4fc336f032a8b12c2ad80\"\n+\"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n+\"checksum winreg 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2986deb581c4fe11b621998a5e53361efe6b48a151178d0cd9eeffa4dc6acc9\"\n+\"checksum ws 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c51a2c47b5798ccc774ffb93ff536aec7c4275d722fd9c740c83cdd1af1f2d94\"\n+\"checksum ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\"\n+\"checksum xattr 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"244c3741f4240ef46274860397c7c74e50eb23624996930e484c16679633a54c\"\n+\"checksum yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"65923dd1784f44da1d2c3dbbc5e822045628c590ba72123e1c73d3c230c4434d\"\n+\"checksum zip 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e41ff37ba788e2169b19fa70253b70cb53d9f2db9fb9aea9bcfc5047e02c3bae\"\n",
        "problem_statement": "command to add a secret to a worker\nwrangler should support a command that allows the user to securely add a secret environment variable to the script of their choosing. should be interactive by default to prevent sensitive data from leaking into terminal history. ideally also allows for values to be piped to it.\r\n\r\n### Syntax\r\n```\r\n$ wrangler secret set secret-name\r\n=> Enter your secret value\r\n# or\r\n$ echo $SECRET_VALUE | wrangler secret secret-name\r\n```\r\nthis command should support the environment flag; when not present, the command should create a secret in the context of the top level worker. when present, the command should create a secret in the context of the worker specified in the env.\r\n\r\n#### outstanding questions:\r\n\r\n1. what to do when the worker does not exist yet\r\n2. does this require extra encryption before sending?\r\n\r\n### Depends on\r\n* add endpoint to workers configuration api to add a secret binding to an already existing worker\r\n* add endpoint definition to cloudflare-rs for calling the above endpoint\r\n\n",
        "hints_text": "Thinking about this, I actually think we should be consistent with how wrangler uses `:` to separate actions from subcommand. We should either change how `kv:` does this or omit the `:` here\r\nSee https://wiki.cfops.it/display/~victoria/Wrangler+Commands\nwe shouldn't change how kv does things. the difference between kv and secrets is that in kv you are potentially manipulating one of many subresources: namespaces vs keys, for example, so the whole `foo:bar` segment is still a \"noun\" (e.g. `kv:namespace` or `kv:key`) while the command that follows is the verb. likewise here the only noun is `secret` and the verbs are still `create`, `list`, and `delete`",
        "created_at": "2020-02-11T17:59:58Z",
        "version": "1.7"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1014,
        "instance_id": "cloudflare__wrangler-legacy-1014",
        "issue_numbers": [
            "993"
        ],
        "base_commit": "27b12a48b1d960134058c463c063c43a19207f92",
        "patch": "diff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -18,7 +18,7 @@ chrome-devtools-rs = \"0.0.0-alpha.0\"\n chrono = \"0.4.9\"\n clap = \"2.32.0\"\n cloudflare = \"0.6.4\"\n-config = \"0.9.2\"\n+config = \"0.10.1\"\n console = \"0.9.1\"\n data-encoding = \"2.1.2\"\n dirs = \"1.0.5\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -40,6 +40,7 @@ notify = \"4.0.12\"\n number_prefix = \"0.3.0\"\n openssl = { version = '0.10.26', optional = true }\n percent-encoding = \"1.0.1\"\n+predicates = \"1.0.2\"\n prettytable-rs = \"0.8.0\"\n rand = \"0.6.5\"\n regex = \"1\"\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -1,3 +1,4 @@\n+mod plain_text;\n mod project_assets;\n mod text_blob;\n mod wasm_module;\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -13,6 +14,7 @@ use crate::settings::binding;\n use crate::settings::metadata::Metadata;\n use crate::settings::toml::{Target, TargetType};\n \n+use plain_text::PlainText;\n use project_assets::ProjectAssets;\n use text_blob::TextBlob;\n use wasm_module::WasmModule;\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -25,6 +27,16 @@ pub fn build(\n ) -> Result<Form, failure::Error> {\n     let target_type = &target.target_type;\n     let kv_namespaces = target.kv_namespaces();\n+    let mut text_blobs: Vec<TextBlob> = Vec::new();\n+    let mut plain_texts: Vec<PlainText> = Vec::new();\n+    let mut wasm_modules: Vec<WasmModule> = Vec::new();\n+\n+    if let Some(text) = &target.text {\n+        for (key, value) in text.iter() {\n+            plain_texts.push(PlainText::new(key.clone(), value.clone())?)\n+        }\n+    }\n+\n     match target_type {\n         TargetType::Rust => {\n             log::info!(\"Rust project detected. Publishing...\");\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -36,11 +48,16 @@ pub fn build(\n             let path = PathBuf::from(format!(\"./pkg/{}_bg.wasm\", name));\n             let binding = \"wasm\".to_string();\n             let wasm_module = WasmModule::new(path, binding)?;\n-\n+            wasm_modules.push(wasm_module);\n             let script_path = PathBuf::from(\"./worker/generated/script.js\");\n \n-            let assets =\n-                ProjectAssets::new(script_path, vec![wasm_module], kv_namespaces, Vec::new())?;\n+            let assets = ProjectAssets::new(\n+                script_path,\n+                wasm_modules,\n+                kv_namespaces,\n+                text_blobs,\n+                plain_texts,\n+            )?;\n \n             build_form(&assets)\n         }\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -51,7 +68,13 @@ pub fn build(\n \n             let script_path = package.main(&build_dir)?;\n \n-            let assets = ProjectAssets::new(script_path, Vec::new(), kv_namespaces, Vec::new())?;\n+            let assets = ProjectAssets::new(\n+                script_path,\n+                wasm_modules,\n+                kv_namespaces,\n+                text_blobs,\n+                plain_texts,\n+            )?;\n \n             build_form(&assets)\n         }\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -63,8 +86,6 @@ pub fn build(\n \n             let script_path = bundle.script_path();\n \n-            let mut wasm_modules = Vec::new();\n-\n             if bundle.has_wasm() {\n                 let path = bundle.wasm_path();\n                 let binding = bundle.get_wasm_binding();\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -72,8 +93,6 @@ pub fn build(\n                 wasm_modules.push(wasm_module);\n             }\n \n-            let mut text_blobs = Vec::new();\n-\n             if let Some(asset_manifest) = asset_manifest {\n                 log::info!(\"adding __STATIC_CONTENT_MANIFEST\");\n                 let binding = \"__STATIC_CONTENT_MANIFEST\".to_string();\ndiff --git a/src/commands/publish/upload_form/mod.rs b/src/commands/publish/upload_form/mod.rs\n--- a/src/commands/publish/upload_form/mod.rs\n+++ b/src/commands/publish/upload_form/mod.rs\n@@ -82,7 +101,13 @@ pub fn build(\n                 text_blobs.push(text_blob);\n             }\n \n-            let assets = ProjectAssets::new(script_path, wasm_modules, kv_namespaces, text_blobs)?;\n+            let assets = ProjectAssets::new(\n+                script_path,\n+                wasm_modules,\n+                kv_namespaces,\n+                text_blobs,\n+                plain_texts,\n+            )?;\n \n             build_form(&assets)\n         }\ndiff --git /dev/null b/src/commands/publish/upload_form/plain_text.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/commands/publish/upload_form/plain_text.rs\n@@ -0,0 +1,18 @@\n+use super::binding::Binding;\n+use serde::{Deserialize, Serialize};\n+\n+#[derive(Debug, Deserialize, Serialize)]\n+pub struct PlainText {\n+    pub name: String,\n+    pub value: String,\n+}\n+\n+impl PlainText {\n+    pub fn new(name: String, value: String) -> Result<Self, failure::Error> {\n+        Ok(Self { name, value })\n+    }\n+\n+    pub fn binding(&self) -> Binding {\n+        Binding::new_plain_text(self.name.clone(), self.value.clone())\n+    }\n+}\ndiff --git a/src/commands/publish/upload_form/project_assets.rs b/src/commands/publish/upload_form/project_assets.rs\n--- a/src/commands/publish/upload_form/project_assets.rs\n+++ b/src/commands/publish/upload_form/project_assets.rs\n@@ -4,6 +4,7 @@ use failure::format_err;\n \n use super::binding::Binding;\n use super::filename_from_path;\n+use super::plain_text::PlainText;\n use super::text_blob::TextBlob;\n use super::wasm_module::WasmModule;\n \ndiff --git a/src/commands/publish/upload_form/project_assets.rs b/src/commands/publish/upload_form/project_assets.rs\n--- a/src/commands/publish/upload_form/project_assets.rs\n+++ b/src/commands/publish/upload_form/project_assets.rs\n@@ -16,6 +17,7 @@ pub struct ProjectAssets {\n     pub wasm_modules: Vec<WasmModule>,\n     pub kv_namespaces: Vec<KvNamespace>,\n     pub text_blobs: Vec<TextBlob>,\n+    pub plain_texts: Vec<PlainText>,\n }\n \n impl ProjectAssets {\ndiff --git a/src/commands/publish/upload_form/project_assets.rs b/src/commands/publish/upload_form/project_assets.rs\n--- a/src/commands/publish/upload_form/project_assets.rs\n+++ b/src/commands/publish/upload_form/project_assets.rs\n@@ -24,6 +26,7 @@ impl ProjectAssets {\n         wasm_modules: Vec<WasmModule>,\n         kv_namespaces: Vec<KvNamespace>,\n         text_blobs: Vec<TextBlob>,\n+        plain_texts: Vec<PlainText>,\n     ) -> Result<Self, failure::Error> {\n         let script_name = filename_from_path(&script_path).ok_or_else(|| {\n             format_err!(\"filename should not be empty: {}\", script_path.display())\ndiff --git a/src/commands/publish/upload_form/project_assets.rs b/src/commands/publish/upload_form/project_assets.rs\n--- a/src/commands/publish/upload_form/project_assets.rs\n+++ b/src/commands/publish/upload_form/project_assets.rs\n@@ -35,6 +38,7 @@ impl ProjectAssets {\n             wasm_modules,\n             kv_namespaces,\n             text_blobs,\n+            plain_texts,\n         })\n     }\n \ndiff --git a/src/commands/publish/upload_form/project_assets.rs b/src/commands/publish/upload_form/project_assets.rs\n--- a/src/commands/publish/upload_form/project_assets.rs\n+++ b/src/commands/publish/upload_form/project_assets.rs\n@@ -53,6 +57,10 @@ impl ProjectAssets {\n             let binding = blob.binding();\n             bindings.push(binding);\n         }\n+        for plain_text in &self.plain_texts {\n+            let binding = plain_text.binding();\n+            bindings.push(binding);\n+        }\n \n         bindings\n     }\ndiff --git a/src/commands/publish/upload_form/wasm_module.rs b/src/commands/publish/upload_form/wasm_module.rs\n--- a/src/commands/publish/upload_form/wasm_module.rs\n+++ b/src/commands/publish/upload_form/wasm_module.rs\n@@ -27,10 +27,7 @@ impl WasmModule {\n     // `name` corresponds to the binding used in the worker js\n     // `part` corresponds to the name given to the file in the upload form\n     pub fn binding(&self) -> Binding {\n-        let name = &self.binding;\n-        let part = &self.filename;\n-\n-        Binding::new_wasm_module(name, part)\n+        Binding::new_wasm_module(self.binding.clone(), self.filename.clone())\n     }\n \n     pub fn path(&self) -> PathBuf {\ndiff --git a/src/settings/binding.rs b/src/settings/binding.rs\n--- a/src/settings/binding.rs\n+++ b/src/settings/binding.rs\n@@ -2,21 +2,17 @@ use serde::Serialize;\n \n #[derive(Serialize, Debug)]\n #[serde(tag = \"type\")]\n+#[serde(rename_all = \"snake_case\")]\n pub enum Binding {\n-    #[serde(rename = \"wasm_module\")]\n     WasmModule { name: String, part: String },\n-    #[serde(rename = \"kv_namespace\")]\n     KvNamespace { name: String, namespace_id: String },\n-    #[serde(rename = \"text_blob\")]\n     TextBlob { name: String, part: String },\n+    PlainText { name: String, text: String },\n }\n \n impl Binding {\n-    pub fn new_wasm_module(name: &str, part: &str) -> Binding {\n-        Binding::WasmModule {\n-            name: name.to_string(),\n-            part: part.to_string(),\n-        }\n+    pub fn new_wasm_module(name: String, part: String) -> Binding {\n+        Binding::WasmModule { name, part }\n     }\n \n     pub fn new_kv_namespace(name: String, namespace_id: String) -> Binding {\ndiff --git a/src/settings/binding.rs b/src/settings/binding.rs\n--- a/src/settings/binding.rs\n+++ b/src/settings/binding.rs\n@@ -26,4 +22,8 @@ impl Binding {\n     pub fn new_text_blob(name: String, part: String) -> Binding {\n         Binding::TextBlob { name, part }\n     }\n+\n+    pub fn new_plain_text(name: String, text: String) -> Binding {\n+        Binding::PlainText { name, text }\n+    }\n }\ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -1,3 +1,5 @@\n+use std::collections::HashMap;\n+\n use serde::{Deserialize, Serialize};\n use serde_with::rust::string_empty_as_none;\n \ndiff --git a/src/settings/toml/environment.rs b/src/settings/toml/environment.rs\n--- a/src/settings/toml/environment.rs\n+++ b/src/settings/toml/environment.rs\n@@ -21,6 +23,7 @@ pub struct Environment {\n     pub site: Option<Site>,\n     #[serde(rename = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<KvNamespace>>,\n+    pub text: Option<HashMap<String, String>>,\n }\n \n impl Environment {\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -41,6 +41,7 @@ pub struct Manifest {\n     #[serde(rename = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<KvNamespace>>,\n     pub env: Option<HashMap<String, Environment>>,\n+    pub text: Option<HashMap<String, String>>,\n }\n \n impl Manifest {\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -189,6 +190,7 @@ impl Manifest {\n             name: self.name.clone(),                   // MAY inherit\n             kv_namespaces: self.kv_namespaces.clone(), // MUST NOT inherit\n             site: self.site.clone(),                   // MUST NOT inherit\n+            text: self.text.clone(),                   // MAY inherit\n         };\n \n         let environment = self.get_environment(environment_name)?;\ndiff --git a/src/settings/toml/manifest.rs b/src/settings/toml/manifest.rs\n--- a/src/settings/toml/manifest.rs\n+++ b/src/settings/toml/manifest.rs\n@@ -198,9 +200,17 @@ impl Manifest {\n             if let Some(account_id) = &environment.account_id {\n                 target.account_id = account_id.clone();\n             }\n-            if environment.webpack_config.is_some() {\n-                target.webpack_config = environment.webpack_config.clone();\n+            if let Some(webpack_config) = &environment.webpack_config {\n+                target.webpack_config = Some(webpack_config.clone());\n             }\n+            if let Some(target_text) = &mut target.text.clone() {\n+                if let Some(env_text) = environment.text.clone() {\n+                    target_text.extend(env_text);\n+                    let new_text = target_text.clone();\n+                    target.text.replace(new_text);\n+                }\n+            }\n+\n             // don't inherit kv namespaces because it is an anti-pattern to use the same namespaces across multiple environments\n             target.kv_namespaces = environment.kv_namespaces.clone();\n         }\ndiff --git a/src/settings/toml/target.rs b/src/settings/toml/target.rs\n--- a/src/settings/toml/target.rs\n+++ b/src/settings/toml/target.rs\n@@ -2,6 +2,7 @@ use super::kv_namespace::KvNamespace;\n use super::site::Site;\n use super::target_type::TargetType;\n \n+use std::collections::HashMap;\n use std::env;\n \n use std::path::PathBuf;\ndiff --git a/src/settings/toml/target.rs b/src/settings/toml/target.rs\n--- a/src/settings/toml/target.rs\n+++ b/src/settings/toml/target.rs\n@@ -18,6 +19,7 @@ pub struct Target {\n     pub target_type: TargetType,\n     pub webpack_config: Option<String>,\n     pub site: Option<Site>,\n+    pub text: Option<HashMap<String, String>>,\n }\n \n impl Target {\n",
        "test_patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -4,2842 +4,2913 @@\n name = \"adler32\"\n version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5d2e7343e7fc9de883d1b0341e0b13970f764c14101234857d2ddafa1cb1cac2\"\n \n [[package]]\n name = \"aho-corasick\"\n version = \"0.7.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"743ad5a418686aad3b87fd14c43badd828cf26e214a00f92a384291cf22e1811\"\n dependencies = [\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr\",\n ]\n \n [[package]]\n name = \"ansi_term\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n dependencies = [\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"anyhow\"\n version = \"1.0.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7825f6833612eb2414095684fcf6c635becf3ce97fe48cf6421321e93bfbd53c\"\n \n [[package]]\n name = \"arc-swap\"\n version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d7b8a9123b8027467bce0099fe556c628a53c8d83df0507084c31e9ba2e39aff\"\n \n [[package]]\n name = \"arrayref\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a4c527152e37cf757a3f78aae5a06fbeefdb07ccc535c980a3208ee3060dd544\"\n+\n+[[package]]\n+name = \"arrayvec\"\n+version = \"0.4.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cd9fd44efafa8690358b7408d253adf110036b88f55672a933f01d616ad9b1b9\"\n+dependencies = [\n+ \"nodrop\",\n+]\n \n [[package]]\n name = \"arrayvec\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cff77d8686867eceff3105329d4698d96c2391c176d5d03adc90c7389162b5b8\"\n \n [[package]]\n name = \"assert_cmd\"\n version = \"0.11.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2dc477793bd82ec39799b6f6b3df64938532fdf2ab0d49ef817eac65856a5a1e\"\n dependencies = [\n- \"escargot 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"predicates 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"predicates-core 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"predicates-tree 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"escargot\",\n+ \"predicates\",\n+ \"predicates-core\",\n+ \"predicates-tree\",\n ]\n \n [[package]]\n name = \"async-trait\"\n version = \"0.1.24\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"750b1c38a1dfadd108da0f01c08f4cdc7ff1bb39b325f9c82cc972361780a6e1\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n name = \"atty\"\n version = \"0.2.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\n dependencies = [\n- \"hermit-abi 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hermit-abi\",\n+ \"libc\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"autocfg\"\n version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\"\n \n [[package]]\n name = \"autocfg\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.43\"\n+version = \"0.3.44\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e4036b9bf40f3cf16aba72a3d65e8a520fc4bafcdc7079aea8f848c58c5b5536\"\n dependencies = [\n- \"backtrace-sys 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace-sys\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"rustc-demangle\",\n ]\n \n [[package]]\n name = \"backtrace-sys\"\n version = \"0.1.32\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5d6575f128516de27e3ce99689419835fce9643a9b215a14d2b5b685be018491\"\n dependencies = [\n- \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"base64\"\n version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e\"\n dependencies = [\n- \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder\",\n ]\n \n [[package]]\n name = \"base64\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b41b7ea54a0c9d92199de89e20e58d49f02f8e699814ef3fdf266f6f748d15c7\"\n \n [[package]]\n name = \"binary-install\"\n version = \"0.0.3-alpha\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a81dda17f2dbba8271cf61f2ea3e48e3da8aef31665731bce48818cc07863f06\"\n dependencies = [\n- \"curl 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"is_executable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tar 0.4.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"zip 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl\",\n+ \"dirs 1.0.5\",\n+ \"failure\",\n+ \"flate2\",\n+ \"fs2\",\n+ \"hex\",\n+ \"is_executable\",\n+ \"siphasher\",\n+ \"tar\",\n+ \"zip\",\n ]\n \n [[package]]\n name = \"bitflags\"\n version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n \n [[package]]\n name = \"blake2b_simd\"\n version = \"0.5.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d8fb2d74254a3a0b5cac33ac9f8ed0e44aa50378d9dbb2e5d83bd21ed1dc2c8a\"\n dependencies = [\n- \"arrayref 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"arrayvec 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"constant_time_eq 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"arrayref\",\n+ \"arrayvec 0.5.1\",\n+ \"constant_time_eq\",\n ]\n \n [[package]]\n name = \"block-buffer\"\n version = \"0.7.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b\"\n dependencies = [\n- \"block-padding 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"generic-array 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"block-padding\",\n+ \"byte-tools\",\n+ \"byteorder\",\n+ \"generic-array\",\n ]\n \n [[package]]\n name = \"block-padding\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5\"\n dependencies = [\n- \"byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byte-tools\",\n ]\n \n [[package]]\n name = \"bstr\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"502ae1441a0a5adb8fbd38a5955a6416b9493e92b465de5e4a9bde6a539c2c48\"\n dependencies = [\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex-automata 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static\",\n+ \"memchr\",\n+ \"regex-automata\",\n+ \"serde 1.0.104\",\n ]\n \n [[package]]\n name = \"bumpalo\"\n version = \"3.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1f359dc14ff8911330a51ef78022d376f25ed00248912803b58f00cb1c27f742\"\n \n [[package]]\n name = \"byte-tools\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7\"\n \n [[package]]\n name = \"byteorder\"\n version = \"1.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de\"\n \n [[package]]\n name = \"bytes\"\n version = \"0.4.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"206fdffcfa2df7cbe15601ef46c813fce0965eb3286db6b56c583b814b51c81c\"\n dependencies = [\n- \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder\",\n+ \"iovec\",\n ]\n \n [[package]]\n name = \"bytes\"\n version = \"0.5.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"130aac562c0dd69c56b3b1cc8ffd2e17be31d0b6c25b61c96b76231aa23e39e1\"\n \n [[package]]\n name = \"bzip2\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"42b7c3cbf0fa9c1b82308d57191728ca0256cb821220f4e2fd410a72ade26e3b\"\n dependencies = [\n- \"bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bzip2-sys\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"bzip2-sys\"\n version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6584aa36f5ad4c9247f5323b0a42f37802b37a836f0ad87084d7a33961abe25f\"\n dependencies = [\n- \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"c2-chacha\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"214238caa1bf3a496ec3392968969cab8549f96ff30652c9e56885329315f6bb\"\n dependencies = [\n- \"ppv-lite86 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ppv-lite86\",\n ]\n \n [[package]]\n name = \"cc\"\n version = \"1.0.50\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"95e28fa049fda1c330bcf9d723be7663a899c4679724b34c81e9f5a326aab8cd\"\n \n [[package]]\n name = \"cfg-if\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n [[package]]\n name = \"chrome-devtools-rs\"\n version = \"0.0.0-alpha.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"dee9b8a1ad6b2382a01aad9f17b381544b2396173abac19c38ac7e8f0087d752\"\n dependencies = [\n- \"console 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"console\",\n+ \"log 0.4.8\",\n+ \"serde 1.0.104\",\n+ \"serde_json\",\n ]\n \n [[package]]\n name = \"chrono\"\n version = \"0.4.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"31850b4a4d6bae316f7a09e691c944c28299298837edc0a03f755618c23cbc01\"\n dependencies = [\n- \"num-integer 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-integer\",\n+ \"num-traits 0.2.11\",\n+ \"serde 1.0.104\",\n+ \"time\",\n ]\n \n [[package]]\n name = \"clap\"\n version = \"2.33.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n dependencies = [\n- \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ansi_term\",\n+ \"atty\",\n+ \"bitflags\",\n+ \"strsim\",\n+ \"textwrap\",\n+ \"unicode-width\",\n+ \"vec_map\",\n ]\n \n [[package]]\n name = \"clicolors-control\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n dependencies = [\n- \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty\",\n+ \"lazy_static\",\n+ \"libc\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"cloudabi\"\n version = \"0.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n dependencies = [\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags\",\n ]\n \n [[package]]\n name = \"cloudflare\"\n version = \"0.6.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0ce60d3492dc5dd86054ac002eed08580cb509bc4f23121f20081aec964302b8\"\n dependencies = [\n- \"async-trait 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"reqwest 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_with 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-term 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"sloggers 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"async-trait\",\n+ \"chrono\",\n+ \"failure\",\n+ \"http\",\n+ \"percent-encoding 1.0.1\",\n+ \"reqwest\",\n+ \"serde 1.0.104\",\n+ \"serde_json\",\n+ \"serde_qs\",\n+ \"serde_with\",\n+ \"slog\",\n+ \"slog-term\",\n+ \"sloggers\",\n+ \"url\",\n ]\n \n [[package]]\n name = \"config\"\n-version = \"0.9.3\"\n+version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"19b076e143e1d9538dde65da30f8481c2a6c44040edb8e02b9bf1351edb92ce3\"\n dependencies = [\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rust-ini 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static\",\n+ \"nom 5.1.0\",\n+ \"rust-ini\",\n+ \"serde 1.0.104\",\n+ \"serde-hjson\",\n+ \"serde_json\",\n+ \"toml\",\n+ \"yaml-rust\",\n ]\n \n [[package]]\n name = \"console\"\n version = \"0.9.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"45e0f3986890b3acbc782009e2629dfe2baa430ac091519ce3be26164a2ae6c0\"\n dependencies = [\n- \"clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clicolors-control\",\n+ \"encode_unicode\",\n+ \"lazy_static\",\n+ \"libc\",\n+ \"regex\",\n+ \"termios\",\n+ \"unicode-width\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"constant_time_eq\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"245097e9a4535ee1e3e3931fcfcd55a796a44c643e8596ff6566d68f09b87bbc\"\n \n [[package]]\n name = \"core-foundation\"\n version = \"0.6.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"25b9e03f145fd4f2bf705e07b900cd41fc636598fe5dc452fd0db1441c3f496d\"\n dependencies = [\n- \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core-foundation-sys\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"core-foundation-sys\"\n version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b\"\n \n [[package]]\n name = \"crc32fast\"\n version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n ]\n \n [[package]]\n name = \"crossbeam\"\n version = \"0.2.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bd66663db5a988098a89599d4857919b3acf7f61402e61365acfd3919857b9be\"\n \n [[package]]\n name = \"crossbeam-channel\"\n version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c8ec7fcd21571dc78f96cc96243cab8d8f035247c3efd16c687be154c3fa9efa\"\n dependencies = [\n- \"crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-utils 0.6.6\",\n ]\n \n [[package]]\n name = \"crossbeam-channel\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"acec9a3b0b3559f15aee4f90746c4e5e293b701c0f7d3925d24e01645267b68c\"\n dependencies = [\n- \"crossbeam-utils 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-utils 0.7.0\",\n ]\n \n [[package]]\n name = \"crossbeam-utils\"\n version = \"0.6.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"04973fa96e96579258a5091af6003abde64af786b860f18622b82e026cca60e6\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"lazy_static\",\n ]\n \n [[package]]\n name = \"crossbeam-utils\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ce446db02cdc3165b94ae73111e570793400d0794e46125cc4056c81cbb039f4\"\n dependencies = [\n- \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.7\",\n+ \"cfg-if\",\n+ \"lazy_static\",\n ]\n \n [[package]]\n name = \"csv\"\n version = \"1.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"00affe7f6ab566df61b4be3ce8cf16bc2576bca0963ceb0955e45d514bf9a279\"\n dependencies = [\n- \"bstr 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"csv-core 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ryu 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bstr\",\n+ \"csv-core\",\n+ \"itoa\",\n+ \"ryu\",\n+ \"serde 1.0.104\",\n ]\n \n [[package]]\n name = \"csv-core\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9b5cadb6b25c77aeff80ba701712494213f4a8418fcda2ee11b6560c3ad0bf4c\"\n dependencies = [\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr\",\n ]\n \n [[package]]\n name = \"curl\"\n version = \"0.4.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"06aa71e9208a54def20792d877bc663d6aae0732b9852e612c4a933177c31283\"\n dependencies = [\n- \"curl-sys 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"schannel 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"socket2 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl-sys\",\n+ \"libc\",\n+ \"openssl-probe\",\n+ \"openssl-sys\",\n+ \"schannel\",\n+ \"socket2\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"curl-sys\"\n version = \"0.4.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0c38ca47d60b86d0cc9d42caa90a0885669c2abc9791f871c81f58cdf39e979b\"\n dependencies = [\n- \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"vcpkg 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc\",\n+ \"libc\",\n+ \"libz-sys\",\n+ \"openssl-sys\",\n+ \"pkg-config\",\n+ \"vcpkg\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"data-encoding\"\n version = \"2.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f4f47ca1860a761136924ddd2422ba77b2ea54fe8cc75b9040804a0d9d32ad97\"\n \n [[package]]\n name = \"difference\"\n version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \n [[package]]\n name = \"digest\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\n dependencies = [\n- \"generic-array 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"generic-array\",\n ]\n \n [[package]]\n name = \"dirs\"\n version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_users 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n+ \"redox_users\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"dirs\"\n version = \"2.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"13aea89a5c93364a98e9b37b2fa237effbb694d5cfe01c5b70941f7eb087d5e3\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"dirs-sys 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"dirs-sys\",\n ]\n \n [[package]]\n name = \"dirs-sys\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"afa0b23de8fd801745c471deffa6e12d248f962c9fd4b4c33787b055599bde7b\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_users 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"redox_users\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"dtoa\"\n version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4358a9e11b9a09cf52383b451b49a169e8d797b68aa02301ff586d70d9661ea3\"\n \n [[package]]\n name = \"encode_unicode\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n \n [[package]]\n name = \"encoding_rs\"\n version = \"0.8.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cd8d03faa7fe0c1431609dfad7bbe827af30f82e1e2ae6f7ee4fca6bd764bc28\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n ]\n \n [[package]]\n name = \"env_logger\"\n version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\n dependencies = [\n- \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"humantime 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termcolor 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty\",\n+ \"humantime\",\n+ \"log 0.4.8\",\n+ \"regex\",\n+ \"termcolor\",\n ]\n \n [[package]]\n name = \"error-chain\"\n version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3ab49e9dcb602294bc42f9a7dfc9bc6e936fca4418ea300dbfb84fe16de0b7d9\"\n dependencies = [\n- \"backtrace 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace\",\n+ \"version_check 0.1.5\",\n ]\n \n [[package]]\n name = \"escargot\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ceb9adbf9874d5d028b5e4c5739d22b71988252b25c9c98fe7cf9738bee84597\"\n dependencies = [\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static\",\n+ \"log 0.4.8\",\n+ \"serde 1.0.104\",\n+ \"serde_json\",\n ]\n \n [[package]]\n name = \"exitfailure\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2ff5bd832af37f366c6c194d813a11cd90ac484f124f079294f28e357ae40515\"\n dependencies = [\n- \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure\",\n ]\n \n [[package]]\n name = \"failure\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f8273f13c977665c5db7eb2b99ae520952fe5ac831ae4cd09d80c4c7042b5ed9\"\n dependencies = [\n- \"backtrace 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure_derive 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace\",\n+ \"failure_derive\",\n ]\n \n [[package]]\n name = \"failure_derive\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0bc225b78e0391e4b8683440bf2e63c2deeeb2ce5189eab46e2b68c6d3725d08\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"synstructure 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"synstructure\",\n ]\n \n [[package]]\n name = \"fake-simd\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n \n [[package]]\n name = \"filetime\"\n version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1ff6d4dab0aa0c8e6346d46052e93b13a16cf847b54ed357087c35011048cc7d\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"redox_syscall\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"flate2\"\n version = \"1.0.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6bd6d6f4752952feb71363cffc9ebac9411b75b87c6ab6058c40c8900cf43c0f\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"miniz_oxide 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"crc32fast\",\n+ \"libc\",\n+ \"miniz_oxide\",\n+]\n+\n+[[package]]\n+name = \"float-cmp\"\n+version = \"0.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"75224bec9bfe1a65e2d34132933f2de7fe79900c96a0174307554244ece8150e\"\n+dependencies = [\n+ \"num-traits 0.2.11\",\n ]\n \n [[package]]\n name = \"fnv\"\n version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \n [[package]]\n name = \"foreign-types\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\n dependencies = [\n- \"foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"foreign-types-shared\",\n ]\n \n [[package]]\n name = \"foreign-types-shared\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n \n [[package]]\n name = \"fs2\"\n version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"fs_extra\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5f2a4a2034423744d2cc7ca2068453168dcdb82c438419e639a26bd87839c674\"\n \n [[package]]\n name = \"fsevent\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5ab7d1bd1bd33cc98b0889831b72da23c0aa4df9cec7e0702f46ecea04b35db6\"\n dependencies = [\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fsevent-sys 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags\",\n+ \"fsevent-sys\",\n ]\n \n [[package]]\n name = \"fsevent-sys\"\n version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f41b048a94555da0f42f1d632e2e19510084fb8e303b0daa2816e733fb3644a0\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"fuchsia-cprng\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n \n [[package]]\n name = \"fuchsia-zircon\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n dependencies = [\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags\",\n+ \"fuchsia-zircon-sys\",\n ]\n \n [[package]]\n name = \"fuchsia-zircon-sys\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n \n [[package]]\n name = \"futures\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5c329ae8753502fb44ae4fc2b622fa2a94652c41e795143765ba0927f92ab780\"\n dependencies = [\n- \"futures-channel 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-executor 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-io 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-sink 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-task 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-channel\",\n+ \"futures-core\",\n+ \"futures-executor\",\n+ \"futures-io\",\n+ \"futures-sink\",\n+ \"futures-task\",\n+ \"futures-util\",\n ]\n \n [[package]]\n name = \"futures-channel\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f0c77d04ce8edd9cb903932b608268b3fffec4163dc053b3b402bf47eac1f1a8\"\n dependencies = [\n- \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-sink 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-core\",\n+ \"futures-sink\",\n ]\n \n [[package]]\n name = \"futures-core\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f25592f769825e89b92358db00d26f965761e094951ac44d3663ef25b7ac464a\"\n \n [[package]]\n name = \"futures-executor\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f674f3e1bcb15b37284a90cedf55afdba482ab061c407a9c0ebbd0f3109741ba\"\n dependencies = [\n- \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-task 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-core\",\n+ \"futures-task\",\n+ \"futures-util\",\n ]\n \n [[package]]\n name = \"futures-io\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a638959aa96152c7a4cddf50fcb1e3fede0583b27157c26e67d6f99904090dc6\"\n \n [[package]]\n name = \"futures-macro\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9a5081aa3de1f7542a794a397cde100ed903b0630152d0973479018fd85423a7\"\n dependencies = [\n- \"proc-macro-hack 0.5.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro-hack\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n name = \"futures-sink\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3466821b4bc114d95b087b850a724c6f83115e929bc88f1fa98a3304a944c8a6\"\n \n [[package]]\n name = \"futures-task\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b0a34e53cf6cdcd0178aa573aed466b646eb3db769570841fda0c7ede375a27\"\n \n [[package]]\n name = \"futures-util\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"22766cf25d64306bedf0384da004d05c9974ab104fcc4528f1236181c18004c5\"\n dependencies = [\n- \"futures-channel 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-io 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-macro 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-sink 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-task 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pin-utils 0.1.0-alpha.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc-macro-hack 0.5.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc-macro-nested 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures-channel\",\n+ \"futures-core\",\n+ \"futures-io\",\n+ \"futures-macro\",\n+ \"futures-sink\",\n+ \"futures-task\",\n+ \"memchr\",\n+ \"pin-utils\",\n+ \"proc-macro-hack\",\n+ \"proc-macro-nested\",\n+ \"slab\",\n ]\n \n [[package]]\n name = \"generic-array\"\n version = \"0.12.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec\"\n dependencies = [\n- \"typenum 1.11.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"typenum\",\n ]\n \n [[package]]\n name = \"getrandom\"\n version = \"0.1.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasi 0.9.0+wasi-snapshot-preview1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"wasi\",\n ]\n \n [[package]]\n name = \"globset\"\n version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"925aa2cac82d8834e2b2a4415b6f6879757fb5c0928fc445ae76461a12eed8f2\"\n dependencies = [\n- \"aho-corasick 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bstr 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"aho-corasick\",\n+ \"bstr\",\n+ \"fnv\",\n+ \"log 0.4.8\",\n+ \"regex\",\n ]\n \n [[package]]\n name = \"h2\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b9433d71e471c1736fd5a61b671fc0b148d7a2992f666c958d03cd8feb3b88d1\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-sink 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"indexmap 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-util 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"fnv\",\n+ \"futures-core\",\n+ \"futures-sink\",\n+ \"futures-util\",\n+ \"http\",\n+ \"indexmap\",\n+ \"log 0.4.8\",\n+ \"slab\",\n+ \"tokio\",\n+ \"tokio-util\",\n ]\n \n [[package]]\n name = \"heck\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n dependencies = [\n- \"unicode-segmentation 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation\",\n ]\n \n [[package]]\n name = \"hermit-abi\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eff2656d88f158ce120947499e971d743c05dbcbed62e5bd2f38f1698bbc3772\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"hex\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n \n [[package]]\n name = \"http\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b708cc7f06493459026f53b9a61a7a121a5d1ec6238dee58ea4941132b30156b\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"fnv\",\n+ \"itoa\",\n ]\n \n [[package]]\n name = \"http-body\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"13d5ff830006f7646652e057693569bfe0d51760c0085a071769d142a205111b\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"http\",\n ]\n \n [[package]]\n name = \"httparse\"\n version = \"1.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cd179ae861f0c2e53da70d892f5f3029f9594be0c41dc5269cd371691b1dc2f9\"\n \n [[package]]\n name = \"humantime\"\n version = \"1.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\n dependencies = [\n- \"quick-error 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quick-error\",\n ]\n \n [[package]]\n name = \"hyper\"\n version = \"0.13.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fa1c527bbc634be72aa7ba31e4e4def9bbb020f5416916279b7c705cd838893e\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-channel 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"h2 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http-body 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"httparse 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pin-project 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tower-service 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"want 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"futures-channel\",\n+ \"futures-core\",\n+ \"futures-util\",\n+ \"h2\",\n+ \"http\",\n+ \"http-body\",\n+ \"httparse\",\n+ \"itoa\",\n+ \"log 0.4.8\",\n+ \"net2\",\n+ \"pin-project\",\n+ \"time\",\n+ \"tokio\",\n+ \"tower-service\",\n+ \"want\",\n ]\n \n [[package]]\n name = \"hyper-tls\"\n version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3adcd308402b9553630734e9c36b77a7e48b3821251ca2493e8cd596763aafaa\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-tls 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"hyper\",\n+ \"native-tls\",\n+ \"tokio\",\n+ \"tokio-tls\",\n ]\n \n [[package]]\n name = \"idna\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\n dependencies = [\n- \"matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-normalization 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches\",\n+ \"unicode-bidi\",\n+ \"unicode-normalization\",\n ]\n \n [[package]]\n name = \"ignore\"\n version = \"0.4.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"522daefc3b69036f80c7d2990b28ff9e0471c683bad05ca258e0a01dd22c5a1e\"\n dependencies = [\n- \"crossbeam-channel 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"same-file 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"walkdir 2.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-channel 0.4.0\",\n+ \"globset\",\n+ \"lazy_static\",\n+ \"log 0.4.8\",\n+ \"memchr\",\n+ \"regex\",\n+ \"same-file\",\n+ \"thread_local\",\n+ \"walkdir\",\n+ \"winapi-util\",\n ]\n \n [[package]]\n name = \"indexmap\"\n version = \"1.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"076f042c5b7b98f31d205f1249267e12a6518c1481e9dae9764af19b707d2292\"\n dependencies = [\n- \"autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 1.0.0\",\n ]\n \n [[package]]\n name = \"indicatif\"\n version = \"0.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8572bccfb0665e70b7faf44ee28841b8e0823450cd4ad562a76b5a3c4bf48487\"\n dependencies = [\n- \"console 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"console\",\n+ \"lazy_static\",\n+ \"number_prefix\",\n+ \"regex\",\n ]\n \n [[package]]\n name = \"inotify\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"24e40d6fd5d64e2082e0c796495c8ef5ad667a96d03e5aaa0becfd9d47bcbfb8\"\n dependencies = [\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"inotify-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags\",\n+ \"inotify-sys\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"inotify-sys\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e74a1aa87c59aeff6ef2cc2fa62d41bc43f54952f55652656b18a02fd5e356c0\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"input_buffer\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"19a8a95243d5a0398cae618ec29477c6e3cb631152be5c19481f80bc71559754\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n ]\n \n [[package]]\n name = \"iovec\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b2b3ea6ff95e175473f8ffe6a7eb7c00d054240321b84c57051175fe3c1e075e\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"is_executable\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"302d553b8abc8187beb7d663e34c065ac4570b273bc9511a50e940e99409c577\"\n dependencies = [\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"itoa\"\n version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b8b7a7c0c47db5545ed3fef7468ee7bb5b74691498139e4b3f6a20685dc6dd8e\"\n \n [[package]]\n name = \"js-sys\"\n version = \"0.3.35\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7889c7c36282151f6bf465be4700359318aef36baa951462382eae49e9577cf9\"\n dependencies = [\n- \"wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"wasm-bindgen\",\n ]\n \n [[package]]\n name = \"kernel32-sys\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8\",\n+ \"winapi-build\",\n ]\n \n-[[package]]\n-name = \"lazy_static\"\n-version = \"0.2.11\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"lazy_static\"\n version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \n [[package]]\n name = \"lazycell\"\n version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b294d6fa9ee409a054354afc4352b0b9ef7ca222c69b8812cbea9e7d2bf3783f\"\n+\n+[[package]]\n+name = \"lexical-core\"\n+version = \"0.4.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2304bccb228c4b020f3a4835d247df0a02a7c4686098d4167762cfbbe4c5cb14\"\n+dependencies = [\n+ \"arrayvec 0.4.12\",\n+ \"cfg-if\",\n+ \"rustc_version\",\n+ \"ryu\",\n+ \"static_assertions\",\n+]\n \n [[package]]\n name = \"libc\"\n version = \"0.2.66\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d515b1f41455adea1313a4a2ac8a8a477634fbae63cc6100e3aebb207ce61558\"\n \n [[package]]\n name = \"libflate\"\n version = \"0.1.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d9135df43b1f5d0e333385cb6e7897ecd1a43d7d11b91ac003f4d2c2d2401fdd\"\n dependencies = [\n- \"adler32 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rle-decode-fast 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"adler32\",\n+ \"crc32fast\",\n+ \"rle-decode-fast\",\n+ \"take_mut\",\n ]\n \n [[package]]\n name = \"libz-sys\"\n version = \"1.0.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2eb5e43362e38e2bca2fd5f5134c4d4564a23a5c28e9b95411652021a8675ebe\"\n dependencies = [\n- \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"vcpkg 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc\",\n+ \"libc\",\n+ \"pkg-config\",\n+ \"vcpkg\",\n ]\n \n [[package]]\n name = \"linked-hash-map\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6d262045c5b87c0861b3f004610afd0e2c851e2908d08b6c870cbb9d5f494ecd\"\n dependencies = [\n- \"serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_test 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.8.23\",\n+ \"serde_test\",\n ]\n \n [[package]]\n name = \"linked-hash-map\"\n version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\n \n [[package]]\n name = \"log\"\n version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n dependencies = [\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8\",\n ]\n \n [[package]]\n name = \"log\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n ]\n \n [[package]]\n name = \"matches\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n \n [[package]]\n name = \"memchr\"\n version = \"2.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3197e20c7edb283f87c071ddfc7a2cca8f8e0b888c242959846a6fce03c72223\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"mime\"\n version = \"0.3.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d\"\n \n [[package]]\n name = \"mime_guess\"\n version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1a0ed03949aef72dbdf3116a383d7b38b4768e6f960528cd6a6044aa9ed68599\"\n dependencies = [\n- \"mime 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicase 2.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mime\",\n+ \"unicase\",\n ]\n \n [[package]]\n name = \"miniz_oxide\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"aa679ff6578b1cddee93d7e82e263b94a575e0bfced07284eb0c037c1d2416a5\"\n dependencies = [\n- \"adler32 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"adler32\",\n ]\n \n [[package]]\n name = \"mio\"\n version = \"0.6.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"302dec22bcf6bae6dfb69c647187f4b4d0fb6f535521f7bc022430ce8e12008f\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"fuchsia-zircon\",\n+ \"fuchsia-zircon-sys\",\n+ \"iovec\",\n+ \"kernel32-sys\",\n+ \"libc\",\n+ \"log 0.4.8\",\n+ \"miow\",\n+ \"net2\",\n+ \"slab\",\n+ \"winapi 0.2.8\",\n ]\n \n [[package]]\n name = \"mio-extras\"\n version = \"2.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"52403fe290012ce777c4626790c8951324a2b9e3316b3143779c72b029742f19\"\n dependencies = [\n- \"lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazycell\",\n+ \"log 0.4.8\",\n+ \"mio\",\n+ \"slab\",\n ]\n \n [[package]]\n name = \"mio-uds\"\n version = \"0.6.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"966257a94e196b11bb43aca423754d87429960a768de9414f3691d6957abf125\"\n dependencies = [\n- \"iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"iovec\",\n+ \"libc\",\n+ \"mio\",\n ]\n \n [[package]]\n name = \"miow\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\n dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys\",\n+ \"net2\",\n+ \"winapi 0.2.8\",\n+ \"ws2_32-sys\",\n ]\n \n [[package]]\n name = \"native-tls\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4b2df1a4c22fd44a62147fd8f13dd0f95c9d8ca7b2610299b2a2f9cf8964274e\"\n dependencies = [\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl 0.10.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"schannel 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"security-framework 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"security-framework-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static\",\n+ \"libc\",\n+ \"log 0.4.8\",\n+ \"openssl\",\n+ \"openssl-probe\",\n+ \"openssl-sys\",\n+ \"schannel\",\n+ \"security-framework\",\n+ \"security-framework-sys\",\n+ \"tempfile\",\n ]\n \n [[package]]\n name = \"net2\"\n version = \"0.2.33\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"42550d9fb7b6684a6d404d9fa7250c2eb2646df731d1c06afc06dcee9e1bcf88\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"winapi 0.3.8\",\n ]\n \n+[[package]]\n+name = \"nodrop\"\n+version = \"0.1.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"72ef4a56884ca558e5ddb05a1d1e7e1bfd9a68d9ed024c21704cc98872dae1bb\"\n+\n [[package]]\n name = \"nom\"\n version = \"4.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2ad2a91a8e869eeb30b9cb3119ae87773a8f4ae617f41b1eb9c154b2905f7bd6\"\n+dependencies = [\n+ \"memchr\",\n+ \"version_check 0.1.5\",\n+]\n+\n+[[package]]\n+name = \"nom\"\n+version = \"5.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c433f4d505fe6ce7ff78523d2fa13a0b9f2690e181fc26168bcbe5ccc5d14e07\"\n dependencies = [\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lexical-core\",\n+ \"memchr\",\n+ \"version_check 0.1.5\",\n ]\n \n+[[package]]\n+name = \"normalize-line-endings\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2e0a1a39eab95caf4f5556da9289b9e68f0aafac901b2ce80daaf020d3b733a8\"\n+\n [[package]]\n name = \"notify\"\n version = \"4.0.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"80ae4a7688d1fab81c5bf19c64fc8db920be8d519ce6336ed4e7efe024724dbd\"\n dependencies = [\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"filetime 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fsevent 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fsevent-sys 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"inotify 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio-extras 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"walkdir 2.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags\",\n+ \"filetime\",\n+ \"fsevent\",\n+ \"fsevent-sys\",\n+ \"inotify\",\n+ \"libc\",\n+ \"mio\",\n+ \"mio-extras\",\n+ \"walkdir\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"num-integer\"\n version = \"0.1.42\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3f6ea62e9d81a77cd3ee9a2a5b9b609447857f3d358704331e4ef39eb247fcba\"\n dependencies = [\n- \"autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 1.0.0\",\n+ \"num-traits 0.2.11\",\n ]\n \n [[package]]\n name = \"num-traits\"\n version = \"0.1.43\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"92e5113e9fd4cc14ded8e499429f396a20f98c772a47cc8622a736e1ec843c31\"\n dependencies = [\n- \"num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.2.11\",\n ]\n \n [[package]]\n name = \"num-traits\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c62be47e61d1842b9170f0fdeec8eba98e60e90e5446449a0545e5152acd7096\"\n dependencies = [\n- \"autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 1.0.0\",\n ]\n \n [[package]]\n name = \"num_cpus\"\n version = \"1.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"46203554f085ff89c235cd12f7075f3233af9b11ed7c9e16dfe2560d03313ce6\"\n dependencies = [\n- \"hermit-abi 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hermit-abi\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"number_prefix\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"17b02fc0ff9a9e4b35b3342880f48e896ebf69f2967921fe8646bf5b7125956a\"\n \n [[package]]\n name = \"opaque-debug\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n \n [[package]]\n name = \"openssl\"\n version = \"0.10.28\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"973293749822d7dd6370d6da1e523b0d1db19f06c459134c658b2a4261378b52\"\n dependencies = [\n- \"bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags\",\n+ \"cfg-if\",\n+ \"foreign-types\",\n+ \"lazy_static\",\n+ \"libc\",\n+ \"openssl-sys\",\n ]\n \n [[package]]\n name = \"openssl-probe\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\n \n [[package]]\n name = \"openssl-src\"\n version = \"111.6.1+1.1.1d\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c91b04cb43c1a8a90e934e0cd612e2a5715d976d2d6cff4490278a0cddf35005\"\n dependencies = [\n- \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc\",\n ]\n \n [[package]]\n name = \"openssl-sys\"\n version = \"0.9.54\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1024c0a59774200a555087a6da3f253a9095a5f344e353b212ac4c8b8e450986\"\n dependencies = [\n- \"autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-src 111.6.1+1.1.1d (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"vcpkg 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 1.0.0\",\n+ \"cc\",\n+ \"libc\",\n+ \"openssl-src\",\n+ \"pkg-config\",\n+ \"vcpkg\",\n ]\n \n [[package]]\n name = \"percent-encoding\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \n [[package]]\n name = \"percent-encoding\"\n version = \"2.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n \n [[package]]\n name = \"pin-project\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7804a463a8d9572f13453c516a5faea534a2403d7ced2f0c7e100eeff072772c\"\n dependencies = [\n- \"pin-project-internal 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pin-project-internal\",\n ]\n \n [[package]]\n name = \"pin-project-internal\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"385322a45f2ecf3410c68d2a549a4a2685e8051d0f278e39743ff4e451cb9b3f\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n name = \"pin-project-lite\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"237844750cfbb86f67afe27eee600dfbbcb6188d734139b534cbfbf4f96792ae\"\n \n [[package]]\n name = \"pin-utils\"\n version = \"0.1.0-alpha.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5894c618ce612a3fa23881b152b608bafb8c56cfc22f434a3ba3120b40f7b587\"\n \n [[package]]\n name = \"pkg-config\"\n version = \"0.3.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"05da548ad6865900e60eaba7f589cc0783590a92e940c26953ff81ddbab2d677\"\n \n [[package]]\n name = \"podio\"\n version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"780fb4b6698bbf9cf2444ea5d22411cef2953f0824b98f33cf454ec5615645bd\"\n \n [[package]]\n name = \"ppv-lite86\"\n version = \"0.2.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"74490b50b9fbe561ac330df47c08f3f33073d2d00c150f719147d7c54522fa1b\"\n \n [[package]]\n name = \"predicates\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a9bfe52247e5cc9b2f943682a85a5549fb9662245caf094504e69a2f03fe64d4\"\n dependencies = [\n- \"difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"predicates-core 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"difference\",\n+ \"float-cmp\",\n+ \"normalize-line-endings\",\n+ \"predicates-core\",\n+ \"regex\",\n ]\n \n [[package]]\n name = \"predicates-core\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"06075c3a3e92559ff8929e7a280684489ea27fe44805174c3ebd9328dcb37178\"\n \n [[package]]\n name = \"predicates-tree\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8e63c4859013b38a76eca2414c64911fba30def9e3202ac461a2d22831220124\"\n dependencies = [\n- \"predicates-core 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"treeline 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"predicates-core\",\n+ \"treeline\",\n ]\n \n [[package]]\n name = \"prettytable-rs\"\n version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0fd04b170004fa2daccf418a7f8253aaf033c27760b5f225889024cf66d7ac2e\"\n dependencies = [\n- \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"csv 1.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty\",\n+ \"csv\",\n+ \"encode_unicode\",\n+ \"lazy_static\",\n+ \"term 0.5.2\",\n+ \"unicode-width\",\n ]\n \n [[package]]\n name = \"proc-macro-hack\"\n version = \"0.5.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ecd45702f76d6d3c75a80564378ae228a85f0b59d2f3ed43c91b4a69eb2ebfc5\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n name = \"proc-macro-nested\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"369a6ed065f249a159e06c45752c780bda2fb53c995718f9e484d08daa9eb42e\"\n \n [[package]]\n name = \"proc-macro2\"\n version = \"1.0.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3acb317c6ff86a4e579dfa00fc5e6cca91ecbb4e7eb2df0468805b674eb88548\"\n dependencies = [\n- \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid\",\n ]\n \n [[package]]\n name = \"quick-error\"\n version = \"1.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\n \n [[package]]\n name = \"quote\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n ]\n \n [[package]]\n name = \"rand\"\n version = \"0.6.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n dependencies = [\n- \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_jitter 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_pcg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_xorshift 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.7\",\n+ \"libc\",\n+ \"rand_chacha 0.1.1\",\n+ \"rand_core 0.4.2\",\n+ \"rand_hc 0.1.0\",\n+ \"rand_isaac\",\n+ \"rand_jitter\",\n+ \"rand_os\",\n+ \"rand_pcg\",\n+ \"rand_xorshift\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"rand\"\n version = \"0.7.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\n dependencies = [\n- \"getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_chacha 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom\",\n+ \"libc\",\n+ \"rand_chacha 0.2.1\",\n+ \"rand_core 0.5.1\",\n+ \"rand_hc 0.2.0\",\n ]\n \n [[package]]\n name = \"rand_chacha\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\"\n dependencies = [\n- \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.7\",\n+ \"rand_core 0.3.1\",\n ]\n \n [[package]]\n name = \"rand_chacha\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"03a2a90da8c7523f554344f921aa97283eadf6ac484a6d2a7d0212fa7f8d6853\"\n dependencies = [\n- \"c2-chacha 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"c2-chacha\",\n+ \"rand_core 0.5.1\",\n ]\n \n [[package]]\n name = \"rand_core\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\n dependencies = [\n- \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.4.2\",\n ]\n \n [[package]]\n name = \"rand_core\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc\"\n \n [[package]]\n name = \"rand_core\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\n dependencies = [\n- \"getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom\",\n ]\n \n [[package]]\n name = \"rand_hc\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b40677c7be09ae76218dc623efbf7b18e34bced3f38883af07bb75630a21bc4\"\n dependencies = [\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.1\",\n ]\n \n [[package]]\n name = \"rand_hc\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\n dependencies = [\n- \"rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.5.1\",\n ]\n \n [[package]]\n name = \"rand_isaac\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ded997c9d5f13925be2a6fd7e66bf1872597f759fd9dd93513dd7e92e5a5ee08\"\n dependencies = [\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.1\",\n ]\n \n [[package]]\n name = \"rand_jitter\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1166d5c91dc97b88d1decc3285bb0a99ed84b05cfd0bc2341bdf2d43fc41e39b\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n+ \"rand_core 0.4.2\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"rand_os\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b75f676a1e053fc562eafbb47838d67c84801e38fc1ba459e8f180deabd5071\"\n dependencies = [\n- \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cloudabi\",\n+ \"fuchsia-cprng\",\n+ \"libc\",\n+ \"rand_core 0.4.2\",\n+ \"rdrand\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"rand_pcg\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"abf9b09b01790cfe0364f52bf32995ea3c39f4d2dd011eac241d2914146d0b44\"\n dependencies = [\n- \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.7\",\n+ \"rand_core 0.4.2\",\n ]\n \n [[package]]\n name = \"rand_xorshift\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cbf7e9e623549b0e21f6e97cf8ecf247c1a8fd2e8a992ae265314300b2455d5c\"\n dependencies = [\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.1\",\n ]\n \n [[package]]\n name = \"rdrand\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\"\n dependencies = [\n- \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.1\",\n ]\n \n [[package]]\n name = \"redox_syscall\"\n version = \"0.1.56\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2439c63f3f6139d1b57529d16bc3b8bb855230c8efcc5d3a896c8bea7c3b1e84\"\n \n [[package]]\n name = \"redox_users\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"09b23093265f8d200fa7b4c2c76297f47e681c655f6f1285a8780d6a022f7431\"\n dependencies = [\n- \"getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rust-argon2 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getrandom\",\n+ \"redox_syscall\",\n+ \"rust-argon2\",\n ]\n \n [[package]]\n name = \"regex\"\n version = \"1.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"322cf97724bea3ee221b78fe25ac9c46114ebb51747ad5babd51a2fc6a8235a8\"\n dependencies = [\n- \"aho-corasick 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex-syntax 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"aho-corasick\",\n+ \"memchr\",\n+ \"regex-syntax\",\n+ \"thread_local\",\n ]\n \n [[package]]\n name = \"regex-automata\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"92b73c2a1770c255c240eaa4ee600df1704a38dc3feaa6e949e7fcd4f8dc09f9\"\n dependencies = [\n- \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder\",\n ]\n \n [[package]]\n name = \"regex-syntax\"\n version = \"0.6.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b28dfe3fe9badec5dbf0a79a9cccad2cfc2ab5484bdb3e44cbd1ae8b3ba2be06\"\n \n [[package]]\n name = \"remove_dir_all\"\n version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e\"\n dependencies = [\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"reqwest\"\n version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"encoding_rs 0.8.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http-body 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper-tls 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"js-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mime 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mime_guess 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pin-project-lite 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_urlencoded 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-tls 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-futures 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"web-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winreg 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+checksum = \"c0e798e19e258bf6c30a304622e3e9ac820e483b06a1857a026e1f109b113fe4\"\n+dependencies = [\n+ \"base64 0.11.0\",\n+ \"bytes 0.5.4\",\n+ \"encoding_rs\",\n+ \"futures-core\",\n+ \"futures-util\",\n+ \"http\",\n+ \"http-body\",\n+ \"hyper\",\n+ \"hyper-tls\",\n+ \"js-sys\",\n+ \"lazy_static\",\n+ \"log 0.4.8\",\n+ \"mime\",\n+ \"mime_guess\",\n+ \"native-tls\",\n+ \"percent-encoding 2.1.0\",\n+ \"pin-project-lite\",\n+ \"serde 1.0.104\",\n+ \"serde_json\",\n+ \"serde_urlencoded\",\n+ \"time\",\n+ \"tokio\",\n+ \"tokio-tls\",\n+ \"url\",\n+ \"wasm-bindgen\",\n+ \"wasm-bindgen-futures\",\n+ \"web-sys\",\n+ \"winreg\",\n ]\n \n [[package]]\n name = \"rle-decode-fast\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cabe4fa914dec5870285fa7f71f602645da47c486e68486d2b4ceb4a343e90ac\"\n \n [[package]]\n name = \"rust-argon2\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2bc8af4bda8e1ff4932523b94d3dd20ee30a87232323eda55903ffd71d2fb017\"\n dependencies = [\n- \"base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"blake2b_simd 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"constant_time_eq 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crossbeam-utils 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"base64 0.11.0\",\n+ \"blake2b_simd\",\n+ \"constant_time_eq\",\n+ \"crossbeam-utils 0.7.0\",\n ]\n \n [[package]]\n name = \"rust-ini\"\n version = \"0.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3e52c148ef37f8c375d49d5a73aa70713125b7f19095948a923f80afdeb22ec2\"\n \n [[package]]\n name = \"rustc-demangle\"\n version = \"0.1.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n+\n+[[package]]\n+name = \"rustc_version\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n+dependencies = [\n+ \"semver\",\n+]\n \n [[package]]\n name = \"ryu\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bfa8506c1de11c9c4e4c38863ccbe02a305c8188e85a05a784c9e11e1c3910c8\"\n \n [[package]]\n name = \"same-file\"\n version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\n dependencies = [\n- \"winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-util\",\n ]\n \n [[package]]\n name = \"schannel\"\n version = \"0.1.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"507a9e6e8ffe0a4e0ebb9a10293e62fdf7657c06f1b8bb07a8fcf697d2abf295\"\n dependencies = [\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"security-framework\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8ef2429d7cefe5fd28bd1d2ed41c944547d4ff84776f5935b456da44593a16df\"\n dependencies = [\n- \"core-foundation 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"security-framework-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core-foundation\",\n+ \"core-foundation-sys\",\n+ \"libc\",\n+ \"security-framework-sys\",\n ]\n \n [[package]]\n name = \"security-framework-sys\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e31493fc37615debb8c5090a7aeb4a9730bc61e77ab10b9af59f1a202284f895\"\n+dependencies = [\n+ \"core-foundation-sys\",\n+]\n+\n+[[package]]\n+name = \"semver\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n dependencies = [\n- \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"semver-parser\",\n ]\n \n+[[package]]\n+name = \"semver-parser\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n+\n [[package]]\n name = \"serde\"\n version = \"0.8.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9dad3f759919b92c3068c696c15c3d17238234498bbdcc80f2c469606f948ac8\"\n \n [[package]]\n name = \"serde\"\n version = \"1.0.104\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"414115f25f818d7dfccec8ee535d76949ae78584fc4f79a6f45a904bf8ab4449\"\n dependencies = [\n- \"serde_derive 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde-hjson\"\n-version = \"0.8.2\"\n+version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6a3a4e0ea8a88553209f6cc6cfe8724ecad22e1acf372793c27d995290fe74f8\"\n dependencies = [\n- \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"linked-hash-map 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static\",\n+ \"linked-hash-map 0.3.0\",\n+ \"num-traits 0.1.43\",\n+ \"regex\",\n+ \"serde 0.8.23\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n version = \"1.0.104\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"128f9e303a5a29922045a830221b8f78ec74a5f544944f3d5984f8ec3895ef64\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n name = \"serde_json\"\n version = \"1.0.47\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"15913895b61e0be854afd32fd4163fcd2a3df34142cf2cb961b310ce694cbf90\"\n dependencies = [\n- \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ryu 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa\",\n+ \"ryu\",\n+ \"serde 1.0.104\",\n ]\n \n [[package]]\n name = \"serde_qs\"\n version = \"0.4.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"35965fa1d2413717053d67c2df1f5c3e1763fbf77200ea7e767523707bd5a0af\"\n dependencies = [\n- \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"data-encoding\",\n+ \"error-chain\",\n+ \"percent-encoding 1.0.1\",\n+ \"serde 1.0.104\",\n ]\n \n [[package]]\n name = \"serde_test\"\n version = \"0.8.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"110b3dbdf8607ec493c22d5d947753282f3bae73c0f56d322af1e8c78e4c23d5\"\n dependencies = [\n- \"serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.8.23\",\n ]\n \n [[package]]\n name = \"serde_urlencoded\"\n version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9ec5d77e2d4c73717816afac02670d5c4f534ea95ed430442cad02e7a6e32c97\"\n dependencies = [\n- \"dtoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dtoa\",\n+ \"itoa\",\n+ \"serde 1.0.104\",\n+ \"url\",\n ]\n \n [[package]]\n name = \"serde_with\"\n version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"89d3d595d64120bbbc70b7f6d5ae63298b62a3d9f373ec2f56acf5365ca8a444\"\n dependencies = [\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_with_macros 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104\",\n+ \"serde_with_macros\",\n ]\n \n [[package]]\n name = \"serde_with_macros\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4070d2c9b9d258465ad1d82aabb985b84cd9a3afa94da25ece5a9938ba5f1606\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n name = \"sha-1\"\n version = \"0.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df\"\n dependencies = [\n- \"block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"digest 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"opaque-debug 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"block-buffer\",\n+ \"digest\",\n+ \"fake-simd\",\n+ \"opaque-debug\",\n ]\n \n [[package]]\n name = \"sha2\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"27044adfd2e1f077f649f59deb9490d3941d674002f7d062870a60ebe9bd47a0\"\n dependencies = [\n- \"block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"digest 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"opaque-debug 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"block-buffer\",\n+ \"digest\",\n+ \"fake-simd\",\n+ \"opaque-debug\",\n ]\n \n [[package]]\n name = \"siphasher\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0b8de496cf83d4ed58b6be86c3a275b8602f6ffe98d3024a869e124147a9a3ac\"\n \n [[package]]\n name = \"slab\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n \n [[package]]\n name = \"slog\"\n version = \"2.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1cc9c640a4adbfbcc11ffb95efe5aa7af7309e002adab54b185507dbf2377b99\"\n \n [[package]]\n name = \"slog-async\"\n version = \"2.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78ca925b180da88ccc595cbe4a3d378d79cb49fe5906c2cbc2488eaf700913ee\"\n dependencies = [\n- \"crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-channel 0.3.9\",\n+ \"slog\",\n+ \"take_mut\",\n+ \"thread_local\",\n ]\n \n [[package]]\n name = \"slog-kvfilter\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ae939ed7d169eed9699f4f5cd440f046f5dc5dfc27c19e3cd311619594c175e0\"\n dependencies = [\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex\",\n+ \"slog\",\n ]\n \n [[package]]\n name = \"slog-scope\"\n version = \"4.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7c44c89dd8b0ae4537d1ae318353eaf7840b4869c536e31c41e963d1ea523ee6\"\n dependencies = [\n- \"arc-swap 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"arc-swap\",\n+ \"lazy_static\",\n+ \"slog\",\n ]\n \n [[package]]\n name = \"slog-stdlog\"\n version = \"3.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f1c469573d1e3f36f9eee66cd132206caf47b50c94b1f6c6e7b4d8235e9ecf01\"\n dependencies = [\n- \"crossbeam 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-scope 4.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam\",\n+ \"log 0.3.9\",\n+ \"slog\",\n+ \"slog-scope\",\n ]\n \n [[package]]\n name = \"slog-term\"\n version = \"2.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"124501187c410b6a46fe8a47a48435ae462fae4e02d03c558d358f40b17308cb\"\n dependencies = [\n- \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"term 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty\",\n+ \"chrono\",\n+ \"slog\",\n+ \"term 0.6.1\",\n+ \"thread_local\",\n ]\n \n [[package]]\n name = \"sloggers\"\n version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d41aa58f9a02e205e21117ffa08e94c37f06e1f1009be2639b621f351a75796d\"\n dependencies = [\n- \"chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libflate 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-async 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-kvfilter 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-scope 4.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-stdlog 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slog-term 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"trackable 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chrono\",\n+ \"libflate\",\n+ \"regex\",\n+ \"serde 1.0.104\",\n+ \"serde_derive\",\n+ \"slog\",\n+ \"slog-async\",\n+ \"slog-kvfilter\",\n+ \"slog-scope\",\n+ \"slog-stdlog\",\n+ \"slog-term\",\n+ \"trackable\",\n ]\n \n [[package]]\n name = \"smallvec\"\n version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5c2fb2ec9bcd216a5b0d0ccf31ab17b5ed1d627960edff65bbe95d3ce221cefc\"\n \n [[package]]\n name = \"socket2\"\n version = \"0.3.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e8b74de517221a2cb01a53349cf54182acdc31a074727d3079068448c0676d85\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"redox_syscall\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"sourcefile\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4bf77cb82ba8453b42b6ae1d692e4cdc92f9a47beaf89a847c8be83f4e328ad3\"\n+\n+[[package]]\n+name = \"static_assertions\"\n+version = \"0.3.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7f3eb36b47e512f8f1c9e3d10c2c1965bc992bd9cdb024fa581e2194501c83d3\"\n \n [[package]]\n name = \"strsim\"\n version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n \n [[package]]\n name = \"syn\"\n version = \"1.0.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"af6f3550d8dff9ef7dc34d384ac6f107e5d31c8f57d9f28e0081503f547ac8f5\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-xid\",\n ]\n \n [[package]]\n name = \"synstructure\"\n version = \"0.12.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"67656ea1dc1b41b1451851562ea232ec2e5a80242139f7e679ceccfb5d61f545\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"unicode-xid\",\n ]\n \n [[package]]\n name = \"take_mut\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f764005d11ee5f36500a149ace24e00e3da98b0158b3e2d53a7495660d3f4d60\"\n \n [[package]]\n name = \"tar\"\n version = \"0.4.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b3196bfbffbba3e57481b6ea32249fbaf590396a52505a2615adbb79d9d826d3\"\n dependencies = [\n- \"filetime 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"xattr 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"filetime\",\n+ \"libc\",\n+ \"redox_syscall\",\n+ \"xattr\",\n ]\n \n [[package]]\n name = \"tempfile\"\n version = \"3.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"rand 0.7.3\",\n+ \"redox_syscall\",\n+ \"remove_dir_all\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"term\"\n version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42\"\n dependencies = [\n- \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder\",\n+ \"dirs 1.0.5\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"term\"\n version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5\"\n dependencies = [\n- \"dirs 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dirs 2.0.2\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"termcolor\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bb6bfa289a4d7c5766392812c0a1f4c1ba45afa1ad47803c11e1f407d846d75f\"\n dependencies = [\n- \"winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-util\",\n ]\n \n [[package]]\n name = \"termios\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"text_io\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6cb170b4f47dc48835fbc56259c12d8963e542b05a24be2e3a1f5a6c320fd2d4\"\n \n [[package]]\n name = \"textwrap\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n dependencies = [\n- \"unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width\",\n ]\n \n [[package]]\n name = \"thread_local\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d40c6d1b69745a6ec6fb1ca717914848da4b44ae29d9b3080cbee91d72a69b14\"\n dependencies = [\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static\",\n ]\n \n [[package]]\n name = \"time\"\n version = \"0.1.42\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n+ \"redox_syscall\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"tokio\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8fdd17989496f49cdc57978c96f0c9fe5e4a58a8bddc6813c449a4624f6a030b\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio-uds 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 1.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pin-project-lite 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"fnv\",\n+ \"iovec\",\n+ \"lazy_static\",\n+ \"libc\",\n+ \"memchr\",\n+ \"mio\",\n+ \"mio-uds\",\n+ \"num_cpus\",\n+ \"pin-project-lite\",\n+ \"slab\",\n ]\n \n [[package]]\n name = \"tokio-tls\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7bde02a3a5291395f59b06ec6945a3077602fac2b07eeeaf0dee2122f3619828\"\n dependencies = [\n- \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"native-tls\",\n+ \"tokio\",\n ]\n \n [[package]]\n name = \"tokio-tungstenite\"\n version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b8b8fe88007ebc363512449868d7da4389c9400072a3f666f212c7280082882a\"\n dependencies = [\n- \"futures 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pin-project 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-tls 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tungstenite 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures\",\n+ \"log 0.4.8\",\n+ \"native-tls\",\n+ \"pin-project\",\n+ \"tokio\",\n+ \"tokio-tls\",\n+ \"tungstenite\",\n ]\n \n [[package]]\n name = \"tokio-util\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"571da51182ec208780505a32528fc5512a8fe1443ab960b3f2f3ef093cd16930\"\n dependencies = [\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-sink 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pin-project-lite 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"toml\"\n-version = \"0.4.10\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bytes 0.5.4\",\n+ \"futures-core\",\n+ \"futures-sink\",\n+ \"log 0.4.8\",\n+ \"pin-project-lite\",\n+ \"tokio\",\n ]\n \n [[package]]\n name = \"toml\"\n version = \"0.5.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ffc92d160b1eef40665be3a05630d003936a3bc7da7421277846c2613e92c71a\"\n dependencies = [\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.104\",\n ]\n \n [[package]]\n name = \"tower-service\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e987b6bf443f4b5b3b6f38704195592cca41c5bb7aedd3c3693c7081f8289860\"\n \n [[package]]\n name = \"trackable\"\n version = \"0.2.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"11475c3c53b075360eac9794965822cb053996046545f91cf61d90e00b72efa5\"\n dependencies = [\n- \"trackable_derive 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"trackable_derive\",\n ]\n \n [[package]]\n name = \"trackable_derive\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"edcf0b9b2caa5f4804ef77aeee1b929629853d806117c48258f402b69737e65c\"\n dependencies = [\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n name = \"treeline\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a7f741b240f1a48843f9b8e0444fb55fb2a4ff67293b50a9179dfd5ea67f8d41\"\n \n [[package]]\n name = \"try-lock\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e604eb7b43c06650e854be16a2a03155743d3752dd1c943f6829e26b7a36e382\"\n \n [[package]]\n name = \"tungstenite\"\n version = \"0.10.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cfea31758bf674f990918962e8e5f07071a3161bd7c4138ed23e416e1ac4264e\"\n dependencies = [\n- \"base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"httparse 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"input_buffer 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"sha-1 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"utf-8 0.7.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"base64 0.11.0\",\n+ \"byteorder\",\n+ \"bytes 0.5.4\",\n+ \"http\",\n+ \"httparse\",\n+ \"input_buffer\",\n+ \"log 0.4.8\",\n+ \"native-tls\",\n+ \"rand 0.7.3\",\n+ \"sha-1\",\n+ \"url\",\n+ \"utf-8\",\n ]\n \n [[package]]\n name = \"typenum\"\n version = \"1.11.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6d2783fe2d6b8c1101136184eb41be8b1ad379e4657050b8aaff0c79ee7575f9\"\n \n [[package]]\n name = \"unicase\"\n version = \"2.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"\n dependencies = [\n- \"version_check 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"version_check 0.9.1\",\n ]\n \n [[package]]\n name = \"unicode-bidi\"\n version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n dependencies = [\n- \"matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches\",\n ]\n \n [[package]]\n name = \"unicode-normalization\"\n version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5479532badd04e128284890390c1e876ef7a993d0570b3597ae43dfa1d59afa4\"\n dependencies = [\n- \"smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec\",\n ]\n \n [[package]]\n name = \"unicode-segmentation\"\n version = \"1.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e83e153d1053cbb5a118eeff7fd5be06ed99153f00dbcd8ae310c5fb2b22edc0\"\n \n [[package]]\n name = \"unicode-width\"\n version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"caaa9d531767d1ff2150b9332433f32a24622147e5ebb1f26409d5da67afd479\"\n \n [[package]]\n name = \"unicode-xid\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n \n [[package]]\n name = \"url\"\n version = \"2.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"829d4a8476c35c9bf0bbce5a3b23f4106f79728039b726d292bb93bc106787cb\"\n dependencies = [\n- \"idna 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"idna\",\n+ \"matches\",\n+ \"percent-encoding 2.1.0\",\n ]\n \n [[package]]\n name = \"utf-8\"\n version = \"0.7.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"05e42f7c18b8f902290b009cde6d651262f956c98bc51bca4cd1d511c9cd85c7\"\n \n [[package]]\n name = \"uuid\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9fde2f6a4bea1d6e007c4ad38c6839fa71cbb63b6dbf5b595aa38dc9b1093c11\"\n dependencies = [\n- \"rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.7.3\",\n ]\n \n [[package]]\n name = \"vcpkg\"\n version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3fc439f2794e98976c88a2a2dafce96b930fe8010b0a256b3c2199a773933168\"\n \n [[package]]\n name = \"vec_map\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n \n [[package]]\n name = \"version_check\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"914b1a6776c4c929a602fafd8bc742e06365d4bcbe48c30f9cca5824f70dc9dd\"\n \n [[package]]\n name = \"version_check\"\n version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"078775d0255232fb988e6fccf26ddc9d1ac274299aaedcedce21c6f72cc533ce\"\n \n [[package]]\n name = \"walkdir\"\n version = \"2.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"777182bc735b6424e1a57516d35ed72cb8019d85c8c9bf536dccb3445c1a2f7d\"\n dependencies = [\n- \"same-file 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"same-file\",\n+ \"winapi 0.3.8\",\n+ \"winapi-util\",\n ]\n \n [[package]]\n name = \"want\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0\"\n dependencies = [\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"try-lock 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8\",\n+ \"try-lock\",\n ]\n \n [[package]]\n name = \"wasi\"\n version = \"0.9.0+wasi-snapshot-preview1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n \n [[package]]\n name = \"wasm-bindgen\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5205e9afdf42282b192e2310a5b463a6d1c1d774e30dc3c791ac37ab42d2616c\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-macro 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"serde 1.0.104\",\n+ \"serde_json\",\n+ \"wasm-bindgen-macro\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-backend\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"11cdb95816290b525b32587d76419facd99662a07e59d3cdb560488a819d9a45\"\n dependencies = [\n- \"bumpalo 3.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-shared 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bumpalo\",\n+ \"lazy_static\",\n+ \"log 0.4.8\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-shared\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-futures\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8bbdd49e3e28b40dec6a9ba8d17798245ce32b019513a845369c641b275135d9\"\n dependencies = [\n- \"cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"js-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"web-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if\",\n+ \"js-sys\",\n+ \"wasm-bindgen\",\n+ \"web-sys\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-macro\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"574094772ce6921576fb6f2e3f7497b8a76273b6db092be18fc48a082de09dc3\"\n dependencies = [\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-macro-support 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote\",\n+ \"wasm-bindgen-macro-support\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-macro-support\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e85031354f25eaebe78bb7db1c3d86140312a911a106b2e29f9cc440ce3e7668\"\n dependencies = [\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-backend 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-shared 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-backend\",\n+ \"wasm-bindgen-shared\",\n ]\n \n [[package]]\n name = \"wasm-bindgen-shared\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f5e7e61fc929f4c0dddb748b102ebf9f632e2b8d739f2016542b4de2965a9601\"\n \n [[package]]\n name = \"wasm-bindgen-webidl\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ef012a0d93fc0432df126a8eaf547b2dce25a8ce9212e1d3cbeef5c11157975d\"\n dependencies = [\n- \"anyhow 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-backend 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"weedle 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"anyhow\",\n+ \"heck\",\n+ \"log 0.4.8\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-backend\",\n+ \"weedle\",\n ]\n \n [[package]]\n name = \"web-sys\"\n version = \"0.3.35\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"aaf97caf6aa8c2b1dac90faf0db529d9d63c93846cca4911856f78a83cebf53b\"\n dependencies = [\n- \"anyhow 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"js-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"sourcefile 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"wasm-bindgen-webidl 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"anyhow\",\n+ \"js-sys\",\n+ \"sourcefile\",\n+ \"wasm-bindgen\",\n+ \"wasm-bindgen-webidl\",\n ]\n \n [[package]]\n name = \"weedle\"\n version = \"0.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3bb43f70885151e629e2a19ce9e50bd730fd436cfd4b666894c9ce4de9141164\"\n dependencies = [\n- \"nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"nom 4.2.3\",\n ]\n \n [[package]]\n name = \"which\"\n version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b57acb10231b9493c8472b20cb57317d0679a49e0bdbee44b3b803a6473af164\"\n dependencies = [\n- \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"winapi\"\n version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \n [[package]]\n name = \"winapi\"\n version = \"0.3.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8093091eeb260906a183e6ae1abdba2ef5ef2257a21801128899c3fc699229c6\"\n dependencies = [\n- \"winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-i686-pc-windows-gnu\",\n+ \"winapi-x86_64-pc-windows-gnu\",\n ]\n \n [[package]]\n name = \"winapi-build\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n \n [[package]]\n name = \"winapi-i686-pc-windows-gnu\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n \n [[package]]\n name = \"winapi-util\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4ccfbf554c6ad11084fb7517daca16cfdcaccbdadba4fc336f032a8b12c2ad80\"\n dependencies = [\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"winapi-x86_64-pc-windows-gnu\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n \n [[package]]\n name = \"winreg\"\n version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b2986deb581c4fe11b621998a5e53361efe6b48a151178d0cd9eeffa4dc6acc9\"\n dependencies = [\n- \"winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"wrangler\"\n version = \"1.7.0\"\n dependencies = [\n- \"assert_cmd 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chrome-devtools-rs 0.0.0-alpha.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cloudflare 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"console 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"exitfailure 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hyper-tls 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ignore 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"indicatif 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"notify 4.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl 0.10.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"prettytable-rs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"reqwest 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_with 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"sha2 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"text_io 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tokio-tungstenite 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"uuid 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"which 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ws 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"assert_cmd\",\n+ \"atty\",\n+ \"base64 0.10.1\",\n+ \"binary-install\",\n+ \"chrome-devtools-rs\",\n+ \"chrono\",\n+ \"clap\",\n+ \"cloudflare\",\n+ \"config\",\n+ \"console\",\n+ \"data-encoding\",\n+ \"dirs 1.0.5\",\n+ \"env_logger\",\n+ \"exitfailure\",\n+ \"failure\",\n+ \"flate2\",\n+ \"fs2\",\n+ \"fs_extra\",\n+ \"futures\",\n+ \"futures-util\",\n+ \"http\",\n+ \"hyper\",\n+ \"hyper-tls\",\n+ \"ignore\",\n+ \"indicatif\",\n+ \"lazy_static\",\n+ \"log 0.4.8\",\n+ \"notify\",\n+ \"number_prefix\",\n+ \"openssl\",\n+ \"percent-encoding 1.0.1\",\n+ \"predicates\",\n+ \"prettytable-rs\",\n+ \"rand 0.6.5\",\n+ \"regex\",\n+ \"reqwest\",\n+ \"serde 1.0.104\",\n+ \"serde_json\",\n+ \"serde_with\",\n+ \"sha2\",\n+ \"tempfile\",\n+ \"text_io\",\n+ \"tokio\",\n+ \"tokio-tungstenite\",\n+ \"toml\",\n+ \"url\",\n+ \"uuid\",\n+ \"which\",\n+ \"ws\",\n ]\n \n [[package]]\n name = \"ws\"\n version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c51a2c47b5798ccc774ffb93ff536aec7c4275d722fd9c740c83cdd1af1f2d94\"\n dependencies = [\n- \"byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"httparse 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mio-extras 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"sha-1 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder\",\n+ \"bytes 0.4.12\",\n+ \"httparse\",\n+ \"log 0.4.8\",\n+ \"mio\",\n+ \"mio-extras\",\n+ \"rand 0.7.3\",\n+ \"sha-1\",\n+ \"slab\",\n+ \"url\",\n ]\n \n [[package]]\n name = \"ws2_32-sys\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\"\n dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8\",\n+ \"winapi-build\",\n ]\n \n [[package]]\n name = \"xattr\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"244c3741f4240ef46274860397c7c74e50eb23624996930e484c16679633a54c\"\n dependencies = [\n- \"libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc\",\n ]\n \n [[package]]\n name = \"yaml-rust\"\n version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"65923dd1784f44da1d2c3dbbc5e822045628c590ba72123e1c73d3c230c4434d\"\n dependencies = [\n- \"linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"linked-hash-map 0.5.2\",\n ]\n \n [[package]]\n name = \"zip\"\n version = \"0.5.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e41ff37ba788e2169b19fa70253b70cb53d9f2db9fb9aea9bcfc5047e02c3bae\"\n dependencies = [\n- \"bzip2 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"podio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[metadata]\n-\"checksum adler32 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d2e7343e7fc9de883d1b0341e0b13970f764c14101234857d2ddafa1cb1cac2\"\n-\"checksum aho-corasick 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"743ad5a418686aad3b87fd14c43badd828cf26e214a00f92a384291cf22e1811\"\n-\"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n-\"checksum anyhow 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7825f6833612eb2414095684fcf6c635becf3ce97fe48cf6421321e93bfbd53c\"\n-\"checksum arc-swap 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d7b8a9123b8027467bce0099fe556c628a53c8d83df0507084c31e9ba2e39aff\"\n-\"checksum arrayref 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a4c527152e37cf757a3f78aae5a06fbeefdb07ccc535c980a3208ee3060dd544\"\n-\"checksum arrayvec 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cff77d8686867eceff3105329d4698d96c2391c176d5d03adc90c7389162b5b8\"\n-\"checksum assert_cmd 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2dc477793bd82ec39799b6f6b3df64938532fdf2ab0d49ef817eac65856a5a1e\"\n-\"checksum async-trait 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"750b1c38a1dfadd108da0f01c08f4cdc7ff1bb39b325f9c82cc972361780a6e1\"\n-\"checksum atty 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\n-\"checksum autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\"\n-\"checksum autocfg 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d\"\n-\"checksum backtrace 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7f80256bc78f67e7df7e36d77366f636ed976895d91fe2ab9efa3973e8fe8c4f\"\n-\"checksum backtrace-sys 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d6575f128516de27e3ce99689419835fce9643a9b215a14d2b5b685be018491\"\n-\"checksum base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e\"\n-\"checksum base64 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b41b7ea54a0c9d92199de89e20e58d49f02f8e699814ef3fdf266f6f748d15c7\"\n-\"checksum binary-install 0.0.3-alpha (registry+https://github.com/rust-lang/crates.io-index)\" = \"a81dda17f2dbba8271cf61f2ea3e48e3da8aef31665731bce48818cc07863f06\"\n-\"checksum bitflags 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n-\"checksum blake2b_simd 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8fb2d74254a3a0b5cac33ac9f8ed0e44aa50378d9dbb2e5d83bd21ed1dc2c8a\"\n-\"checksum block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b\"\n-\"checksum block-padding 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5\"\n-\"checksum bstr 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"502ae1441a0a5adb8fbd38a5955a6416b9493e92b465de5e4a9bde6a539c2c48\"\n-\"checksum bumpalo 3.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f359dc14ff8911330a51ef78022d376f25ed00248912803b58f00cb1c27f742\"\n-\"checksum byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7\"\n-\"checksum byteorder 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de\"\n-\"checksum bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"206fdffcfa2df7cbe15601ef46c813fce0965eb3286db6b56c583b814b51c81c\"\n-\"checksum bytes 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"130aac562c0dd69c56b3b1cc8ffd2e17be31d0b6c25b61c96b76231aa23e39e1\"\n-\"checksum bzip2 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42b7c3cbf0fa9c1b82308d57191728ca0256cb821220f4e2fd410a72ade26e3b\"\n-\"checksum bzip2-sys 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6584aa36f5ad4c9247f5323b0a42f37802b37a836f0ad87084d7a33961abe25f\"\n-\"checksum c2-chacha 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"214238caa1bf3a496ec3392968969cab8549f96ff30652c9e56885329315f6bb\"\n-\"checksum cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\" = \"95e28fa049fda1c330bcf9d723be7663a899c4679724b34c81e9f5a326aab8cd\"\n-\"checksum cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n-\"checksum chrome-devtools-rs 0.0.0-alpha.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dee9b8a1ad6b2382a01aad9f17b381544b2396173abac19c38ac7e8f0087d752\"\n-\"checksum chrono 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31850b4a4d6bae316f7a09e691c944c28299298837edc0a03f755618c23cbc01\"\n-\"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n-\"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n-\"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n-\"checksum cloudflare 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0ce60d3492dc5dd86054ac002eed08580cb509bc4f23121f20081aec964302b8\"\n-\"checksum config 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9107d78ed62b3fa5a86e7d18e647abed48cfd8f8fab6c72f4cdb982d196f7e6\"\n-\"checksum console 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"45e0f3986890b3acbc782009e2629dfe2baa430ac091519ce3be26164a2ae6c0\"\n-\"checksum constant_time_eq 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"245097e9a4535ee1e3e3931fcfcd55a796a44c643e8596ff6566d68f09b87bbc\"\n-\"checksum core-foundation 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25b9e03f145fd4f2bf705e07b900cd41fc636598fe5dc452fd0db1441c3f496d\"\n-\"checksum core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b\"\n-\"checksum crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n-\"checksum crossbeam 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd66663db5a988098a89599d4857919b3acf7f61402e61365acfd3919857b9be\"\n-\"checksum crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8ec7fcd21571dc78f96cc96243cab8d8f035247c3efd16c687be154c3fa9efa\"\n-\"checksum crossbeam-channel 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"acec9a3b0b3559f15aee4f90746c4e5e293b701c0f7d3925d24e01645267b68c\"\n-\"checksum crossbeam-utils 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"04973fa96e96579258a5091af6003abde64af786b860f18622b82e026cca60e6\"\n-\"checksum crossbeam-utils 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ce446db02cdc3165b94ae73111e570793400d0794e46125cc4056c81cbb039f4\"\n-\"checksum csv 1.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00affe7f6ab566df61b4be3ce8cf16bc2576bca0963ceb0955e45d514bf9a279\"\n-\"checksum csv-core 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9b5cadb6b25c77aeff80ba701712494213f4a8418fcda2ee11b6560c3ad0bf4c\"\n-\"checksum curl 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"06aa71e9208a54def20792d877bc663d6aae0732b9852e612c4a933177c31283\"\n-\"checksum curl-sys 0.4.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c38ca47d60b86d0cc9d42caa90a0885669c2abc9791f871c81f58cdf39e979b\"\n-\"checksum data-encoding 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f4f47ca1860a761136924ddd2422ba77b2ea54fe8cc75b9040804a0d9d32ad97\"\n-\"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n-\"checksum digest 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\n-\"checksum dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\n-\"checksum dirs 2.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13aea89a5c93364a98e9b37b2fa237effbb694d5cfe01c5b70941f7eb087d5e3\"\n-\"checksum dirs-sys 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afa0b23de8fd801745c471deffa6e12d248f962c9fd4b4c33787b055599bde7b\"\n-\"checksum dtoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4358a9e11b9a09cf52383b451b49a169e8d797b68aa02301ff586d70d9661ea3\"\n-\"checksum encode_unicode 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n-\"checksum encoding_rs 0.8.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd8d03faa7fe0c1431609dfad7bbe827af30f82e1e2ae6f7ee4fca6bd764bc28\"\n-\"checksum env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\n-\"checksum error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ab49e9dcb602294bc42f9a7dfc9bc6e936fca4418ea300dbfb84fe16de0b7d9\"\n-\"checksum escargot 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ceb9adbf9874d5d028b5e4c5739d22b71988252b25c9c98fe7cf9738bee84597\"\n-\"checksum exitfailure 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2ff5bd832af37f366c6c194d813a11cd90ac484f124f079294f28e357ae40515\"\n-\"checksum failure 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8273f13c977665c5db7eb2b99ae520952fe5ac831ae4cd09d80c4c7042b5ed9\"\n-\"checksum failure_derive 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0bc225b78e0391e4b8683440bf2e63c2deeeb2ce5189eab46e2b68c6d3725d08\"\n-\"checksum fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n-\"checksum filetime 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1ff6d4dab0aa0c8e6346d46052e93b13a16cf847b54ed357087c35011048cc7d\"\n-\"checksum flate2 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6bd6d6f4752952feb71363cffc9ebac9411b75b87c6ab6058c40c8900cf43c0f\"\n-\"checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n-\"checksum foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\n-\"checksum foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n-\"checksum fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\n-\"checksum fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5f2a4a2034423744d2cc7ca2068453168dcdb82c438419e639a26bd87839c674\"\n-\"checksum fsevent 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5ab7d1bd1bd33cc98b0889831b72da23c0aa4df9cec7e0702f46ecea04b35db6\"\n-\"checksum fsevent-sys 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f41b048a94555da0f42f1d632e2e19510084fb8e303b0daa2816e733fb3644a0\"\n-\"checksum fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n-\"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n-\"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n-\"checksum futures 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5c329ae8753502fb44ae4fc2b622fa2a94652c41e795143765ba0927f92ab780\"\n-\"checksum futures-channel 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0c77d04ce8edd9cb903932b608268b3fffec4163dc053b3b402bf47eac1f1a8\"\n-\"checksum futures-core 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f25592f769825e89b92358db00d26f965761e094951ac44d3663ef25b7ac464a\"\n-\"checksum futures-executor 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f674f3e1bcb15b37284a90cedf55afdba482ab061c407a9c0ebbd0f3109741ba\"\n-\"checksum futures-io 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a638959aa96152c7a4cddf50fcb1e3fede0583b27157c26e67d6f99904090dc6\"\n-\"checksum futures-macro 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a5081aa3de1f7542a794a397cde100ed903b0630152d0973479018fd85423a7\"\n-\"checksum futures-sink 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3466821b4bc114d95b087b850a724c6f83115e929bc88f1fa98a3304a944c8a6\"\n-\"checksum futures-task 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b0a34e53cf6cdcd0178aa573aed466b646eb3db769570841fda0c7ede375a27\"\n-\"checksum futures-util 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"22766cf25d64306bedf0384da004d05c9974ab104fcc4528f1236181c18004c5\"\n-\"checksum generic-array 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec\"\n-\"checksum getrandom 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb\"\n-\"checksum globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925aa2cac82d8834e2b2a4415b6f6879757fb5c0928fc445ae76461a12eed8f2\"\n-\"checksum h2 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b9433d71e471c1736fd5a61b671fc0b148d7a2992f666c958d03cd8feb3b88d1\"\n-\"checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n-\"checksum hermit-abi 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eff2656d88f158ce120947499e971d743c05dbcbed62e5bd2f38f1698bbc3772\"\n-\"checksum hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n-\"checksum http 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b708cc7f06493459026f53b9a61a7a121a5d1ec6238dee58ea4941132b30156b\"\n-\"checksum http-body 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13d5ff830006f7646652e057693569bfe0d51760c0085a071769d142a205111b\"\n-\"checksum httparse 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd179ae861f0c2e53da70d892f5f3029f9594be0c41dc5269cd371691b1dc2f9\"\n-\"checksum humantime 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df004cfca50ef23c36850aaaa59ad52cc70d0e90243c3c7737a4dd32dc7a3c4f\"\n-\"checksum hyper 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa1c527bbc634be72aa7ba31e4e4def9bbb020f5416916279b7c705cd838893e\"\n-\"checksum hyper-tls 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3adcd308402b9553630734e9c36b77a7e48b3821251ca2493e8cd596763aafaa\"\n-\"checksum idna 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\n-\"checksum ignore 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"522daefc3b69036f80c7d2990b28ff9e0471c683bad05ca258e0a01dd22c5a1e\"\n-\"checksum indexmap 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"076f042c5b7b98f31d205f1249267e12a6518c1481e9dae9764af19b707d2292\"\n-\"checksum indicatif 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8572bccfb0665e70b7faf44ee28841b8e0823450cd4ad562a76b5a3c4bf48487\"\n-\"checksum inotify 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"24e40d6fd5d64e2082e0c796495c8ef5ad667a96d03e5aaa0becfd9d47bcbfb8\"\n-\"checksum inotify-sys 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e74a1aa87c59aeff6ef2cc2fa62d41bc43f54952f55652656b18a02fd5e356c0\"\n-\"checksum input_buffer 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"19a8a95243d5a0398cae618ec29477c6e3cb631152be5c19481f80bc71559754\"\n-\"checksum iovec 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2b3ea6ff95e175473f8ffe6a7eb7c00d054240321b84c57051175fe3c1e075e\"\n-\"checksum is_executable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"302d553b8abc8187beb7d663e34c065ac4570b273bc9511a50e940e99409c577\"\n-\"checksum itoa 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8b7a7c0c47db5545ed3fef7468ee7bb5b74691498139e4b3f6a20685dc6dd8e\"\n-\"checksum js-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7889c7c36282151f6bf465be4700359318aef36baa951462382eae49e9577cf9\"\n-\"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n-\"checksum lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n-\"checksum lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b294d6fa9ee409a054354afc4352b0b9ef7ca222c69b8812cbea9e7d2bf3783f\"\n-\"checksum libc 0.2.66 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d515b1f41455adea1313a4a2ac8a8a477634fbae63cc6100e3aebb207ce61558\"\n-\"checksum libflate 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9135df43b1f5d0e333385cb6e7897ecd1a43d7d11b91ac003f4d2c2d2401fdd\"\n-\"checksum libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2eb5e43362e38e2bca2fd5f5134c4d4564a23a5c28e9b95411652021a8675ebe\"\n-\"checksum linked-hash-map 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d262045c5b87c0861b3f004610afd0e2c851e2908d08b6c870cbb9d5f494ecd\"\n-\"checksum linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\n-\"checksum log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n-\"checksum log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n-\"checksum matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n-\"checksum memchr 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3197e20c7edb283f87c071ddfc7a2cca8f8e0b888c242959846a6fce03c72223\"\n-\"checksum mime 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d\"\n-\"checksum mime_guess 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1a0ed03949aef72dbdf3116a383d7b38b4768e6f960528cd6a6044aa9ed68599\"\n-\"checksum miniz_oxide 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa679ff6578b1cddee93d7e82e263b94a575e0bfced07284eb0c037c1d2416a5\"\n-\"checksum mio 0.6.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"302dec22bcf6bae6dfb69c647187f4b4d0fb6f535521f7bc022430ce8e12008f\"\n-\"checksum mio-extras 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"52403fe290012ce777c4626790c8951324a2b9e3316b3143779c72b029742f19\"\n-\"checksum mio-uds 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"966257a94e196b11bb43aca423754d87429960a768de9414f3691d6957abf125\"\n-\"checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\n-\"checksum native-tls 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b2df1a4c22fd44a62147fd8f13dd0f95c9d8ca7b2610299b2a2f9cf8964274e\"\n-\"checksum net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42550d9fb7b6684a6d404d9fa7250c2eb2646df731d1c06afc06dcee9e1bcf88\"\n-\"checksum nom 4.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2ad2a91a8e869eeb30b9cb3119ae87773a8f4ae617f41b1eb9c154b2905f7bd6\"\n-\"checksum notify 4.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80ae4a7688d1fab81c5bf19c64fc8db920be8d519ce6336ed4e7efe024724dbd\"\n-\"checksum num-integer 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f6ea62e9d81a77cd3ee9a2a5b9b609447857f3d358704331e4ef39eb247fcba\"\n-\"checksum num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92e5113e9fd4cc14ded8e499429f396a20f98c772a47cc8622a736e1ec843c31\"\n-\"checksum num-traits 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c62be47e61d1842b9170f0fdeec8eba98e60e90e5446449a0545e5152acd7096\"\n-\"checksum num_cpus 1.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46203554f085ff89c235cd12f7075f3233af9b11ed7c9e16dfe2560d03313ce6\"\n-\"checksum number_prefix 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17b02fc0ff9a9e4b35b3342880f48e896ebf69f2967921fe8646bf5b7125956a\"\n-\"checksum opaque-debug 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n-\"checksum openssl 0.10.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"973293749822d7dd6370d6da1e523b0d1db19f06c459134c658b2a4261378b52\"\n-\"checksum openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\n-\"checksum openssl-src 111.6.1+1.1.1d (registry+https://github.com/rust-lang/crates.io-index)\" = \"c91b04cb43c1a8a90e934e0cd612e2a5715d976d2d6cff4490278a0cddf35005\"\n-\"checksum openssl-sys 0.9.54 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1024c0a59774200a555087a6da3f253a9095a5f344e353b212ac4c8b8e450986\"\n-\"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n-\"checksum percent-encoding 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n-\"checksum pin-project 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7804a463a8d9572f13453c516a5faea534a2403d7ced2f0c7e100eeff072772c\"\n-\"checksum pin-project-internal 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"385322a45f2ecf3410c68d2a549a4a2685e8051d0f278e39743ff4e451cb9b3f\"\n-\"checksum pin-project-lite 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"237844750cfbb86f67afe27eee600dfbbcb6188d734139b534cbfbf4f96792ae\"\n-\"checksum pin-utils 0.1.0-alpha.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5894c618ce612a3fa23881b152b608bafb8c56cfc22f434a3ba3120b40f7b587\"\n-\"checksum pkg-config 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05da548ad6865900e60eaba7f589cc0783590a92e940c26953ff81ddbab2d677\"\n-\"checksum podio 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"780fb4b6698bbf9cf2444ea5d22411cef2953f0824b98f33cf454ec5615645bd\"\n-\"checksum ppv-lite86 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74490b50b9fbe561ac330df47c08f3f33073d2d00c150f719147d7c54522fa1b\"\n-\"checksum predicates 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9bfe52247e5cc9b2f943682a85a5549fb9662245caf094504e69a2f03fe64d4\"\n-\"checksum predicates-core 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"06075c3a3e92559ff8929e7a280684489ea27fe44805174c3ebd9328dcb37178\"\n-\"checksum predicates-tree 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8e63c4859013b38a76eca2414c64911fba30def9e3202ac461a2d22831220124\"\n-\"checksum prettytable-rs 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0fd04b170004fa2daccf418a7f8253aaf033c27760b5f225889024cf66d7ac2e\"\n-\"checksum proc-macro-hack 0.5.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ecd45702f76d6d3c75a80564378ae228a85f0b59d2f3ed43c91b4a69eb2ebfc5\"\n-\"checksum proc-macro-nested 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"369a6ed065f249a159e06c45752c780bda2fb53c995718f9e484d08daa9eb42e\"\n-\"checksum proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3acb317c6ff86a4e579dfa00fc5e6cca91ecbb4e7eb2df0468805b674eb88548\"\n-\"checksum quick-error 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0\"\n-\"checksum quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n-\"checksum rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n-\"checksum rand 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\n-\"checksum rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\"\n-\"checksum rand_chacha 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03a2a90da8c7523f554344f921aa97283eadf6ac484a6d2a7d0212fa7f8d6853\"\n-\"checksum rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b\"\n-\"checksum rand_core 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc\"\n-\"checksum rand_core 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\n-\"checksum rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b40677c7be09ae76218dc623efbf7b18e34bced3f38883af07bb75630a21bc4\"\n-\"checksum rand_hc 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\n-\"checksum rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ded997c9d5f13925be2a6fd7e66bf1872597f759fd9dd93513dd7e92e5a5ee08\"\n-\"checksum rand_jitter 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1166d5c91dc97b88d1decc3285bb0a99ed84b05cfd0bc2341bdf2d43fc41e39b\"\n-\"checksum rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b75f676a1e053fc562eafbb47838d67c84801e38fc1ba459e8f180deabd5071\"\n-\"checksum rand_pcg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abf9b09b01790cfe0364f52bf32995ea3c39f4d2dd011eac241d2914146d0b44\"\n-\"checksum rand_xorshift 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cbf7e9e623549b0e21f6e97cf8ecf247c1a8fd2e8a992ae265314300b2455d5c\"\n-\"checksum rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2\"\n-\"checksum redox_syscall 0.1.56 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2439c63f3f6139d1b57529d16bc3b8bb855230c8efcc5d3a896c8bea7c3b1e84\"\n-\"checksum redox_users 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09b23093265f8d200fa7b4c2c76297f47e681c655f6f1285a8780d6a022f7431\"\n-\"checksum regex 1.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"322cf97724bea3ee221b78fe25ac9c46114ebb51747ad5babd51a2fc6a8235a8\"\n-\"checksum regex-automata 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92b73c2a1770c255c240eaa4ee600df1704a38dc3feaa6e949e7fcd4f8dc09f9\"\n-\"checksum regex-syntax 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b28dfe3fe9badec5dbf0a79a9cccad2cfc2ab5484bdb3e44cbd1ae8b3ba2be06\"\n-\"checksum remove_dir_all 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e\"\n-\"checksum reqwest 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0e798e19e258bf6c30a304622e3e9ac820e483b06a1857a026e1f109b113fe4\"\n-\"checksum rle-decode-fast 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cabe4fa914dec5870285fa7f71f602645da47c486e68486d2b4ceb4a343e90ac\"\n-\"checksum rust-argon2 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2bc8af4bda8e1ff4932523b94d3dd20ee30a87232323eda55903ffd71d2fb017\"\n-\"checksum rust-ini 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e52c148ef37f8c375d49d5a73aa70713125b7f19095948a923f80afdeb22ec2\"\n-\"checksum rustc-demangle 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n-\"checksum ryu 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bfa8506c1de11c9c4e4c38863ccbe02a305c8188e85a05a784c9e11e1c3910c8\"\n-\"checksum same-file 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\n-\"checksum schannel 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"507a9e6e8ffe0a4e0ebb9a10293e62fdf7657c06f1b8bb07a8fcf697d2abf295\"\n-\"checksum security-framework 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ef2429d7cefe5fd28bd1d2ed41c944547d4ff84776f5935b456da44593a16df\"\n-\"checksum security-framework-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e31493fc37615debb8c5090a7aeb4a9730bc61e77ab10b9af59f1a202284f895\"\n-\"checksum serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9dad3f759919b92c3068c696c15c3d17238234498bbdcc80f2c469606f948ac8\"\n-\"checksum serde 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\" = \"414115f25f818d7dfccec8ee535d76949ae78584fc4f79a6f45a904bf8ab4449\"\n-\"checksum serde-hjson 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b833c5ad67d52ced5f5938b2980f32a9c1c5ef047f0b4fb3127e7a423c76153\"\n-\"checksum serde_derive 1.0.104 (registry+https://github.com/rust-lang/crates.io-index)\" = \"128f9e303a5a29922045a830221b8f78ec74a5f544944f3d5984f8ec3895ef64\"\n-\"checksum serde_json 1.0.47 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15913895b61e0be854afd32fd4163fcd2a3df34142cf2cb961b310ce694cbf90\"\n-\"checksum serde_qs 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35965fa1d2413717053d67c2df1f5c3e1763fbf77200ea7e767523707bd5a0af\"\n-\"checksum serde_test 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"110b3dbdf8607ec493c22d5d947753282f3bae73c0f56d322af1e8c78e4c23d5\"\n-\"checksum serde_urlencoded 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ec5d77e2d4c73717816afac02670d5c4f534ea95ed430442cad02e7a6e32c97\"\n-\"checksum serde_with 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89d3d595d64120bbbc70b7f6d5ae63298b62a3d9f373ec2f56acf5365ca8a444\"\n-\"checksum serde_with_macros 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4070d2c9b9d258465ad1d82aabb985b84cd9a3afa94da25ece5a9938ba5f1606\"\n-\"checksum sha-1 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df\"\n-\"checksum sha2 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"27044adfd2e1f077f649f59deb9490d3941d674002f7d062870a60ebe9bd47a0\"\n-\"checksum siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b8de496cf83d4ed58b6be86c3a275b8602f6ffe98d3024a869e124147a9a3ac\"\n-\"checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n-\"checksum slog 2.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1cc9c640a4adbfbcc11ffb95efe5aa7af7309e002adab54b185507dbf2377b99\"\n-\"checksum slog-async 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"78ca925b180da88ccc595cbe4a3d378d79cb49fe5906c2cbc2488eaf700913ee\"\n-\"checksum slog-kvfilter 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae939ed7d169eed9699f4f5cd440f046f5dc5dfc27c19e3cd311619594c175e0\"\n-\"checksum slog-scope 4.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c44c89dd8b0ae4537d1ae318353eaf7840b4869c536e31c41e963d1ea523ee6\"\n-\"checksum slog-stdlog 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1c469573d1e3f36f9eee66cd132206caf47b50c94b1f6c6e7b4d8235e9ecf01\"\n-\"checksum slog-term 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"124501187c410b6a46fe8a47a48435ae462fae4e02d03c558d358f40b17308cb\"\n-\"checksum sloggers 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d41aa58f9a02e205e21117ffa08e94c37f06e1f1009be2639b621f351a75796d\"\n-\"checksum smallvec 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5c2fb2ec9bcd216a5b0d0ccf31ab17b5ed1d627960edff65bbe95d3ce221cefc\"\n-\"checksum socket2 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8b74de517221a2cb01a53349cf54182acdc31a074727d3079068448c0676d85\"\n-\"checksum sourcefile 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4bf77cb82ba8453b42b6ae1d692e4cdc92f9a47beaf89a847c8be83f4e328ad3\"\n-\"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n-\"checksum syn 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"af6f3550d8dff9ef7dc34d384ac6f107e5d31c8f57d9f28e0081503f547ac8f5\"\n-\"checksum synstructure 0.12.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"67656ea1dc1b41b1451851562ea232ec2e5a80242139f7e679ceccfb5d61f545\"\n-\"checksum take_mut 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f764005d11ee5f36500a149ace24e00e3da98b0158b3e2d53a7495660d3f4d60\"\n-\"checksum tar 0.4.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3196bfbffbba3e57481b6ea32249fbaf590396a52505a2615adbb79d9d826d3\"\n-\"checksum tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\n-\"checksum term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42\"\n-\"checksum term 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0863a3345e70f61d613eab32ee046ccd1bcc5f9105fe402c61fcd0c13eeb8b5\"\n-\"checksum termcolor 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb6bfa289a4d7c5766392812c0a1f4c1ba45afa1ad47803c11e1f407d846d75f\"\n-\"checksum termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n-\"checksum text_io 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6cb170b4f47dc48835fbc56259c12d8963e542b05a24be2e3a1f5a6c320fd2d4\"\n-\"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n-\"checksum thread_local 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d40c6d1b69745a6ec6fb1ca717914848da4b44ae29d9b3080cbee91d72a69b14\"\n-\"checksum time 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f\"\n-\"checksum tokio 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8fdd17989496f49cdc57978c96f0c9fe5e4a58a8bddc6813c449a4624f6a030b\"\n-\"checksum tokio-tls 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7bde02a3a5291395f59b06ec6945a3077602fac2b07eeeaf0dee2122f3619828\"\n-\"checksum tokio-tungstenite 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8b8fe88007ebc363512449868d7da4389c9400072a3f666f212c7280082882a\"\n-\"checksum tokio-util 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"571da51182ec208780505a32528fc5512a8fe1443ab960b3f2f3ef093cd16930\"\n-\"checksum toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"758664fc71a3a69038656bee8b6be6477d2a6c315a6b81f7081f591bffa4111f\"\n-\"checksum toml 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffc92d160b1eef40665be3a05630d003936a3bc7da7421277846c2613e92c71a\"\n-\"checksum tower-service 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e987b6bf443f4b5b3b6f38704195592cca41c5bb7aedd3c3693c7081f8289860\"\n-\"checksum trackable 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11475c3c53b075360eac9794965822cb053996046545f91cf61d90e00b72efa5\"\n-\"checksum trackable_derive 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edcf0b9b2caa5f4804ef77aeee1b929629853d806117c48258f402b69737e65c\"\n-\"checksum treeline 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7f741b240f1a48843f9b8e0444fb55fb2a4ff67293b50a9179dfd5ea67f8d41\"\n-\"checksum try-lock 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e604eb7b43c06650e854be16a2a03155743d3752dd1c943f6829e26b7a36e382\"\n-\"checksum tungstenite 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cfea31758bf674f990918962e8e5f07071a3161bd7c4138ed23e416e1ac4264e\"\n-\"checksum typenum 1.11.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d2783fe2d6b8c1101136184eb41be8b1ad379e4657050b8aaff0c79ee7575f9\"\n-\"checksum unicase 2.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"\n-\"checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n-\"checksum unicode-normalization 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5479532badd04e128284890390c1e876ef7a993d0570b3597ae43dfa1d59afa4\"\n-\"checksum unicode-segmentation 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e83e153d1053cbb5a118eeff7fd5be06ed99153f00dbcd8ae310c5fb2b22edc0\"\n-\"checksum unicode-width 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"caaa9d531767d1ff2150b9332433f32a24622147e5ebb1f26409d5da67afd479\"\n-\"checksum unicode-xid 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n-\"checksum url 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"829d4a8476c35c9bf0bbce5a3b23f4106f79728039b726d292bb93bc106787cb\"\n-\"checksum utf-8 0.7.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05e42f7c18b8f902290b009cde6d651262f956c98bc51bca4cd1d511c9cd85c7\"\n-\"checksum uuid 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9fde2f6a4bea1d6e007c4ad38c6839fa71cbb63b6dbf5b595aa38dc9b1093c11\"\n-\"checksum vcpkg 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fc439f2794e98976c88a2a2dafce96b930fe8010b0a256b3c2199a773933168\"\n-\"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n-\"checksum version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"914b1a6776c4c929a602fafd8bc742e06365d4bcbe48c30f9cca5824f70dc9dd\"\n-\"checksum version_check 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"078775d0255232fb988e6fccf26ddc9d1ac274299aaedcedce21c6f72cc533ce\"\n-\"checksum walkdir 2.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"777182bc735b6424e1a57516d35ed72cb8019d85c8c9bf536dccb3445c1a2f7d\"\n-\"checksum want 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0\"\n-\"checksum wasi 0.9.0+wasi-snapshot-preview1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n-\"checksum wasm-bindgen 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5205e9afdf42282b192e2310a5b463a6d1c1d774e30dc3c791ac37ab42d2616c\"\n-\"checksum wasm-bindgen-backend 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11cdb95816290b525b32587d76419facd99662a07e59d3cdb560488a819d9a45\"\n-\"checksum wasm-bindgen-futures 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8bbdd49e3e28b40dec6a9ba8d17798245ce32b019513a845369c641b275135d9\"\n-\"checksum wasm-bindgen-macro 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"574094772ce6921576fb6f2e3f7497b8a76273b6db092be18fc48a082de09dc3\"\n-\"checksum wasm-bindgen-macro-support 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e85031354f25eaebe78bb7db1c3d86140312a911a106b2e29f9cc440ce3e7668\"\n-\"checksum wasm-bindgen-shared 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5e7e61fc929f4c0dddb748b102ebf9f632e2b8d739f2016542b4de2965a9601\"\n-\"checksum wasm-bindgen-webidl 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef012a0d93fc0432df126a8eaf547b2dce25a8ce9212e1d3cbeef5c11157975d\"\n-\"checksum web-sys 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aaf97caf6aa8c2b1dac90faf0db529d9d63c93846cca4911856f78a83cebf53b\"\n-\"checksum weedle 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3bb43f70885151e629e2a19ce9e50bd730fd436cfd4b666894c9ce4de9141164\"\n-\"checksum which 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b57acb10231b9493c8472b20cb57317d0679a49e0bdbee44b3b803a6473af164\"\n-\"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n-\"checksum winapi 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8093091eeb260906a183e6ae1abdba2ef5ef2257a21801128899c3fc699229c6\"\n-\"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n-\"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n-\"checksum winapi-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ccfbf554c6ad11084fb7517daca16cfdcaccbdadba4fc336f032a8b12c2ad80\"\n-\"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n-\"checksum winreg 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2986deb581c4fe11b621998a5e53361efe6b48a151178d0cd9eeffa4dc6acc9\"\n-\"checksum ws 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c51a2c47b5798ccc774ffb93ff536aec7c4275d722fd9c740c83cdd1af1f2d94\"\n-\"checksum ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\"\n-\"checksum xattr 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"244c3741f4240ef46274860397c7c74e50eb23624996930e484c16679633a54c\"\n-\"checksum yaml-rust 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"65923dd1784f44da1d2c3dbbc5e822045628c590ba72123e1c73d3c230c4434d\"\n-\"checksum zip 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e41ff37ba788e2169b19fa70253b70cb53d9f2db9fb9aea9bcfc5047e02c3bae\"\n+ \"bzip2\",\n+ \"crc32fast\",\n+ \"flate2\",\n+ \"podio\",\n+ \"time\",\n+]\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -271,6 +271,7 @@ mod tests {\n             target_type: TargetType::JavaScript,\n             webpack_config: None,\n             site: Some(site),\n+            text: None,\n         }\n     }\n \ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -145,6 +145,7 @@ mod tests {\n             target_type: TargetType::Webpack,\n             webpack_config: None,\n             site: None,\n+            text: None,\n         };\n         assert!(kv::get_namespace_id(&target_with_dup_kv_bindings, \"\").is_err());\n     }\ndiff --git a/src/settings/toml/tests/mod.rs b/src/settings/toml/tests/mod.rs\n--- a/src/settings/toml/tests/mod.rs\n+++ b/src/settings/toml/tests/mod.rs\n@@ -88,8 +88,10 @@ fn it_builds_from_environments_config_with_kv() {\n \n #[test]\n fn parses_same_from_config_path_as_string() {\n+    env::remove_var(\"CF_ACCOUNT_ID\");\n+    env::remove_var(\"CF_ZONE_ID\");\n     let config_path = toml_fixture_path(\"environments.toml\");\n-    eprintln!(\"{:?}\", &config_path);\n+    eprintln!(\"{:#?}\", &config_path);\n     let string_toml = fs::read_to_string(&config_path).unwrap();\n \n     let manifest_from_string = Manifest::from_str(&string_toml).unwrap();\ndiff --git a/tests/fixture/mod.rs b/tests/fixture/mod.rs\n--- a/tests/fixture/mod.rs\n+++ b/tests/fixture/mod.rs\n@@ -1,5 +1,5 @@\n mod wrangler_toml;\n-pub use wrangler_toml::{EnvConfig, KvConfig, SiteConfig, WranglerToml};\n+pub use wrangler_toml::{EnvConfig, KvConfig, SiteConfig, WranglerToml, TEST_ENV_NAME};\n \n use std::fs;\n use std::fs::File;\ndiff --git a/tests/fixture/wrangler_toml.rs b/tests/fixture/wrangler_toml.rs\n--- a/tests/fixture/wrangler_toml.rs\n+++ b/tests/fixture/wrangler_toml.rs\n@@ -38,6 +38,7 @@ pub struct EnvConfig {\n     pub site: Option<SiteConfig>,\n     #[serde(rename = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<KvConfig>>,\n+    pub config: Option<HashMap<&'static str, &'static str>>,\n }\n \n impl EnvConfig {\ndiff --git a/tests/fixture/wrangler_toml.rs b/tests/fixture/wrangler_toml.rs\n--- a/tests/fixture/wrangler_toml.rs\n+++ b/tests/fixture/wrangler_toml.rs\n@@ -96,6 +97,7 @@ pub struct WranglerToml {\n     #[serde(rename = \"kv-namespaces\")]\n     pub kv_namespaces: Option<Vec<KvConfig>>,\n     pub site: Option<SiteConfig>,\n+    pub config: Option<HashMap<&'static str, &'static str>>,\n }\n \n impl WranglerToml {\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -3,8 +3,9 @@ extern crate lazy_static;\n \n pub mod fixture;\n \n-use fixture::WranglerToml;\n+use fixture::{EnvConfig, WranglerToml, TEST_ENV_NAME};\n \n+use std::collections::HashMap;\n use std::env;\n use std::process::Command;\n \ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -173,6 +174,22 @@ fn it_can_preview_rust_project() {\n     preview_succeeds(&fixture);\n }\n \n+fn preview_succeeds_with(fixture: &Fixture, env: Option<&str>, expected: &str) {\n+    let _lock = fixture.lock();\n+    env::remove_var(\"CF_ACCOUNT_ID\");\n+    env::remove_var(\"CF_ZONE_ID\");\n+    let mut preview = Command::cargo_bin(env!(\"CARGO_PKG_NAME\")).unwrap();\n+    preview.current_dir(fixture.get_path());\n+    preview.arg(\"preview\").arg(\"--headless\");\n+    if let Some(env) = env {\n+        preview.arg(\"--env\").arg(env);\n+    }\n+    preview\n+        .assert()\n+        .stdout(predicates::str::contains(expected))\n+        .success();\n+}\n+\n fn preview_succeeds(fixture: &Fixture) {\n     let _lock = fixture.lock();\n     env::remove_var(\"CF_ACCOUNT_ID\");\n",
        "problem_statement": "include plain text bindings in upload form\nwhen we wrangler publish a project with plain text bindings, we need to include the bindings in the upload form metadata.json.\n",
        "hints_text": "",
        "created_at": "2020-01-27T21:00:03Z",
        "version": "1.7"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 1003,
        "instance_id": "cloudflare__wrangler-legacy-1003",
        "issue_numbers": [
            "768"
        ],
        "base_commit": "c2cf4626c66a4c7be3b67fa425c0272efbc168bc",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -147,12 +147,12 @@ dependencies = [\n \n [[package]]\n name = \"binary-install\"\n-version = \"0.0.3-alpha\"\n+version = \"0.0.3-alpha.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a81dda17f2dbba8271cf61f2ea3e48e3da8aef31665731bce48818cc07863f06\"\n+checksum = \"f5b3d4bb3a35edf5f87a1e7621a7a1aa9e3278346baa2b34a548869727c80570\"\n dependencies = [\n  \"curl\",\n- \"dirs 1.0.5\",\n+ \"dirs 2.0.2\",\n  \"failure\",\n  \"flate2\",\n  \"fs2\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -932,9 +932,9 @@ dependencies = [\n \n [[package]]\n name = \"hex\"\n-version = \"0.3.2\"\n+version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"805026a5d0141ffc30abb3be3173848ad46a1b1664fe632428479619a3644d77\"\n+checksum = \"644f9158b2f133fd50f5fb3242878846d9eb792e445c893805ff0e3824006e35\"\n \n [[package]]\n name = \"http\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2119,9 +2119,9 @@ dependencies = [\n \n [[package]]\n name = \"siphasher\"\n-version = \"0.2.3\"\n+version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0b8de496cf83d4ed58b6be86c3a275b8602f6ffe98d3024a869e124147a9a3ac\"\n+checksum = \"fa8f3741c7372e75519bd9346068370c9cdaabcc1f9599cbcf2a2719352286b7\"\n \n [[package]]\n name = \"slab\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -2855,6 +2855,7 @@ dependencies = [\n  \"rand 0.6.5\",\n  \"regex\",\n  \"reqwest\",\n+ \"semver\",\n  \"serde 1.0.106\",\n  \"serde_json\",\n  \"serde_with\",\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -14,7 +14,7 @@ build = \"build.rs\"\n atty = \"0.2.14\"\n base64 = \"0.10.1\"\n billboard = \"0.1.0\"\n-binary-install = \"0.0.3-alpha\"\n+binary-install = \"0.0.3-alpha.1\"\n chrome-devtools-rs = { version = \"0.0.0-alpha.0\", features = [\"color\"] }\n chrono = \"0.4.9\"\n clap = \"2.32.0\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -44,6 +44,7 @@ prettytable-rs = \"0.8.0\"\n rand = \"0.6.5\"\n regex = \"1\"\n reqwest = { version = \"0.10.4\", features = [\"blocking\", \"json\"] }\n+semver = \"0.9.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0.39\"\n serde_with = \"1.3.1\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -66,3 +67,6 @@ predicates = \"1.0.2\"\n \n [features]\n vendored-openssl = ['openssl/vendored']\n+\n+[profile.release]\n+debug = true\ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -120,16 +110,13 @@ fn download_prebuilt(\n \n     // no binaries are expected; downloading it as an artifact\n     let res = if !binaries.is_empty() {\n-        CACHE.download(true, tool_name, binaries, &url)?\n+        CACHE.download_version(true, tool_name, binaries, &url, version)?\n     } else {\n-        CACHE.download_artifact(tool_name, &url)?\n+        CACHE.download_artifact_version(tool_name, &url, version)?\n     };\n \n     match res {\n-        Some(download) => {\n-            println!(\"\u2b07\ufe0f Installing {}...\", tool_name);\n-            Ok(download)\n-        }\n+        Some(download) => Ok(download),\n         None => failure::bail!(\"{} is not installed!\", tool_name),\n     }\n }\ndiff --git a/src/terminal/emoji.rs b/src/terminal/emoji.rs\n--- a/src/terminal/emoji.rs\n+++ b/src/terminal/emoji.rs\n@@ -17,6 +17,7 @@ pub static BICEP: Emoji = Emoji(\"\ud83d\udcaa \", \"\");\n pub static CRAB: Emoji = Emoji(\"\ud83e\udd80 \", \"\");\n pub static COMPUTER: Emoji = Emoji(\"\ud83d\udcbb \", \"\");\n pub static DANCERS: Emoji = Emoji(\"\ud83d\udc6f \", \"\");\n+pub static DOWN: Emoji = Emoji(\"\u2b07\ufe0f \", \"\");\n pub static EAR: Emoji = Emoji(\"\ud83d\udc42 \", \"\");\n pub static EYES: Emoji = Emoji(\"\ud83d\udc40 \", \"\");\n pub static FILES: Emoji = Emoji(\"\ud83d\uddc2\ufe0f \", \"\");\ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -19,6 +19,7 @@ use notify::{self, RecursiveMode, Watcher};\n use output::WranglerjsOutput;\n use rand::distributions::Alphanumeric;\n use rand::{thread_rng, Rng};\n+use semver::Version;\n \n use crate::install;\n use crate::settings::toml::Target;\ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -303,8 +308,10 @@ fn install() -> Result<PathBuf, failure::Error> {\n         wranglerjs_path\n     } else {\n         let tool_name = \"wranglerjs\";\n-        let version = env!(\"CARGO_PKG_VERSION\");\n-        let wranglerjs_path = install::install_artifact(tool_name, \"cloudflare\", version)?;\n+        let tool_author = \"cloudflare\";\n+        let is_binary = false;\n+        let version = Version::parse(env!(\"CARGO_PKG_VERSION\"))?;\n+        let wranglerjs_path = install::install(tool_name, tool_author, is_binary, version)?;\n         log::info!(\"wranglerjs downloaded at: {:?}\", wranglerjs_path.path());\n         wranglerjs_path.path()\n     };\n",
        "test_patch": "diff --git a/src/build/mod.rs b/src/build/mod.rs\n--- a/src/build/mod.rs\n+++ b/src/build/mod.rs\n@@ -14,7 +14,11 @@ pub fn build(target: &Target) -> Result<(), failure::Error> {\n         }\n         TargetType::Rust => {\n             let tool_name = \"wasm-pack\";\n-            let binary_path = install::install(tool_name, \"rustwasm\")?.binary(tool_name)?;\n+            let tool_author = \"rustwasm\";\n+            let is_binary = true;\n+            let version = install::get_latest_version(tool_name)?;\n+            let binary_path =\n+                install::install(tool_name, tool_author, is_binary, version)?.binary(tool_name)?;\n             let args = [\"build\", \"--target\", \"no-modules\"];\n \n             let command = command(&args, &binary_path);\ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -55,7 +55,11 @@ pub fn generate(\n \n pub fn run_generate(name: &str, template: &str) -> Result<(), failure::Error> {\n     let tool_name = \"cargo-generate\";\n-    let binary_path = install::install(tool_name, \"ashleygwilliams\")?.binary(tool_name)?;\n+    let tool_author = \"ashleygwilliams\";\n+    let is_binary = true;\n+    let version = install::get_latest_version(tool_name)?;\n+    let binary_path =\n+        install::install(tool_name, tool_author, is_binary, version)?.binary(tool_name)?;\n \n     let args = [\"generate\", \"--git\", template, \"--name\", name, \"--force\"];\n \ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -6,100 +6,90 @@ use crate::terminal::emoji;\n use binary_install::{Cache, Download};\n use krate::Krate;\n use log::info;\n-use which::which;\n+use semver::Version;\n \n use std::env;\n-use std::path::Path;\n-use std::process::Command;\n+use std::fs;\n+use std::path::{Path, PathBuf};\n \n use lazy_static::lazy_static;\n \n lazy_static! {\n-    static ref CACHE: Cache = get_wrangler_cache().expect(\"creating binary dependency cache\");\n+    static ref CACHE: Cache = get_wrangler_cache().expect(\"Could not get Wrangler cache location\");\n }\n \n-pub fn install(tool_name: &str, owner: &str) -> Result<Download, failure::Error> {\n-    if let Some(download) = tool_exists(tool_name)? {\n-        return Ok(download);\n-    }\n-\n-    let binaries = &[tool_name];\n-    let latest_version = get_latest_version(tool_name)?;\n-    let download = download_prebuilt(tool_name, owner, &latest_version, binaries);\n-    match download {\n-        Ok(download) => Ok(download),\n-        Err(e) => {\n-            failure::bail!(\"could not download pre-built `{}` ({}).\", tool_name, e);\n-        }\n-    }\n+enum ToolDownload {\n+    NeedsInstall(Version),\n+    InstalledAt(Download),\n }\n \n-pub fn install_artifact(\n+pub fn install(\n     tool_name: &str,\n     owner: &str,\n-    version: &str,\n+    is_binary: bool,\n+    version: Version,\n ) -> Result<Download, failure::Error> {\n-    if let Some(download) = tool_exists(tool_name)? {\n-        return Ok(download);\n-    }\n-\n-    let download = download_prebuilt(tool_name, owner, version, &[]);\n-    match download {\n-        Ok(download) => Ok(download),\n-        Err(e) => {\n-            failure::bail!(\"could not download pre-built `{}` ({}).\", tool_name, e);\n+    let download = match tool_needs_update(tool_name, version)? {\n+        ToolDownload::NeedsInstall(version) => {\n+            println!(\"{}  Installing {} v{}...\", emoji::DOWN, tool_name, version);\n+            let binaries: Vec<&str> = if is_binary { vec![tool_name] } else { vec![] };\n+            let download =\n+                download_prebuilt(tool_name, owner, &version.to_string(), binaries.as_ref());\n+            match download {\n+                Ok(download) => Ok(download),\n+                Err(e) => Err(failure::format_err!(\n+                    \"could not download `{}`\\n{}\",\n+                    tool_name,\n+                    e\n+                )),\n+            }\n         }\n-    }\n+        ToolDownload::InstalledAt(download) => Ok(download),\n+    }?;\n+    log::debug!(\"tool {} located at {:?}\", tool_name, download);\n+    Ok(download)\n }\n \n-fn tool_exists(tool_name: &str) -> Result<Option<Download>, failure::Error> {\n-    if let Ok(path) = which(tool_name) {\n-        let no_parent_msg = format!(\"{} There is no path parent\", emoji::WARN);\n-        log::debug!(\"found global {} binary at: {}\", tool_name, path.display());\n-        if !tool_needs_update(tool_name, &path)? {\n-            return Ok(Some(Download::at(path.parent().expect(&no_parent_msg))));\n+fn tool_needs_update(\n+    tool_name: &str,\n+    target_version: Version,\n+) -> Result<ToolDownload, failure::Error> {\n+    let current_installation = get_installation(tool_name, &target_version);\n+    // if something goes wrong checking the current installation\n+    // we shouldn't fail, we should just re-install for them\n+    if let Ok(current_installation) = current_installation {\n+        if let Some((installed_version, installed_location)) = current_installation {\n+            if installed_version == target_version {\n+                return Ok(ToolDownload::InstalledAt(Download::at(&installed_location)));\n+            }\n         }\n     }\n-\n-    Ok(None)\n+    Ok(ToolDownload::NeedsInstall(target_version))\n }\n \n-fn tool_needs_update(tool_name: &str, path: &Path) -> Result<bool, failure::Error> {\n-    let no_version_msg = format!(\"failed to find version for {}\", tool_name);\n-\n-    let tool_version_output = Command::new(path.as_os_str())\n-        .arg(\"--version\")\n-        .output()\n-        .expect(&no_version_msg);\n-\n-    if !tool_version_output.status.success() {\n-        let error = String::from_utf8_lossy(&tool_version_output.stderr);\n-        log::debug!(\"could not find version for {}\\n{}\", tool_name, error);\n-        return Ok(true);\n-    }\n-\n-    let installed_tool_version = String::from_utf8_lossy(&tool_version_output.stdout);\n-    let installed_tool_version = match installed_tool_version.split_whitespace().last() {\n-        None => return Ok(true),\n-        Some(v) => v,\n-    };\n-    let latest_tool_version = get_latest_version(tool_name)?;\n-    // TODO: If latest_tool_version is error, try getting latest version via a github api call.\n-    if installed_tool_version == latest_tool_version {\n-        log::debug!(\n-            \"installed {} version {} is up to date\",\n-            tool_name,\n-            installed_tool_version\n-        );\n-        return Ok(false);\n+fn get_installation(\n+    tool_name: &str,\n+    target_version: &Version,\n+) -> Result<Option<(Version, PathBuf)>, failure::Error> {\n+    for entry in fs::read_dir(&CACHE.destination)? {\n+        let entry = entry?;\n+        let filename = entry.file_name().into_string();\n+        if let Ok(filename) = filename {\n+            if filename.starts_with(tool_name) {\n+                let installed_version = filename\n+                    .split(&format!(\"{}-\", tool_name))\n+                    .collect::<Vec<&str>>()[1];\n+                let installed_version = Version::parse(installed_version);\n+                // if the installed version can't be parsed, ignore it\n+                if let Ok(installed_version) = installed_version {\n+                    if &installed_version == target_version {\n+                        return Ok(Some((installed_version, entry.path())));\n+                    }\n+                }\n+            }\n+        }\n     }\n-    log::info!(\n-        \"installed {} version {} is out of date with latest version {}\",\n-        tool_name,\n-        installed_tool_version,\n-        latest_tool_version\n-    );\n-    Ok(true)\n+    Ok(None)\n }\n \n fn download_prebuilt(\ndiff --git a/src/install/mod.rs b/src/install/mod.rs\n--- a/src/install/mod.rs\n+++ b/src/install/mod.rs\n@@ -159,10 +146,11 @@ fn prebuilt_url(tool_name: &str, owner: &str, version: &str) -> Option<String> {\n     }\n }\n \n-fn get_latest_version(tool_name: &str) -> Result<String, failure::Error> {\n+pub fn get_latest_version(tool_name: &str) -> Result<Version, failure::Error> {\n     // TODO: return the latest version pulled from github api, not via Krate.\n-    // TODO(argo tunnel team): make cloudflared binary available on github.\n-    Ok(Krate::new(tool_name)?.max_version)\n+    let latest_version = Krate::new(tool_name)?.max_version;\n+    Version::parse(&latest_version)\n+        .map_err(|e| failure::format_err!(\"could not parse latest version\\n{}\", e))\n }\n \n fn get_wrangler_cache() -> Result<Cache, failure::Error> {\ndiff --git a/src/watch/mod.rs b/src/watch/mod.rs\n--- a/src/watch/mod.rs\n+++ b/src/watch/mod.rs\n@@ -53,7 +53,11 @@ pub fn watch_and_build(\n         }\n         TargetType::Rust => {\n             let tool_name = \"wasm-pack\";\n-            let binary_path = install::install(tool_name, \"rustwasm\")?.binary(tool_name)?;\n+            let tool_author = \"rustwasm\";\n+            let is_binary = true;\n+            let version = install::get_latest_version(tool_name)?;\n+            let binary_path =\n+                install::install(tool_name, tool_author, is_binary, version)?.binary(tool_name)?;\n             let args = [\"build\", \"--target\", \"no-modules\"];\n \n             thread::spawn(move || {\ndiff --git a/src/wranglerjs/mod.rs b/src/wranglerjs/mod.rs\n--- a/src/wranglerjs/mod.rs\n+++ b/src/wranglerjs/mod.rs\n@@ -168,7 +169,11 @@ fn setup_build(target: &Target) -> Result<(Command, PathBuf, Bundle), failure::E\n \n     // export WASM_PACK_PATH for use by wasm-pack-plugin\n     // https://github.com/wasm-tool/wasm-pack-plugin/blob/caca20df84782223f002735a8a2e99b2291f957c/plugin.js#L13\n-    let wasm_pack_path = install::install(\"wasm-pack\", \"rustwasm\")?.binary(\"wasm-pack\")?;\n+    let tool_name = \"wasm-pack\";\n+    let tool_author = \"rustwasm\";\n+    let version = install::get_latest_version(tool_name)?;\n+    let wasm_pack_path =\n+        install::install(tool_name, tool_author, true, version)?.binary(\"wasm-pack\")?;\n     command.env(\"WASM_PACK_PATH\", wasm_pack_path);\n \n     // create a temp file for IPC with the wranglerjs process\n",
        "problem_statement": "Installing on every change wasm-pack / wranglerjs\n### \ud83d\udc1b Bug Report\r\n\r\nWhen i run `wrangler preview --watch` it's installing on every change those packages. Is that normal? It takes lot of time on every change.\r\n\r\n#### Environment\r\n\r\n* operating system: NixOs\r\n* output of `rustc -V`: Is not installed\r\n* output of `node -v`: v12.5.0\r\n* output of `wrangler -V`: wrangler 1.4.0\r\n\r\n#### Steps to reproduce\r\n\r\nEmpty new Project and then preview it with watch\r\n\r\n#### What did you expect to see?\r\nFaster loading without installing on every change that package\r\n\r\n#### What did you see instead?\r\nTaking time on every change to install that package\r\n\n",
        "hints_text": "Bump! Would like a way to not have to install wrangler and wasm-pack every time I publish my worker.\r\n\r\n@ashleymichal @ashleygwilliams Will this be implemented into the next release? Installing `wrangler-js` and `wasm-pack` on every publish is super slow :( (Plus I don't even use wasm in my code)\r\n\r\nMaybe just showing a message saying there's an update to one of the packages would be helpful? So we know when we need to update it :)\ncurrently we check to see if the latest version of the binary we need is [installed on the system](https://github.com/cloudflare/wrangler/blob/master/src/install/mod.rs#L56). We need to instead check if the latest version is installed in the [install directory](https://github.com/cloudflare/wrangler/blob/master/src/install/mod.rs#L28). this is difficult because our install directory is full of things like `wranglerjs-789087` that don't have the version names in the directories. \r\n\r\n1) When we download, we should put the version number in the directory number\r\n2) When we check if we need an install, we should see if the version number already exists in the download folder (optionally also check the system version)\r\n3) If there is an updated version we need to install, we should install that and clean up the old one",
        "created_at": "2020-01-17T18:09:38Z",
        "version": "1.9"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 981,
        "instance_id": "cloudflare__wrangler-legacy-981",
        "issue_numbers": [
            "958",
            "958"
        ],
        "base_commit": "7c5e7faf1b2a950cbc65cef9be8fea5f9c26e16c",
        "patch": "diff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -140,7 +140,10 @@ fn get_dir_iterator(target: &Target, directory: &Path) -> Result<Walk, failure::\n     };\n \n     let ignore = build_ignore(target, directory)?;\n-    Ok(WalkBuilder::new(directory).overrides(ignore).build())\n+    Ok(WalkBuilder::new(directory)\n+        .git_ignore(false)\n+        .overrides(ignore)\n+        .build())\n }\n \n fn build_ignore(target: &Target, directory: &Path) -> Result<Override, failure::Error> {\n",
        "test_patch": "diff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -255,6 +258,7 @@ mod tests {\n     use super::*;\n     use regex::Regex;\n     use std::fs;\n+    use std::io::Write;\n     use std::path::{Path, PathBuf};\n \n     use crate::settings::toml::{Site, Target, TargetType};\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -439,6 +443,49 @@ mod tests {\n         fs::remove_dir_all(test_dir).unwrap();\n     }\n \n+    #[test]\n+    fn it_can_include_gitignore_entries() {\n+        // We don't want our wrangler include/exclude functionality to read .gitignore files.\n+        let mut site = Site::default();\n+        site.bucket = PathBuf::from(\"public\");\n+        let target = make_target(site);\n+\n+        let test_dir = \"test7\";\n+        // If test dir already exists, delete it.\n+        if fs::metadata(test_dir).is_ok() {\n+            fs::remove_dir_all(test_dir).unwrap();\n+        }\n+\n+        fs::create_dir(test_dir).unwrap();\n+        // Create .gitignore file in test7 directory\n+        let gitignore_pathname = format!(\"{}/.gitignore\", test_dir);\n+        let gitignore_path = PathBuf::from(&gitignore_pathname);\n+        let mut gitignore = fs::File::create(&gitignore_path).unwrap();\n+        writeln!(gitignore, \"public/\").unwrap();\n+\n+        // Create 'public/' directory, which should be included.\n+        let upload_dir = format!(\"{}/public\", test_dir);\n+        fs::create_dir(&upload_dir).unwrap();\n+        let test_pathname = format!(\"{}/notice_me.txt\", &upload_dir);\n+        let test_path = PathBuf::from(&test_pathname);\n+        fs::File::create(&test_path).unwrap();\n+\n+        let files: Vec<_> = get_dir_iterator(&target, Path::new(&upload_dir))\n+            .unwrap()\n+            .map(|entry| entry.unwrap().path().to_owned())\n+            .collect();\n+\n+        assert!(files.contains(&test_path));\n+\n+        // Why drop()? Well, fs::remove_dir_all on Windows depends on the DeleteFileW syscall.\n+        // This syscall doesn't actually delete a file, but only marks it for deletion. It still\n+        // can be alive when we try to delete the parent directory test_dir, causing a \"directory\n+        // is not empty\" error. As a result, we MUST call drop() to close the gitignore file so\n+        // that it is not alive when fs::remove_dir_all(test_dir) is called.\n+        drop(gitignore);\n+        fs::remove_dir_all(test_dir).unwrap();\n+    }\n+\n     #[test]\n     fn it_inserts_hash_before_extension() {\n         let value = \"<h1>Hello World!</h1>\";\n",
        "problem_statement": "Workers Sites uploads do not include files that are in .gitignore\n### \ud83d\udc1b Bug Report\r\n\r\n<!-- \r\n  Please fill out each section below before submitting your \ud83d\udc1b bug report.\r\n\r\n  Before opening a new issue, please:\r\n  * search for existing issues: https://github.com/cloudflare/wrangler/issues\r\n  * make sure you are using the latest release: https://workers.cloudflare.com/docs/quickstart/updating-the-cli/\r\n  \r\n  Thanks! -->\r\n\r\n#### Environment\r\n\r\n* operating system: windows 10 pro v1909 (18363.535) \r\n\r\n#### Steps to reproduce\r\nGenerate workers site project, set account id, api access granted using workers site template permissions. \r\n\r\nStatic file export of Wordpress site, placed in ./public folder\r\n\r\nRun wrangler publish \r\n\r\nSome css and js and font files are not uploaded (as seen by http 500 error in chrome dev tools for those resources)\r\n\r\nI suspect this is because the files are in a deep folder structure, because when these files are moved to root public folder or 1 folder deep, wrangler does not skip them and they are successfully deployed.\r\n\r\n#### What did you expect to see?\r\nI expect ALL files in ./public folder to be deployed\r\n#### What did you see instead?\r\nSome files are skipped during wrangler publish process\nWorkers Sites uploads do not include files that are in .gitignore\n### \ud83d\udc1b Bug Report\r\n\r\n<!-- \r\n  Please fill out each section below before submitting your \ud83d\udc1b bug report.\r\n\r\n  Before opening a new issue, please:\r\n  * search for existing issues: https://github.com/cloudflare/wrangler/issues\r\n  * make sure you are using the latest release: https://workers.cloudflare.com/docs/quickstart/updating-the-cli/\r\n  \r\n  Thanks! -->\r\n\r\n#### Environment\r\n\r\n* operating system: windows 10 pro v1909 (18363.535) \r\n\r\n#### Steps to reproduce\r\nGenerate workers site project, set account id, api access granted using workers site template permissions. \r\n\r\nStatic file export of Wordpress site, placed in ./public folder\r\n\r\nRun wrangler publish \r\n\r\nSome css and js and font files are not uploaded (as seen by http 500 error in chrome dev tools for those resources)\r\n\r\nI suspect this is because the files are in a deep folder structure, because when these files are moved to root public folder or 1 folder deep, wrangler does not skip them and they are successfully deployed.\r\n\r\n#### What did you expect to see?\r\nI expect ALL files in ./public folder to be deployed\r\n#### What did you see instead?\r\nSome files are skipped during wrangler publish process\n",
        "hints_text": "Hey @lighterpl - my guess is that these assets are actually being uploaded and they're just linked incorrectly from within the application.\r\n\r\nThat being said this is just a hunch, and it's very possible that they are not being uploaded! The best way for us to help here is if you could point us to a repository that reproduces the problem and then we can investigate :)\nSeems that it happens when there is a subfolder anywhere inside the ./public directory named \u201cdist\u201d all files inside are ignored.\nAha! It seems that Wrangler is not uploading files in the `.gitignore` for some reason. I'm pretty sure this is a bug! While we work on a fix for this, you should be able edit your `.gitignore` file - it should have `dist` in it, you can change this to `/dist` so it only ignores the top level `dist` directory, and not the directory in your `public` folder. Hope this helps!\nHey @lighterpl - my guess is that these assets are actually being uploaded and they're just linked incorrectly from within the application.\r\n\r\nThat being said this is just a hunch, and it's very possible that they are not being uploaded! The best way for us to help here is if you could point us to a repository that reproduces the problem and then we can investigate :)\nSeems that it happens when there is a subfolder anywhere inside the ./public directory named \u201cdist\u201d all files inside are ignored.\nAha! It seems that Wrangler is not uploading files in the `.gitignore` for some reason. I'm pretty sure this is a bug! While we work on a fix for this, you should be able edit your `.gitignore` file - it should have `dist` in it, you can change this to `/dist` so it only ignores the top level `dist` directory, and not the directory in your `public` folder. Hope this helps!",
        "created_at": "2020-01-03T18:31:24Z",
        "version": "1.6"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 686,
        "instance_id": "cloudflare__wrangler-legacy-686",
        "issue_numbers": [
            "470"
        ],
        "base_commit": "81d11a820475979263d4f7d42c30018d73cd68f3",
        "patch": "diff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -1,9 +1,10 @@\n-use crate::settings::target::{Manifest, Site, TargetType};\n-use crate::{commands, install};\n use std::path::PathBuf;\n use std::process::Command;\n \n+use crate::commands::validate_worker_name;\n+use crate::settings::target::{Manifest, Site, TargetType};\n use crate::terminal::{emoji, message};\n+use crate::{commands, install};\n \n pub fn generate(\n     name: &str,\ndiff --git a/src/commands/generate.rs b/src/commands/generate.rs\n--- a/src/commands/generate.rs\n+++ b/src/commands/generate.rs\n@@ -11,6 +12,8 @@ pub fn generate(\n     target_type: Option<TargetType>,\n     site: bool,\n ) -> Result<(), failure::Error> {\n+    validate_worker_name(name)?;\n+\n     let target_type = target_type.unwrap_or_else(|| get_target_type(template));\n     run_generate(name, template, &target_type)?;\n     let config_path = PathBuf::from(\"./\").join(&name);\ndiff --git a/src/commands/init.rs b/src/commands/init.rs\n--- a/src/commands/init.rs\n+++ b/src/commands/init.rs\n@@ -1,7 +1,9 @@\n+use std::path::{Path, PathBuf};\n+\n use crate::commands;\n+use crate::commands::validate_worker_name;\n use crate::settings::target::{Manifest, Site, TargetType};\n use crate::terminal::message;\n-use std::path::{Path, PathBuf};\n \n pub fn init(\n     name: Option<&str>,\ndiff --git a/src/commands/init.rs b/src/commands/init.rs\n--- a/src/commands/init.rs\n+++ b/src/commands/init.rs\n@@ -13,6 +15,8 @@ pub fn init(\n     }\n     let dirname = get_current_dirname()?;\n     let name = name.unwrap_or_else(|| &dirname);\n+    validate_worker_name(name)?;\n+\n     let target_type = target_type.unwrap_or_default();\n     let config_path = PathBuf::from(\"./\");\n     let initialized_site = if site { Some(Site::default()) } else { None };\ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -6,6 +6,7 @@ use crate::commands::kv;\n use crate::settings::global_user::GlobalUser;\n use crate::settings::target::Target;\n use crate::terminal::message;\n+use regex::Regex;\n \n pub fn create(\n     target: &Target,\ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -17,11 +18,7 @@ pub fn create(\n \n     let client = kv::api_client(user)?;\n \n-    if !validate_binding(binding) {\n-        failure::bail!(\n-            \"A binding can only have alphanumeric and _ characters, and cannot begin with a number\"\n-        );\n-    }\n+    validate_binding(binding)?;\n \n     let title = format!(\"{}-{}\", target.name, binding);\n     let msg = format!(\"Creating namespace with title \\\"{}\\\"\", title);\ndiff --git a/src/commands/mod.rs b/src/commands/mod.rs\n--- a/src/commands/mod.rs\n+++ b/src/commands/mod.rs\n@@ -19,6 +19,7 @@ pub use init::init;\n pub use publish::preview::preview;\n pub use publish::preview::HTTPMethod;\n pub use publish::publish;\n+use regex::Regex;\n pub use subdomain::subdomain;\n pub use whoami::whoami;\n \ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -16,6 +16,7 @@ use std::path::Path;\n use crate::commands;\n use crate::commands::kv;\n use crate::commands::subdomain::Subdomain;\n+use crate::commands::validate_worker_name;\n use crate::http;\n use crate::settings::global_user::GlobalUser;\n \ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -25,7 +26,8 @@ use crate::terminal::{emoji, message};\n pub fn publish(user: &GlobalUser, target: &mut Target) -> Result<(), failure::Error> {\n     log::info!(\"workers_dev = {}\", target.workers_dev);\n \n-    validate_target(target)?;\n+    validate_target_required_fields_present(target)?;\n+    validate_worker_name(&target.name)?;\n \n     if let Some(site_config) = &target.site {\n         let site_namespace = kv::namespace::site(target, user)?;\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -129,7 +131,7 @@ fn publish_to_subdomain(target: &Target, user: &GlobalUser) -> Result<String, fa\n     Ok(format!(\"https://{}.{}.workers.dev\", target.name, subdomain))\n }\n \n-fn validate_target(target: &Target) -> Result<(), failure::Error> {\n+fn validate_target_required_fields_present(target: &Target) -> Result<(), failure::Error> {\n     let mut missing_fields = Vec::new();\n \n     if target.account_id.is_empty() {\n",
        "test_patch": "diff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -74,10 +71,14 @@ pub fn create(\n     Ok(())\n }\n \n-fn validate_binding(binding: &str) -> bool {\n-    use regex::Regex;\n+fn validate_binding(binding: &str) -> Result<(), failure::Error> {\n     let re = Regex::new(r\"^[a-zA-Z_][a-zA-Z0-9_]*$\").unwrap();\n-    re.is_match(binding)\n+    if !re.is_match(binding) {\n+        failure::bail!(\n+            \"A binding can only have alphanumeric and _ characters, and cannot begin with a number\"\n+        )\n+    }\n+    Ok(())\n }\n \n #[cfg(test)]\ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -88,7 +89,7 @@ mod tests {\n     fn it_can_detect_invalid_binding() {\n         let invalid_bindings = vec![\"hi there\", \"1234\"];\n         for binding in invalid_bindings {\n-            assert!(!validate_binding(binding));\n+            assert!(validate_binding(binding).is_err());\n         }\n     }\n \ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -96,7 +97,7 @@ mod tests {\n     fn it_can_detect_valid_binding() {\n         let valid_bindings = vec![\"ONE\", \"TWO_TWO\", \"__private_variable\", \"rud3_var\"];\n         for binding in valid_bindings {\n-            assert!(validate_binding(binding));\n+            assert!(validate_binding(binding).is_ok());\n         }\n     }\n }\ndiff --git a/src/commands/mod.rs b/src/commands/mod.rs\n--- a/src/commands/mod.rs\n+++ b/src/commands/mod.rs\n@@ -38,3 +39,33 @@ pub fn run(mut command: Command, command_name: &str) -> Result<(), failure::Erro\n         )\n     }\n }\n+\n+// Ensures that Worker name is valid.\n+pub fn validate_worker_name(name: &str) -> Result<(), failure::Error> {\n+    let re = Regex::new(r\"^[a-z0-9_][a-z0-9-_]*$\").unwrap();\n+    if !re.is_match(&name) {\n+        failure::bail!(\"Worker name \\\"{}\\\" invalid. Ensure that you only use lowercase letters, dashes, underscores, and numbers.\", name)\n+    }\n+    Ok(())\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn it_can_detect_invalid_worker_name() {\n+        let invalid_names = vec![\"mySite\", \"nicky.fun\"];\n+        for name in invalid_names {\n+            assert!(validate_worker_name(name).is_err());\n+        }\n+    }\n+\n+    #[test]\n+    fn it_can_detect_valid_worker_name() {\n+        let valid_names = vec![\"my-blog\", \"blog123\", \"bloggyity_blog\"];\n+        for name in valid_names {\n+            assert!(validate_worker_name(name).is_ok());\n+        }\n+    }\n+}\n",
        "problem_statement": "Wrangler generate project name requirements\n### \ud83d\udc1b Bug Report\r\n\r\n<!-- \r\n  Please fill out each section below before submitting your \ud83d\udc1b bug report.\r\n\r\n  Before opening a new issue, please:\r\n  * search for existing issues: https://github.com/cloudflare/wrangler/issues\r\n  * make sure you are using the latest release: https://workers.cloudflare.com/docs/quickstart/updating-the-cli/\r\n  \r\n  Thanks! -->\r\n\r\n#### Environment\r\n\r\n* operating system: OSX\r\n* output of `rustc -V`: ` rustc 1.36.0 (a53f9df32 2019-07-03)`\r\n* output of `wrangler -V`: `\ud83d\udc77 \u2728  wrangler 1.2.0`\r\n\r\n#### Steps to reproduce\r\n\r\n<!-- Clear steps describing how to reproduce the issue. If you have a repository that exhibits the problem, please link it! -->\r\n```\r\nwrangler generate myApp https://github.com/cloudflare/worker-template \r\ncd myApp\r\n# config wrangler.toml\r\nwrangler publish\r\n```\r\n\r\n#### What did you expect to see?\r\nWrangler generate should either:\r\n1. rename project names to Worker API accepted values \r\nOR \r\n2. reject the project name upon `generate`\r\nInstead one can successfully generate a project with a name not accepted by the API\r\n\r\n#### What did you see instead?\r\n```\r\nnpm notice created a lockfile as package-lock.json. You should commit this file.\r\nnpm WARN myApp@1.0.0 No repository field.\r\n\r\nadded 1 package in 1.181s\r\n\u2b07\ufe0f Installing wranglerjs...\r\n\u2728  Built successfully, built project size is 517 bytes.\r\nError: Something went wrong! Status: 400 Bad Request, Details {\r\n  \"result\": null,\r\n  \"success\": false,\r\n  \"errors\": [\r\n    {\r\n      \"code\": 10016,\r\n      \"message\": \"workers.api.error.invalid_script_name\"\r\n    }\r\n  ],\r\n  \"messages\": []\r\n}\r\n```\r\nOriginal discussion in https://github.com/cloudflare/cloudflare-docs/issues/261 \n",
        "hints_text": "We will check that a given worker name is valid by running it against the workers name regex, `\"^[a-z0-9_][a-z0-9-_]*$\"`. cc @ashleygwilliams @ashleymichal ",
        "created_at": "2019-09-23T20:04:26Z"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 665,
        "instance_id": "cloudflare__wrangler-legacy-665",
        "issue_numbers": [
            "607"
        ],
        "base_commit": "c47dc3ac5aa65a769dddef969b1e608f9e63c266",
        "patch": "diff --git a/src/commands/kv/bucket/sync.rs b/src/commands/kv/bucket/sync.rs\n--- a/src/commands/kv/bucket/sync.rs\n+++ b/src/commands/kv/bucket/sync.rs\n@@ -19,6 +19,8 @@ pub fn sync(\n     path: &Path,\n     verbose: bool,\n ) -> Result<(), failure::Error> {\n+    kv::validate_target(target)?;\n+\n     // First, upload all existing files in given directory\n     if verbose {\n         message::info(\"Preparing to upload updated files...\");\ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -20,6 +20,8 @@ pub fn delete(\n     namespace_id: &str,\n     filename: &Path,\n ) -> Result<(), failure::Error> {\n+    kv::validate_target(target)?;\n+\n     match kv::interactive_delete(&format!(\n         \"Are you sure you want to delete all keys in {}?\",\n         filename.display()\ndiff --git a/src/commands/kv/bulk/put.rs b/src/commands/kv/bulk/put.rs\n--- a/src/commands/kv/bulk/put.rs\n+++ b/src/commands/kv/bulk/put.rs\n@@ -20,6 +20,8 @@ pub fn put(\n     namespace_id: &str,\n     filename: &Path,\n ) -> Result<(), failure::Error> {\n+    kv::validate_target(target)?;\n+\n     let pairs: Result<Vec<KeyValuePair>, failure::Error> = match &metadata(filename) {\n         Ok(file_type) if file_type.is_file() => {\n             let data = fs::read_to_string(filename)?;\ndiff --git a/src/commands/kv/key/delete.rs b/src/commands/kv/key/delete.rs\n--- a/src/commands/kv/key/delete.rs\n+++ b/src/commands/kv/key/delete.rs\n@@ -12,6 +12,7 @@ pub fn delete(\n     id: &str,\n     key: &str,\n ) -> Result<(), failure::Error> {\n+    kv::validate_target(target)?;\n     let client = kv::api_client(user)?;\n \n     match kv::interactive_delete(&format!(\"Are you sure you want to delete key \\\"{}\\\"?\", key)) {\ndiff --git a/src/commands/kv/key/get.rs b/src/commands/kv/key/get.rs\n--- a/src/commands/kv/key/get.rs\n+++ b/src/commands/kv/key/get.rs\n@@ -11,6 +11,7 @@ use crate::settings::global_user::GlobalUser;\n use crate::settings::target::Target;\n \n pub fn get(target: &Target, user: GlobalUser, id: &str, key: &str) -> Result<(), failure::Error> {\n+    kv::validate_target(target)?;\n     let api_endpoint = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/storage/kv/namespaces/{}/values/{}\",\n         target.account_id,\ndiff --git a/src/commands/kv/key/list.rs b/src/commands/kv/key/list.rs\n--- a/src/commands/kv/key/list.rs\n+++ b/src/commands/kv/key/list.rs\n@@ -14,6 +14,7 @@ pub fn list(\n     namespace_id: &str,\n     prefix: Option<&str>,\n ) -> Result<(), failure::Error> {\n+    kv::validate_target(target)?;\n     let key_list = KeyList::new(target, user, namespace_id, prefix)?;\n \n     print!(\"[\"); // Open json list bracket\ndiff --git a/src/commands/kv/key/put.rs b/src/commands/kv/key/put.rs\n--- a/src/commands/kv/key/put.rs\n+++ b/src/commands/kv/key/put.rs\n@@ -24,6 +24,8 @@ pub fn put(\n     expiration: Option<&str>,\n     expiration_ttl: Option<&str>,\n ) -> Result<(), failure::Error> {\n+    kv::validate_target(target)?;\n+\n     let api_endpoint = format!(\n         \"https://api.cloudflare.com/client/v4/accounts/{}/storage/kv/namespaces/{}/values/{}\",\n         target.account_id,\ndiff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -121,6 +121,9 @@ fn give_status_code_context(status_code: StatusCode) {\n fn help(error_code: u16) -> &'static str {\n     // https://api.cloudflare.com/#workers-kv-namespace-errors\n     match error_code {\n+        7003 | 7000 => {\n+            \"Your wrangler.toml is likely missing the field \\\"account_id\\\", which is required to write to Workers KV.\"\n+        }\n         // namespace errors\n         10010 | 10011 | 10012 | 10013 | 10014 | 10018 => {\n             \"Run `wrangler kv:namespace list` to see your existing namespaces with IDs\"\ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -13,6 +13,8 @@ pub fn create(\n     user: GlobalUser,\n     binding: &str,\n ) -> Result<(), failure::Error> {\n+    kv::validate_target(target)?;\n+\n     let client = kv::api_client(user)?;\n \n     if !validate_binding(binding) {\ndiff --git a/src/commands/kv/namespace/delete.rs b/src/commands/kv/namespace/delete.rs\n--- a/src/commands/kv/namespace/delete.rs\n+++ b/src/commands/kv/namespace/delete.rs\n@@ -7,6 +7,7 @@ use crate::settings::target::Target;\n use crate::terminal::message;\n \n pub fn delete(target: &Target, user: GlobalUser, id: &str) -> Result<(), failure::Error> {\n+    kv::validate_target(target)?;\n     let client = kv::api_client(user)?;\n \n     match kv::interactive_delete(&format!(\ndiff --git a/src/commands/kv/namespace/list.rs b/src/commands/kv/namespace/list.rs\n--- a/src/commands/kv/namespace/list.rs\n+++ b/src/commands/kv/namespace/list.rs\n@@ -6,6 +6,7 @@ use crate::settings::global_user::GlobalUser;\n use crate::settings::target::Target;\n \n pub fn list(target: &Target, user: GlobalUser) -> Result<(), failure::Error> {\n+    kv::validate_target(target)?;\n     let client = kv::api_client(user)?;\n \n     let response = client.request(&ListNamespaces {\ndiff --git a/src/commands/kv/namespace/site.rs b/src/commands/kv/namespace/site.rs\n--- a/src/commands/kv/namespace/site.rs\n+++ b/src/commands/kv/namespace/site.rs\n@@ -11,6 +11,7 @@ use crate::settings::target::Target;\n use crate::terminal::message;\n \n pub fn site(target: &Target, user: &GlobalUser) -> Result<WorkersKvNamespace, failure::Error> {\n+    kv::validate_target(target)?;\n     let client = kv::api_client(user.to_owned())?;\n \n     let title = format!(\"__{}-{}\", target.name, \"workers_sites_assets\");\n",
        "test_patch": "diff --git a/src/commands/kv/mod.rs b/src/commands/kv/mod.rs\n--- a/src/commands/kv/mod.rs\n+++ b/src/commands/kv/mod.rs\n@@ -138,6 +141,23 @@ fn help(error_code: u16) -> &'static str {\n     }\n }\n \n+pub fn validate_target(target: &Target) -> Result<(), failure::Error> {\n+    let mut missing_fields = Vec::new();\n+\n+    if target.account_id.is_empty() {\n+        missing_fields.push(\"account_id\")\n+    };\n+\n+    if !missing_fields.is_empty() {\n+        failure::bail!(\n+            \"Your wrangler.toml is missing the following field(s): {:?}\",\n+            missing_fields\n+        )\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::commands::kv;\n",
        "problem_statement": "Provide better messaging when account_id is missing\nWhen the api gateway receives an invalid account tag, it returns a rather cryptic error:\r\n\r\n``` terminal\r\nError 7003: Could not route to /accounts/storage/kv/namespaces/63ab5438e79d4678bb16262d4b7f5f79/keys,\r\n```\r\nwe should catch code 7003 and return a helpful message suggesting the user check their account id.\n",
        "hints_text": "Upgrading this to high priority because testers point to this problem frequently.",
        "created_at": "2019-09-23T05:44:15Z"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 664,
        "instance_id": "cloudflare__wrangler-legacy-664",
        "issue_numbers": [
            "656"
        ],
        "base_commit": "0402df3800c34d0c9db26b4a22e0a47028ccbf07",
        "patch": "diff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -18,6 +18,7 @@ use walkdir::WalkDir;\n \n use crate::terminal::message;\n \n+// Returns the hashed key and value pair for all files in a directory.\n pub fn directory_keys_values(\n     directory: &Path,\n     verbose: bool,\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -34,7 +35,9 @@ pub fn directory_keys_values(\n             // Need to base64 encode value\n             let b64_value = base64::encode(&value);\n \n-            let (path, key) = generate_key(path, directory, Some(b64_value.clone()))?;\n+            let (url_safe_path, key) =\n+                generate_url_safe_key_and_hash(path, directory, Some(b64_value.clone()))?;\n+\n             if verbose {\n                 message::working(&format!(\"Parsing {}...\", key.clone()));\n             }\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -45,12 +48,13 @@ pub fn directory_keys_values(\n                 expiration_ttl: None,\n                 base64: Some(true),\n             });\n-            key_manifest.insert(path, key);\n+            key_manifest.insert(url_safe_path, key);\n         }\n     }\n     Ok((upload_vec, key_manifest))\n }\n \n+// Returns only the hashed keys for a directory's files.\n fn directory_keys_only(directory: &Path) -> Result<Vec<String>, failure::Error> {\n     let mut upload_vec: Vec<String> = Vec::new();\n     for entry in WalkDir::new(directory) {\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -62,7 +66,7 @@ fn directory_keys_only(directory: &Path) -> Result<Vec<String>, failure::Error>\n             // Need to base64 encode value\n             let b64_value = base64::encode(&value);\n \n-            let (_, key) = generate_key(path, directory, Some(b64_value))?;\n+            let (_, key) = generate_url_safe_key_and_hash(path, directory, Some(b64_value))?;\n \n             upload_vec.push(key);\n         }\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -70,20 +74,8 @@ fn directory_keys_only(directory: &Path) -> Result<Vec<String>, failure::Error>\n     Ok(upload_vec)\n }\n \n-fn get_digest(value: String) -> Result<String, failure::Error> {\n-    let mut hasher = Sha256::new();\n-    hasher.input(value);\n-    let digest = hasher.result();\n-    let hex_digest = HEXLOWER.encode(digest.as_ref());\n-    Ok(hex_digest)\n-}\n-\n // Courtesy of Steve Klabnik's PoC :) Used for bulk operations (write, delete)\n-fn generate_key(\n-    path: &Path,\n-    directory: &Path,\n-    value: Option<String>,\n-) -> Result<(String, String), failure::Error> {\n+fn generate_url_safe_path(path: &Path, directory: &Path) -> Result<String, failure::Error> {\n     let path = path.strip_prefix(directory).unwrap();\n \n     // next, we have to re-build the paths: if we're on Windows, we have paths with\ndiff --git a/src/commands/kv/bucket/mod.rs b/src/commands/kv/bucket/mod.rs\n--- a/src/commands/kv/bucket/mod.rs\n+++ b/src/commands/kv/bucket/mod.rs\n@@ -105,12 +97,34 @@ fn generate_key(\n         .to_str()\n         .unwrap_or_else(|| panic!(\"found a non-UTF-8 path, {:?}\", path_with_forward_slash));\n \n+    Ok(path.to_string())\n+}\n+\n+// Appends the SHA-256 hash of the path's file contents to the url-safe path of a file to\n+// generate a versioned key for the file and its contents. Returns the url-safe path prefix\n+// for the key, as well as the key with hash appended.\n+// e.g (sitemap.xml, sitemap.xml-ec717eb2131fdd4fff803b851d2aa5b1dc3e0af36bc3c8c40f2095c747e80d1e)\n+pub fn generate_url_safe_key_and_hash(\n+    path: &Path,\n+    directory: &Path,\n+    value: Option<String>,\n+) -> Result<(String, String), failure::Error> {\n+    let url_safe_path = generate_url_safe_path(path, directory)?;\n+\n     let path_with_hash = if let Some(value) = value {\n         let digest = get_digest(value)?;\n-        format!(\"{}-{}\", path, digest)\n+        format!(\"{}-{}\", url_safe_path, digest)\n     } else {\n-        path.to_string()\n+        url_safe_path.to_string()\n     };\n \n-    Ok((path.to_string(), path_with_hash))\n+    Ok((url_safe_path, path_with_hash))\n+}\n+\n+fn get_digest(value: String) -> Result<String, failure::Error> {\n+    let mut hasher = Sha256::new();\n+    hasher.input(value);\n+    let digest = hasher.result();\n+    let hex_digest = HEXLOWER.encode(digest.as_ref());\n+    Ok(hex_digest)\n }\ndiff --git a/src/commands/kv/bucket/sync.rs b/src/commands/kv/bucket/sync.rs\n--- a/src/commands/kv/bucket/sync.rs\n+++ b/src/commands/kv/bucket/sync.rs\n@@ -20,12 +20,35 @@ pub fn sync(\n     verbose: bool,\n ) -> Result<(), failure::Error> {\n     kv::validate_target(target)?;\n+    // First, upload all changed files in given local directory (aka replace files\n+    // in Workers KV that are now stale).\n \n+    // Get remote keys, which contain the hash of the file (value) as the suffix.\n+    // Turn it into a HashSet. This will be used by upload() to figure out which\n+    // files to exclude from upload (because their current version already exists in\n+    // the Workers KV remote).\n+    let remote_keys_iter = KeyList::new(target, user.clone(), namespace_id, None)?;\n+    let mut remote_keys: HashSet<String> = HashSet::new();\n+    for remote_key in remote_keys_iter {\n+        match remote_key {\n+            Ok(remote_key) => {\n+                remote_keys.insert(remote_key.name);\n+            }\n+            Err(e) => failure::bail!(kv::format_error(e)),\n+        }\n+    }\n     // First, upload all existing files in given directory\n     if verbose {\n         message::info(\"Preparing to upload updated files...\");\n     }\n-    upload_files(target, user.clone(), namespace_id, path, verbose)?;\n+    upload_files(\n+        target,\n+        user.clone(),\n+        namespace_id,\n+        path,\n+        Some(&remote_keys),\n+        verbose,\n+    )?;\n \n     // Now delete files from Workers KV that exist in remote but no longer exist locally.\n     // Get local keys\ndiff --git a/src/commands/kv/bucket/sync.rs b/src/commands/kv/bucket/sync.rs\n--- a/src/commands/kv/bucket/sync.rs\n+++ b/src/commands/kv/bucket/sync.rs\n@@ -34,28 +57,14 @@ pub fn sync(\n         Ok(_) => failure::bail!(\"{} should be a directory\", path.display()),\n         Err(e) => failure::bail!(\"{}\", e),\n     }?;\n-    let local_keys: HashSet<_> = HashSet::from_iter(local_keys_vec.iter());\n-\n-    // Then get remote keys\n-    let remote_keys = KeyList::new(target, user.clone(), namespace_id, None)?;\n+    let local_keys: HashSet<_> = HashSet::from_iter(local_keys_vec.into_iter());\n \n     // Find keys that are present in remote but not present in local, and\n-    // stage them for deletion. This is done by iterating over the remote_keys and checking for\n-    // remote_keys that do not exist in local_keys. This logic is similar to that of the\n-    // difference() method in https://doc.rust-lang.org/src/std/collections/hash/set.rs.html,\n-    // but saves us the trouble and overhead memory of converting remote_keys into a HashSet.\n-    let mut keys_to_delete: Vec<String> = Vec::new();\n-    for remote_key in remote_keys {\n-        match remote_key {\n-            Ok(remote_key) => {\n-                let name = remote_key.name;\n-                if !local_keys.contains(&name) {\n-                    keys_to_delete.push(name);\n-                }\n-            }\n-            Err(e) => print!(\"{}\", kv::format_error(e)),\n-        }\n-    }\n+    // stage them for deletion.\n+    let keys_to_delete: Vec<_> = remote_keys\n+        .difference(&local_keys)\n+        .map(|key| key.to_owned())\n+        .collect();\n \n     if !keys_to_delete.is_empty() {\n         if verbose {\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -1,3 +1,4 @@\n+use std::collections::HashSet;\n use std::fs::metadata;\n use std::path::Path;\n \ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -22,6 +23,7 @@ pub fn upload_files(\n     user: GlobalUser,\n     namespace_id: &str,\n     path: &Path,\n+    exclude_keys: Option<&HashSet<String>>,\n     verbose: bool,\n ) -> Result<(), failure::Error> {\n     let mut pairs: Vec<KeyValuePair> = match &metadata(path) {\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -36,6 +38,11 @@ pub fn upload_files(\n         Err(e) => Err(format_err!(\"{}\", e)),\n     }?;\n \n+    // If a list of files to skip uploading is provided, filter the filename/file key pairs\n+    if let Some(excluded_keys) = exclude_keys {\n+        pairs = filter_unchanged_remote_files(pairs, excluded_keys);\n+    }\n+\n     validate_file_uploads(pairs.clone())?;\n \n     // Iterate over all key-value pairs and create batches of uploads, each of which are\ndiff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -87,6 +94,19 @@ fn call_put_bulk_api(\n     Ok(())\n }\n \n+fn filter_unchanged_remote_files(\n+    pairs: Vec<KeyValuePair>,\n+    exclude_keys: &HashSet<String>,\n+) -> Vec<KeyValuePair> {\n+    let mut filtered_pairs: Vec<KeyValuePair> = Vec::new();\n+    for pair in pairs {\n+        if !exclude_keys.contains(&pair.key) {\n+            filtered_pairs.push(pair);\n+        }\n+    }\n+    filtered_pairs\n+}\n+\n // Ensure that all key-value pairs being uploaded have valid sizes (this ensures that\n // no partial uploads happen). I don't like this function because it duplicates the\n // size checking the API already does--but doing a preemptive check like this (before\n",
        "test_patch": "diff --git a/src/commands/kv/bucket/upload.rs b/src/commands/kv/bucket/upload.rs\n--- a/src/commands/kv/bucket/upload.rs\n+++ b/src/commands/kv/bucket/upload.rs\n@@ -112,3 +132,84 @@ pub fn validate_file_uploads(pairs: Vec<KeyValuePair>) -> Result<(), failure::Er\n     }\n     Ok(())\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use std::collections::HashSet;\n+    use std::path::Path;\n+\n+    use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n+\n+    use crate::commands::kv::bucket::generate_url_safe_key_and_hash;\n+    use crate::commands::kv::bucket::upload::filter_unchanged_remote_files;\n+\n+    #[test]\n+    fn it_can_filter_preexisting_files() {\n+        let (_, key_a_old) = generate_url_safe_key_and_hash(\n+            Path::new(\"/a\"),\n+            Path::new(\"/\"),\n+            Some(\"old\".to_string()),\n+        )\n+        .unwrap();\n+        let (_, key_b_old) = generate_url_safe_key_and_hash(\n+            Path::new(\"/b\"),\n+            Path::new(\"/\"),\n+            Some(\"old\".to_string()),\n+        )\n+        .unwrap();\n+        // Generate new key (using hash of new value) for b when to simulate its value being updated.\n+        let (_, key_b_new) = generate_url_safe_key_and_hash(\n+            Path::new(\"/b\"),\n+            Path::new(\"/\"),\n+            Some(\"new\".to_string()),\n+        )\n+        .unwrap();\n+\n+        // Old values found on remote\n+        let mut exclude_keys = HashSet::new();\n+        exclude_keys.insert(key_a_old.clone());\n+        exclude_keys.insert(key_b_old.clone());\n+\n+        // local files (with b updated) to upload\n+        let pairs_to_upload = vec![\n+            KeyValuePair {\n+                key: key_a_old,\n+                value: \"old\".to_string(), // This value remains unchanged\n+                expiration_ttl: None,\n+                expiration: None,\n+                base64: None,\n+            },\n+            KeyValuePair {\n+                key: key_b_new.clone(),\n+                value: \"new\".to_string(), // Note this pair has a new value\n+                expiration_ttl: None,\n+                expiration: None,\n+                base64: None,\n+            },\n+        ];\n+\n+        let expected = vec![KeyValuePair {\n+            key: key_b_new,\n+            value: \"new\".to_string(),\n+            expiration_ttl: None,\n+            expiration: None,\n+            base64: None,\n+        }];\n+        let actual = filter_unchanged_remote_files(pairs_to_upload, &exclude_keys);\n+        check_kv_pairs_equality(expected, actual);\n+    }\n+\n+    fn check_kv_pairs_equality(expected: Vec<KeyValuePair>, actual: Vec<KeyValuePair>) {\n+        assert!(expected.len() == actual.len());\n+        let mut idx = 0;\n+        for pair in expected {\n+            // Ensure the expected key and value was returned in the filtered pair list\n+            // Awkward field-by-field comparison below courtesy of not yet implementing\n+            // PartialEq for KeyValuePair in cloudflare-rs :)\n+            // todo(gabbi): Implement PartialEq for KeyValuePair in cloudflare-rs.\n+            assert!(pair.key == actual[idx].key);\n+            assert!(pair.value == actual[idx].value);\n+            idx = idx + 1;\n+        }\n+    }\n+}\n",
        "problem_statement": "Ensure bucket sync only uploads files that have changed\nNow that asset manifests have landed, we are in a place to implement the last component of Wrangler file syncing to Workers KV: only uploading files if they have changed. We do this by generating the hash of a file and seeing if the file exists in the remote with that hash; if so, do not upload the file again (the remote version is up-to-date).\n",
        "hints_text": "",
        "created_at": "2019-09-23T04:38:44Z"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 577,
        "instance_id": "cloudflare__wrangler-legacy-577",
        "issue_numbers": [
            "576"
        ],
        "base_commit": "e71e6990f85eb63ece31a12da679295b940b1323",
        "patch": "diff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -25,7 +25,7 @@ $ wrangler kv:namespace create \"MY_KV\"\n }\n \u2728  Add the following to your wrangler.toml:\n kv-namespaces = [\n-         { binding: \"MY_KV\", id: \"e29b263ab50e42ce9b637fa8370175e8\" }\n+         { binding = \"MY_KV\", id = \"e29b263ab50e42ce9b637fa8370175e8\" }\n ]\n ```\n Make sure to add the `kv-namespaces` output above to your `wrangler.toml`. You can now\ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -53,12 +53,12 @@ one for staging and one for production). So, if you have a `wrangler.toml` with\n ```toml\n [env.staging]\n kv-namespaces = [\n-         { binding: \"MY_KV\", id: \"e29b263ab50e42ce9b637fa8370175e8\" }\n+         { binding = \"MY_KV\", id = \"e29b263ab50e42ce9b637fa8370175e8\" }\n ]\n \n [env.production]\n kv-namespaces = [\n-         { binding: \"MY_KV\", id: \"a825455ce00f4f7282403da85269f8ea\" }\n+         { binding = \"MY_KV\", id = \"a825455ce00f4f7282403da85269f8ea\" }\n ]\n ```\n \ndiff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -134,7 +134,7 @@ $ wrangler kv:namespace create \"MY_KV\"\n }\n \u2728  Add the following to your wrangler.toml:\n kv-namespaces = [\n-         { binding: \"MY_KV\", id: \"e29b263ab50e42ce9b637fa8370175e8\" }\n+         { binding = \"MY_KV\", id = \"e29b263ab50e42ce9b637fa8370175e8\" }\n ]\n ```\n \ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -5,6 +5,7 @@ use std::fs::metadata;\n use std::path::Path;\n \n use cloudflare::endpoints::workerskv::delete_bulk::DeleteBulk;\n+use cloudflare::endpoints::workerskv::write_bulk::KeyValuePair;\n use cloudflare::framework::apiclient::ApiClient;\n \n use crate::commands::kv;\ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -45,7 +46,9 @@ pub fn delete(\n         Err(e) => failure::bail!(\"{}\", e),\n     };\n \n-    delete_bulk(target, user, namespace_id, keys?)\n+    let keys: Vec<String> = pairs?.iter().map(|kv| kv.key.to_owned()).collect();\n+\n+    delete_bulk(target, user, namespace_id, keys)\n }\n \n fn delete_bulk(\ndiff --git a/src/commands/kv/namespace/create.rs b/src/commands/kv/namespace/create.rs\n--- a/src/commands/kv/namespace/create.rs\n+++ b/src/commands/kv/namespace/create.rs\n@@ -48,7 +48,7 @@ pub fn create(\n                     };\n                     println!(\n                         \"kv-namespaces = [ \\n\\\n-                         \\t {{ binding: \\\"{}\\\", id: \\\"{}\\\" }} \\n\\\n+                         \\t {{ binding = \\\"{}\\\", id = \\\"{}\\\" }} \\n\\\n                          ]\",\n                         binding, success.result.id\n                     );\n",
        "test_patch": "diff --git a/docs/content/kv_commands.md b/docs/content/kv_commands.md\n--- a/docs/content/kv_commands.md\n+++ b/docs/content/kv_commands.md\n@@ -309,12 +309,15 @@ $ wrangler kv:bulk put --binding=KV allthethingsupload.json\n Requires `--binding` or `--namespace-id` argument.\n \n Deletes all specified keys within a given namespace.\n-Takes as an argument a JSON file with a list of keys to delete; for example:\n+Takes as an argument a JSON file with a list of key-value pairs to delete (see JSON spec above). An example of JSON input:\n \n ```json\n [\n-    \"key1\",\n-    \"key2\"\n+    {\n+        \"key\": \"test_key\",\n+        \"value\": \"test_value\",\n+        \"expiration_ttl\": 3600\n+    }\n ]\n ```\n \ndiff --git a/src/commands/kv/bulk/delete.rs b/src/commands/kv/bulk/delete.rs\n--- a/src/commands/kv/bulk/delete.rs\n+++ b/src/commands/kv/bulk/delete.rs\n@@ -31,12 +32,12 @@ pub fn delete(\n         Err(e) => failure::bail!(e),\n     }\n \n-    let keys: Result<Vec<String>, failure::Error> = match &metadata(filename) {\n+    let pairs: Result<Vec<KeyValuePair>, failure::Error> = match &metadata(filename) {\n         Ok(file_type) if file_type.is_file() => {\n             let data = fs::read_to_string(filename)?;\n             let keys_vec = serde_json::from_str(&data);\n             if keys_vec.is_err() {\n-                failure::bail!(\"Failed to decode JSON. Please make sure to follow the format, [\\\"test_key_1\\\", \\\"test_key_2\\\", ...]\")\n+                failure::bail!(\"Failed to decode JSON. Please make sure to follow the format, [{\\\"key\\\": \\\"test_key\\\", \\\"value\\\": \\\"test_value\\\"}, ...]\")\n             } else {\n                 Ok(keys_vec.unwrap())\n             }\n",
        "problem_statement": "`wrangler kv:bulk put` and `wrangler kv:bulk delete` use different JSON structures\nWhen I use `wrangler kv:bulk put` with a JSON file, I would expect to be able to use the same JSON file when I call `wrangler kv:bulk delete`:\r\n\r\nJSON file: \r\n```json\r\n[{\"key\": \"baz\", \"value\": \"1\" }]\r\n```\r\n\r\n```\r\n~/.cargo/bin/wrangler kv:bulk put test.json --namespace-id abcdef\r\n\u2728  Success\r\n\r\n~/.cargo/bin/wrangler kv:bulk delete test.json --namespace-id 32b2201a72e344398868e72b78aae7a5\r\nAre you sure you want to delete all keys in test.json? [y/n]\r\ny\r\nError: Failed to decode JSON. Please make sure to follow the format, [\"test_key_1\", \"test_key_2\", ...]\r\n```\r\n\r\nWhen I change `test.json`: `[\"baz\"]`, the command works correctly.\r\n\n",
        "hints_text": "",
        "created_at": "2019-09-12T20:40:12Z",
        "version": "1.2"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 569,
        "instance_id": "cloudflare__wrangler-legacy-569",
        "issue_numbers": [
            "570"
        ],
        "base_commit": "122d587a76becc4941d2e5764a78c0d9c790d6e4",
        "patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -95,11 +95,11 @@ General documentation surrounding workers development and using `wrangler` can b\n   wrangler subdomain <name>\n   ```\n \n-  After you have registered a subdomain, add `workers_dot_dev` to your `wrangler.toml`.\n+  After you have registered a subdomain, add `workers_dev` to your `wrangler.toml`.\n \n | Key             | Value | Example                  |\n | --------------- | ----- | ------------------------ |\n-| workers_dot_dev | true  | `workers_dot_dev = true` |\n+| workers_dev | true  | `workers_dev = true` |\n \n #### Publishing to your own domain\n \ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -107,7 +107,7 @@ If you would like to publish to your own domain, you will need to specify these\n \n | Key             | Value                                                                  | Example                                        |\n | --------------- | ---------------------------------------------------------------------- | ---------------------------------------------- |\n-| workers_dot_dev | false                                                                  | `workers_dot_dev = false`                      |\n+| workers_dev | false                                                                  | `workers_dev = false`                      |\n | route           | The route you would like to publish to                                 | `route = \"example.com/my-worker/*\"`            |\n | zone_id         | Your Cloudflare zone ID, this can be found in the Cloudflare dashboard | `zone_id = \"b6558acaf2b4cad1f2b51c5236a6b972\"` |\n \ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -191,17 +191,17 @@ There are two types of configuration that `wrangler` uses: global user and per p\n         - `webpack`: This project contains any number of JavaScript files or Rust/C/C++ files that compile to\n             WebAssembly. Rust files will be built with `wasm-pack`.\n             This project type uses webpack and webpack plugins in the background to build your worker.\n-    - `zone_id`: This is the ID of the \"zone\" or domain you want to run your script on. This is optional if you are using a [workers.dev](https://workers.dev) subdomain and is only required when `workers_dot_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md) configuration.\n+    - `zone_id`: This is the ID of the \"zone\" or domain you want to run your script on. This is optional if you are using a [workers.dev](https://workers.dev) subdomain and is only required when `workers_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md) configuration.\n     - `account_id`: This is the ID of the account associated with your zone. You might have more than one account, so make sure to use the ID of the account associated with the `zone_id` you provide, if you provide one.\n     - `route`: This is the route you'd like to use your worker on. You need to include the hostname. Examples:\n \n         - `*example.com/*`\n         - `http://example.com/hello`\n         \n-        This key is optional if you are using a [workers.dev](https://workers.dev) subdomain and is only required when `workers_dot_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md). \n+        This key is optional if you are using a [workers.dev](https://workers.dev) subdomain and is only required when `workers_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md). \n \n     - `webpack_config`: This is the path to the webpack configuration file for your worker. This is optional and defaults to `webpack.config.js`\n-    - `workers_dot_dev`: This is a boolean flag that specifies if your worker will be deployed to your [workers.dev](https://workers.dev) subdomain. For more information, please read the [environments documentation](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n+    - `workers_dev`: This is a boolean flag that specifies if your worker will be deployed to your [workers.dev](https://workers.dev) subdomain. For more information, please read the [environments documentation](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n     - `kv-namespaces`: These specify any [Workers KV](https://workers.cloudflare.com/docs/reference/storage/) Namespaces you want to access from\n         inside your Worker. Each namespace you include should have an entry in your `wrangler.toml` that includes:\n \ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -16,7 +16,7 @@ name = \"my-worker-dev\"\n account_id = \"12345678901234567890\"\n zone_id = \"09876543210987654321\"\n route = \"dev.example.com/*\"\n-workers_dot_dev = false\n+workers_dev = false\n \n # environment configuration\n [env.staging]\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -34,7 +34,7 @@ route = \"example.com/*\"\n The most common use case for environments is deploying to a staging subdomain before your production environment. `wrangler publish` will look at your top level configuration, and you can specify other environments beneath it. Each of these environments will inherit the values from the top level configuration if they are not specified, with the following caveats.\n \n * `type` will always be inherited from the top-level configuration; you cannot specify different types for different environments.\n-* Fields that can be inherited from the top level are `account_id`, `zone_id`, `workers_dot_dev`, and `webpack_config`. `kv_namespaces` and `route` must be defined for each environment and will not be inherited.\n+* Fields that can be inherited from the top level are `account_id`, `zone_id`, `workers_dev`, and `webpack_config`. `kv_namespaces` and `route` must be defined for each environment and will not be inherited.\n * `name` is inherited. If left out of the environment configuration, a Worker project named `my-worker` with an environment `[env.dev]` would become `my-worker-dev`.\n \n ### Examples\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -51,7 +51,7 @@ name = \"my-worker\"\n account_id = \"12345678901234567890\"\n zone_id = \"09876543210987654321\"\n route = \"example.com/*\"\n-workers_dot_dev = false # this field specifies that the worker should not be deployed to workers.dev\n+workers_dev = false # this field specifies that the worker should not be deployed to workers.dev\n ```\n \n ```console\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -69,7 +69,7 @@ This `wrangler.toml` has no environments defined and will publish `my-worker` to\n type = \"webpack\"\n name = \"my-worker\"\n account_id = \"12345678901234567890\"\n-workers_dot_dev = true # this field specifies that the worker should be deployed to workers.dev\n+workers_dev = true # this field specifies that the worker should be deployed to workers.dev\n ```\n \n ```console\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -89,7 +89,7 @@ name = \"my-worker-dev\"\n account_id = \"12345678901234567890\"\n zone_id = \"09876543210987654321\"\n route = \"dev.example.com/*\"\n-workers_dot_dev = false\n+workers_dev = false\n \n [env.staging]\n name = \"my-worker-staging\"\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -127,7 +127,7 @@ $ wrangler publish --env production\n \n #### Staging Environment with workers.dev\n \n-In order to deploy your code to workers.dev, you must include `workers_dot_dev = true` in the desired environment. Your `wrangler.toml` may look like this:\n+In order to deploy your code to workers.dev, you must include `workers_dev = true` in the desired environment. Your `wrangler.toml` may look like this:\n \n ```toml\n name = \"my-worker\"\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -135,10 +135,10 @@ type = \"webpack\"\n account_id = \"12345678901234567890\"\n zone_id = \"09876543210987654321\"\n route = \"example.com/*\"\n-workers_dot_dev = false\n+workers_dev = false\n \n [env.staging]\n-workers_dot_dev = true\n+workers_dev = true\n ```\n \n With this configuration, Wrangler will behave in the following manner:\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -165,7 +165,7 @@ If you only want to deploy to workers.dev you can configure Wrangler like so:\n name = \"my-worker-dev\"\n type = \"webpack\"\n account_id = \"12345678901234567890\"\n-workers_dot_dev = true\n+workers_dev = true\n \n [env.production]\n name = \"my-worker\"\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -205,7 +205,7 @@ You can specify different webpack configurations for different environments.\n name = \"my-worker-dev\"\n type = \"webpack\"\n account_id = \"12345678901234567890\"\n-workers_dot_dev = true\n+workers_dev = true\n webpack_config = \"webpack.dev.js\"\n \n [env.production]\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -226,7 +226,7 @@ You can specify different kv namespaces for different environments.\n name = \"my-worker\"\n type = \"webpack\"\n account_id = \"12345678901234567890\"\n-workers_dot_dev = true\n+workers_dev = true\n kv-namespaces = [\n     { binding = \"KV\", id = \"06779da6940b431db6e566b4846d64db\" }\n ]\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -249,7 +249,7 @@ type = \"webpack\"\n account_id = \"12345678901234567890\"\n zone_id = \"09876543210987654321\"\n route = \"example.com/*\"\n-workers_dot_dev = true\n+workers_dev = true\n \n [env.staging]\n type = \"rust\"\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -267,11 +267,11 @@ type = \"webpack\"\n account_id = \"12345678901234567890\"\n zone_id = \"09876543210987654321\"\n route = \"example.com/*\"\n-workers_dot_dev = false\n+workers_dev = false\n \n [env.staging]\n name = \"my-worker\"\n-workers_dot_dev = true\n+workers_dev = true\n ```\n \n ```console\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -294,18 +294,23 @@ zone_id = \"09876543210987654321\"\n route = \"example.com/*\n ```\n \n-You will be warned if `workers_dot_dev` is left out of the top level configuration because if it is not specified, it is unclear what the behavior of `wrangler publish` should be. See [the section on backwards compatibility](#Backwards-compatibility) for more information.\n+You will be warned if `workers_dev` is left out of the top level configuration because if it is not specified, it is unclear what the behavior of `wrangler publish` should be. See [the section on backwards compatibility](#Backwards-compatibility) for more information.\n \n ```console\n $ wrangler publish\n-\u26a0\ufe0f  Please specify the workers_dot_dev boolean in the top level of your wrangler.toml.\n-\u26a0\ufe0f  If you do not add workers_dot_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\n+<<<<<<< HEAD\n+\u26a0\ufe0f  Please specify the workers_dev boolean in the top level of your wrangler.toml.\n+\u26a0\ufe0f  This command will fail in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\n+=======\n+\u26a0\ufe0f  Please specify the workers_dev boolean in the top level of your wrangler.toml.\n+\u26a0\ufe0f  If you do not add workers_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\n+>>>>>>> master\n \u2728  Built successfully, built project size is 517 bytes.\n \u2728  Successfully published your script.\n \u2728  Success! Your worker was successfully published. You can view it at https://my-worker.<your-subdomain>.workers.dev\n ```\n \n-### Defining workers_dot_dev and route\n+### Defining workers_dev and route\n \n ```toml\n name = \"my-worker\"\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -313,23 +318,23 @@ type = \"webpack\"\n account_id = \"12345678901234567890\"\n zone_id = \"09876543210987654321\"\n route = \"example.com/*\"\n-workers_dot_dev = true\n+workers_dev = true\n \n [env.staging]\n-workers_dot_dev = true\n+workers_dev = true\n route = \"staging.example.com/*\"\n ```\n \n-Wrangler will fail to publish to an environment where `route` is defined alongside `workers_dot_dev = true`.\n+Wrangler will fail to publish to an environment where `route` is defined alongside `workers_dev = true`.\n \n ```console\n $ wrangler publish\n-Error: \u26a0\ufe0f  Your environment should only include `workers_dot_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dot_dev`.\n+Error: \u26a0\ufe0f  Your environment should only include `workers_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dev`.\n ```\n \n ```console\n $ wrangler publish --env staging\n-Error: \u26a0\ufe0f  Your environment should only include `workers_dot_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dot_dev`.\n+Error: \u26a0\ufe0f  Your environment should only include `workers_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dev`.\n ```\n \n ## Backwards compatibility\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -353,9 +358,9 @@ With this configuration, Wrangler will behave in the following manner:\n \n ```console\n $ wrangler publish\n-\u26a0\ufe0f  The `private` field is deprecated; please use `workers_dot_dev` to toggle between publishing to your workers.dev subdomain and your own domain.\n-\u26a0\ufe0f  Please specify the workers_dot_dev boolean in the top level of your wrangler.toml.\n-\u26a0\ufe0f  If you do not add workers_dot_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\n+\u26a0\ufe0f  The `private` field is deprecated; please use `workers_dev` to toggle between publishing to your workers.dev subdomain and your own domain.\n+\u26a0\ufe0f  Please specify the workers_dev boolean in the top level of your wrangler.toml.\n+\u26a0\ufe0f  If you do not add workers_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\n \u2728  Built successfully, built project size is 517 bytes.\n \u2728  Successfully published your script.\n \u2728  Success! Your worker was successfully published. You can view it at https://my-worker.<your-subdomain>.workers.dev\ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -364,14 +369,14 @@ $ wrangler publish\n ```console\n $ wrangler publish --release\n \u26a0\ufe0f  --release will be deprecated.\n-\u26a0\ufe0f  The `private` field is deprecated; please use `workers_dot_dev` to toggle between publishing to your workers.dev subdomain and your own domain.\n-\u26a0\ufe0f  Please specify the workers_dot_dev boolean in the top level of your wrangler.toml.\n-\u26a0\ufe0f  If you do not add workers_dot_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\n+\u26a0\ufe0f  The `private` field is deprecated; please use `workers_dev` to toggle between publishing to your workers.dev subdomain and your own domain.\n+\u26a0\ufe0f  Please specify the workers_dev boolean in the top level of your wrangler.toml.\n+\u26a0\ufe0f  If you do not add workers_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\n \u2728  Built successfully, built project size is 517 bytes.\n \u2728  Successfully published your script.\n \u2728  Success! Your worker was successfully published. You can view it at example.com/*\n ```\n \n-This backwards compatibility is the reason that a warning is thrown if `workers_dot_dev` is not specified at the top of `wrangler.toml`.\n+This backwards compatibility is the reason that a warning is thrown if `workers_dev` is not specified at the top of `wrangler.toml`.\n \n-It is important to note that both of these commands will issue a deprecation warning. To remove these warnings, you can configure Wrangler with the `workers_dot_dev` boolean to separate deploys to workers.dev from deploys to workers routes.\n+It is important to note that both of these commands will issue a deprecation warning. To remove these warnings, you can configure Wrangler with the `workers_dev` boolean to separate deploys to workers.dev from deploys to workers routes.\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -18,7 +18,7 @@ use crate::settings::target::Target;\n use crate::terminal::{emoji, message};\n \n pub fn publish(user: &GlobalUser, target: &Target) -> Result<(), failure::Error> {\n-    info!(\"workers_dot_dev = {}\", target.workers_dot_dev);\n+    info!(\"workers_dev = {}\", target.workers_dev);\n \n     validate_target(target)?;\n     commands::build(&target)?;\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -51,7 +51,7 @@ fn publish_script(user: &GlobalUser, target: &Target) -> Result<(), failure::Err\n         )\n     }\n \n-    let pattern = if !target.workers_dot_dev {\n+    let pattern = if !target.workers_dev {\n         let route = Route::new(&target)?;\n         Route::publish(&user, &target, &route)?;\n         info!(\"publishing to route\");\ndiff --git a/src/commands/publish/mod.rs b/src/commands/publish/mod.rs\n--- a/src/commands/publish/mod.rs\n+++ b/src/commands/publish/mod.rs\n@@ -127,7 +127,7 @@ fn validate_target(target: &Target) -> Result<(), failure::Error> {\n         None => {}\n     }\n \n-    let destination = if !target.workers_dot_dev {\n+    let destination = if !target.workers_dev {\n         // check required fields for release\n         if target\n             .zone_id\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -27,7 +27,7 @@ pub struct Target {\n     pub route: Option<String>,\n     pub routes: Option<HashMap<String, String>>,\n     pub webpack_config: Option<String>,\n-    pub workers_dot_dev: bool,\n+    pub workers_dev: bool,\n     pub zone_id: Option<String>,\n }\n \ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -47,7 +47,7 @@ pub struct Environment {\n     pub route: Option<String>,\n     pub routes: Option<HashMap<String, String>>,\n     pub webpack_config: Option<String>,\n-    pub workers_dot_dev: Option<bool>,\n+    pub workers_dev: Option<bool>,\n     pub zone_id: Option<String>,\n }\n \ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -64,7 +64,7 @@ pub struct Manifest {\n     pub route: Option<String>,\n     pub routes: Option<HashMap<String, String>>,\n     pub webpack_config: Option<String>,\n-    pub workers_dot_dev: Option<bool>,\n+    pub workers_dev: Option<bool>,\n     pub zone_id: Option<String>,\n }\n \ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -119,11 +119,11 @@ impl Manifest {\n         release: bool,\n     ) -> Result<(Option<String>, bool), failure::Error> {\n         let use_dot_dev_failure =\n-            \"Please specify the workers_dot_dev boolean in the top level of your wrangler.toml.\";\n+            \"Please specify the workers_dev boolean in the top level of your wrangler.toml.\";\n         let use_dot_dev_warning =\n             format!(\"{}\\n{} If you do not add workers_dot_dev, this command may act unexpectedly in v1.5.0. Please see https://github.com/cloudflare/wrangler/blob/master/docs/environments.md for more information.\", use_dot_dev_failure, emoji::WARN);\n         let wdd_failure = format!(\n-            \"{} Your environment should only include `workers_dot_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dot_dev`.\",\n+            \"{} Your environment should only include `workers_dev` or `route`. If you are trying to publish to workers.dev, remove `route` from your wrangler.toml, if you are trying to publish to your own domain, remove `workers_dev`.\",\n             emoji::WARN\n         );\n \ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -131,20 +131,20 @@ impl Manifest {\n         // switch wrangler publish behavior to act the same at top level\n         // and environments\n         // brace yourself, this is hairy\n-        let workers_dot_dev = match environment {\n+        let workers_dev = match environment {\n             // top level configuration\n             None => {\n                 if release {\n-                    match self.workers_dot_dev {\n+                    match self.workers_dev {\n                         Some(_) => {\n                             failure::bail!(format!(\"{} {}\", emoji::WARN, use_dot_dev_failure))\n                         }\n                         None => {\n                             message::warn(&use_dot_dev_warning);\n-                            false // wrangler publish --release w/o workers_dot_dev is zoned deploy\n+                            false // wrangler publish --release w/o workers_dev is zoned deploy\n                         }\n                     }\n-                } else if let Some(wdd) = self.workers_dot_dev {\n+                } else if let Some(wdd) = self.workers_dev {\n                     if wdd {\n                         if let Some(route) = &self.route {\n                             if !route.is_empty() {\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -155,20 +155,20 @@ impl Manifest {\n                     wdd\n                 } else {\n                     message::warn(&use_dot_dev_warning);\n-                    true // wrangler publish w/o workers_dot_dev is zoneless deploy\n+                    true // wrangler publish w/o workers_dev is zoneless deploy\n                 }\n             }\n \n             // environment configuration\n             Some(environment) => {\n-                if let Some(wdd) = environment.workers_dot_dev {\n+                if let Some(wdd) = environment.workers_dev {\n                     if wdd && environment.route.is_some() {\n                         failure::bail!(wdd_failure)\n                     }\n                     wdd\n-                } else if let Some(wdd) = self.workers_dot_dev {\n+                } else if let Some(wdd) = self.workers_dev {\n                     if wdd && environment.route.is_some() {\n-                        false // allow route to override workers_dot_dev = true if wdd is inherited\n+                        false // allow route to override workers_dev = true if wdd is inherited\n                     } else {\n                         wdd // inherit from top level\n                     }\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -180,7 +180,7 @@ impl Manifest {\n \n         let route = if let Some(environment) = environment {\n             if let Some(route) = &environment.route {\n-                if let Some(wdd) = environment.workers_dot_dev {\n+                if let Some(wdd) = environment.workers_dev {\n                     if wdd {\n                         failure::bail!(wdd_failure);\n                     }\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -193,12 +193,12 @@ impl Manifest {\n             self.route.clone()\n         };\n \n-        Ok((route, workers_dot_dev))\n+        Ok((route, workers_dev))\n     }\n \n     fn check_private(&self, environment: Option<&Environment>) {\n         let deprecate_private_warning = \"The `private` field is deprecated; please use \\\n-        `workers_dot_dev` to toggle between publishing to your workers.dev subdomain and your own domain.\";\n+        `workers_dev` to toggle between publishing to your workers.dev subdomain and your own domain.\";\n \n         // Check for the presence of the 'private' field in top-level config; if present, warn.\n         if self.private.is_some() {\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -218,9 +218,9 @@ impl Manifest {\n         environment_name: Option<&str>,\n         release: bool,\n     ) -> Result<Target, failure::Error> {\n-        if release && self.workers_dot_dev.is_some() {\n+        if release && self.workers_dev.is_some() {\n             failure::bail!(format!(\n-                \"{} The --release flag is not compatible with use of the workers_dot_dev field.\",\n+                \"{} The --release flag is not compatible with use of the workers_dev field.\",\n                 emoji::WARN\n             ))\n         }\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -234,7 +234,7 @@ impl Manifest {\n             account_id: self.account_id.clone(),         // MAY inherit\n             webpack_config: self.webpack_config.clone(), // MAY inherit\n             zone_id: self.zone_id.clone(),               // MAY inherit\n-            workers_dot_dev: true,                       // MAY inherit,\n+            workers_dev: true,                           // MAY inherit,\n             // importantly, the top level name will be modified\n             // to include the name of the environment\n             name: self.name.clone(),                   // MAY inherit\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -247,9 +247,9 @@ impl Manifest {\n \n         self.check_private(environment);\n \n-        let (route, workers_dot_dev) = self.negotiate_zoneless(environment, release)?;\n+        let (route, workers_dev) = self.negotiate_zoneless(environment, release)?;\n         target.route = route;\n-        target.workers_dot_dev = workers_dot_dev;\n+        target.workers_dev = workers_dev;\n         if let Some(environment) = environment {\n             target.name = if let Some(name) = &environment.name {\n                 name.clone()\ndiff --git a/src/settings/target/mod.rs b/src/settings/target/mod.rs\n--- a/src/settings/target/mod.rs\n+++ b/src/settings/target/mod.rs\n@@ -293,7 +293,7 @@ impl Manifest {\n             route: Some(String::new()),\n             routes: None,\n             webpack_config: None,\n-            workers_dot_dev: Some(true),\n+            workers_dev: Some(true),\n             zone_id: Some(String::new()),\n         };\n \n",
        "test_patch": "diff --git a/tests/build.rs b/tests/build.rs\n--- a/tests/build.rs\n+++ b/tests/build.rs\n@@ -27,7 +27,7 @@ macro_rules! single_env_settings {\n             name = \"test\"\n             zone_id = \"\"\n             account_id = \"\"\n-            workers_dot_dev = true\n+            workers_dev = true\n             {}\n         \"#,\n             $x\ndiff --git a/tests/preview.rs b/tests/preview.rs\n--- a/tests/preview.rs\n+++ b/tests/preview.rs\n@@ -25,7 +25,7 @@ macro_rules! settings {\n             name = \"test\"\n             zone_id = \"\"\n             account_id = \"\"\n-            workers_dot_dev = true\n+            workers_dev = true\n             {}\n         \"#,\n             $x\n",
        "problem_statement": "Rename workers_dot_dev field to workers_dev\n\n",
        "hints_text": "",
        "created_at": "2019-09-12T19:10:20Z",
        "version": "1.2"
    },
    {
        "repo": "cloudflare/wrangler-legacy",
        "pull_number": 544,
        "instance_id": "cloudflare__wrangler-legacy-544",
        "issue_numbers": [
            "540"
        ],
        "base_commit": "089d3242182849df8686cd474b866a86fde56035",
        "patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -206,6 +219,8 @@ There are two types of configuration that `wrangler` uses: global user and per p\n \n         Note: Creating your KV Namespaces should be handled either via the [api](https://workers.cloudflare.com/docs/reference/storage/writing-data/) or via your Cloudflare dashboard.\n \n+    #### Environments\n+\n     Additionally, you can configure Wrangler to publish to multiple environments. This means that your same codebase can be deployed to multiple places on your [workers.dev](https://workers.dev) subdomain, across multiple accounts, zones, and routes. Read more [here](/docs/environments.md).\n \n ## Additional Installation Instructions\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -216,37 +231,37 @@ Wrangler can be installed both through [npm](https://www.npmjs.com/get-npm) and\n \n 1. If you don't already have npm on your machine, install it using [npm's recommended method](https://www.npmjs.com/get-npm), a node.js version manager.\n \n-    If you have already installed npm with a package manager, it is possible you will run into an `EACCES` error while installing wrangler. This is related to how many system packagers install npm. You can either uninstall npm and reinstall using the npm recommended install method (a version manager), or use one of our other install methods.\n+   If you have already installed npm with a package manager, it is possible you will run into an `EACCES` error while installing wrangler. This is related to how many system packagers install npm. You can either uninstall npm and reinstall using the npm recommended install method (a version manager), or use one of our other install methods.\n \n 2. Install Wrangler by running:\n \n-    ```bash\n-    npm i @cloudflare/wrangler -g\n-    ```\n+   ```bash\n+   npm i @cloudflare/wrangler -g\n+   ```\n \n ### Using `cargo`\n \n 1. Install `cargo`:\n \n-    Rustup, a tool for installing Rust, will also install Cargo. On Linux and macOS systems, `rustup` can be installed as follows:\n+   Rustup, a tool for installing Rust, will also install Cargo. On Linux and macOS systems, `rustup` can be installed as follows:\n \n-    ```bash\n-    curl https://sh.rustup.rs -sSf | sh\n-    ```\n+   ```bash\n+   curl https://sh.rustup.rs -sSf | sh\n+   ```\n \n-    Additional installation methods are available [here](https://forge.rust-lang.org/other-installation-methods.html).\n+   Additional installation methods are available [here](https://forge.rust-lang.org/other-installation-methods.html).\n \n 2. Install `wrangler`:\n \n-    ```bash\n-    cargo install wrangler\n-    ```\n+   ```bash\n+   cargo install wrangler\n+   ```\n \n-    Installing wrangler on linux requires some [OpenSSL-related packages](https://docs.rs/openssl/0.10.24/openssl/#automatic) to be installed. If you don't want to deal with this, you can use vendored OpenSSL.\n+   Installing wrangler on linux requires some [OpenSSL-related packages](https://docs.rs/openssl/0.10.24/openssl/#automatic) to be installed. If you don't want to deal with this, you can use vendored OpenSSL.\n \n-    ```bash\n-    cargo install wrangler --features vendored-openssl\n-    ```\n+   ```bash\n+   cargo install wrangler --features vendored-openssl\n+   ```\n \n ### Manual Install\n \ndiff --git a/docs/environments.md b/docs/environments.md\n--- a/docs/environments.md\n+++ b/docs/environments.md\n@@ -218,6 +218,25 @@ name = \"my-worker-staging\"\n \n Your default `wrangler build`, `wrangler preview`, and `wrangler publish` commands will all build with `webpack.dev.js`, as will `wrangler build -e staging`, `wrangler preview -e staging`, and `wrangler publish -e staging`. `wrangler build -e production`, `wrangler preview -e production`, and `wrangler publish -e production` would all use your `webpack.config.js` file.\n \n+### KV Namespaces with environments\n+\n+You can specify different kv namespaces for different environments.\n+\n+```toml\n+name = \"my-worker\"\n+type = \"webpack\"\n+account_id = \"12345678901234567890\"\n+workers_dot_dev = true\n+kv-namespaces = [\n+    { binding = \"KV\", id = \"06779da6940b431db6e566b4846d64db\" }\n+]\n+\n+[env.production]\n+kv-namespaces = [\n+    { binding = \"KV\", id = \"bd46d6484b665e6bd134b0496ad97760\" }\n+]\n+```\n+\n ## Invalid configurations\n \n ### Multiple types\n",
        "test_patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -39,99 +39,116 @@ General documentation surrounding workers development and using `wrangler` can b\n \n - ### \ud83d\udc6f `generate`\n \n-    Scaffold a project, including boilerplate for a Rust library and a Cloudflare Worker.\n-    You can pass a name and template to this command optionally.\n+  Scaffold a project, including boilerplate for a Rust library and a Cloudflare Worker.\n+  You can pass a name and template to this command optionally.\n \n-    ```bash\n-    wrangler generate <name> <template> --type=[\"webpack\", \"javascript\", \"rust\"]\n-    ```\n+  ```bash\n+  wrangler generate <name> <template> --type=[\"webpack\", \"javascript\", \"rust\"]\n+  ```\n \n-    All of the arguments and flags to this command are optional:\n-        - `name`: defaults to `worker`\n-        - `template`: defaults to the [`https://github.com/cloudflare/worker-template`](https://github.com/cloudflare/worker-template)\n-        - `type`: defaults to \"webpack\"\n+  All of the arguments and flags to this command are optional: - `name`: defaults to `worker` - `template`: defaults to the [`https://github.com/cloudflare/worker-template`](https://github.com/cloudflare/worker-template) - `type`: defaults to \"webpack\"\n \n - ### \ud83e\udd80\u2699\ufe0f `build`\n \n-    Build your project. This command looks at your `wrangler.toml` file and runs the build steps associated\n-    with the `\"type\"` declared there.\n+  Build your project. This command looks at your `wrangler.toml` file and runs the build steps associated\n+  with the `\"type\"` declared there.\n+\n+  Additionally, you can build different environments. This is useful if you have different builds for different environments, but typically isn't needed. For more information see the [environments documentation](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n \n - ### \ud83d\udd27 `config`\n \n-    Configure your global Cloudflare user. This is an interactive command that will prompt you for your email and API key:\n+  Configure your global Cloudflare user. This is an interactive command that will prompt you for your email and API key:\n \n-    ```bash\n-    wrangler config\n-    Enter email:\n-    testuser@example.com\n-    Enter api key:\n-    ...\n-    ```\n+  ```bash\n+  wrangler config\n+  Enter email:\n+  testuser@example.com\n+  Enter api key:\n+  ...\n+  ```\n \n-    You can also [use environment variables](#using-environment-variables) to configure these values.\n+  You can also [use environment variables](#using-environment-variables) to configure these values.\n \n - ### \u2601\ufe0f \ud83c\udd99 `publish`\n \n-    Publish your Worker to Cloudflare. This uses several keys in your `wrangler.toml` depending on whether\n-    you are publishing to a workers.dev subdomain or your own domain, registered with Cloudflare.\n+  Publish your Worker to Cloudflare. Several keys in your `wrangler.toml` determine whether you are publishing to a workers.dev subdomain or your own registered domain, proxied through Cloudflare.\n+\n+  ```bash\n+  wrangler publish\n+  ```\n+\n+  To use this command, the following fields are required in your `wrangler.toml`.\n+\n+  | Key        | Value                                                                     | Example                                           |\n+  | ---------- | ------------------------------------------------------------------------- | ------------------------------------------------- |\n+  | name       | the name of your worker                                                   | `name = \"your-worker\"`                            |\n+  | type       | build type (webpack, rust, or javascript)                                 | `type = \"webpack\"`                                |\n+  | account_id | your Cloudflare account ID, this can be found in the Cloudflare dashboard | `account_id = \"a655bacaf2b4cad0e2b51c5236a6b974\"` |\n+\n+  From here, you have two options, you can choose to publish to your own domain or you can choose to publish to [\\<your-worker\\>.\\<your-subdomain\\>.workers.dev](https://workers.dev).\n+\n+#### Publishing to workers.dev\n \n-    ```bash\n-    wrangler publish\n-    ```\n+  If you want to publish to [workers.dev](https://workers.dev), you will first need to have a [workers.dev](https://workers.dev) subdomain registered. You can register a subdomain by executing:\n \n-    To use this command, you'll need to have the following keys in your `wrangler.toml`:\n+  ```bash\n+  wrangler subdomain <name>\n+  ```\n \n-    - `name`\n-    - `type`\n-    - `account_id`\n+  After you have registered a subdomain, add `workers_dot_dev` to your `wrangler.toml`.\n \n-    You'll also need to have a workers.dev subdomain registered. You can register a subdomain by using:\n+| Key             | Value | Example                  |\n+| --------------- | ----- | ------------------------ |\n+| workers_dot_dev | true  | `workers_dot_dev = true` |\n \n-    ```bash\n-    wrangler subdomain <name>\n-    ```\n+#### Publishing to your own domain\n \n-    A `--release` can be optionally passed to publish your worker to a domain you have registered with\n-    Cloudflare. To use `--release` your `wrangler.toml` must include:\n+If you would like to publish to your own domain, you will need to specify these three fields in your `wrangler.toml`.\n \n-    - `name`\n-    - `type`\n-    - `account_id`\n-    - `zone_id`\n-    - `route`\n+| Key             | Value                                                                  | Example                                        |\n+| --------------- | ---------------------------------------------------------------------- | ---------------------------------------------- |\n+| workers_dot_dev | false                                                                  | `workers_dot_dev = false`                      |\n+| route           | The route you would like to publish to                                 | `route = \"example.com/my-worker/*\"`            |\n+| zone_id         | Your Cloudflare zone ID, this can be found in the Cloudflare dashboard | `zone_id = \"b6558acaf2b4cad1f2b51c5236a6b972\"` |\n+\n+#### Publishing the same code to multiple places\n+\n+If you would like to be able to publish your code to multiple places, please see the documentation for [environments](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n \n - ### \ud83d\udd2c `preview`\n \n-    Preview your project using the [Cloudflare Workers preview service](https://cloudflareworkers.com/).\n+  Preview your project using the [Cloudflare Workers preview service](https://cloudflareworkers.com/).\n+\n+  By default, `wrangler preview` will only bundle your project a single time. To enable live preview,\n+  where Wrangler will continually update the preview service with the newest version of your project,\n+  pass the `--watch` flag:\n \n-    By default, `wrangler preview` will only bundle your project a single time. To enable live preview,\n-    where Wrangler will continually update the preview service with the newest version of your project,\n-    pass the `--watch` flag:\n+  ```bash\n+  wrangler preview --watch\n+  ```\n \n-    ```bash\n-    wrangler preview --watch\n-    ```\n+  You can optionally pass `get` or `post` and a `body` to this command. This will send a request to your\n+  worker on the preview service and return the response in your terminal. For example:\n \n-    You can optionally pass `get` or `post` and a `body` to this command. This will send a request to your\n-    worker on the preview service and return the response in your terminal. For example:\n+  GET requests can be sent with\n \n-    GET requests can be sent with \n+  ```bash\n+  wrangler preview\n+  ```\n \n-    ```bash\n-    wrangler preview\n-    ```\n+  or\n \n-    or\n+  ```bash\n+  wrangler preview get\n+  ```\n \n-    ```bash\n-    wrangler preview get\n-    ```\n+  POST requests can be sent with\n \n-    POST requests can be sent with\n+  ```bash\n+  wrangler preview post hello=hello\n+  ```\n \n-    ```bash\n-    wrangler preview post hello=hello\n-    ```\n+  Additionally, you can preview different environments. This is useful if you have different builds for different environments (like staging vs. production), but typically isn't needed. For more information see the [environments documentation](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n \n ## \ud83d\udd29 Configuration\n \ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -139,58 +156,54 @@ There are two types of configuration that `wrangler` uses: global user and per p\n \n - ### Global User\n \n-    In Cloudflare's system, you have a User that can have multiple Accounts and Zones. As a result, your User\n-    is configured globally on your machine. Your Account(s) and Zone(s) will be configured per project, but\n-    will use your User credentials to authenticate all API calls. This config file is created in a `.wrangler`\n-    directory in your computer's home directory.\n+  In Cloudflare's system, you have a User that can have multiple Accounts and Zones. As a result, your User\n+  is configured globally on your machine. Your Account(s) and Zone(s) will be configured per project, but\n+  will use your User credentials to authenticate all API calls. This config file is created in a `.wrangler`\n+  directory in your computer's home directory.\n \n-    To set up `wrangler` to work with your Cloudflare user, use the following commands:\n+  To set up `wrangler` to work with your Cloudflare user, use the following commands:\n \n-    - \ud83d\udd27 `config`: a command that prompts you to enter your `email` and `api` key.\n-    - \ud83d\udd75\ufe0f\u200d\u2640\ufe0f `whoami`: run this command to confirm that your configuration is appropriately set up.\n-       When successful, this command will print out your user information, including the type of plan you\n-       are currently on.\n+  - \ud83d\udd27 `config`: a command that prompts you to enter your `email` and `api` key.\n+  - \ud83d\udd75\ufe0f\u200d\u2640\ufe0f `whoami`: run this command to confirm that your configuration is appropriately set up.\n+    When successful, this command will print out your user information, including the type of plan you\n+    are currently on.\n \n - #### Using environment variables\n \n-    You can also configure your global user with environment variables. This is the preferred method for using Wrangler in CI:\n+  You can also configure your global user with environment variables. This is the preferred method for using Wrangler in CI:\n \n-    ```bash\n-    # e.g.\n-    CF_API_KEY=superlongapikey CF_EMAIL=testuser@example.com wrangler publish --release\n-    # where\n-    # $CF_API_KEY -> your Cloudflare API key\n-    # $CF_EMAIL -> your Cloudflare account email\n-    ```\n+  ```bash\n+  # e.g.\n+  CF_API_KEY=superlongapikey CF_EMAIL=testuser@example.com wrangler publish --release\n+  # where\n+  # $CF_API_KEY -> your Cloudflare API key\n+  # $CF_EMAIL -> your Cloudflare account email\n+  ```\n \n - ### Per Project\n \n-    Your project will need to have several things configured before you can publish your worker. These values\n-    are stored in a `wrangler.toml` file that `wrangler generate` will make for you. You will need to manually\n-    edit this file to add these values before you can publish.\n+    Your project will need to have several things configured before you can publish your worker. These values are stored in a `wrangler.toml` file that `wrangler generate` will make for you. You will need to manually edit this file to add these values before you can publish.\n \n     - `name`: This is the name of your project. It will be the name of your script.\n-    - `type`: This key tells `wrangler build` how to build your project. There are currently 3 options, but we\n-        expect there to be more as the community grows.\n+    - `type`: This key tells `wrangler build` how to build your project. There are currently three options (`webpack`, `javascript`, and `rust`), but we expect there to be more as the community grows.\n         - `javascript`: This project contains a single JavaScript file, defined in `package.json`'s `main` key.\n         - `rust`: This project contains a Rust crate that uses `wasm-bindgen`. It will be built with `wasm-pack`.\n         - `webpack`: This project contains any number of JavaScript files or Rust/C/C++ files that compile to\n             WebAssembly. Rust files will be built with `wasm-pack`.\n             This project type uses webpack and webpack plugins in the background to build your worker.\n-    - `zone_id`: This is the ID of the \"zone\" or domain you want to run your script on. This is optional if you\n-        are using a workers.dev subdomain and is only required when `workers_dot_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n-    - `account_id`: This is the ID of the account associated with your zone. You might have more than one account,\n-        so make sure to use the ID of the account associated with the `zone_id` you provide, if you provide one.\n+    - `zone_id`: This is the ID of the \"zone\" or domain you want to run your script on. This is optional if you are using a [workers.dev](https://workers.dev) subdomain and is only required when `workers_dot_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md) configuration.\n+    - `account_id`: This is the ID of the account associated with your zone. You might have more than one account, so make sure to use the ID of the account associated with the `zone_id` you provide, if you provide one.\n     - `route`: This is the route you'd like to use your worker on. You need to include the hostname. Examples:\n+\n         - `*example.com/*`\n         - `http://example.com/hello`\n         \n-        This key is optional if you are using a workers.dev subdomain and is only required when `workers_dot_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md). \n-    - `webpack_config`: This is the path to the webpack configuration file for your worker. This is optional and\n-        defaults to `webpack.config.js`\n-    - `workers_dot_dev`: This is an optional (but recommended due to impending deprecation of the `--release` flag boolean that specifies whether your worker should be deployed to `<your-project>.<your-subdomain>.workers.dev`. For more information, please read the [environments documentation](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n-    - `kv-namespaces`: These specify any [Workers KV](https://workers.cloudflare.com/docs/reference/storage/) namespaces you want to access from\n-        inside your Worker. Each namespace you include should have an entry in your wrangler.toml that includes:\n+        This key is optional if you are using a [workers.dev](https://workers.dev) subdomain and is only required when `workers_dot_dev` is false, or excluded from an [environment](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md). \n+\n+    - `webpack_config`: This is the path to the webpack configuration file for your worker. This is optional and defaults to `webpack.config.js`\n+    - `workers_dot_dev`: This is a boolean flag that specifies if your worker will be deployed to your [workers.dev](https://workers.dev) subdomain. For more information, please read the [environments documentation](https://github.com/cloudflare/wrangler/blob/master/docs/environments.md).\n+    - `kv-namespaces`: These specify any [Workers KV](https://workers.cloudflare.com/docs/reference/storage/) Namespaces you want to access from\n+        inside your Worker. Each namespace you include should have an entry in your `wrangler.toml` that includes:\n \n         - `binding`: the name you want to bind to in your script\n         - `id`: the namespace_id assigned to your KV Namespace upon creation.\n",
        "problem_statement": "Update commands in README with info about environments\nWe need to update the `preview` `build` and `publish` sections of our README to let people know that they can specify an environment for each of these commands.\r\n\r\nWe also need to update the default output of `wrangler generate`\n",
        "hints_text": "pls help @victoriabernard92 @signalnerve :)",
        "created_at": "2019-09-10T20:33:46Z",
        "version": "1.2"
    }
]