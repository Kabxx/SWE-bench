[
    {
        "repo": "altsem/gitu",
        "pull_number": 56,
        "instance_id": "altsem__gitu-56",
        "issue_numbers": [
            "54"
        ],
        "base_commit": "7c0f628df95e776a7e0d894bac950d2f18e18c2f",
        "patch": "diff --git /dev/null b/.envrc\nnew file mode 100644\n--- /dev/null\n+++ b/.envrc\n@@ -0,0 +1,3 @@\n+export RUST_BACKTRACE=1\n+\n+use flake .\ndiff --git a/.gitignore b/.gitignore\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,3 +1,5 @@\n /target\n *.snap.new\n /gitu.log\n+.direnv\n+result\ndiff --git /dev/null b/flake.lock\nnew file mode 100644\n--- /dev/null\n+++ b/flake.lock\n@@ -0,0 +1,124 @@\n+{\n+  \"nodes\": {\n+    \"crane\": {\n+      \"inputs\": {\n+        \"nixpkgs\": [\n+          \"nixpkgs\"\n+        ]\n+      },\n+      \"locked\": {\n+        \"lastModified\": 1710003968,\n+        \"narHash\": \"sha256-g8+K+mLiNG5uch35Oy9oDQBAmGSkCcqrd0Jjme7xiG0=\",\n+        \"owner\": \"ipetkov\",\n+        \"repo\": \"crane\",\n+        \"rev\": \"10484f86201bb94bd61ecc5335b1496794fedb78\",\n+        \"type\": \"github\"\n+      },\n+      \"original\": {\n+        \"owner\": \"ipetkov\",\n+        \"repo\": \"crane\",\n+        \"type\": \"github\"\n+      }\n+    },\n+    \"fenix\": {\n+      \"inputs\": {\n+        \"nixpkgs\": [\n+          \"nixpkgs\"\n+        ],\n+        \"rust-analyzer-src\": \"rust-analyzer-src\"\n+      },\n+      \"locked\": {\n+        \"lastModified\": 1710224545,\n+        \"narHash\": \"sha256-MPWVGujXzLd+Q/1M252ZoPMubHhlfaQqhSaJXphDAdE=\",\n+        \"owner\": \"nix-community\",\n+        \"repo\": \"fenix\",\n+        \"rev\": \"12222a90a7e02443f822e679055858d786e7324f\",\n+        \"type\": \"github\"\n+      },\n+      \"original\": {\n+        \"owner\": \"nix-community\",\n+        \"repo\": \"fenix\",\n+        \"type\": \"github\"\n+      }\n+    },\n+    \"flake-parts\": {\n+      \"inputs\": {\n+        \"nixpkgs-lib\": \"nixpkgs-lib\"\n+      },\n+      \"locked\": {\n+        \"lastModified\": 1709336216,\n+        \"narHash\": \"sha256-Dt/wOWeW6Sqm11Yh+2+t0dfEWxoMxGBvv3JpIocFl9E=\",\n+        \"owner\": \"hercules-ci\",\n+        \"repo\": \"flake-parts\",\n+        \"rev\": \"f7b3c975cf067e56e7cda6cb098ebe3fb4d74ca2\",\n+        \"type\": \"github\"\n+      },\n+      \"original\": {\n+        \"owner\": \"hercules-ci\",\n+        \"repo\": \"flake-parts\",\n+        \"type\": \"github\"\n+      }\n+    },\n+    \"nixpkgs\": {\n+      \"locked\": {\n+        \"lastModified\": 1710159071,\n+        \"narHash\": \"sha256-CT0WKgcmlcWZPZL/sSSICN/Vbm4Of0ZDgxc0GFf6sYU=\",\n+        \"owner\": \"NixOS\",\n+        \"repo\": \"nixpkgs\",\n+        \"rev\": \"0fbcc4b2e8571f4af39be41752581ea09dd9ab06\",\n+        \"type\": \"github\"\n+      },\n+      \"original\": {\n+        \"owner\": \"NixOS\",\n+        \"ref\": \"nixpkgs-unstable\",\n+        \"repo\": \"nixpkgs\",\n+        \"type\": \"github\"\n+      }\n+    },\n+    \"nixpkgs-lib\": {\n+      \"locked\": {\n+        \"dir\": \"lib\",\n+        \"lastModified\": 1709237383,\n+        \"narHash\": \"sha256-cy6ArO4k5qTx+l5o+0mL9f5fa86tYUX3ozE1S+Txlds=\",\n+        \"owner\": \"NixOS\",\n+        \"repo\": \"nixpkgs\",\n+        \"rev\": \"1536926ef5621b09bba54035ae2bb6d806d72ac8\",\n+        \"type\": \"github\"\n+      },\n+      \"original\": {\n+        \"dir\": \"lib\",\n+        \"owner\": \"NixOS\",\n+        \"ref\": \"nixos-unstable\",\n+        \"repo\": \"nixpkgs\",\n+        \"type\": \"github\"\n+      }\n+    },\n+    \"root\": {\n+      \"inputs\": {\n+        \"crane\": \"crane\",\n+        \"fenix\": \"fenix\",\n+        \"flake-parts\": \"flake-parts\",\n+        \"nixpkgs\": \"nixpkgs\"\n+      }\n+    },\n+    \"rust-analyzer-src\": {\n+      \"flake\": false,\n+      \"locked\": {\n+        \"lastModified\": 1710167852,\n+        \"narHash\": \"sha256-SxUgXoPi5+Y6oBNoUt6cNd8HwV2H2JUGNydsp0cgB2M=\",\n+        \"owner\": \"rust-lang\",\n+        \"repo\": \"rust-analyzer\",\n+        \"rev\": \"03d2d9016d171c400f0891c867ea0aca9ec4f972\",\n+        \"type\": \"github\"\n+      },\n+      \"original\": {\n+        \"owner\": \"rust-lang\",\n+        \"ref\": \"nightly\",\n+        \"repo\": \"rust-analyzer\",\n+        \"type\": \"github\"\n+      }\n+    }\n+  },\n+  \"root\": \"root\",\n+  \"version\": 7\n+}\n",
        "test_patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -50,6 +50,29 @@ The latest release is available\n Download the archive that is appropriate for your platform and extract the\n binary into your `$PATH`. A common valid path location is `/usr/local/bin`.\n \n+#### Using Nix flakes\n+To build from `master` on flaked Nix platforms add this repo to your inputs:\n+\n+```\n+inputs = {\n+  nixpkgs.url = \"nixpkgs/nixos-unstable\";\n+  gitu.url = \"github:altsem/gitu\";\n+  gitu.inputs.nixpkgs.follows = \"nixpkgs\";\n+};\n+```\n+\n+Then wherever you install your packages (i.e., `home-manager`):\n+\n+```\n+{ inputs, pkgs, lib, system, ... }: \n+{\n+home.packages = with pkgs;\n+  [\n+    inputs.gitu.packages.${system}.default\n+  ];\n+}\n+```\n+\n ### Configuration\n The environment variables `GIT_EDITOR`, `VISUAL` or `EDITOR` (checked in this order) dictate which editor Gitu will open.\n \ndiff --git /dev/null b/flake.nix\nnew file mode 100644\n--- /dev/null\n+++ b/flake.nix\n@@ -0,0 +1,65 @@\n+{\n+  inputs = {\n+    nixpkgs.url = \"github:NixOS/nixpkgs/nixpkgs-unstable\";\n+    flake-parts.url = \"github:hercules-ci/flake-parts\";\n+    crane.url = \"github:ipetkov/crane\";\n+    crane.inputs.nixpkgs.follows = \"nixpkgs\";\n+    fenix.url = \"github:nix-community/fenix\";\n+    fenix.inputs.nixpkgs.follows = \"nixpkgs\";\n+  };\n+\n+  outputs = inputs@{ nixpkgs, flake-parts, ... }:\n+    flake-parts.lib.mkFlake { inherit inputs; } {\n+      systems = [ \"aarch64-linux\" \"x86_64-linux\" \"x86_64-darwin\" ];\n+\n+      perSystem = { config, pkgs, system, inputs', self', ... }:\n+        let\n+          toolchain = with inputs.fenix.packages.${system};\n+            combine [\n+              latest.rustc\n+              latest.cargo\n+              latest.clippy\n+              latest.rust-analysis\n+              latest.rust-src\n+              latest.rustfmt\n+            ];\n+\n+          craneLib = inputs.crane.lib.${system}.overrideToolchain toolchain;\n+          common-build-args = {\n+            src = craneLib.cleanCargoSource (craneLib.path ./.);\n+          };\n+          deps-only = craneLib.buildDepsOnly ({ } // common-build-args);\n+\n+          packages = {\n+            default = packages.gitu;\n+            gitu = craneLib.buildPackage (common-build-args // {\n+              doCheck = false;\n+              buildInputs = with pkgs;\n+                [ openssl pkg-config ] ++ pkgs.lib.optionals stdenv.isDarwin [\n+                  libiconv\n+                  darwin.apple_sdk.frameworks.Security\n+                ];\n+            });\n+          };\n+\n+          checks = {\n+            clippy = craneLib.cargoClippy ({\n+              cargoArtifacts = deps-only;\n+              cargoClippyExtraArgs = \"--all-features -- --deny warnings\";\n+            } // common-build-args);\n+\n+            rust-fmt = craneLib.cargoFmt\n+              ({ inherit (common-build-args) src; } // common-build-args);\n+\n+            rust-tests = craneLib.cargoNextest ({\n+              cargoArtifacts = deps-only;\n+              partitions = 1;\n+              partitionType = \"count\";\n+            } // common-build-args);\n+          };\n+\n+        in rec {\n+          inherit packages checks;\n+        };\n+    };\n+}\n",
        "problem_statement": "Nix flake and/or package\nAny interest in packaging this in a Nix flake and/or package? It would make it much easier than toolchaining Rust.\n",
        "hints_text": "Most definitely. I'm unfamiliar with Nix myself though.",
        "created_at": "2024-03-12T09:18:59Z",
        "version": "0.6"
    },
    {
        "repo": "altsem/gitu",
        "pull_number": 130,
        "instance_id": "altsem__gitu-130",
        "issue_numbers": [
            "119"
        ],
        "base_commit": "995f877e84ff16c3957864875a8e37d0ef88ae3c",
        "patch": "diff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -98,6 +98,23 @@ dependencies = [\n  \"windows-sys 0.52.0\",\n ]\n \n+[[package]]\n+name = \"arboard\"\n+version = \"3.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a2041f1943049c7978768d84e6d0fd95de98b76d6c4727b09e78ec253d29fa58\"\n+dependencies = [\n+ \"clipboard-win\",\n+ \"log\",\n+ \"objc\",\n+ \"objc-foundation\",\n+ \"objc_id\",\n+ \"parking_lot\",\n+ \"thiserror\",\n+ \"windows-sys 0.48.0\",\n+ \"x11rb\",\n+]\n+\n [[package]]\n name = \"atomic\"\n version = \"0.6.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -128,6 +145,12 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"block\"\n+version = \"0.1.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a\"\n+\n [[package]]\n name = \"bstr\"\n version = \"0.2.17\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -269,6 +292,15 @@ version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"98cc8fbded0c607b7ba9dd60cd98df59af97e84d24e49c8557331cfc26d301ce\"\n \n+[[package]]\n+name = \"clipboard-win\"\n+version = \"5.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d517d4b86184dbb111d3556a10f1c8a04da7428d2987bf1081602bf11c3aa9ee\"\n+dependencies = [\n+ \"error-code\",\n+]\n+\n [[package]]\n name = \"colorchoice\"\n version = \"1.0.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -463,6 +495,22 @@ version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n \n+[[package]]\n+name = \"errno\"\n+version = \"0.3.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a258e46cdc063eb8519c00b9fc845fc47bcfca4130e2f08e88665ceda8474245\"\n+dependencies = [\n+ \"libc\",\n+ \"windows-sys 0.52.0\",\n+]\n+\n+[[package]]\n+name = \"error-code\"\n+version = \"3.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a0474425d51df81997e2f90a21591180b38eccf27292d755f3e30750225c175b\"\n+\n [[package]]\n name = \"figment\"\n version = \"0.10.16\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -485,6 +533,16 @@ dependencies = [\n  \"percent-encoding\",\n ]\n \n+[[package]]\n+name = \"gethostname\"\n+version = \"0.4.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0176e0459c2e4a1fe232f984bca6890e681076abb9934f6cea7c326f3fc47818\"\n+dependencies = [\n+ \"libc\",\n+ \"windows-targets 0.48.5\",\n+]\n+\n [[package]]\n name = \"getrandom\"\n version = \"0.2.12\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -533,6 +591,7 @@ dependencies = [\n name = \"gitu\"\n version = \"0.15.0\"\n dependencies = [\n+ \"arboard\",\n  \"chrono\",\n  \"clap\",\n  \"criterion\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -762,6 +821,12 @@ version = \"0.5.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f\"\n \n+[[package]]\n+name = \"linux-raw-sys\"\n+version = \"0.4.13\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"01cda141df6706de531b6c46c3a33ecca755538219bd484262fa09410c13539c\"\n+\n [[package]]\n name = \"lock_api\"\n version = \"0.4.11\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -787,6 +852,15 @@ dependencies = [\n  \"hashbrown\",\n ]\n \n+[[package]]\n+name = \"malloc_buf\"\n+version = \"0.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n [[package]]\n name = \"memchr\"\n version = \"2.7.1\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -830,6 +904,35 @@ dependencies = [\n  \"autocfg\",\n ]\n \n+[[package]]\n+name = \"objc\"\n+version = \"0.2.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1\"\n+dependencies = [\n+ \"malloc_buf\",\n+]\n+\n+[[package]]\n+name = \"objc-foundation\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1add1b659e36c9607c7aab864a76c7a4c2760cd0cd2e120f3fb8b952c7e22bf9\"\n+dependencies = [\n+ \"block\",\n+ \"objc\",\n+ \"objc_id\",\n+]\n+\n+[[package]]\n+name = \"objc_id\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c92d4ddb4bd7b50d730c215ff871754d0da6b2178849f8a2a2ab69712d0c073b\"\n+dependencies = [\n+ \"objc\",\n+]\n+\n [[package]]\n name = \"once_cell\"\n version = \"1.19.0\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1056,6 +1159,19 @@ dependencies = [\n  \"semver\",\n ]\n \n+[[package]]\n+name = \"rustix\"\n+version = \"0.38.32\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"65e04861e65f21776e67888bfbea442b3642beaa0138fdb1dd7a84a52dffdb89\"\n+dependencies = [\n+ \"bitflags 2.4.2\",\n+ \"errno\",\n+ \"libc\",\n+ \"linux-raw-sys\",\n+ \"windows-sys 0.52.0\",\n+]\n+\n [[package]]\n name = \"rustversion\"\n version = \"1.0.14\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1691,6 +1807,23 @@ dependencies = [\n  \"memchr\",\n ]\n \n+[[package]]\n+name = \"x11rb\"\n+version = \"0.13.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f8f25ead8c7e4cba123243a6367da5d3990e0d3affa708ea19dce96356bd9f1a\"\n+dependencies = [\n+ \"gethostname\",\n+ \"rustix\",\n+ \"x11rb-protocol\",\n+]\n+\n+[[package]]\n+name = \"x11rb-protocol\"\n+version = \"0.13.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e63e71c4b8bd9ffec2c963173a4dc4cbde9ee96961d4fcb4429db9929b606c34\"\n+\n [[package]]\n name = \"yansi\"\n version = \"0.5.1\"\ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -17,6 +17,7 @@ insta = \"1.38.0\"\n unicode-width = \"0.1.11\"\n \n [dependencies]\n+arboard = { version = \"3.3.2\", default-features = false, features = [\"windows-sys\"] }\n chrono = \"0.4.37\"\n clap = { version = \"4.5.4\", features = [\"derive\"] }\n crossterm = \"0.27.0\"\ndiff --git a/deny.toml b/deny.toml\n--- a/deny.toml\n+++ b/deny.toml\n@@ -94,6 +94,7 @@ allow = [\n     \"Unicode-DFS-2016\",\n     \"BSD-2-Clause\",\n     \"BSD-3-Clause\",\n+    \"BSL-1.0\",\n     #\"Apache-2.0 WITH LLVM-exception\",\n ]\n # The confidence threshold for detecting a license from license text.\ndiff --git a/src/cmd_log.rs b/src/cmd_log.rs\n--- a/src/cmd_log.rs\n+++ b/src/cmd_log.rs\n@@ -96,6 +96,12 @@ pub(crate) fn format_log_entry<'a>(\n                 Style::new().red().bold(),\n             )]\n         }\n+        CmdLogEntry::Info(msg) => {\n+            vec![Line::styled(\n+                format!(\"> {}\", msg),\n+                Style::new().green().bold(),\n+            )]\n+        }\n     }\n }\n \ndiff --git a/src/cmd_log.rs b/src/cmd_log.rs\n--- a/src/cmd_log.rs\n+++ b/src/cmd_log.rs\n@@ -105,4 +111,5 @@ pub(crate) enum CmdLogEntry {\n         out: Option<Cow<'static, str>>,\n     },\n     Error(String),\n+    Info(String),\n }\ndiff --git a/src/default_config.toml b/src/default_config.toml\n--- a/src/default_config.toml\n+++ b/src/default_config.toml\n@@ -59,11 +59,12 @@ root.move_up_line = [\"<ctrl+k>\", \"<ctrl+up>\"]\n root.move_down_line = [\"<ctrl+j>\", \"<ctrl+down>\"]\n root.half_page_up = [\"<ctrl+u>\"]\n root.half_page_down = [\"<ctrl+d>\"]\n-root.show_refs = [\"y\"]\n+root.show_refs = [\"Y\"]\n root.show = [\"<enter>\"]\n root.discard = [\"K\"]\n root.stage = [\"s\"]\n root.unstage = [\"u\"]\n+root.copy_hash = [\"y\"]\n \n root.help_menu = [\"h\"]\n help_menu.quit = [\"q\", \"<esc>\"]\ndiff --git /dev/null b/src/ops/copy_hash.rs\nnew file mode 100644\n--- /dev/null\n+++ b/src/ops/copy_hash.rs\n@@ -0,0 +1,32 @@\n+use super::{Action, OpTrait};\n+use crate::items::TargetData;\n+use derive_more::Display;\n+use std::rc::Rc;\n+\n+#[derive(Display)]\n+#[display(fmt = \"Copy hash\")]\n+pub(crate) struct CopyHash;\n+impl OpTrait for CopyHash {\n+    fn get_action(&self, target: Option<&TargetData>) -> Option<Action> {\n+        match target {\n+            Some(TargetData::Commit(r)) => copy_hash(r.clone()),\n+            _ => None,\n+        }\n+    }\n+    fn is_target_op(&self) -> bool {\n+        true\n+    }\n+}\n+\n+fn copy_hash(r: String) -> Option<Action> {\n+    Some(Rc::new(move |state, _term| {\n+        match &mut state.clipboard {\n+            Some(cb) => {\n+                cb.set_text(r.clone())?;\n+                state.display_info(\"Commit hash copied to clipboard\".to_owned());\n+            }\n+            None => state.display_error(\"Clipboard not available\".to_owned()),\n+        }\n+        Ok(())\n+    }))\n+}\ndiff --git a/src/ops/mod.rs b/src/ops/mod.rs\n--- a/src/ops/mod.rs\n+++ b/src/ops/mod.rs\n@@ -14,6 +14,7 @@ use std::{\n \n pub(crate) mod checkout;\n pub(crate) mod commit;\n+pub(crate) mod copy_hash;\n pub(crate) mod discard;\n pub(crate) mod editor;\n pub(crate) mod fetch;\ndiff --git a/src/ops/mod.rs b/src/ops/mod.rs\n--- a/src/ops/mod.rs\n+++ b/src/ops/mod.rs\n@@ -76,6 +77,7 @@ pub(crate) enum Op {\n     Unstage,\n     Show,\n     Discard,\n+    CopyHash,\n \n     ToggleSection,\n     MoveUp,\ndiff --git a/src/ops/mod.rs b/src/ops/mod.rs\n--- a/src/ops/mod.rs\n+++ b/src/ops/mod.rs\n@@ -140,6 +142,7 @@ impl Op {\n             Op::Show => Box::new(show::Show),\n             Op::Stage => Box::new(stage::Stage),\n             Op::Unstage => Box::new(unstage::Unstage),\n+            Op::CopyHash => Box::new(copy_hash::CopyHash),\n         }\n     }\n }\ndiff --git a/src/state.rs b/src/state.rs\n--- a/src/state.rs\n+++ b/src/state.rs\n@@ -8,6 +8,7 @@ use std::rc::Rc;\n use std::sync::Arc;\n use std::sync::RwLock;\n \n+use arboard::Clipboard;\n use crossterm::event;\n use crossterm::event::Event;\n use crossterm::event::KeyCode;\ndiff --git a/src/state.rs b/src/state.rs\n--- a/src/state.rs\n+++ b/src/state.rs\n@@ -47,6 +48,7 @@ pub(crate) struct State {\n     enable_async_cmds: bool,\n     pub current_cmd_log: CmdLog,\n     pub prompt: prompt::Prompt,\n+    pub clipboard: Option<Clipboard>,\n }\n \n impl State {\ndiff --git a/src/state.rs b/src/state.rs\n--- a/src/state.rs\n+++ b/src/state.rs\n@@ -76,6 +78,10 @@ impl State {\n         let bindings = Bindings::from(&config.bindings);\n         let pending_menu = root_menu(&config).map(PendingMenu::init);\n \n+        let clipboard = Clipboard::new()\n+            .inspect_err(|e| log::warn!(\"Couldn't initialize clipboard: {}\", e))\n+            .ok();\n+\n         Ok(Self {\n             repo,\n             config,\ndiff --git a/src/state.rs b/src/state.rs\n--- a/src/state.rs\n+++ b/src/state.rs\n@@ -88,6 +94,7 @@ impl State {\n             pending_menu,\n             current_cmd_log: CmdLog::new(),\n             prompt: prompt::Prompt::new(),\n+            clipboard,\n         })\n     }\n \ndiff --git a/src/state.rs b/src/state.rs\n--- a/src/state.rs\n+++ b/src/state.rs\n@@ -218,6 +225,16 @@ impl State {\n         self.screens.last().expect(\"No screen\")\n     }\n \n+    /// Displays an `Info` message to the CmdLog.\n+    pub fn display_info(&mut self, message: String) {\n+        self.current_cmd_log.push(CmdLogEntry::Info(message));\n+    }\n+\n+    /// Displays an `Error` message to the CmdLog.\n+    pub fn display_error(&mut self, error: String) {\n+        self.current_cmd_log.push(CmdLogEntry::Error(error));\n+    }\n+\n     /// Runs a `Command` and handles its output.\n     /// Will block awaiting its completion.\n     pub fn run_cmd(&mut self, term: &mut Term, input: &[u8], cmd: Command) -> Res<()> {\n",
        "test_patch": "diff --git a/src/tests/discard.rs b/src/tests/discard.rs\n--- a/src/tests/discard.rs\n+++ b/src/tests/discard.rs\n@@ -4,21 +4,21 @@ use super::*;\n pub(crate) fn discard_branch_confirm_prompt() {\n     let ctx = TestContext::setup_clone();\n     run(ctx.dir.path(), &[\"git\", \"branch\", \"asd\"]);\n-    snapshot!(ctx, \"yjK\");\n+    snapshot!(ctx, \"YjK\");\n }\n \n #[test]\n pub(crate) fn discard_branch_yes() {\n     let ctx = TestContext::setup_clone();\n     run(ctx.dir.path(), &[\"git\", \"branch\", \"asd\"]);\n-    snapshot!(ctx, \"yjKy\");\n+    snapshot!(ctx, \"YjKy\");\n }\n \n #[test]\n pub(crate) fn discard_branch_no() {\n     let ctx = TestContext::setup_clone();\n     run(ctx.dir.path(), &[\"git\", \"branch\", \"asd\"]);\n-    snapshot!(ctx, \"yjKn\");\n+    snapshot!(ctx, \"YjKn\");\n }\n \n #[test]\ndiff --git a/src/tests/discard.rs b/src/tests/discard.rs\n--- a/src/tests/discard.rs\n+++ b/src/tests/discard.rs\n@@ -77,7 +77,7 @@ pub(crate) fn discard_staged_file() {\n //     let mut ctx = TestContext::setup_clone();\n //     let mut state = ctx.init_state();\n //     state\n-//         .update(&mut ctx.term, &keys(\"yjKy\"))\n+//         .update(&mut ctx.term, &keys(\"YjKy\"))\n //         .unwrap();\n //     insta::assert_snapshot!(ctx.redact_buffer());\n // }\ndiff --git a/src/tests/mod.rs b/src/tests/mod.rs\n--- a/src/tests/mod.rs\n+++ b/src/tests/mod.rs\n@@ -168,7 +168,7 @@ fn show_refs() {\n     let ctx = TestContext::setup_clone();\n     run(ctx.dir.path(), &[\"git\", \"tag\", \"same-name\"]);\n     run(ctx.dir.path(), &[\"git\", \"checkout\", \"-b\", \"same-name\"]);\n-    snapshot!(ctx, \"y\");\n+    snapshot!(ctx, \"Y\");\n }\n \n mod checkout {\ndiff --git a/src/tests/mod.rs b/src/tests/mod.rs\n--- a/src/tests/mod.rs\n+++ b/src/tests/mod.rs\n@@ -178,21 +178,21 @@ mod checkout {\n     pub(crate) fn checkout_menu() {\n         let ctx = TestContext::setup_clone();\n         run(ctx.dir.path(), &[\"git\", \"branch\", \"other-branch\"]);\n-        snapshot!(ctx, \"yjb\");\n+        snapshot!(ctx, \"Yjb\");\n     }\n \n     #[test]\n     pub(crate) fn switch_branch_selected() {\n         let ctx = TestContext::setup_clone();\n         run(ctx.dir.path(), &[\"git\", \"branch\", \"other-branch\"]);\n-        snapshot!(ctx, \"yjjbb<enter>\");\n+        snapshot!(ctx, \"Yjjbb<enter>\");\n     }\n \n     #[test]\n     pub(crate) fn switch_branch_input() {\n         let ctx = TestContext::setup_clone();\n         run(ctx.dir.path(), &[\"git\", \"branch\", \"hi\"]);\n-        snapshot!(ctx, \"yjjbbhi<enter>\");\n+        snapshot!(ctx, \"Yjjbbhi<enter>\");\n     }\n \n     #[test]\ndiff --git a/src/tests/snapshots/gitu__tests__help_menu.snap b/src/tests/snapshots/gitu__tests__help_menu.snap\n--- a/src/tests/snapshots/gitu__tests__help_menu.snap\n+++ b/src/tests/snapshots/gitu__tests__help_menu.snap\n@@ -12,7 +12,7 @@ expression: ctx.redact_buffer()\n                                                                                 |\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500|\n Help                             Submenu                                        |\n-y Show refs                      b Branch                                       |\n+Y Show refs                      b Branch                                       |\n <tab> Toggle section             c Commit                                       |\n k/<up> Up                        f Fetch                                        |\n j/<down> Down                    h Help                                         |\n",
        "problem_statement": "Copy commit hash to clipboard\nIt'd be useful to be able to copy a commit hash.\r\nSelect anything with a commit hash, press `y` and it would be copied to your clipboard.\r\n\r\n`y` is already bound to `show_refs` in the current config, but I suggest moving `show_refs` to maybe `Y`.\n",
        "hints_text": "I am guessing this requires an external crate to access the clipboard, right? If so, arboard seems to be the most downloaded one, apart from a Windows-only crate.\nYea I think pulling in a dependency is the way to go here. Arboard seems fine!\nI have implemented it. One issue is that, for the X clipboard (not sure about wayland), the copied content is dropped when the program exits. That is how it works for most Linux apps though, so I guess it wouldn't be a problem ([there is a workaround](https://github.com/1Password/arboard/blob/master/examples/daemonize.rs), if needed)\r\nI just have a couple of questions before I submit the PR.\r\n1. Should I move show_refs to Y and bind copy_hash to y, as suggested in the issue?\r\n2. I suppose there should be some visual indication that the hash was copied (a message or something). What should I do? Right now the only use of the log is commands and outputs, and as this Op doesn't use commands, it's not showing anything at the moment, and would require adding functionality to the ui module if I'm not mistaken.\n1. Yea I think this might be the way to go, open for ideas of course.\n2. Could add a new variant to this enum, like \"Info\" or similar. Should be pretty easy.\nIt doesn't hurt if it is unnecessarily in the \"command log\" for now.\n\nCould start somewhere and iterate! Happy to see this catching interest :)",
        "created_at": "2024-04-12T17:43:17Z",
        "version": "0.15"
    }
]