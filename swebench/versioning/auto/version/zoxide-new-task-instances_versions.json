[
    {
        "repo": "ajeetdsouza/zoxide",
        "pull_number": 239,
        "instance_id": "ajeetdsouza__zoxide-239",
        "issue_numbers": [
            "238"
        ],
        "base_commit": "d74cd962f05373d3d8a8b3959ea22db8f70c0452",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,8 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Nushell: errors on 0.33.0.\n - PowerShell: errors when initializing in `StrictMode`.\n - Bash/POSIX: remove conflicting alias definitions when initializing.\n+- Bash: remove extra semicolon when setting `$PROMPT_COMMAND`.\n+- Xonsh: use shell environment instead of `os.environ`.\n \n ## [0.7.2] - 2021-06-10\n \ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -3,17 +3,11 @@\n \n \"\"\"Initialize zoxide on Xonsh.\"\"\"\n \n+import builtins  # pylint: disable=unused-import\n import os\n import os.path\n import subprocess\n import sys\n-{%- if cmd.is_some() %}\n-from builtins import aliases  # type: ignore # pylint: disable=no-name-in-module\n-{%- endif %}\n-{%- if hook != InitHook::None %}\n-from builtins import events  # type: ignore # pylint: disable=no-name-in-module\n-{%- endif %}\n-from subprocess import CalledProcessError\n from typing import AnyStr, List, Optional\n \n import xonsh.dirstack  # type: ignore # pylint: disable=import-error\ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -37,9 +31,9 @@ def __zoxide_pwd() -> str:\n {%- if resolve_symlinks %}\n     pwd = os.getcwd()\n {%- else %}\n-    pwd = os.getenv(\"PWD\")\n+    pwd = builtins.__xonsh__.env.get(\"PWD\")  # type: ignore  # pylint:disable=no-member\n     if pwd is None:\n-        raise Exception(\"$PWD not found in env\")\n+        raise Exception(\"$PWD not found\")\n {%- endif %}\n     return pwd\n \ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -91,9 +85,9 @@ if globals().get(\"__zoxide_hooked\") is not True:\n {%- when InitHook::None %}\n     {{ not_configured }}\n {%- when InitHook::Prompt %}\n-    @events.on_post_prompt  # type: ignore  # pylint:disable=undefined-variable\n+    @builtins.events.on_post_prompt  # type: ignore  # pylint:disable=no-member\n {%- when InitHook::Pwd %}\n-    @events.on_chdir  # type: ignore  # pylint:disable=undefined-variable\n+    @builtins.events.on_chdir  # type: ignore  # pylint:disable=no-member\n {%- endmatch %}\n     def __zoxide_hook(**_kwargs):\n         \"\"\"Hook to add new entries to the database.\"\"\"\ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -125,7 +119,7 @@ def __zoxide_z(args: List[str]):\n                 check=True,\n                 stdout=subprocess.PIPE,\n             )\n-        except CalledProcessError as exc:\n+        except subprocess.CalledProcessError as exc:\n             raise ZoxideSilentException() from exc\n \n         __zoxide_result = __zoxide_cmd.stdout[:-1]\ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -139,7 +133,7 @@ def __zoxide_zi(args: List[str]):\n         __zoxide_cmd = subprocess.run(\n             [zoxide, \"query\", \"-i\", \"--\"] + args, check=True, stdout=subprocess.PIPE\n         )\n-    except CalledProcessError as exc:\n+    except subprocess.CalledProcessError as exc:\n         raise ZoxideSilentException() from exc\n \n     __zoxide_result = __zoxide_cmd.stdout[:-1]\ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -153,8 +147,8 @@ def __zoxide_zi(args: List[str]):\n {%- match cmd %}\n {%- when Some with (cmd) %}\n \n-aliases[\"{{cmd}}\"] = __zoxide_z\n-aliases[\"{{cmd}}i\"] = __zoxide_zi\n+builtins.aliases[\"{{cmd}}\"] = __zoxide_z  # type: ignore  # pylint:disable=no-member\n+builtins.aliases[\"{{cmd}}i\"] = __zoxide_zi  # type: ignore  # pylint:disable=no-member\n \n {%- when None %}\n \n",
        "test_patch": "diff --git a/src/shell.rs b/src/shell.rs\n--- a/src/shell.rs\n+++ b/src/shell.rs\n@@ -334,8 +334,12 @@ mod tests {\n         let mut source = Xonsh(&opts).render().unwrap();\n         source.push('\\n');\n \n+        let tempdir = tempfile::tempdir().unwrap();\n+        let tempdir = tempdir.path().to_str().unwrap();\n+\n         Command::new(\"pylint\")\n             .args(&[\"--from-stdin\", \"zoxide\"])\n+            .env(\"HOME\", tempdir)\n             .write_stdin(source)\n             .assert()\n             .success()\n",
        "problem_statement": "[xonsh] get $PWD from 'shell' instead of the 'os' environment\nIn a **xonsh** shell **zoxide** tries to get the current directory from the OS environment variable `PWD`, which isn't updated unless a special option is defined (and doesn't even exist in a login xonsh shell, which leads to `$PWD not found in env` errors) https://github.com/ajeetdsouza/zoxide/blob/d74cd962f05373d3d8a8b3959ea22db8f70c0452/templates/xonsh.txt#L40\r\nAs far as I understand it, a better approach would be to use the shell environment variable `$PWD` instead, which is updated on each directory change without the need to set any extra options.\r\n\r\n\r\n#### Some background info:\r\nIn xonsh there are two environments:\r\n1) the **shell** environment (`__xonsh__.env` or `${...}`; [see this tutorial](https://xon.sh/dev/tutorial.html?#the-environment-itself))\r\n2) the **os** environment from Python (`os.environ` or via a wrapper [`xonsh.platform.os_environ`](https://github.com/xonsh/xonsh/blob/db99b646354460603e9c6d39563efd0e92ac565e/xonsh/platform.py#L455))\r\n\r\nUnless a [special flag is manually set](https://xon.sh/dev/tutorial.html?#environment-variables), the OS environment isn't updated when the shell environment changes:\r\n> Note To update os.environ when the xonsh environment changes set $UPDATE_OS_ENVIRON to True.\n",
        "hints_text": "",
        "created_at": "2021-07-22T11:45:28Z",
        "version": "0.7"
    },
    {
        "repo": "ajeetdsouza/zoxide",
        "pull_number": 179,
        "instance_id": "ajeetdsouza__zoxide-179",
        "issue_numbers": [
            "178"
        ],
        "base_commit": "5882bc6c4d6d3f8b0ea759477a54d1b67202f6e7",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -5,6 +5,12 @@ All notable changes to this project will be documented in this file.\n The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\n and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n \n+## Unreleased\n+\n+### Fixed\n+\n+- `cd -` on fish shells.\n+\n ## [0.6.0] - 2021-04-09\n \n ### Added\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -13,15 +13,15 @@ frequently, and uses a ranking algorithm to navigate to the best match.\n ## Examples\n \n ```sh\n-z foo       # cd into highest ranked directory matching foo\n-z foo bar   # cd into highest ranked directory matching foo and bar\n+z foo        # cd into highest ranked directory matching foo\n+z foo bar    # cd into highest ranked directory matching foo and bar\n \n-z ~/foo     # z also works like a regular cd command\n-z foo/      # cd into relative path\n-z ..        # cd one level up\n-z -         # cd into previous directory\n+z ~/foo      # z also works like a regular cd command\n+z foo/       # cd into relative path\n+z ..         # cd one level up\n+z -          # cd into previous directory\n \n-zi foo      # cd with interactive selection (using fzf)\n+zi foo       # cd with interactive selection (using fzf)\n ```\n \n Read more about the matching algorithm [here][algorithm-matching].\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -174,7 +174,8 @@ eval \"$(zoxide init zsh)\"\n \n #### Any POSIX shell\n \n-Add the following line to your configuration file:\n+Add the following line to your configuration file (usually\n+`~/.config/nu/config.toml`):\n \n ```sh\n eval \"$(zoxide init posix --hook prompt)\"\ndiff --git a/src/cmd/init.rs b/src/cmd/init.rs\n--- a/src/cmd/init.rs\n+++ b/src/cmd/init.rs\n@@ -10,7 +10,7 @@ use once_cell::sync::OnceCell;\n \n use std::io::{self, Write};\n \n-/// Generates shell configuration\n+/// Generate shell configuration\n #[derive(Clap, Debug)]\n #[clap(after_help(env_help()))]\n pub struct Init {\ndiff --git a/src/cmd/mod.rs b/src/cmd/mod.rs\n--- a/src/cmd/mod.rs\n+++ b/src/cmd/mod.rs\n@@ -18,7 +18,13 @@ pub trait Cmd {\n }\n \n #[derive(Debug, Clap)]\n-#[clap(about, author, global_setting(AppSettings::GlobalVersion), global_setting(AppSettings::VersionlessSubcommands), version = env!(\"ZOXIDE_VERSION\"))]\n+#[clap(\n+    about,\n+    author,\n+    global_setting(AppSettings::DisableHelpSubcommand),\n+    global_setting(AppSettings::GlobalVersion),\n+    global_setting(AppSettings::VersionlessSubcommands),\n+    version = env!(\"ZOXIDE_VERSION\"))]\n pub enum App {\n     Add(Add),\n     Import(Import),\ndiff --git a/src/cmd/query.rs b/src/cmd/query.rs\n--- a/src/cmd/query.rs\n+++ b/src/cmd/query.rs\n@@ -10,7 +10,7 @@ use clap::Clap;\n \n use std::io::{self, Write};\n \n-/// Searches for a directory\n+/// Search for a directory in the database\n #[derive(Clap, Debug)]\n pub struct Query {\n     keywords: Vec<String>,\ndiff --git a/src/cmd/remove.rs b/src/cmd/remove.rs\n--- a/src/cmd/remove.rs\n+++ b/src/cmd/remove.rs\n@@ -10,7 +10,7 @@ use clap::Clap;\n \n use std::io::Write;\n \n-/// Removes a directory\n+/// Remove a directory from the database\n #[derive(Clap, Debug)]\n pub struct Remove {\n     #[clap(conflicts_with = \"path\", long, short, value_name = \"keywords\")]\ndiff --git a/templates/fish.txt b/templates/fish.txt\n--- a/templates/fish.txt\n+++ b/templates/fish.txt\n@@ -16,7 +16,10 @@ end\n \n # cd + custom logic based on the value of _ZO_ECHO.\n function __zoxide_cd\n-    builtin cd $argv\n+{#- We can't use `builtin cd` over here, because fish wraps its builtin cd with\n+  a function that adds extra features (such as `cd -`). Using the builtin\n+  would make those features stop working. #}\n+    cd $argv\n {%- if echo %}\n     and __zoxide_pwd\n {%- endif %}\n",
        "test_patch": "diff --git a/templates/fish.txt b/templates/fish.txt\n--- a/templates/fish.txt\n+++ b/templates/fish.txt\n@@ -52,9 +55,7 @@ function __zoxide_z\n     set argc (count $argv)\n     if test $argc -eq 0\n         __zoxide_cd $HOME\n-    else if begin\n-            test $argc -eq 1; and test $argv[1] = -\n-        end\n+    else if test \"$argv\" = -\n         __zoxide_cd -\n     else if begin\n             test $argc -eq 1; and test -d $argv[1]\n",
        "problem_statement": "Cd to previous directory `z -` is broken in fish\nAfter  https://github.com/ajeetdsouza/zoxide/commit/7b00d5a42331b03c8cb367adfd5678a7a7e8b329, the command `z -` no longer works. I think this is because the logic for the directory stack is in a [fish function](https://github.com/fish-shell/fish-shell/blob/a918cabf5e1c148bbdde81213016e852a21914a4/share/functions/cd.fish#L21).\r\n\r\n```\r\n$ z -\r\ncd: The directory \u201c-\u201d does not exist\r\n\r\n$ builtin cd -\r\ncd: The directory \u201c-\u201d does not exist\r\n```\r\n\r\nTo test, I redefined `__zoxide_cd`:\r\n```fish\r\nfunction __zoxide_cd\r\n      cd $argv; and commandline -f repaint\r\nend\r\n```\r\n\r\n(Using `builtin commandline` is probably unnecessary since the authors of fish shell only use `commandline`.)\n",
        "hints_text": "",
        "created_at": "2021-04-12T20:19:52Z",
        "version": "0.6"
    },
    {
        "repo": "ajeetdsouza/zoxide",
        "pull_number": 143,
        "instance_id": "ajeetdsouza__zoxide-143",
        "issue_numbers": [
            "137"
        ],
        "base_commit": "d89605ffef5cccd3cd406590ca9ecc12f3b5a253",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -5,6 +5,14 @@ All notable changes to this project will be documented in this file.\n The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\n and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n \n+## Unreleased\n+\n+### Fixed\n+\n+- Removed unnecessary backtraces on Rust nightly.\n+- Fixed generated shell code to avoid accidentally using aliased builtins.\n+- Handle broken pipe errors gracefully when writing to streams.\n+\n ## [0.5.0] - 2020-10-30\n \n ### Added\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -114,12 +114,18 @@ zoxide for interactive selection. Installation instructions can be found\n ### Step 3: Add zoxide to your shell\n \n If you currently use `z`, `z.lua`, or `zsh-z`, you may want to first import\n-your existing database into `zoxide`:\n+your existing entries into `zoxide`:\n \n ```sh\n zoxide import /path/to/db\n ```\n \n+Alternatively, for `autojump`:\n+\n+```sh\n+zoxide import --from autojump /path/to/db\n+```\n+\n <!-- omit in toc -->\n #### bash\n \ndiff --git a/src/cmd/add.rs b/src/cmd/add.rs\n--- a/src/cmd/add.rs\n+++ b/src/cmd/add.rs\n@@ -1,6 +1,6 @@\n use super::Cmd;\n use crate::config;\n-use crate::store::StoreBuilder;\n+use crate::db::DatabaseFile;\n use crate::util;\n \n use anyhow::Result;\ndiff --git a/src/cmd/add.rs b/src/cmd/add.rs\n--- a/src/cmd/add.rs\n+++ b/src/cmd/add.rs\n@@ -40,10 +40,10 @@ impl Cmd for Add {\n         let data_dir = config::zo_data_dir()?;\n         let max_age = config::zo_maxage()?;\n \n-        let mut store = StoreBuilder::new(data_dir);\n-        let mut store = store.build()?;\n-        store.add(path, now);\n-        store.age(max_age);\n+        let mut db = DatabaseFile::new(data_dir);\n+        let mut db = db.open()?;\n+        db.add(path, now);\n+        db.age(max_age);\n \n         Ok(())\n     }\ndiff --git a/src/cmd/import.rs b/src/cmd/import.rs\n--- a/src/cmd/import.rs\n+++ b/src/cmd/import.rs\n@@ -3,13 +3,13 @@ use crate::config;\n use crate::import::{Autojump, Import as _, Z};\n use crate::util;\n \n-use crate::store::StoreBuilder;\n+use crate::db::DatabaseFile;\n use anyhow::{bail, Result};\n use clap::{ArgEnum, Clap};\n \n use std::path::PathBuf;\n \n-/// Import entries from another database\n+/// Import entries from another application\n #[derive(Clap, Debug)]\n pub struct Import {\n     path: PathBuf,\ndiff --git a/src/cmd/import.rs b/src/cmd/import.rs\n--- a/src/cmd/import.rs\n+++ b/src/cmd/import.rs\n@@ -27,10 +27,10 @@ impl Cmd for Import {\n     fn run(&self) -> Result<()> {\n         let data_dir = config::zo_data_dir()?;\n \n-        let mut store = StoreBuilder::new(data_dir);\n-        let mut store = store.build()?;\n-        if !self.merge && !store.dirs.is_empty() {\n-            bail!(\"zoxide database is not empty, specify --merge to continue anyway\")\n+        let mut db = DatabaseFile::new(data_dir);\n+        let mut db = db.open()?;\n+        if !self.merge && !db.dirs.is_empty() {\n+            bail!(\"current database is not empty, specify --merge to continue anyway\")\n         }\n \n         let resolve_symlinks = config::zo_resolve_symlinks();\ndiff --git a/src/cmd/import.rs b/src/cmd/import.rs\n--- a/src/cmd/import.rs\n+++ b/src/cmd/import.rs\n@@ -39,8 +39,8 @@ impl Cmd for Import {\n                 resolve_symlinks,\n                 now: util::current_time()?,\n             }\n-            .import(&mut store, &self.path),\n-            From::Z => Z { resolve_symlinks }.import(&mut store, &self.path),\n+            .import(&mut db, &self.path),\n+            From::Z => Z { resolve_symlinks }.import(&mut db, &self.path),\n         }\n     }\n }\ndiff --git a/src/cmd/init.rs b/src/cmd/init.rs\n--- a/src/cmd/init.rs\n+++ b/src/cmd/init.rs\n@@ -1,5 +1,6 @@\n use super::Cmd;\n use crate::config;\n+use crate::error::WriteErrorHandler;\n use crate::shell::{self, Hook, Opts};\n \n use anyhow::{Context, Result};\ndiff --git a/src/cmd/init.rs b/src/cmd/init.rs\n--- a/src/cmd/init.rs\n+++ b/src/cmd/init.rs\n@@ -7,6 +8,8 @@ use askama::Template;\n use clap::{ArgEnum, Clap};\n use once_cell::sync::OnceCell;\n \n+use std::io::{self, Write};\n+\n /// Generates shell configuration\n #[derive(Clap, Debug)]\n #[clap(after_help(env_help()))]\ndiff --git a/src/cmd/init.rs b/src/cmd/init.rs\n--- a/src/cmd/init.rs\n+++ b/src/cmd/init.rs\n@@ -54,9 +57,7 @@ impl Cmd for Init {\n             Shell::Zsh => shell::Zsh(opts).render(),\n         }\n         .context(\"could not render template\")?;\n-        println!(\"{}\", source);\n-\n-        Ok(())\n+        writeln!(io::stdout(), \"{}\", source).handle_err(\"stdout\")\n     }\n }\n \ndiff --git a/src/cmd/init.rs b/src/cmd/init.rs\n--- a/src/cmd/init.rs\n+++ b/src/cmd/init.rs\n@@ -75,8 +76,8 @@ fn env_help() -> &'static str {\n     ENV_HELP.get_or_init(|| {\n         #[cfg(unix)]\n         const PATH_SPLIT_SEPARATOR: u8 = b':';\n-        #[cfg(any(target_os = \"redox\", target_os = \"windows\"))]\n-        const PATH_SPLIT_SEPARATOR: u8 = b'\\\\';\n+        #[cfg(windows)]\n+        const PATH_SPLIT_SEPARATOR: u8 = b';';\n \n         format!(\n             \"\\\ndiff --git a/src/cmd/query.rs b/src/cmd/query.rs\n--- a/src/cmd/query.rs\n+++ b/src/cmd/query.rs\n@@ -1,9 +1,10 @@\n use super::Cmd;\n use crate::config;\n+use crate::db::{self, DatabaseFile};\n+use crate::error::WriteErrorHandler;\n use crate::fzf::Fzf;\n use crate::util;\n \n-use crate::store::{self, StoreBuilder};\n use anyhow::{Context, Result};\n use clap::Clap;\n \ndiff --git a/src/cmd/query.rs b/src/cmd/query.rs\n--- a/src/cmd/query.rs\n+++ b/src/cmd/query.rs\n@@ -30,19 +31,20 @@ pub struct Query {\n impl Cmd for Query {\n     fn run(&self) -> Result<()> {\n         let data_dir = config::zo_data_dir()?;\n-        let mut store = StoreBuilder::new(data_dir);\n-        let mut store = store.build()?;\n+        let mut db = DatabaseFile::new(data_dir);\n+        let mut db = db.open()?;\n \n-        let query = store::Query::new(&self.keywords);\n+        let query = db::Query::new(&self.keywords);\n         let now = util::current_time()?;\n \n-        let mut matches = store.iter_matches(&query, now);\n+        let resolve_symlinks = config::zo_resolve_symlinks();\n+        let mut matches = db.iter_matches(&query, now, resolve_symlinks);\n \n         if self.interactive {\n             let mut fzf = Fzf::new()?;\n             let handle = fzf.stdin();\n             for dir in matches {\n-                writeln!(handle, \"{}\", dir.display_score(now)).context(\"could not write to fzf\")?;\n+                writeln!(handle, \"{}\", dir.display_score(now)).handle_err(\"fzf\")?;\n             }\n             let selection = fzf.wait_select()?;\n             if self.score {\ndiff --git a/src/cmd/query.rs b/src/cmd/query.rs\n--- a/src/cmd/query.rs\n+++ b/src/cmd/query.rs\n@@ -62,15 +64,16 @@ impl Cmd for Query {\n                 } else {\n                     writeln!(handle, \"{}\", dir.display())\n                 }\n-                .unwrap()\n+                .handle_err(\"stdout\")?;\n             }\n         } else {\n             let dir = matches.next().context(\"no match found\")?;\n             if self.score {\n-                println!(\"{}\", dir.display_score(now))\n+                writeln!(io::stdout(), \"{}\", dir.display_score(now))\n             } else {\n-                println!(\"{}\", dir.display())\n+                writeln!(io::stdout(), \"{}\", dir.display())\n             }\n+            .handle_err(\"stdout\")?;\n         }\n \n         Ok(())\ndiff --git a/src/cmd/remove.rs b/src/cmd/remove.rs\n--- a/src/cmd/remove.rs\n+++ b/src/cmd/remove.rs\n@@ -1,7 +1,8 @@\n use super::Cmd;\n use crate::config;\n+use crate::db::{DatabaseFile, Query};\n+use crate::error::WriteErrorHandler;\n use crate::fzf::Fzf;\n-use crate::store::{Query, StoreBuilder};\n use crate::util;\n \n use anyhow::{bail, Context, Result};\ndiff --git a/src/cmd/remove.rs b/src/cmd/remove.rs\n--- a/src/cmd/remove.rs\n+++ b/src/cmd/remove.rs\n@@ -24,8 +25,8 @@ pub struct Remove {\n impl Cmd for Remove {\n     fn run(&self) -> Result<()> {\n         let data_dir = config::zo_data_dir()?;\n-        let mut store = StoreBuilder::new(data_dir);\n-        let mut store = store.build()?;\n+        let mut db = DatabaseFile::new(data_dir);\n+        let mut db = db.open()?;\n \n         let selection;\n         let path = match &self.interactive {\ndiff --git a/src/cmd/remove.rs b/src/cmd/remove.rs\n--- a/src/cmd/remove.rs\n+++ b/src/cmd/remove.rs\n@@ -35,9 +36,9 @@ impl Cmd for Remove {\n \n                 let mut fzf = Fzf::new()?;\n                 let handle = fzf.stdin();\n-                for dir in store.iter_matches(&query, now) {\n-                    writeln!(handle, \"{}\", dir.display_score(now))\n-                        .context(\"could not write to fzf\")?;\n+                let resolve_symlinks = config::zo_resolve_symlinks();\n+                for dir in db.iter_matches(&query, now, resolve_symlinks) {\n+                    writeln!(handle, \"{}\", dir.display_score(now)).handle_err(\"fzf\")?;\n                 }\n \n                 selection = fzf.wait_select()?;\ndiff --git a/src/cmd/remove.rs b/src/cmd/remove.rs\n--- a/src/cmd/remove.rs\n+++ b/src/cmd/remove.rs\n@@ -48,11 +49,11 @@ impl Cmd for Remove {\n             None => self.path.as_ref().unwrap(),\n         };\n \n-        if !store.remove(path) {\n+        if !db.remove(path) {\n             let path = util::resolve_path(&path)?;\n             let path = util::path_to_str(&path)?;\n-            if !store.remove(path) {\n-                bail!(\"path not found in store: {}\", &path)\n+            if !db.remove(path) {\n+                bail!(\"path not found in database: {}\", &path)\n             }\n         }\n \ndiff --git a/src/config.rs b/src/config.rs\n--- a/src/config.rs\n+++ b/src/config.rs\n@@ -1,4 +1,4 @@\n-use crate::store::Rank;\n+use crate::db::Rank;\n \n use anyhow::{bail, Context, Result};\n use dirs_next as dirs;\ndiff --git a/src/config.rs b/src/config.rs\n--- a/src/config.rs\n+++ b/src/config.rs\n@@ -15,7 +15,7 @@ pub fn zo_data_dir() -> Result<PathBuf> {\n                 data_dir.push(\"zoxide\");\n                 data_dir\n             }\n-            None => bail!(\"could not find database directory, please set _ZO_DATA_DIR manually\"),\n+            None => bail!(\"could not find data directory, please set _ZO_DATA_DIR manually\"),\n         },\n     };\n \ndiff --git a/src/store/dir.rs b/src/db/dir.rs\n--- a/src/store/dir.rs\n+++ b/src/db/dir.rs\n@@ -6,8 +6,8 @@ use serde::{Deserialize, Serialize};\n \n use std::borrow::Cow;\n use std::fmt::{self, Display, Formatter};\n+use std::fs;\n use std::ops::{Deref, DerefMut};\n-use std::path::Path;\n \n #[derive(Debug, Deserialize, Serialize)]\n pub struct DirList<'a>(#[serde(borrow)] Vec<Dir<'a>>);\ndiff --git a/src/store/dir.rs b/src/db/dir.rs\n--- a/src/store/dir.rs\n+++ b/src/db/dir.rs\n@@ -20,9 +20,9 @@ impl DirList<'_> {\n     }\n \n     pub fn from_bytes(bytes: &[u8]) -> Result<DirList> {\n-        // Assume a maximum size for the store. This prevents bincode from throwing strange\n-        // errors when it encounters invalid data.\n-        const MAX_SIZE: u64 = 8 << 20; // 8 MiB\n+        // Assume a maximum size for the database. This prevents bincode from\n+        // throwing strange errors when it encounters invalid data.\n+        const MAX_SIZE: u64 = 32 << 20; // 32 MiB\n         let deserializer = &mut bincode::options()\n             .with_fixint_encoding()\n             .with_limit(MAX_SIZE);\ndiff --git a/src/store/dir.rs b/src/db/dir.rs\n--- a/src/store/dir.rs\n+++ b/src/db/dir.rs\n@@ -30,7 +30,7 @@ impl DirList<'_> {\n         // Split bytes into sections.\n         let version_size = deserializer.serialized_size(&Self::VERSION).unwrap() as _;\n         if bytes.len() < version_size {\n-            bail!(\"could not deserialize store: corrupted data\");\n+            bail!(\"could not deserialize database: corrupted data\");\n         }\n         let (bytes_version, bytes_dirs) = bytes.split_at(version_size);\n \ndiff --git a/src/store/dir.rs b/src/db/dir.rs\n--- a/src/store/dir.rs\n+++ b/src/db/dir.rs\n@@ -46,7 +46,7 @@ impl DirList<'_> {\n                 ),\n             }\n         })()\n-        .context(\"could not deserialize store\")\n+        .context(\"could not deserialize database\")\n     }\n \n     pub fn to_bytes(&self) -> Result<Vec<u8>> {\ndiff --git a/src/store/dir.rs b/src/db/dir.rs\n--- a/src/store/dir.rs\n+++ b/src/db/dir.rs\n@@ -62,7 +62,7 @@ impl DirList<'_> {\n             bincode::serialize_into(&mut buffer, &self)?;\n             Ok(buffer)\n         })()\n-        .context(\"could not serialize store\")\n+        .context(\"could not serialize database\")\n     }\n }\n \ndiff --git a/src/store/dir.rs b/src/db/dir.rs\n--- a/src/store/dir.rs\n+++ b/src/db/dir.rs\n@@ -95,8 +95,14 @@ pub struct Dir<'a> {\n }\n \n impl Dir<'_> {\n-    pub fn is_match(&self, query: &Query) -> bool {\n-        query.matches(&self.path) && Path::new(self.path.as_ref()).is_dir()\n+    pub fn is_match(&self, query: &Query, resolve_symlinks: bool) -> bool {\n+        let resolver = if resolve_symlinks {\n+            fs::symlink_metadata\n+        } else {\n+            fs::metadata\n+        };\n+        let path = self.path.as_ref();\n+        query.matches(path) && resolver(path).map(|m| m.is_dir()).unwrap_or(false)\n     }\n \n     pub fn score(&self, now: Epoch) -> Rank {\ndiff --git a/src/store/mod.rs b/src/db/mod.rs\n--- a/src/store/mod.rs\n+++ b/src/db/mod.rs\n@@ -14,13 +14,13 @@ use std::fs;\n use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n \n-pub struct Store<'a> {\n+pub struct Database<'a> {\n     pub dirs: DirList<'a>,\n     pub modified: bool,\n     data_dir: &'a Path,\n }\n \n-impl<'a> Store<'a> {\n+impl<'a> Database<'a> {\n     pub fn save(&mut self) -> Result<()> {\n         if !self.modified {\n             return Ok(());\ndiff --git a/src/store/mod.rs b/src/db/mod.rs\n--- a/src/store/mod.rs\n+++ b/src/db/mod.rs\n@@ -29,7 +29,7 @@ impl<'a> Store<'a> {\n         let buffer = self.dirs.to_bytes()?;\n         let mut file = NamedTempFile::new_in(&self.data_dir).with_context(|| {\n             format!(\n-                \"could not create temporary store in: {}\",\n+                \"could not create temporary database in: {}\",\n                 self.data_dir.display()\n             )\n         })?;\ndiff --git a/src/store/mod.rs b/src/db/mod.rs\n--- a/src/store/mod.rs\n+++ b/src/db/mod.rs\n@@ -40,14 +40,14 @@ impl<'a> Store<'a> {\n         let _ = file.as_file().set_len(buffer.len() as _);\n         file.write_all(&buffer).with_context(|| {\n             format!(\n-                \"could not write to temporary store: {}\",\n+                \"could not write to temporary database: {}\",\n                 file.path().display()\n             )\n         })?;\n \n-        let path = store_path(&self.data_dir);\n+        let path = db_path(&self.data_dir);\n         persist(file, &path)\n-            .with_context(|| format!(\"could not replace store: {}\", path.display()))?;\n+            .with_context(|| format!(\"could not replace database: {}\", path.display()))?;\n \n         self.modified = false;\n         Ok(())\ndiff --git a/src/store/mod.rs b/src/db/mod.rs\n--- a/src/store/mod.rs\n+++ b/src/db/mod.rs\n@@ -76,10 +76,13 @@ impl<'a> Store<'a> {\n         &'b mut self,\n         query: &'b Query,\n         now: Epoch,\n+        resolve_symlinks: bool,\n     ) -> impl DoubleEndedIterator<Item = &'b Dir> {\n         self.dirs\n             .sort_unstable_by_key(|dir| Reverse(OrderedFloat(dir.score(now))));\n-        self.dirs.iter().filter(move |dir| dir.is_match(&query))\n+        self.dirs\n+            .iter()\n+            .filter(move |dir| dir.is_match(&query, resolve_symlinks))\n     }\n \n     pub fn remove<S: AsRef<str>>(&mut self, path: S) -> bool {\ndiff --git a/src/store/mod.rs b/src/db/mod.rs\n--- a/src/store/mod.rs\n+++ b/src/db/mod.rs\n@@ -114,12 +117,12 @@ impl<'a> Store<'a> {\n     }\n }\n \n-impl Drop for Store<'_> {\n+impl Drop for Database<'_> {\n     fn drop(&mut self) {\n         // Since the error can't be properly handled here,\n         // pretty-print it instead.\n         if let Err(e) = self.save() {\n-            println!(\"Error: {}\", e)\n+            let _ = writeln!(io::stderr(), \"zoxide: {:?}\", e);\n         }\n     }\n }\ndiff --git a/src/store/mod.rs b/src/db/mod.rs\n--- a/src/store/mod.rs\n+++ b/src/db/mod.rs\n@@ -159,29 +162,31 @@ fn persist<P: AsRef<Path>>(file: NamedTempFile, path: P) -> Result<(), PersistEr\n     Ok(())\n }\n \n-pub struct StoreBuilder {\n+pub struct DatabaseFile {\n     data_dir: PathBuf,\n     buffer: Vec<u8>,\n }\n \n-impl StoreBuilder {\n-    pub fn new<P: Into<PathBuf>>(data_dir: P) -> StoreBuilder {\n-        StoreBuilder {\n+impl DatabaseFile {\n+    pub fn new<P: Into<PathBuf>>(data_dir: P) -> DatabaseFile {\n+        DatabaseFile {\n             data_dir: data_dir.into(),\n             buffer: Vec::new(),\n         }\n     }\n \n-    pub fn build(&mut self) -> Result<Store> {\n-        // Read the entire store to memory. For smaller files, this is faster\n-        // than mmap / streaming, and allows for zero-copy deserialization.\n-        let path = store_path(&self.data_dir);\n+    pub fn open(&mut self) -> Result<Database> {\n+        // Read the entire database to memory. For smaller files, this is\n+        // faster than mmap / streaming, and allows for zero-copy\n+        // deserialization.\n+        let path = db_path(&self.data_dir);\n         match fs::read(&path) {\n             Ok(buffer) => {\n                 self.buffer = buffer;\n-                let dirs = DirList::from_bytes(&self.buffer)\n-                    .with_context(|| format!(\"could not deserialize store: {}\", path.display()))?;\n-                Ok(Store {\n+                let dirs = DirList::from_bytes(&self.buffer).with_context(|| {\n+                    format!(\"could not deserialize database: {}\", path.display())\n+                })?;\n+                Ok(Database {\n                     dirs,\n                     modified: false,\n                     data_dir: &self.data_dir,\ndiff --git a/src/store/mod.rs b/src/db/mod.rs\n--- a/src/store/mod.rs\n+++ b/src/db/mod.rs\n@@ -189,7 +194,7 @@ impl StoreBuilder {\n             }\n             Err(e) if e.kind() == io::ErrorKind::NotFound => {\n                 // Create data directory, but don't create any file yet.\n-                // The file will be created later by [`Store::save`]\n+                // The file will be created later by [`Database::save`]\n                 // if any data is modified.\n                 fs::create_dir_all(&self.data_dir).with_context(|| {\n                     format!(\ndiff --git a/src/error.rs b/src/error.rs\n--- a/src/error.rs\n+++ b/src/error.rs\n@@ -1,5 +1,9 @@\n+use anyhow::{bail, Context, Result};\n+\n use std::fmt::{self, Display, Formatter};\n+use std::io;\n \n+// Custom error type for early exit.\n #[derive(Debug)]\n pub struct SilentExit {\n     pub code: i32,\ndiff --git a/src/error.rs b/src/error.rs\n--- a/src/error.rs\n+++ b/src/error.rs\n@@ -10,3 +14,16 @@ impl Display for SilentExit {\n         Ok(())\n     }\n }\n+\n+pub trait WriteErrorHandler {\n+    fn handle_err(self, device: &str) -> Result<()>;\n+}\n+\n+impl WriteErrorHandler for io::Result<()> {\n+    fn handle_err(self, device: &str) -> Result<()> {\n+        match self {\n+            Err(e) if e.kind() == io::ErrorKind::BrokenPipe => bail!(SilentExit { code: 0 }),\n+            result => result.with_context(|| format!(\"could not write to {}\", device)),\n+        }\n+    }\n+}\ndiff --git a/src/import/autojump.rs b/src/import/autojump.rs\n--- a/src/import/autojump.rs\n+++ b/src/import/autojump.rs\n@@ -1,6 +1,6 @@\n use super::Import;\n \n-use crate::store::{Dir, Epoch, Store};\n+use crate::db::{Database, Dir, Epoch};\n use anyhow::{Context, Result};\n \n use std::borrow::Cow;\ndiff --git a/src/import/autojump.rs b/src/import/autojump.rs\n--- a/src/import/autojump.rs\n+++ b/src/import/autojump.rs\n@@ -13,7 +13,7 @@ pub struct Autojump {\n }\n \n impl Import for Autojump {\n-    fn import<P: AsRef<Path>>(&self, store: &mut Store, path: P) -> Result<()> {\n+    fn import<P: AsRef<Path>>(&self, db: &mut Database, path: P) -> Result<()> {\n         let path = path.as_ref();\n         let buffer = fs::read_to_string(path)\n             .with_context(|| format!(\"could not open autojump database: {}\", path.display()))?;\ndiff --git a/src/import/autojump.rs b/src/import/autojump.rs\n--- a/src/import/autojump.rs\n+++ b/src/import/autojump.rs\n@@ -45,13 +45,13 @@ impl Import for Autojump {\n \n         let rank_sum = entries.iter().map(|(_, rank)| rank).sum::<f64>();\n         for &(path, rank) in entries.iter() {\n-            if store.dirs.iter_mut().find(|dir| dir.path == path).is_none() {\n-                store.dirs.push(Dir {\n+            if db.dirs.iter_mut().find(|dir| dir.path == path).is_none() {\n+                db.dirs.push(Dir {\n                     path: Cow::Owned(path.into()),\n                     rank: rank / rank_sum,\n                     last_accessed: self.now,\n                 });\n-                store.modified = true;\n+                db.modified = true;\n             }\n         }\n \ndiff --git a/src/import/mod.rs b/src/import/mod.rs\n--- a/src/import/mod.rs\n+++ b/src/import/mod.rs\n@@ -1,7 +1,7 @@\n mod autojump;\n mod z;\n \n-use crate::store::Store;\n+use crate::db::Database;\n use anyhow::Result;\n \n use std::path::Path;\ndiff --git a/src/import/mod.rs b/src/import/mod.rs\n--- a/src/import/mod.rs\n+++ b/src/import/mod.rs\n@@ -10,5 +10,5 @@ pub use autojump::Autojump;\n pub use z::Z;\n \n pub trait Import {\n-    fn import<P: AsRef<Path>>(&self, store: &mut Store, path: P) -> Result<()>;\n+    fn import<P: AsRef<Path>>(&self, db: &mut Database, path: P) -> Result<()>;\n }\ndiff --git a/src/import/z.rs b/src/import/z.rs\n--- a/src/import/z.rs\n+++ b/src/import/z.rs\n@@ -1,6 +1,6 @@\n use super::Import;\n \n-use crate::store::{Dir, Store};\n+use crate::db::{Database, Dir};\n use anyhow::{Context, Result};\n \n use std::borrow::Cow;\ndiff --git a/src/import/z.rs b/src/import/z.rs\n--- a/src/import/z.rs\n+++ b/src/import/z.rs\n@@ -13,7 +13,7 @@ pub struct Z {\n }\n \n impl Import for Z {\n-    fn import<P: AsRef<Path>>(&self, store: &mut Store, path: P) -> Result<()> {\n+    fn import<P: AsRef<Path>>(&self, db: &mut Database, path: P) -> Result<()> {\n         let file = File::open(path).context(\"could not open z database\")?;\n         let reader = BufReader::new(file);\n \ndiff --git a/src/import/z.rs b/src/import/z.rs\n--- a/src/import/z.rs\n+++ b/src/import/z.rs\n@@ -41,18 +41,18 @@ impl Import for Z {\n                     .parse()\n                     .with_context(|| format!(\"invalid epoch: {}\", last_accessed))?;\n \n-                match store.dirs.iter_mut().find(|dir| dir.path == path) {\n+                match db.dirs.iter_mut().find(|dir| dir.path == path) {\n                     Some(dir) => {\n                         dir.rank += rank;\n                         dir.last_accessed = dir.last_accessed.max(last_accessed);\n                     }\n-                    None => store.dirs.push(Dir {\n+                    None => db.dirs.push(Dir {\n                         path: Cow::Owned(path.into()),\n                         rank,\n                         last_accessed,\n                     }),\n                 }\n-                store.modified = true;\n+                db.modified = true;\n \n                 Ok(())\n             })()\ndiff --git a/src/main.rs b/src/main.rs\n--- a/src/main.rs\n+++ b/src/main.rs\n@@ -1,31 +1,33 @@\n mod cmd;\n mod config;\n+mod db;\n mod error;\n mod fzf;\n mod import;\n mod shell;\n-mod store;\n mod util;\n \n use crate::cmd::{App, Cmd};\n use crate::error::SilentExit;\n \n-use anyhow::Result;\n use clap::Clap;\n \n use std::env;\n+use std::io::{self, Write};\n use std::process;\n \n-pub fn main() -> Result<()> {\n+pub fn main() {\n     // Forcibly disable backtraces.\n     env::remove_var(\"RUST_LIB_BACKTRACE\");\n     env::remove_var(\"RUST_BACKTRACE\");\n \n-    App::parse()\n-        .run()\n-        .map_err(|e| match e.downcast::<SilentExit>() {\n+    if let Err(e) = App::parse().run() {\n+        match e.downcast::<SilentExit>() {\n             Ok(SilentExit { code }) => process::exit(code),\n-            // TODO: change the error prefix to `zoxide:`\n-            Err(e) => e,\n-        })\n+            Err(e) => {\n+                let _ = writeln!(io::stderr(), \"zoxide: {:?}\", e);\n+                process::exit(1);\n+            }\n+        }\n+    }\n }\ndiff --git a/src/util.rs b/src/util.rs\n--- a/src/util.rs\n+++ b/src/util.rs\n@@ -1,4 +1,4 @@\n-use crate::store::Epoch;\n+use crate::db::Epoch;\n \n use anyhow::{bail, Context, Result};\n \n",
        "test_patch": "diff --git a/src/store/mod.rs b/src/db/mod.rs\n--- a/src/store/mod.rs\n+++ b/src/db/mod.rs\n@@ -197,22 +202,22 @@ impl StoreBuilder {\n                         self.data_dir.display()\n                     )\n                 })?;\n-                Ok(Store {\n+                Ok(Database {\n                     dirs: DirList::new(),\n                     modified: false,\n                     data_dir: &self.data_dir,\n                 })\n             }\n             Err(e) => {\n-                Err(e).with_context(|| format!(\"could not read from store: {}\", path.display()))\n+                Err(e).with_context(|| format!(\"could not read from database: {}\", path.display()))\n             }\n         }\n     }\n }\n \n-fn store_path<P: AsRef<Path>>(data_dir: P) -> PathBuf {\n-    const STORE_FILENAME: &str = \"db.zo\";\n-    data_dir.as_ref().join(STORE_FILENAME)\n+fn db_path<P: AsRef<Path>>(data_dir: P) -> PathBuf {\n+    const DB_FILENAME: &str = \"db.zo\";\n+    data_dir.as_ref().join(DB_FILENAME)\n }\n \n #[cfg(test)]\ndiff --git a/src/store/mod.rs b/src/db/mod.rs\n--- a/src/store/mod.rs\n+++ b/src/db/mod.rs\n@@ -230,17 +235,17 @@ mod tests {\n \n         let data_dir = tempfile::tempdir().unwrap();\n         {\n-            let mut store = StoreBuilder::new(data_dir.path());\n-            let mut store = store.build().unwrap();\n-            store.add(path, now);\n-            store.add(path, now);\n+            let mut db = DatabaseFile::new(data_dir.path());\n+            let mut db = db.open().unwrap();\n+            db.add(path, now);\n+            db.add(path, now);\n         }\n         {\n-            let mut store = StoreBuilder::new(data_dir.path());\n-            let store = store.build().unwrap();\n-            assert_eq!(store.dirs.len(), 1);\n+            let mut db = DatabaseFile::new(data_dir.path());\n+            let db = db.open().unwrap();\n+            assert_eq!(db.dirs.len(), 1);\n \n-            let dir = &store.dirs[0];\n+            let dir = &db.dirs[0];\n             assert_eq!(dir.path, path);\n             assert_eq!(dir.last_accessed, now);\n         }\ndiff --git a/src/store/mod.rs b/src/db/mod.rs\n--- a/src/store/mod.rs\n+++ b/src/db/mod.rs\n@@ -257,20 +262,20 @@ mod tests {\n \n         let data_dir = tempfile::tempdir().unwrap();\n         {\n-            let mut store = StoreBuilder::new(data_dir.path());\n-            let mut store = store.build().unwrap();\n-            store.add(path, now);\n+            let mut db = DatabaseFile::new(data_dir.path());\n+            let mut db = db.open().unwrap();\n+            db.add(path, now);\n         }\n         {\n-            let mut store = StoreBuilder::new(data_dir.path());\n-            let mut store = store.build().unwrap();\n-            assert!(store.remove(path));\n+            let mut db = DatabaseFile::new(data_dir.path());\n+            let mut db = db.open().unwrap();\n+            assert!(db.remove(path));\n         }\n         {\n-            let mut store = StoreBuilder::new(data_dir.path());\n-            let mut store = store.build().unwrap();\n-            assert!(store.dirs.is_empty());\n-            assert!(!store.remove(path));\n+            let mut db = DatabaseFile::new(data_dir.path());\n+            let mut db = db.open().unwrap();\n+            assert!(db.dirs.is_empty());\n+            assert!(!db.remove(path));\n         }\n     }\n }\n",
        "problem_statement": "Broken pipes are not handled elegantly\nThanks @kidonng for pointing this out!\r\n\r\nTo reproduce, run the following with more than 1 entry in the database:\r\n\r\n```sh\r\nzoxide query -l | head -n1\r\n```\r\n\r\nThe output:\r\n\r\n```\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 32, kind: BrokenPipe, message: \"Broken pipe\" }', src/cmd/query.rs:64:18\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n\r\nThis is a simple fix - replacing \r\n\r\n```rust\r\nprintln!(\"foo\");\r\n```\r\n\r\nwith\r\n\r\n```rust\r\nwriteln!(std::io::stdout(), \"foo\").context(\"could not write to stdout\")?;\r\n```\r\n\r\nAnd later handling `io::ErrorKind::BrokenPipe`. However, handling printing errors everywhere would make the code unnecessarily verbose, so it's worth looking into how we can make this more elegant.\n",
        "hints_text": "got random error message. I guess they are related?:\r\n```\r\nError: could not write to fzf\r\nCaused by: \r\nBroken pipe (os error 32)\r\n```\nThat is related, although I've never seen the issue with fzf before. What were your exact steps? \nis there way to see logs? It's random for me. Suspect it happens my initial use after not using it for a while.\nChances are you have a lot of directories in zoxide and you either selected something in fzf, or exited fzf early (before zoxide was able to finish writing to it). The cause is the same as in the issue described above, I'll fix it soon.",
        "created_at": "2021-01-29T21:13:19Z",
        "version": "0.5"
    },
    {
        "repo": "ajeetdsouza/zoxide",
        "pull_number": 174,
        "instance_id": "ajeetdsouza__zoxide-174",
        "issue_numbers": [
            "151"
        ],
        "base_commit": "3398cc721dea48a31aeb726551e61bfd4ba63ca3",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -10,6 +10,11 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Added\n \n - Support for [Nushell](https://www.nushell.sh/).\n+- Support for [Elvish](https://elv.sh/).\n+\n+### Changed\n+\n+- `z` now excludes the current directory from search results.\n \n ### Fixed\n \ndiff --git a/Cargo.toml b/Cargo.toml\n--- a/Cargo.toml\n+++ b/Cargo.toml\n@@ -36,6 +36,7 @@ default = []\n # - bash\n # - black: <https://github.com/psf/black>\n # - dash\n+# - elvish: <https://github.com/elves/elvish>\n # - fish: <https://github.com/fish-shell/fish-shell>\n # - mypy: <https://github.com/python/mypy>\n # - nushell: <https://github.com/nushell/nushell>\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -112,15 +112,23 @@ zoxide import --from autojump /path/to/db\n \n #### bash\n \n-Add the following line to your `~/.bashrc`:\n+Add the following line to your configuration file (usually `~/.bashrc`):\n \n ```sh\n eval \"$(zoxide init bash)\"\n ```\n \n+#### elvish\n+\n+Add the following line to your configuration file (usually `~/.elvish/rc.elv`):\n+\n+```sh\n+eval $(zoxide init elvish | slurp)\n+```\n+\n #### fish\n \n-Add the following line to your `~/.config/fish/config.fish`:\n+Add the following line to your configuration file (usually `~/.config/fish/config.fish`):\n \n ```fish\n zoxide init fish | source\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -154,7 +162,7 @@ Invoke-Expression (& {\n \n #### xonsh\n \n-Add the following line to your profile (usually `~/.xonshrc`):\n+Add the following line to your configuration file (usually `~/.xonshrc`):\n \n ```python\n execx($(zoxide init xonsh), 'exec', __xonsh__.ctx, filename='zoxide')\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -162,7 +170,7 @@ execx($(zoxide init xonsh), 'exec', __xonsh__.ctx, filename='zoxide')\n \n #### zsh\n \n-Add the following line to your `~/.zshrc`:\n+Add the following line to your configuration file (usually `~/.zshrc`):\n \n ```sh\n eval \"$(zoxide init zsh)\"\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -170,7 +178,7 @@ eval \"$(zoxide init zsh)\"\n \n #### Any POSIX shell\n \n-Add the following line to your shell's configuration file:\n+Add the following line to your configuration file:\n \n ```sh\n eval \"$(zoxide init posix --hook prompt)\"\ndiff --git a/shell.nix b/shell.nix\n--- a/shell.nix\n+++ b/shell.nix\n@@ -6,6 +6,7 @@ in\n pkgs.mkShell {\n   buildInputs = [\n     pkgs-master.cargo-audit\n+    pkgs-master.elvish\n     pkgs-master.nushell\n     pkgs-python\n     pkgs.bash\ndiff --git a/src/cmd/init.rs b/src/cmd/init.rs\n--- a/src/cmd/init.rs\n+++ b/src/cmd/init.rs\n@@ -50,6 +50,7 @@ impl Cmd for Init {\n \n         let source = match self.shell {\n             Shell::Bash => shell::Bash(opts).render(),\n+            Shell::Elvish => shell::Elvish(opts).render(),\n             Shell::Fish => shell::Fish(opts).render(),\n             Shell::Nushell => shell::Nushell(opts).render(),\n             Shell::Posix => shell::Posix(opts).render(),\ndiff --git a/src/cmd/init.rs b/src/cmd/init.rs\n--- a/src/cmd/init.rs\n+++ b/src/cmd/init.rs\n@@ -65,6 +66,7 @@ impl Cmd for Init {\n #[derive(ArgEnum, Debug)]\n enum Shell {\n     Bash,\n+    Elvish,\n     Fish,\n     Nushell,\n     Posix,\ndiff --git a/src/shell.rs b/src/shell.rs\n--- a/src/shell.rs\n+++ b/src/shell.rs\n@@ -24,6 +24,7 @@ macro_rules! make_template {\n }\n \n make_template!(Bash, \"bash.txt\");\n+make_template!(Elvish, \"elvish.txt\");\n make_template!(Fish, \"fish.txt\");\n make_template!(Nushell, \"nushell.txt\");\n make_template!(Posix, \"posix.txt\");\ndiff --git a/templates/bash.txt b/templates/bash.txt\n--- a/templates/bash.txt\n+++ b/templates/bash.txt\n@@ -1,7 +1,7 @@\n-{%- let SECTION = \"# =============================================================================\\n#\" -%}\n-{%- let NOT_CONFIGURED = \"# -- not configured --\" -%}\n+{%- let section = \"# =============================================================================\\n#\" -%}\n+{%- let not_configured = \"# -- not configured --\" -%}\n \n-{{ SECTION }}\n+{{ section }}\n # Utility functions for zoxide.\n #\n \ndiff --git a/templates/bash.txt b/templates/bash.txt\n--- a/templates/bash.txt\n+++ b/templates/bash.txt\n@@ -20,14 +20,14 @@ function __zoxide_cd() {\n     \\builtin cd \"$@\" {%- if echo %} && __zoxide_pwd {%- endif %}\n }\n \n-{{ SECTION }}\n+{{ section }}\n # Hook configuration for zoxide.\n #\n \n # Hook to add new entries to the database.\n {%- match hook %}\n {%- when Hook::None %}\n-{{ NOT_CONFIGURED }}\n+{{ not_configured }}\n \n {%- when Hook::Prompt %}\n function __zoxide_hook() {\ndiff --git a/templates/bash.txt b/templates/bash.txt\n--- a/templates/bash.txt\n+++ b/templates/bash.txt\n@@ -44,19 +44,20 @@ function __zoxide_hook() {\n         zoxide add -- \"${__zoxide_pwd_old}\"\n     fi\n }\n+\n {%- endmatch %}\n \n # Initialize hook.\n if [ \"${__zoxide_hooked}\" != '1' ]; then\n     __zoxide_hooked='1'\n-    {%- if hook == Hook::None %}\n-    {{ NOT_CONFIGURED }}\n-    {%- else %}\n+{%- if hook == Hook::None %}\n+    {{ not_configured }}\n+{%- else %}\n     PROMPT_COMMAND=\"__zoxide_hook;${PROMPT_COMMAND:+${PROMPT_COMMAND}}\"\n-    {%- endif %}\n+{%- endif %}\n fi\n \n-{{ SECTION }}\n+{{ section }}\n # When using zoxide with --no-aliases, alias these internal functions as\n # desired.\n #\ndiff --git a/templates/bash.txt b/templates/bash.txt\n--- a/templates/bash.txt\n+++ b/templates/bash.txt\n@@ -87,7 +88,7 @@ function __zoxide_zi() {\n     __zoxide_result=\"$(zoxide query -i -- \"$@\")\" && __zoxide_cd \"${__zoxide_result}\"\n }\n \n-{{ SECTION }}\n+{{ section }}\n # Convenient aliases for zoxide. Disable these using --no-aliases.\n #\n \ndiff --git a/templates/bash.txt b/templates/bash.txt\n--- a/templates/bash.txt\n+++ b/templates/bash.txt\n@@ -113,11 +114,12 @@ function {{cmd}}i() {\n }\n \n {%- when None %}\n-{{ NOT_CONFIGURED }}\n+\n+{{ not_configured }}\n \n {%- endmatch %}\n \n-{{ SECTION }}\n+{{ section }}\n # To initialize zoxide with bash, add the following line to your bash\n # configuration file (usually ~/.bashrc):\n #\ndiff --git /dev/null b/templates/elvish.txt\nnew file mode 100644\n--- /dev/null\n+++ b/templates/elvish.txt\n@@ -0,0 +1,86 @@\n+{%- let section = \"# =============================================================================\\n#\" -%}\n+{%- let not_configured = \"# -- not configured --\" -%}\n+\n+use builtin\n+use path\n+\n+{{ section }}\n+# Utility functions for zoxide.\n+#\n+\n+# cd + custom logic based on the value of _ZO_ECHO.\n+fn __zoxide_cd [path]{\n+    builtin:cd $path\n+{%- if echo %}\n+    builtin:echo $pwd\n+{%- endif %}\n+}\n+\n+{{ section }}\n+# Hook configuration for zoxide.\n+#\n+\n+if (not (and (builtin:has-env __zoxide_hooked) (builtin:eq (builtin:get-env __zoxide_hooked) 1))) {\n+    builtin:set-env __zoxide_hooked 1\n+\n+    # Initialize hook to track previous directory.\n+    builtin:set-env __zoxide_oldpwd $pwd\n+    before-chdir = [$@before-chdir [_]{ builtin:set-env __zoxide_oldpwd $pwd }]\n+\n+    # Initialize hook to add directories to zoxide.\n+{%- match hook %}\n+{%- when Hook::None %}\n+    {{ not_configured }}\n+{%- when Hook::Prompt %}\n+    edit:before-readline = [$@edit:before-readline []{ zoxide add $pwd }]\n+{%- when Hook::Pwd %}\n+    after-chdir = [$@after-chdir [_]{ zoxide add $pwd }]\n+{%- endmatch %}\n+}\n+\n+{{ section }}\n+# When using zoxide with --no-aliases, alias these internal functions as\n+# desired.\n+#\n+\n+# Jump to a directory using only keywords.\n+fn __zoxide_z [@rest]{\n+    if (builtin:eq [] $rest) {\n+        __zoxide_cd ~\n+    } elif (builtin:eq [-] $rest) {\n+        __zoxide_cd (builtin:get-env __zoxide_oldpwd)\n+    } elif (and (builtin:eq (builtin:count $rest) 1) (path:is-dir $rest[0])) {\n+        __zoxide_cd $rest[0]\n+    } else {\n+        __zoxide_cd (zoxide query --exclude $pwd -- $@rest)\n+    }\n+}\n+edit:add-var __zoxide_z~ $__zoxide_z~\n+\n+# Jump to a directory using interactive search.\n+fn __zoxide_zi [@rest]{\n+    __zoxide_cd (zoxide query -i -- $@rest)\n+}\n+edit:add-var __zoxide_zi~ $__zoxide_zi~\n+\n+{{ section }}\n+# Convenient aliases for zoxide. Disable these using --no-aliases.\n+#\n+\n+{%- match cmd %}\n+{%- when Some with (cmd) %}\n+\n+edit:add-var z~ $__zoxide_z~\n+edit:add-var zi~ $__zoxide_zi~\n+\n+{%- when None %}\n+\n+{{ not_configured }}\n+\n+{%- endmatch %}\n+\n+{{ section }}\n+# To initialize zoxide with xonsh, add the following line to your elvish\n+# configuration file (usually ~/.elvish/rc.elv):\n+#\n+# eval $(zoxide init elvish | slurp)\ndiff --git a/templates/fish.txt b/templates/fish.txt\n--- a/templates/fish.txt\n+++ b/templates/fish.txt\n@@ -1,12 +1,10 @@\n-{%- let SECTION = \"# =============================================================================\\n#\" -%}\n-{%- let NOT_CONFIGURED = \"# -- not configured --\" -%}\n+{%- let section = \"# =============================================================================\\n#\" -%}\n+{%- let not_configured = \"# -- not configured --\" -%}\n \n-{{ SECTION }}\n+{{ section }}\n # Utility functions for zoxide.\n #\n \n-# Remove definitions.\n-\n # pwd based on the value of _ZO_RESOLVE_SYMLINKS.\n function __zoxide_pwd\n {%- if resolve_symlinks %}\ndiff --git a/templates/fish.txt b/templates/fish.txt\n--- a/templates/fish.txt\n+++ b/templates/fish.txt\n@@ -74,7 +72,7 @@ function __zoxide_zi\n     and __zoxide_cd $__zoxide_result\n end\n \n-{{ SECTION }}\n+{{ section }}\n # Convenient aliases for zoxide. Disable these using --no-aliases.\n #\n \ndiff --git a/templates/fish.txt b/templates/fish.txt\n--- a/templates/fish.txt\n+++ b/templates/fish.txt\n@@ -99,11 +97,12 @@ function {{cmd}}i\n end\n \n {%- when None %}\n-{{ NOT_CONFIGURED }}\n+\n+{{ not_configured }}\n \n {%- endmatch %}\n \n-{{ SECTION }}\n+{{ section }}\n # To initialize zoxide with fish, add the following line to your fish\n # configuration file (usually ~/.config/fish/config.fish):\n #\ndiff --git a/templates/nushell.txt b/templates/nushell.txt\n--- a/templates/nushell.txt\n+++ b/templates/nushell.txt\n@@ -1,7 +1,7 @@\n-{%- let SECTION = \"# =============================================================================\\n#\" -%}\n-{%- let NOT_CONFIGURED = \"# -- not configured --\" -%}\n+{%- let section = \"# =============================================================================\\n#\" -%}\n+{%- let not_configured = \"# -- not configured --\" -%}\n \n-{{ SECTION }}\n+{{ section }}\n # Hook configuration for zoxide.\n #\n \ndiff --git a/templates/nushell.txt b/templates/nushell.txt\n--- a/templates/nushell.txt\n+++ b/templates/nushell.txt\n@@ -22,7 +22,7 @@ printf \"zoxide: PWD hooks are not supported on Nushell.\\n        Use 'zoxide ini\n \n {%- endmatch %}\n \n-{{ SECTION }}\n+{{ section }}\n # When using zoxide with --no-aliases, alias these internal functions as\n # desired.\n #\ndiff --git a/templates/nushell.txt b/templates/nushell.txt\n--- a/templates/nushell.txt\n+++ b/templates/nushell.txt\n@@ -48,21 +48,21 @@ def __zoxide_z [...rest:string] {\n             cd $(zoxide query --exclude $(pwd) -- $args | str trim)\n         }\n     }\n-    {%- if echo %}\n+{%- if echo %}\n     echo $(pwd)\n-    {%- endif %}\n+{%- endif %}\n }\n \n # Jump to a directory using interactive search.\n def __zoxide_zi  [...rest:string] {\n     let args = $(echo $rest | skip 1)\n     cd $(zoxide query -i -- $args | str trim)\n-    {%- if echo %}\n+{%- if echo %}\n     echo $(pwd)\n-    {%- endif %}\n+{%- endif %}\n }\n \n-{{ SECTION }}\n+{{ section }}\n # Convenient aliases for zoxide. Disable these using --no-aliases.\n #\n \ndiff --git a/templates/nushell.txt b/templates/nushell.txt\n--- a/templates/nushell.txt\n+++ b/templates/nushell.txt\n@@ -73,11 +73,12 @@ alias {{cmd}} = __zoxide_z ''\n alias {{cmd}}i = __zoxide_zi ''\n \n {%- when None %}\n-{{ NOT_CONFIGURED }}\n+\n+{{ not_configured }}\n \n {%- endmatch %}\n \n-{{ SECTION }}\n+{{ section }}\n # To initialize zoxide with Nushell:\n #\n # Initialize zoxide's Nushell script:\ndiff --git a/templates/posix.txt b/templates/posix.txt\n--- a/templates/posix.txt\n+++ b/templates/posix.txt\n@@ -1,7 +1,7 @@\n-{%- let SECTION = \"# =============================================================================\\n#\" -%}\n-{%- let NOT_CONFIGURED = \"# -- not configured --\" -%}\n+{%- let section = \"# =============================================================================\\n#\" -%}\n+{%- let not_configured = \"# -- not configured --\" -%}\n \n-{{ SECTION }}\n+{{ section }}\n # Utility functions for zoxide.\n #\n \ndiff --git a/templates/posix.txt b/templates/posix.txt\n--- a/templates/posix.txt\n+++ b/templates/posix.txt\n@@ -20,14 +20,14 @@ __zoxide_cd() {\n     \\cd \"$@\" {%- if echo %} && __zoxide_pwd {%- endif %}\n }\n \n-{{ SECTION }}\n+{{ section }}\n # Hook configuration for zoxide.\n #\n \n # Hook to add new entries to the database.\n {%- match hook %}\n {%- when Hook::None %}\n-{{ NOT_CONFIGURED }}\n+{{ not_configured }}\n \n {%- when Hook::Prompt %}\n __zoxide_hook() {\ndiff --git a/templates/posix.txt b/templates/posix.txt\n--- a/templates/posix.txt\n+++ b/templates/posix.txt\n@@ -35,26 +35,26 @@ __zoxide_hook() {\n }\n \n {%- when Hook::Pwd %}\n-{{ NOT_CONFIGURED }}\n+{{ not_configured }}\n \n {%- endmatch %}\n \n # Initialize hook.\n if [ \"${__zoxide_hooked}\" != '1' ]; then\n     __zoxide_hooked='1'\n-    {%- match hook %}\n-    {%- when Hook::None %}\n-    {{ NOT_CONFIGURED }}\n-    {%- when Hook::Prompt %}\n+{%- match hook %}\n+{%- when Hook::None %}\n+    {{ not_configured }}\n+{%- when Hook::Prompt %}\n     PS1=\"${PS1}\\$(__zoxide_hook)\"\n-    {%- when Hook::Pwd %}\n+{%- when Hook::Pwd %}\n     \\printf \"%s\\n%s\\n\" \\\n         \"zoxide: PWD hooks are not supported on POSIX shells.\" \\\n         \"        Use 'zoxide init posix --hook prompt' instead.\"\n-    {%- endmatch %}\n+{%- endmatch %}\n fi\n \n-{{ SECTION }}\n+{{ section }}\n # When using zoxide with --no-aliases, alias these internal functions as\n # desired.\n #\ndiff --git a/templates/posix.txt b/templates/posix.txt\n--- a/templates/posix.txt\n+++ b/templates/posix.txt\n@@ -83,7 +83,7 @@ __zoxide_zi() {\n     __zoxide_result=\"$(zoxide query -i -- \"$@\")\" && __zoxide_cd \"${__zoxide_result}\"\n }\n \n-{{ SECTION }}\n+{{ section }}\n # Convenient aliases for zoxide. Disable these using --no-aliases.\n #\n \ndiff --git a/templates/posix.txt b/templates/posix.txt\n--- a/templates/posix.txt\n+++ b/templates/posix.txt\n@@ -109,11 +109,12 @@ __zoxide_unset '{{cmd}}i'\n }\n \n {%- when None %}\n-{{ NOT_CONFIGURED }}\n+\n+{{ not_configured }}\n \n {%- endmatch %}\n \n-{{ SECTION }}\n+{{ section }}\n # To initialize zoxide with your POSIX shell, add the following line to your\n # shell configuration file:\n #\ndiff --git a/templates/powershell.txt b/templates/powershell.txt\n--- a/templates/powershell.txt\n+++ b/templates/powershell.txt\n@@ -1,7 +1,7 @@\n-{%- let SECTION = \"# =============================================================================\\n#\" -%}\n-{%- let NOT_CONFIGURED = \"# -- not configured --\" -%}\n+{%- let section = \"# =============================================================================\\n#\" -%}\n+{%- let not_configured = \"# -- not configured --\" -%}\n \n-{{ SECTION }}\n+{{ section }}\n # Utility functions for zoxide.\n #\n \ndiff --git a/templates/powershell.txt b/templates/powershell.txt\n--- a/templates/powershell.txt\n+++ b/templates/powershell.txt\n@@ -13,12 +13,12 @@ function __zoxide_pwd {\n # cd + custom logic based on the value of _ZO_ECHO.\n function __zoxide_cd($dir) {\n     Set-Location $dir -ea Stop\n-    {%- if echo %}\n+{%- if echo %}\n     __zoxide_pwd\n-    {%- endif %}\n+{%- endif %}\n }\n \n-{{ SECTION }}\n+{{ section }}\n # Hook configuration for zoxide.\n #\n \ndiff --git a/templates/powershell.txt b/templates/powershell.txt\n--- a/templates/powershell.txt\n+++ b/templates/powershell.txt\n@@ -30,16 +30,16 @@ function __zoxide_hook {\n # Initialize hook.\n if ($__zoxide_hooked -ne '1') {\n     $__zoxide_hooked = '1'\n-    {%- match hook %}\n-    {%- when Hook::None %}\n-    {{ NOT_CONFIGURED }}\n-    {%- when Hook::Prompt %}\n+{%- match hook %}\n+{%- when Hook::None %}\n+    {{ not_configured }}\n+{%- when Hook::Prompt %}\n     $__zoxide_prompt_old = $function:prompt\n     function prompt {\n         $null = __zoxide_hook\n         & $__zoxide_prompt_old\n     }\n-    {%- when Hook::Pwd %}\n+{%- when Hook::Pwd %}\n     if ($PSVersionTable.PSVersion.Major -ge 6) {\n         $ExecutionContext.InvokeCommand.LocationChangedAction = {\n             $null = __zoxide_hook\ndiff --git a/templates/powershell.txt b/templates/powershell.txt\n--- a/templates/powershell.txt\n+++ b/templates/powershell.txt\n@@ -49,10 +49,10 @@ if ($__zoxide_hooked -ne '1') {\n             \"zoxide: PWD hooks are not supported below powershell 6.`n\" +\n             \"        Use 'zoxide init powershell --hook prompt' instead.\")\n     }\n-    {%- endmatch %}\n+{%- endmatch %}\n }\n \n-{{ SECTION }}\n+{{ section }}\n # When using zoxide with --no-aliases, alias these internal functions as\n # desired.\n #\ndiff --git a/templates/powershell.txt b/templates/powershell.txt\n--- a/templates/powershell.txt\n+++ b/templates/powershell.txt\n@@ -84,7 +84,7 @@ function __zoxide_zi {\n     }\n }\n \n-{{ SECTION }}\n+{{ section }}\n # Convenient aliases for zoxide. Disable these using --no-aliases.\n #\n \ndiff --git a/templates/powershell.txt b/templates/powershell.txt\n--- a/templates/powershell.txt\n+++ b/templates/powershell.txt\n@@ -95,11 +95,12 @@ Set-Alias {{cmd}} __zoxide_z\n Set-Alias {{cmd}}i __zoxide_zi\n \n {%- when None %}\n-{{ NOT_CONFIGURED }}\n+\n+{{ not_configured }}\n \n {%- endmatch %}\n \n-{{ SECTION }}\n+{{ section }}\n # To initialize zoxide with powershell, add the following line to your\n # powershell configuration file (the location is stored in $profile):\n #\ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -1,5 +1,5 @@\n-{%- let SECTION = \"# =============================================================================\\n#\" -%}\n-{%- let NOT_CONFIGURED = \"# -- not configured --\" -%}\n+{%- let section = \"# =============================================================================\\n#\" -%}\n+{%- let not_configured = \"# -- not configured --\" -%}\n \n \"\"\"Initialize zoxide on Xonsh.\"\"\"\n \ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -19,7 +19,7 @@ from typing import AnyStr, List, Optional\n import xonsh.dirstack  # type: ignore # pylint: disable=import-error\n import xonsh.environ  # type: ignore # pylint: disable=import-error\n \n-{{ SECTION }}\n+{{ section }}\n # Utility functions for zoxide.\n #\n \ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -80,22 +80,21 @@ def __zoxide_errhandler(func):\n     return wrapper\n \n \n-{{ SECTION }}\n+{{ section }}\n # Hook configuration for zoxide.\n #\n \n # Initialize hook to add new entries to the database.\n if globals().get(\"__zoxide_hooked\") is not True:\n     globals()[\"__zoxide_hooked\"] = True\n-\n-    {% match hook -%}\n-    {%- when Hook::None -%}\n-    {{ NOT_CONFIGURED }}\n-    {%- when Hook::Prompt -%}\n+{% match hook -%}\n+{%- when Hook::None %}\n+    {{ not_configured }}\n+{%- when Hook::Prompt %}\n     @events.on_post_prompt  # type: ignore  # pylint:disable=undefined-variable\n-    {%- when Hook::Pwd -%}\n+{%- when Hook::Pwd %}\n     @events.on_chdir  # type: ignore  # pylint:disable=undefined-variable\n-    {%- endmatch %}\n+{%- endmatch %}\n     def __zoxide_hook(**_kwargs):\n         \"\"\"Hook to add new entries to the database.\"\"\"\n         pwd = __zoxide_pwd()\ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -103,7 +102,7 @@ if globals().get(\"__zoxide_hooked\") is not True:\n         subprocess.run([zoxide, \"add\", \"--\", pwd], check=False)\n \n \n-{{ SECTION }}\n+{{ section }}\n # When using zoxide with --no-aliases, alias these internal functions as\n # desired.\n #\ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -147,7 +146,7 @@ def __zoxide_zi(args: List[str]):\n     __zoxide_cd(__zoxide_result)\n \n \n-{{ SECTION }}\n+{{ section }}\n # Convenient aliases for zoxide. Disable these using --no-aliases.\n #\n \ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -158,11 +157,12 @@ aliases[\"{{cmd}}\"] = __zoxide_z\n aliases[\"{{cmd}}i\"] = __zoxide_zi\n \n {%- when None %}\n-{{ NOT_CONFIGURED }}\n+\n+{{ not_configured }}\n \n {%- endmatch %}\n \n-{{ SECTION }}\n+{{ section }}\n # To initialize zoxide with xonsh, add the following line to your xonsh\n # configuration file (usually ~/.xonshrc):\n #\ndiff --git a/templates/zsh.txt b/templates/zsh.txt\n--- a/templates/zsh.txt\n+++ b/templates/zsh.txt\n@@ -1,7 +1,7 @@\n-{%- let SECTION = \"# =============================================================================\\n#\" -%}\n-{%- let NOT_CONFIGURED = \"# -- not configured --\" -%}\n+{%- let section = \"# =============================================================================\\n#\" -%}\n+{%- let not_configured = \"# -- not configured --\" -%}\n \n-{{ SECTION }}\n+{{ section }}\n # Utility functions for zoxide.\n #\n \ndiff --git a/templates/zsh.txt b/templates/zsh.txt\n--- a/templates/zsh.txt\n+++ b/templates/zsh.txt\n@@ -20,7 +20,7 @@ function __zoxide_cd() {\n     \\builtin cd \"$@\" {%- if echo %} && __zoxide_pwd {%- endif %}\n }\n \n-{{ SECTION }}\n+{{ section }}\n # Hook configuration for zoxide.\n #\n \ndiff --git a/templates/zsh.txt b/templates/zsh.txt\n--- a/templates/zsh.txt\n+++ b/templates/zsh.txt\n@@ -32,17 +32,17 @@ function __zoxide_hook() {\n # Initialize hook.\n if [ \"${__zoxide_hooked}\" != '1' ]; then\n     __zoxide_hooked='1'\n-    {%- match hook %}\n-    {%- when Hook::None %}\n-    {{ NOT_CONFIGURED }}\n-    {%- when Hook::Prompt %}\n+{%- match hook %}\n+{%- when Hook::None %}\n+    {{ not_configured }}\n+{%- when Hook::Prompt %}\n     precmd_functions+=(__zoxide_hook)\n-    {%- when Hook::Pwd %}\n+{%- when Hook::Pwd %}\n     chpwd_functions=(\"${chpwd_functions[@]}\" \"__zoxide_hook\")\n-    {%- endmatch %}\n+{%- endmatch %}\n fi\n \n-{{ SECTION }}\n+{{ section }}\n # When using zoxide with --no-aliases, alias these internal functions as\n # desired.\n #\ndiff --git a/templates/zsh.txt b/templates/zsh.txt\n--- a/templates/zsh.txt\n+++ b/templates/zsh.txt\n@@ -74,7 +74,7 @@ function __zoxide_zi() {\n     __zoxide_result=\"$(zoxide query -i -- \"$@\")\" && __zoxide_cd \"${__zoxide_result}\"\n }\n \n-{{ SECTION }}\n+{{ section }}\n # Convenient aliases for zoxide. Disable these using --no-aliases.\n #\n \ndiff --git a/templates/zsh.txt b/templates/zsh.txt\n--- a/templates/zsh.txt\n+++ b/templates/zsh.txt\n@@ -99,11 +99,12 @@ function {{cmd}}i() {\n }\n \n {%- when None %}\n-{{ NOT_CONFIGURED }}\n+\n+{{ not_configured }}\n \n {%- endmatch %}\n \n-{{ SECTION }}\n+{{ section }}\n # To initialize zoxide with zsh, add the following line to your zsh\n # configuration file (usually ~/.zshrc):\n #\n",
        "test_patch": "diff --git a/src/shell.rs b/src/shell.rs\n--- a/src/shell.rs\n+++ b/src/shell.rs\n@@ -123,8 +124,7 @@ mod tests {\n                     let opts = dbg!(&opts()[i]);\n                     let mut source = Bash(opts).render().unwrap();\n                     source.push('\\n');\n-                    // FIXME: caused by <https://github.com/djc/askama/issues/377>\n-                    let source = source.as_str().trim_start();\n+\n                     Command::new(\"shfmt\")\n                         .args(&[\"-d\", \"-s\", \"-ln\", \"bash\", \"-i\", \"4\", \"-ci\", \"-\"])\n                         .write_stdin(source)\ndiff --git a/src/shell.rs b/src/shell.rs\n--- a/src/shell.rs\n+++ b/src/shell.rs\n@@ -134,6 +134,31 @@ mod tests {\n                         .stderr(\"\");\n                 }\n \n+                #[test]\n+                fn elvish_elvish_#i() {\n+                    let opts = dbg!(&opts()[i]);\n+                    let mut source = String::new();\n+\n+                    // Filter out lines using edit:*, since those functions\n+                    // are only available in the interactive editor.\n+                    for line in Elvish(opts)\n+                        .render()\n+                        .unwrap()\n+                        .split('\\n')\n+                        .filter(|line| !line.contains(\"edit:\"))\n+                    {\n+                        source.push_str(line);\n+                        source.push('\\n');\n+                    }\n+\n+                    Command::new(\"elvish\")\n+                        .args(&[\"-c\", &source, \"-norc\"])\n+                        .assert()\n+                        .success()\n+                        .stdout(\"\")\n+                        .stderr(\"\");\n+                }\n+\n                 #[test]\n                 fn fish_fish_#i() {\n                     let opts = dbg!(&opts()[i]);\ndiff --git a/src/shell.rs b/src/shell.rs\n--- a/src/shell.rs\n+++ b/src/shell.rs\n@@ -238,8 +263,7 @@ mod tests {\n                     let opts = dbg!(&opts()[i]);\n                     let mut source = Posix(opts).render().unwrap();\n                     source.push('\\n');\n-                    // FIXME: caused by <https://github.com/djc/askama/issues/377>\n-                    let source = source.as_str().trim_start();\n+\n                     Command::new(\"shfmt\")\n                         .args(&[\"-d\", \"-s\", \"-ln\", \"posix\", \"-i\", \"4\", \"-ci\", \"-\"])\n                         .write_stdin(source)\ndiff --git a/templates/fish.txt b/templates/fish.txt\n--- a/templates/fish.txt\n+++ b/templates/fish.txt\n@@ -19,32 +17,32 @@ end\n # cd + custom logic based on the value of _ZO_ECHO.\n function __zoxide_cd\n     builtin cd $argv\n-    {%- if echo %}\n+{%- if echo %}\n     and __zoxide_pwd\n-    {%- endif %}\n+{%- endif %}\n     and builtin commandline -f repaint\n end\n \n-{{ SECTION }}\n+{{ section }}\n # Hook configuration for zoxide.\n #\n \n # Initialize hook to add new entries to the database.\n if test \"$__zoxide_hooked\" != 1\n     set __zoxide_hooked 1\n-    {%- match hook %}\n-    {%- when Hook::None %}\n+{%- match hook %}\n+{%- when Hook::None %}\n     function __zoxide_hook\n-    {%- when Hook::Prompt %}\n+{%- when Hook::Prompt %}\n     function __zoxide_hook --on-event fish_prompt\n-    {%- when Hook::Pwd %}\n+{%- when Hook::Pwd %}\n     function __zoxide_hook --on-variable PWD\n-    {%- endmatch %}\n+{%- endmatch %}\n         command zoxide add -- (__zoxide_pwd)\n     end\n end\n \n-{{ SECTION }}\n+{{ section }}\n # When using zoxide with --no-aliases, alias these internal functions as\n # desired.\n #\n",
        "problem_statement": "Request: Support for Elvish\nI'd love to be able to use Elvish from https://elv.sh/\n",
        "hints_text": "me too! thanks.\nHi, I've created the following script for the elvish:\r\n```\r\nafter-chdir = [[dir]{ zoxide add (pwd -L) }]\r\n\r\nfn _z_cd [directory]{\r\n  cd $directory\r\n}\r\n\r\nfn zi [@a]{\r\n  _z_cd (zoxide query -i -- $@a)\r\n}\r\n\r\nfn za [@a]{ zoxide add $@a }\r\nfn zq [@a]{ zoxide query $@a }\r\nfn zqi [@a]{ zoxide query -i $@a }\r\n\r\nfn zr [@a]{ zoxide remove $@a }\r\n\r\nfn zri [@a]{\r\n  zoxide remove (zoxide query -i -- $@a)\r\n}\r\n\r\nfn z [@a]{\r\n  if (is [] $@a) {\r\n    _z_cd ~\r\n  } else {\r\n    # ok `z -` is not supported\r\n    _z_cd (zoxide query -- $@a)\r\n  }\r\n}\r\n```\r\nIt's a bit raw, but it works. The only thing is missing `z -` because elvish doesn't have support for that (I hope yet).\r\nIf I have time and energy I'll submit a proper pull request with a template. \n@PanAeon thanks, it's working fine for me!",
        "created_at": "2021-04-05T16:28:51Z",
        "version": "0.5"
    },
    {
        "repo": "ajeetdsouza/zoxide",
        "pull_number": 362,
        "instance_id": "ajeetdsouza__zoxide-362",
        "issue_numbers": [
            "345"
        ],
        "base_commit": "24d21ec8ab1f091a2dd684a11e8807b7ff1428f3",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -13,19 +13,18 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Manpages: moved to `man/man1/*.1`.\n - Replace `--no-aliases` with `--no-cmd`.\n+- Elvish: upgrade minimum supported version to v0.18.0.\n+- Nushell: upgrade minimum supported version to v0.61.0.\n \n ### Fixed\n \n - Bash/Zsh: rename `_z` completion function to avoid conflicts with other shell\n   plugins.\n-- Elvish: upgrade to new lambda syntax.\n - Fzf: added `--keep-right` option by default, upgrade minimum supported version\n   to v0.21.0.\n - Bash: only enable completions on 4.4+.\n - Fzf: bypass `ls` alias in preview window.\n - Retain ownership of database file.\n-- Elvish: upgrade to new try-catch syntax, upgrade minimum supported version to\n-  v0.18.0.\n - `zoxide query --interactive` should not conflict with `--score`.\n \n ## [0.8.0] - 2021-12-25\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -13,9 +13,9 @@ dependencies = [\n \n [[package]]\n name = \"anyhow\"\n-version = \"1.0.56\"\n+version = \"1.0.57\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4361135be9122e0870de935d7c439aef945b9f9ddd4199a553b5270b49c82a27\"\n+checksum = \"08f9b8508dccb7687a1d6c4ce66b2b0ecef467c94667de27d8d7fe1f8d2a9cdc\"\n \n [[package]]\n name = \"askama\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -131,16 +131,16 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"clap\"\n-version = \"3.1.8\"\n+version = \"3.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"71c47df61d9e16dc010b55dba1952a57d8c215dbb533fd13cdd13369aac73b1c\"\n+checksum = \"3124f3f75ce09e22d1410043e1e24f2ecc44fad3afe4f08408f1f7663d68da2b\"\n dependencies = [\n  \"atty\",\n  \"bitflags\",\n  \"clap_derive\",\n+ \"clap_lex\",\n  \"indexmap\",\n  \"lazy_static\",\n- \"os_str_bytes\",\n  \"strsim\",\n  \"termcolor\",\n  \"textwrap\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -148,18 +148,18 @@ dependencies = [\n \n [[package]]\n name = \"clap_complete\"\n-version = \"3.1.1\"\n+version = \"3.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"df6f3613c0a3cddfd78b41b10203eb322cb29b600cbdf808a7d3db95691b8e25\"\n+checksum = \"1506b87ee866f7a53a5131f7b31fba656170d797e873d0609884cfd56b8bbda8\"\n dependencies = [\n  \"clap\",\n ]\n \n [[package]]\n name = \"clap_complete_fig\"\n-version = \"3.1.4\"\n+version = \"3.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"690eb5abb7a98df1a64a3028beaf95af7e0ceb13da3186e6d0a86161af76309e\"\n+checksum = \"3918ed0e233c37ab6055a2dc4b2bad2e113d44f56675e0140936b9bd253e4505\"\n dependencies = [\n  \"clap\",\n  \"clap_complete\",\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -178,6 +178,15 @@ dependencies = [\n  \"syn\",\n ]\n \n+[[package]]\n+name = \"clap_lex\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"189ddd3b5d32a70b35e7686054371742a937b0d99128e76dde6340210e966669\"\n+dependencies = [\n+ \"os_str_bytes\",\n+]\n+\n [[package]]\n name = \"crossbeam-utils\"\n version = \"0.8.8\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -352,9 +361,9 @@ checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.122\"\n+version = \"0.2.124\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ec647867e2bf0772e28c8bcde4f0d19a9216916e890543b5a03ed8ef27b8f259\"\n+checksum = \"21a41fed9d98f27ab1c6d161da622a4fa35e8a54a8adc24bbf3ddd0ef70b0e50\"\n \n [[package]]\n name = \"log\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -454,9 +463,6 @@ name = \"os_str_bytes\"\n version = \"6.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"8e22443d1643a904602595ba1cd8f7d896afe56d26712531c5ff73a15b2fbf64\"\n-dependencies = [\n- \"memchr\",\n-]\n \n [[package]]\n name = \"predicates\"\ndiff --git a/Cargo.lock b/Cargo.lock\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -520,9 +526,9 @@ dependencies = [\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.17\"\n+version = \"1.0.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"632d02bff7f874a36f33ea8bb416cd484b90cc66c1194b1a1110d067a7013f58\"\n+checksum = \"a1feb54ed693b93a84e14094943b84b7c4eae204c512b7ccb95ab0c66d278ad1\"\n dependencies = [\n  \"proc-macro2\",\n ]\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -13,6 +13,7 @@\n \n [![crates.io][crates.io-badge]][crates.io]\n [![Downloads][downloads-badge]][releases]\n+[![License][license-badge]][license]\n [![Built with Nix][builtwithnix-badge]][builtwithnix]\n \n zoxide is a **smarter cd command**, inspired by z and autojump.\ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -189,13 +190,20 @@ zoxide init fish | source\n <details>\n <summary>Nushell</summary>\n \n-Add this to your configuration (find it by running `config path` in Nushell):\n+Add this to your env file (find it by running `$nu.env-path` in Nushell):\n \n-```toml\n-startup = [\"zoxide init nushell --hook prompt | save ~/.zoxide.nu\", \"source ~/.zoxide.nu\"]\n+```sh\n+zoxide init nushell --hook prompt | save ~/.zoxide.nu\n+```\n+\n+Now, add this to the end of your config file (find it by running\n+`$nu.config-path` in Nushell):\n+\n+```sh\n+source ~/.zoxide.nu\n ```\n \n-Note: zoxide only supports Nushell v0.37.0 and above.\n+Note: zoxide only supports Nushell v0.61.0 and above.\n \n </details>\n \ndiff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -389,6 +397,8 @@ They must be set before `zoxide init` is called.\n [guru overlay]: https://github.com/gentoo-mirror/guru\n [homebrew]: https://formulae.brew.sh/formula/zoxide\n [issues]: https://github.com/ajeetdsouza/zoxide/issues/new\n+[license-badge]: https://img.shields.io/github/license/ajeetdsouza/zoxide?color=lightgray&style=flat-square\n+[license]: https://github.com/ajeetdsouza/zoxide/blob/main/LICENSE\n [linuxbrew]: https://formulae.brew.sh/formula-linux/zoxide\n [macports]: https://ports.macports.org/port/zoxide/summary\n [neovim]: https://github.com/neovim/neovim\ndiff --git a/contrib/completions/zoxide.ts b/contrib/completions/zoxide.ts\n--- a/contrib/completions/zoxide.ts\n+++ b/contrib/completions/zoxide.ts\n@@ -142,10 +142,6 @@ const completion: Fig.Spec = {\n         {\n           name: [\"-s\", \"--score\"],\n           description: \"Print score with results\",\n-          exclusiveOn: [\n-            \"-i\",\n-            \"--interactive\",\n-          ],\n         },\n         {\n           name: [\"-h\", \"--help\"],\ndiff --git a/man/man1/zoxide-init.1 b/man/man1/zoxide-init.1\n--- a/man/man1/zoxide-init.1\n+++ b/man/man1/zoxide-init.1\n@@ -30,14 +30,20 @@ Add this to your configuration (usually \\fB~/.config/fish/config.fish\\fR):\n .fi\n .TP\n .B nushell\n-Add this to your configuration (find it by running \\fBconfig path\\fR in\n-Nushell):\n+Add this to your env file (find it by running \\fB$nu.env-path\\fR in Nushell):\n .sp\n .nf\n-    \\fBstartup = [\"zoxide init nushell --hook prompt | save ~/.zoxide.nu\", \"source ~/.zoxide.nu\"]\\fR\n+    \\fBzoxide init nushell --hook prompt | save ~/.zoxide.nu\\fR\n .fi\n .sp\n-Note: zoxide only supports Nushell v0.37.0 and above.\n+Now, add this to the end of your config file (find it by running\n+\\fB$nu.config-path\\fR in Nushell):\n+.sp\n+.nf\n+    \\fBsource ~/.zoxide.nu\\fR\n+.fi\n+.sp\n+Note: zoxide only supports Nushell v0.61.0 and above.\n .TP\n .B powershell\n Add this to your configuration (find it by running \\fBecho $profile\\fR in\ndiff --git a/shell.nix b/shell.nix\n--- a/shell.nix\n+++ b/shell.nix\n@@ -1,8 +1,8 @@\n let\n   rust = import (builtins.fetchTarball\n-    \"https://github.com/oxalica/rust-overlay/archive/46d8d20fce510c6a25fa66f36e31f207f6ea49e4.tar.gz\");\n+    \"https://github.com/oxalica/rust-overlay/archive/6ca3338755233ddcb9bd4c80ecb17f453cfd0730.tar.gz\");\n   pkgs = import (builtins.fetchTarball\n-    \"https://github.com/NixOS/nixpkgs/archive/d19a9162c848517cfc9437f10945b736d718b948.tar.gz\") {\n+    \"https://github.com/NixOS/nixpkgs/archive/5d7c1f912f864e56de88c6f81a93173d12878f1e.tar.gz\") {\n       overlays = [ rust ];\n     };\n in pkgs.mkShell {\ndiff --git a/templates/bash.txt b/templates/bash.txt\n--- a/templates/bash.txt\n+++ b/templates/bash.txt\n@@ -58,8 +58,7 @@ fi\n {% endif -%}\n \n {{ section }}\n-# When using zoxide with --no-cmd, alias these internal functions as\n-# desired.\n+# When using zoxide with --no-cmd, alias these internal functions as desired.\n #\n \n __zoxide_z_prefix='z#'\ndiff --git a/templates/elvish.txt b/templates/elvish.txt\n--- a/templates/elvish.txt\n+++ b/templates/elvish.txt\n@@ -41,8 +41,7 @@ if (builtin:not (builtin:eq $E:__zoxide_shlvl $E:SHLVL)) {\n {%- endif %}\n \n {{ section }}\n-# When using zoxide with --no-cmd, alias these internal functions as\n-# desired.\n+# When using zoxide with --no-cmd, alias these internal functions as desired.\n #\n \n # Jump to a directory using only keywords.\ndiff --git a/templates/fish.txt b/templates/fish.txt\n--- a/templates/fish.txt\n+++ b/templates/fish.txt\n@@ -53,8 +53,7 @@ end\n {%- endif %}\n \n {{ section }}\n-# When using zoxide with --no-cmd, alias these internal functions as\n-# desired.\n+# When using zoxide with --no-cmd, alias these internal functions as desired.\n #\n \n # Jump to a directory using only keywords.\ndiff --git a/templates/nushell.txt b/templates/nushell.txt\n--- a/templates/nushell.txt\n+++ b/templates/nushell.txt\n@@ -3,86 +3,64 @@\n \n # Code generated by zoxide. DO NOT EDIT.\n \n-{{ section }}\n-# Utility functions for zoxide.\n-#\n-\n-# Default prompt for Nushell.\n-def __zoxide_prompt [] {\n-    let git = $'(do -i {git rev-parse --abbrev-ref HEAD} | str trim -rc (char newline))'\n-    let git = (if ($git | str length) == 0 { '' } {\n-        build-string (char lparen) (ansi cb) $git (ansi reset) (char rparen)\n-    })\n-    build-string (ansi gb) (pwd) (ansi reset) $git '> '\n-}\n-\n {{ section }}\n # Hook configuration for zoxide.\n #\n-\n-# Hook to add new entries to the database.\n-{%- match hook %}\n+{% match hook %}\n {%- when InitHook::None %}\n {{ not_configured }}\n \n {%- when InitHook::Prompt %}\n+# Default prompt for Nushell.\n+let-env __zoxide_oldprompt = (if '__zoxide_oldprompt' in (env).name {\n+  $env.__zoxide_oldprompt\n+} else if 'PROMPT_COMMAND' in (env).name {\n+  $env.PROMPT_COMMAND\n+} else {\n+  { $env.PWD }\n+})\n+\n+# Hook to add new entries to the database.\n def __zoxide_hook [] {\n-    shells | where active == $true && name == filesystem | get path | each {\n-        zoxide add -- $it\n-    }\n+  zoxide add -- $env.PWD\n }\n \n # Initialize hook.\n-let-env PROMPT_COMMAND = (\n-    let prompt = (if ($nu.env | select PROMPT_COMMAND | empty?) {\n-        if ($nu.config | select prompt | empty?) { '__zoxide_prompt' } { $nu.config.prompt }\n-    } { $nu.env.PROMPT_COMMAND });\n-    if ($prompt | str contains '__zoxide_hook') { $prompt } { $'__zoxide_hook;($prompt)' }\n-)\n+let-env PROMPT_COMMAND = {\n+  __zoxide_hook\n+  do $env.__zoxide_oldprompt\n+}\n \n {%- when InitHook::Pwd %}\n-$'zoxide: PWD hooks are not supported on Nushell.(char nl)Use (char sq)zoxide init nushell --hook prompt(char sq) instead.(char nl)'\n+echo \"zoxide: PWD hooks are not supported on Nushell.\\nUse `zoxide init nushell --hook prompt` instead.\"\n+\n {%- endmatch %}\n \n {{ section }}\n-# When using zoxide with --no-cmd, alias these internal functions as\n-# desired.\n+# When using zoxide with --no-cmd, alias these internal functions as desired.\n #\n \n # Jump to a directory using only keywords.\n-def __zoxide_z [...rest:string] {\n-    if (shells | where active == $true | get name) != filesystem {\n-        if ($rest | length) > 1 {\n-            $'zoxide: can only jump directories on filesystem(char nl)'\n-        } {\n-            cd $rest\n+def-env __zoxide_z [...rest:string] {\n+  # `z -` does not work yet, see https://github.com/nushell/nushell/issues/4769\n+  let arg0 = ($rest | append '~').0\n+  let path = if ($rest | length) <= 1 && ($arg0 | path expand | path type) == dir {\n+    $arg0\n+  } else {\n+    (zoxide query --exclude $env.PWD -- $rest | str trim -r -c \"\\n\")\n+  }\n+  cd $path\n {%- if echo %}\n-            pwd\n+  echo $env.PWD\n {%- endif %}\n-        }\n-    } {\n-        let arg0 = ($rest | append '~' | first 1);\n-        if ($rest | length) <= 1 && ($arg0 == '-' || ($arg0 | path expand | path exists)) {\n-            cd $arg0\n-        } {\n-            cd $'(zoxide query --exclude (pwd) -- $rest | str trim -rc (char newline))'\n-        }\n-{%- if echo %}\n-        pwd\n-{%- endif %}\n-    }\n }\n \n # Jump to a directory using interactive search.\n-def __zoxide_zi  [...rest:string] {\n-    if (shells | where active == $true | get name) != filesystem {\n-        $'zoxide: can only jump directories on filesystem(char nl)'\n-    } {\n-        cd $'(zoxide query -i -- $rest | str trim -rc (char newline))'\n+def-env __zoxide_zi  [...rest:string] {\n+  cd $'(zoxide query -i -- $rest | str trim -r -c \"\\n\")'\n {%- if echo %}\n-        pwd\n+  echo $env.PWD\n {%- endif %}\n-    }\n }\n \n {{ section }}\ndiff --git a/templates/nushell.txt b/templates/nushell.txt\n--- a/templates/nushell.txt\n+++ b/templates/nushell.txt\n@@ -102,9 +80,13 @@ alias {{cmd}}i = __zoxide_zi\n {%- endmatch %}\n \n {{ section }}\n-# To initialize zoxide, add this to your configuration (find it by running\n-# `config path` in Nushell):\n+# Add this to your env file (find it by running `$nu.env-path` in Nushell):\n+#\n+#   zoxide init nushell --hook prompt | save ~/.zoxide.nu\n+#\n+# Now, add this to the end of your config file (find it by running\n+# `$nu.config-path` in Nushell):\n #\n-#   startup = ['zoxide init nushell --hook prompt | save ~/.zoxide.nu', 'source ~/.zoxide.nu']\n+#   source ~/.zoxide.nu\n #\n-# Note: zoxide only supports Nushell v0.37.0 and above.\n+# Note: zoxide only supports Nushell v0.61.0 and above.\ndiff --git a/templates/posix.txt b/templates/posix.txt\n--- a/templates/posix.txt\n+++ b/templates/posix.txt\n@@ -47,8 +47,7 @@ fi\n {%- endmatch %}\n \n {{ section }}\n-# When using zoxide with --no-cmd, alias these internal functions as\n-# desired.\n+# When using zoxide with --no-cmd, alias these internal functions as desired.\n #\n \n # Jump to a directory using only keywords.\ndiff --git a/templates/powershell.txt b/templates/powershell.txt\n--- a/templates/powershell.txt\n+++ b/templates/powershell.txt\n@@ -67,8 +67,7 @@ if ($__zoxide_hooked -ne 1) {\n }\n \n {{ section }}\n-# When using zoxide with --no-cmd, alias these internal functions as\n-# desired.\n+# When using zoxide with --no-cmd, alias these internal functions as desired.\n #\n \n # Jump to a directory using only keywords.\ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -108,8 +108,7 @@ if \"__zoxide_hook\" not in globals():\n {% endif %}\n \n {{ section }}\n-# When using zoxide with --no-cmd, alias these internal functions as\n-# desired.\n+# When using zoxide with --no-cmd, alias these internal functions as desired.\n #\n \n \ndiff --git a/templates/zsh.txt b/templates/zsh.txt\n--- a/templates/zsh.txt\n+++ b/templates/zsh.txt\n@@ -46,8 +46,7 @@ fi\n {%- endif %}\n \n {{ section }}\n-# When using zoxide with --no-cmd, alias these internal functions as\n-# desired.\n+# When using zoxide with --no-cmd, alias these internal functions as desired.\n #\n \n __zoxide_z_prefix='z#'\ndiff --git a/xtask/src/main.rs b/xtask/src/main.rs\n--- a/xtask/src/main.rs\n+++ b/xtask/src/main.rs\n@@ -136,6 +136,7 @@ fn enable_nix() -> bool {\n     }\n     let nix_enabled = env::var_os(\"IN_NIX_SHELL\").unwrap_or_default() == \"pure\";\n     if nix_enabled {\n+        env::set_var(\"CARGO_TARGET_DIR\", \"target_nix\");\n         return true;\n     }\n     let nix_detected = Command::new(\"nix-shell\").arg(\"--version\").status().map(|s| s.success()).unwrap_or(false);\ndiff --git a/xtask/src/main.rs b/xtask/src/main.rs\n--- a/xtask/src/main.rs\n+++ b/xtask/src/main.rs\n@@ -147,10 +148,6 @@ fn enable_nix() -> bool {\n     let args = env::args();\n     let cmd = shell_words::join(args);\n \n-    let status = Command::new(\"nix-shell\")\n-        .args(&[\"--pure\", \"--run\", &cmd, \"--\", \"shell.nix\"])\n-        .env(\"CARGO_TARGET_DIR\", \"target_nix\")\n-        .status()\n-        .unwrap();\n+    let status = Command::new(\"nix-shell\").args(&[\"--pure\", \"--run\", &cmd, \"--\", \"shell.nix\"]).status().unwrap();\n     process::exit(status.code().unwrap_or(1));\n }\n",
        "test_patch": "diff --git a/src/shell.rs b/src/shell.rs\n--- a/src/shell.rs\n+++ b/src/shell.rs\n@@ -149,7 +149,7 @@ mod tests {\n         let source = Nushell(&opts).render().unwrap();\n \n         let tempdir = tempfile::tempdir().unwrap();\n-        let tempdir = tempdir.path().to_str().unwrap();\n+        let tempdir = tempdir.path();\n \n         let assert =\n             Command::new(\"nu\").env(\"HOME\", tempdir).args(&[\"--commands\", &source]).assert().success().stderr(\"\");\n",
        "problem_statement": "Update Nushell script to support engine-q\nNushell is upgrading to a new engine with numerous backward-incompatible changes, which breaks zoxide's initialization script. The script would have to be updated accordingly.\r\n\r\nCC @fdncred\n",
        "hints_text": "indeed. we've tried to list most of the [breaking changes here](nushell/nushell#4305) but I'm guessing we've missed a few. let us know if you see things missing that we need. we're close to merging all these changes into the main nushell repo - maybe within a week.\nwe might find some inspiration from Kubouch's update of the virtualenv scripts he's been working on.\r\nhttps://github.com/kubouch/virtualenv/tree/engine-q-update/src/virtualenv/activation/nushell\nwe also made a working prototype here - https://github.com/nushell/nu_scripts/blob/main/engine-q/prompt/zoxide-eq.nu",
        "created_at": "2022-03-07T22:37:52Z",
        "version": "0.8"
    },
    {
        "repo": "ajeetdsouza/zoxide",
        "pull_number": 85,
        "instance_id": "ajeetdsouza__zoxide-85",
        "issue_numbers": [
            "80"
        ],
        "base_commit": "c9a9e12277602ae555089bbdd9acb8d33357884c",
        "patch": "diff --git a/src/config.rs b/src/config.rs\n--- a/src/config.rs\n+++ b/src/config.rs\n@@ -52,3 +52,10 @@ pub fn zo_maxage() -> Result<Rank> {\n         None => Ok(10000.0),\n     }\n }\n+\n+pub fn zo_resolve_symlinks() -> bool {\n+    match env::var_os(\"_ZO_RESOLVE_SYMLINKS\") {\n+        Some(var) => var == \"1\",\n+        None => false,\n+    }\n+}\ndiff --git a/src/subcommand/add.rs b/src/subcommand/add.rs\n--- a/src/subcommand/add.rs\n+++ b/src/subcommand/add.rs\n@@ -2,10 +2,9 @@ use crate::config;\n use crate::db::{Db, Dir, Rank};\n use crate::util;\n \n-use anyhow::{Context, Result};\n+use anyhow::Result;\n use structopt::StructOpt;\n \n-use std::env;\n use std::path::{Path, PathBuf};\n \n /// Add a new directory or increment its rank\ndiff --git a/src/subcommand/add.rs b/src/subcommand/add.rs\n--- a/src/subcommand/add.rs\n+++ b/src/subcommand/add.rs\n@@ -21,7 +20,7 @@ impl Add {\n         let path = match &self.path {\n             Some(path) => path,\n             None => {\n-                current_dir = env::current_dir().context(\"unable to fetch current directory\")?;\n+                current_dir = util::get_current_dir()?;\n                 &current_dir\n             }\n         };\ndiff --git a/src/subcommand/add.rs b/src/subcommand/add.rs\n--- a/src/subcommand/add.rs\n+++ b/src/subcommand/add.rs\n@@ -32,7 +31,11 @@ impl Add {\n \n fn add<P: AsRef<Path>>(path: P) -> Result<()> {\n     let path = path.as_ref();\n-    let path = util::canonicalize(&path)?;\n+    let path = if config::zo_resolve_symlinks() {\n+        util::canonicalize(&path)?\n+    } else {\n+        util::resolve_path(&path)?\n+    };\n \n     if config::zo_exclude_dirs().contains(&path) {\n         return Ok(());\ndiff --git a/src/subcommand/import.rs b/src/subcommand/import.rs\n--- a/src/subcommand/import.rs\n+++ b/src/subcommand/import.rs\n@@ -1,3 +1,4 @@\n+use crate::config;\n use crate::db::{Db, Dir};\n use crate::util;\n \ndiff --git a/src/subcommand/import.rs b/src/subcommand/import.rs\n--- a/src/subcommand/import.rs\n+++ b/src/subcommand/import.rs\n@@ -39,7 +40,7 @@ fn import<P: AsRef<Path>>(path: P, merge: bool) -> Result<()> {\n         .with_context(|| format!(\"could not read z database: {}\", path.display()))?;\n \n     for (idx, line) in buffer.lines().enumerate() {\n-        if let Err(e) = import_line(&mut db, line) {\n+        if let Err(e) = import_line(&mut db, line, config::zo_resolve_symlinks()) {\n             let line_num = idx + 1;\n             eprintln!(\"Error on line {}: {}\", line_num, e);\n         }\ndiff --git a/src/subcommand/import.rs b/src/subcommand/import.rs\n--- a/src/subcommand/import.rs\n+++ b/src/subcommand/import.rs\n@@ -51,7 +52,7 @@ fn import<P: AsRef<Path>>(path: P, merge: bool) -> Result<()> {\n     Ok(())\n }\n \n-fn import_line(db: &mut Db, line: &str) -> Result<()> {\n+fn import_line(db: &mut Db, line: &str, resolve_symlinks: bool) -> Result<()> {\n     let mut split_line = line.rsplitn(3, '|');\n \n     let (path, epoch_str, rank_str) = (|| {\ndiff --git a/src/subcommand/import.rs b/src/subcommand/import.rs\n--- a/src/subcommand/import.rs\n+++ b/src/subcommand/import.rs\n@@ -70,7 +71,11 @@ fn import_line(db: &mut Db, line: &str) -> Result<()> {\n         .parse::<f64>()\n         .with_context(|| format!(\"invalid rank: {}\", rank_str))?;\n \n-    let path = util::canonicalize(&path)?;\n+    let path = if resolve_symlinks {\n+        util::canonicalize(&path)?\n+    } else {\n+        util::resolve_path(&path)?\n+    };\n     let path = util::path_to_str(&path)?;\n \n     // If the path exists in the database, add the ranks and set the epoch to\ndiff --git a/src/subcommand/init/shell/bash.rs b/src/subcommand/init/shell/bash.rs\n--- a/src/subcommand/init/shell/bash.rs\n+++ b/src/subcommand/init/shell/bash.rs\n@@ -15,7 +15,7 @@ pub const CONFIG: ShellConfig = ShellConfig {\n \n const HOOK_PROMPT: &str = r#\"\n _zoxide_hook() {\n-    zoxide add\n+    zoxide add \"$(pwd -L)\"\n }\n \n case \"$PROMPT_COMMAND\" in\ndiff --git a/src/subcommand/init/shell/bash.rs b/src/subcommand/init/shell/bash.rs\n--- a/src/subcommand/init/shell/bash.rs\n+++ b/src/subcommand/init/shell/bash.rs\n@@ -31,7 +31,7 @@ _zoxide_hook() {\n         _ZO_PWD=\"${PWD}\"\n     elif [ \"${_ZO_PWD}\" != \"${PWD}\" ]; then\n         _ZO_PWD=\"${PWD}\"\n-        zoxide add\n+        zoxide add \"$(pwd -L)\"\n     fi\n }\n \ndiff --git a/src/subcommand/init/shell/fish.rs b/src/subcommand/init/shell/fish.rs\n--- a/src/subcommand/init/shell/fish.rs\n+++ b/src/subcommand/init/shell/fish.rs\n@@ -69,14 +69,14 @@ end\n \n const HOOK_PROMPT: &str = r#\"\n function _zoxide_hook --on-event fish_prompt\n-    zoxide add\n+    zoxide add $(pwd -L)\n end\n \"#;\n \n const fn hook_pwd() -> Result<Cow<'static, str>> {\n     const HOOK_PWD: &str = r#\"\n function _zoxide_hook --on-variable PWD\n-    zoxide add\n+    zoxide add \"$(pwd -L)\"\n end\n \"#;\n \ndiff --git a/src/subcommand/init/shell/posix.rs b/src/subcommand/init/shell/posix.rs\n--- a/src/subcommand/init/shell/posix.rs\n+++ b/src/subcommand/init/shell/posix.rs\n@@ -68,7 +68,7 @@ alias {0}r='zoxide remove'\n \n const HOOK_PROMPT: &str = r#\"\n _zoxide_hook() {\n-    zoxide add\n+    zoxide add \"$(pwd -L)\"\n }\n \n case \"$PS1\" in\ndiff --git a/src/subcommand/init/shell/posix.rs b/src/subcommand/init/shell/posix.rs\n--- a/src/subcommand/init/shell/posix.rs\n+++ b/src/subcommand/init/shell/posix.rs\n@@ -117,7 +117,7 @@ _zoxide_setpwd\n _zoxide_hook() {{\n     _ZO_OLDPWD=\"$(cat \"$_ZO_PWD_PATH\")\"\n     if [ -z \"$_ZO_OLDPWD\" ] || [ \"$_ZO_OLDPWD\" != \"$PWD\" ]; then\n-        _zoxide_setpwd && zoxide add > /dev/null\n+        _zoxide_setpwd && zoxide add \"$(pwd -L)\" > /dev/null\n     fi\n }}\n \ndiff --git a/src/subcommand/init/shell/powershell.rs b/src/subcommand/init/shell/powershell.rs\n--- a/src/subcommand/init/shell/powershell.rs\n+++ b/src/subcommand/init/shell/powershell.rs\n@@ -72,7 +72,7 @@ function {0}ri {{\n const HOOK_PROMPT: &str = r#\"\n $PreZoxidePrompt = $function:prompt\n function prompt {\n-    $null = zoxide add\n+    $null = zoxide add $(Get-Location)\n     & $PreZoxidePrompt\n }\n \"#;\ndiff --git a/src/subcommand/init/shell/powershell.rs b/src/subcommand/init/shell/powershell.rs\n--- a/src/subcommand/init/shell/powershell.rs\n+++ b/src/subcommand/init/shell/powershell.rs\n@@ -81,7 +81,7 @@ const fn hook_pwd() -> Result<Cow<'static, str>> {\n     const HOOK_PWD: &str = r#\"\n if ($PSVersionTable.PSVersion.Major -ge 6) {\n     $ExecutionContext.InvokeCommand.LocationChangedAction = {\n-        $null = zoxide add\n+        $null = zoxide add $(Get-Location)\n     }\n } else {\n     Write-Error \"pwd hook requires pwsh - use 'zoxide init powershell --hook prompt'\"\ndiff --git a/src/subcommand/init/shell/zsh.rs b/src/subcommand/init/shell/zsh.rs\n--- a/src/subcommand/init/shell/zsh.rs\n+++ b/src/subcommand/init/shell/zsh.rs\n@@ -15,7 +15,7 @@ pub const CONFIG: ShellConfig = ShellConfig {\n \n const HOOK_PROMPT: &str = r#\"\n _zoxide_hook() {\n-    zoxide add\n+    zoxide add \"$(pwd -L)\"\n }\n \n [[ -n \"${precmd_functions[(r)_zoxide_hook]}\" ]] || {\ndiff --git a/src/subcommand/init/shell/zsh.rs b/src/subcommand/init/shell/zsh.rs\n--- a/src/subcommand/init/shell/zsh.rs\n+++ b/src/subcommand/init/shell/zsh.rs\n@@ -26,7 +26,7 @@ _zoxide_hook() {\n const fn hook_pwd() -> Result<Cow<'static, str>> {\n     const HOOK_PWD: &str = r#\"\n _zoxide_hook() {\n-    zoxide add\n+    zoxide add \"$(pwd -L)\"\n }\n \n chpwd_functions=(${chpwd_functions[@]} \"_zoxide_hook\")\ndiff --git a/src/subcommand/remove.rs b/src/subcommand/remove.rs\n--- a/src/subcommand/remove.rs\n+++ b/src/subcommand/remove.rs\n@@ -25,7 +25,7 @@ fn remove(path: &str) -> Result<()> {\n         return Ok(());\n     }\n \n-    let path = util::canonicalize(&path)?;\n+    let path = util::resolve_path(&path)?;\n     let path = util::path_to_str(&path)?;\n \n     if let Some(idx) = db.dirs.iter().position(|dir| dir.path == path) {\ndiff --git a/src/util.rs b/src/util.rs\n--- a/src/util.rs\n+++ b/src/util.rs\n@@ -1,9 +1,9 @@\n use crate::config;\n use crate::db::{Db, Epoch};\n \n-use anyhow::{Context, Result};\n-\n-use std::path::{Path, PathBuf};\n+use anyhow::{bail, Context, Result};\n+use std::env;\n+use std::path::{Component, Path, PathBuf};\n use std::time::SystemTime;\n \n pub fn get_db() -> Result<Db> {\ndiff --git a/src/util.rs b/src/util.rs\n--- a/src/util.rs\n+++ b/src/util.rs\n@@ -25,6 +25,135 @@ pub fn canonicalize<P: AsRef<Path>>(path: &P) -> Result<PathBuf> {\n     dunce::canonicalize(path).with_context(|| format!(\"could not resolve path: {}\", path.display()))\n }\n \n+/// Resolves the absolute version of a path.\n+///\n+/// If path is already absolute, the path is still processed to be cleaned, as it can contained \"..\" or \".\" (or other)\n+/// character.\n+/// If path is relative, use the current directory to build the absolute path.\n+#[cfg(any(unix, windows))]\n+pub fn resolve_path<P: AsRef<Path>>(path: P) -> Result<PathBuf> {\n+    let path = path.as_ref();\n+    let base_path;\n+\n+    let mut components = path.components().peekable();\n+    let mut stack = Vec::new();\n+\n+    // initialize root\n+    if cfg!(unix) {\n+        match components.peek() {\n+            Some(Component::RootDir) => {\n+                let root = components.next().unwrap();\n+                stack.push(root);\n+            }\n+            _ => {\n+                base_path = get_current_dir()?;\n+                stack.extend(base_path.components());\n+            }\n+        }\n+    } else if cfg!(windows) {\n+        use std::path::Prefix;\n+\n+        fn get_drive_letter<P: AsRef<Path>>(path: P) -> Option<u8> {\n+            let path = path.as_ref();\n+            let mut components = path.components();\n+\n+            match components.next() {\n+                Some(Component::Prefix(prefix)) => match prefix.kind() {\n+                    Prefix::Disk(drive_letter) | Prefix::VerbatimDisk(drive_letter) => {\n+                        Some(drive_letter)\n+                    }\n+                    _ => None,\n+                },\n+                _ => None,\n+            }\n+        }\n+\n+        fn get_drive_path(drive_letter: u8) -> PathBuf {\n+            format!(r\"{}:\\\", drive_letter as char).into()\n+        }\n+\n+        fn get_drive_relative(drive_letter: u8) -> Result<PathBuf> {\n+            let path = get_current_dir()?;\n+            if Some(drive_letter) == get_drive_letter(&path) {\n+                return Ok(path);\n+            }\n+\n+            if let Some(path) = env::var_os(format!(\"={}:\", drive_letter as char)) {\n+                return Ok(path.into());\n+            }\n+\n+            let path = get_drive_path(drive_letter);\n+            Ok(path)\n+        }\n+\n+        match components.peek() {\n+            Some(Component::Prefix(prefix)) => match prefix.kind() {\n+                Prefix::Disk(drive_letter) => {\n+                    let disk = components.next().unwrap();\n+                    match components.peek() {\n+                        Some(Component::RootDir) => {\n+                            let root = components.next().unwrap();\n+                            stack.push(disk);\n+                            stack.push(root);\n+                        }\n+                        _ => {\n+                            base_path = get_drive_relative(drive_letter)?;\n+                            stack.extend(base_path.components());\n+                        }\n+                    }\n+                }\n+                Prefix::VerbatimDisk(drive_letter) => {\n+                    components.next();\n+                    if components.peek() == Some(&Component::RootDir) {\n+                        components.next();\n+                    }\n+\n+                    base_path = get_drive_path(drive_letter);\n+                    stack.extend(base_path.components());\n+                }\n+                _ => bail!(\"invalid path: {}\", path.display()),\n+            },\n+            Some(Component::RootDir) => {\n+                components.next();\n+\n+                let current_dir = env::current_dir()?;\n+                let drive_letter = get_drive_letter(&current_dir).with_context(|| {\n+                    format!(\"could not get drive letter: {}\", current_dir.display())\n+                })?;\n+                base_path = get_drive_path(drive_letter);\n+                stack.extend(base_path.components());\n+            }\n+            _ => {\n+                base_path = get_current_dir()?;\n+                stack.extend(base_path.components());\n+            }\n+        }\n+    }\n+\n+    for component in components {\n+        match component {\n+            Component::Normal(_) => stack.push(component),\n+            Component::CurDir => (),\n+            Component::ParentDir => {\n+                if stack.last() != Some(&Component::RootDir) {\n+                    stack.pop();\n+                }\n+            }\n+            Component::Prefix(_) | Component::RootDir => unreachable!(),\n+        }\n+    }\n+\n+    let result = stack.iter().collect::<PathBuf>();\n+    if !result.is_dir() {\n+        bail!(\"could not resolve path: {}\", result.display());\n+    }\n+    Ok(result)\n+}\n+\n+pub fn get_current_dir() -> Result<PathBuf> {\n+    env::current_dir().context(\"could not get current path\")\n+}\n+\n pub fn path_to_str<P: AsRef<Path>>(path: &P) -> Result<&str> {\n     let path = path.as_ref();\n     path.to_str()\n",
        "test_patch": "diff --git a/README.md b/README.md\n--- a/README.md\n+++ b/README.md\n@@ -206,5 +206,6 @@ eval \"$(zoxide init zsh)\"\n   (\"`:`\" on Linux/macOS, \"`;`\" on Windows) to be excluded from the database\n - `$_ZO_FZF_OPTS`: custom flags to pass to `fzf`\n - `$_ZO_MAXAGE`: sets the maximum total age after which entries start getting deleted\n+- `$_ZO_RESOLVE_SYMLINKS`: when set to `1`, `z add` will resolve symlinks.\n \n [`dirs` documentation]: https://docs.rs/dirs/latest/dirs/fn.data_local_dir.html\n",
        "problem_statement": "Zoxide stores the symlink targets\nHi,\r\nGiving this example, with one symlink to another directory:\r\n\r\n```\r\n$ ls ~/tmp\r\n  foo -> foo-target\r\n  foo-target\r\n```\r\n\r\nIf I cd into `~/tmp/foo`, zoxide will follow the symlink and stores this target (`foo-target`) in its database. So if I do:\r\n\r\n```\r\n$ zq foo\r\n/home/anthony/tmp/foo-target\r\n```\r\n\r\nWhich is a bit non-intuitive for me. Do you see a possibility of adding an option to ignore symlinks, and consider them as normal folders?\n",
        "hints_text": "@ajeetdsouza: FYI, I'm working on this feature and will do a PR soon.\r\n\r\nI was just a bit disappointed that `std::fs` doesn't have a function that gives the absolute path of a target without resolving the symlinks, so I had to quickly workaround it.\n@aruhier I've done some work on this too. It turns out that finding normalized paths including symlinks is a non-trivial task - there was even a PR to add it into Rust at one point, but it was closed because it could not pass all the test cases due to `Path::components` not being 100% accurate.\r\n\r\nThe most obvious approach would be to manually parse and write your own path normalizer. This is easy on Linux; on Windows, not so much. See [this](https://googleprojectzero.blogspot.com/2016/02/the-definitive-guide-on-win32-to-nt.html) to know how messy it can get. On the bright side, this is slightly simplified by the fact that we don't have to handle UNC paths.\r\n\r\nHowever, there are easier ways of doing this (I think), especially since we do want to interactive with the filesystem to validate the existence of the resultant path.\r\n\r\nI came up with the following (admittedly hacky) ways of solving this:\r\n\r\n- On Windows, `env::set_current_dir()` followed by `env::current_dir()` seems to return a normalized path without resolving symlinks, and fails if the path isn't valid - perfect for our use case.\r\n\r\n- However, `env::current_dir()` uses `getcwd()` under the hood, which on POSIX, is required to resolve symlinks. The upside here is that most shells also set the `PWD` environment variable, which does not resolve symlinks. So, we can validate `PWD` as an absolute path and fallback to `env::current_dir()` if the path is invalid. This is exactly what the [`pwd`](https://github.com/wertarbyte/coreutils/blob/master/src/pwd.c) utility does.\r\n\r\n- Alternatively, we can solve this problem on POSIX systems by imitating [`realpath -ms`](https://github.com/coreutils/coreutils/blob/master/src/realpath.c), adding a validation check to see if the resultant path currently exists.\r\n\r\nDo let me know your thoughts.\n> I came up with the following (admittedly hacky) ways of solving this:\r\n> \r\n>     * On Windows, `env::set_current_dir()` followed by `env::current_dir()` seems to return a normalized path without resolving symlinks, and fails if the path isn't valid - perfect for our use case.\r\n> \r\n>     * However, `env::current_dir()` uses `getcwd()` under the hood, which on POSIX, is required to resolve symlinks. The upside here is that most shells also set the `PWD` environment variable, which does not resolve symlinks. So, we can validate `PWD` as an absolute path and fallback to `env::current_dir()` if the path is invalid. This is exactly what the [`pwd`](https://github.com/wertarbyte/coreutils/blob/master/src/pwd.c) utility does.\r\n\r\nThat's exactly what I wanted to do on my side. Here is what I wrote for the moment to get the `absolute_path` from a `base_dir`:\r\n\r\n```rust\r\npub fn absolute_path<P: AsRef<Path>>(base_dir: &P, path: &P) -> Result<PathBuf> {\r\n    let path = path.as_ref();\r\n    let mut abs_path : PathBuf;\r\n\r\n    // If path is an absolute path, base_dir is not needed.\r\n    // \"absolute\" does not mean the path is clean (can be \"/foo/../bar\"), cleaning the path is still needed.\r\n    if path.is_absolute() {\r\n        abs_path = PathBuf::from(Component::RootDir.as_os_str())\r\n    } else {\r\n        abs_path = PathBuf::from(base_dir.as_ref());\r\n    }\r\n\r\n    for c in path.components() {\r\n        match c {\r\n            Component::CurDir | Component::RootDir => {},\r\n            Component::ParentDir => {\r\n                if abs_path.parent() != None {\r\n                    abs_path.pop();\r\n                }\r\n            }\r\n            _ => {\r\n                abs_path.push(PathBuf::from(c.as_os_str()));\r\n            }\r\n        }\r\n    }\r\n\r\n    Ok(abs_path)\r\n}\r\n```\r\n\r\nI planned to send `env::current_dir()` for the `base_dir`, and clean the path for windows with https://docs.rs/dunce/1.0.1/dunce/fn.simplified.html.\r\n\r\nEdit: words.",
        "created_at": "2020-06-08T23:46:42Z",
        "version": "0.4"
    },
    {
        "repo": "ajeetdsouza/zoxide",
        "pull_number": 385,
        "instance_id": "ajeetdsouza__zoxide-385",
        "issue_numbers": [
            "341"
        ],
        "base_commit": "6b2c6a2bc39a2d565f4ecded8ced1d77d1780b25",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -15,7 +15,8 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ### Fixed\n \n-- Fish: fix paths on Cygwin.\n+- Bash/Fish/Posix/Zsh: paths on Cygwin.\n+- Fish: completions not working on certain systems.\n \n ## [0.8.1] - 2021-04-23\n \ndiff --git a/templates/bash.txt b/templates/bash.txt\n--- a/templates/bash.txt\n+++ b/templates/bash.txt\n@@ -34,7 +34,8 @@ function __zoxide_cd() {\n {%- if hook == InitHook::Prompt %}\n function __zoxide_hook() {\n     \\builtin local -r retval=\"$?\"\n-    \\command zoxide add -- \"$(__zoxide_pwd || \\builtin true)\"\n+    # shellcheck disable=SC2312\n+    \\command zoxide add -- \"$(__zoxide_pwd)\"\n     return \"${retval}\"\n }\n {%- else if hook == InitHook::Pwd %}\ndiff --git a/templates/bash.txt b/templates/bash.txt\n--- a/templates/bash.txt\n+++ b/templates/bash.txt\n@@ -80,7 +81,8 @@ function __zoxide_z() {\n         __zoxide_cd \"{{ \"${result:${#__zoxide_z_prefix}}\" }}\"\n     else\n         \\builtin local result\n-        result=\"$(\\command zoxide query --exclude \"$(__zoxide_pwd || \\builtin true)\" -- \"$@\")\" &&\n+        # shellcheck disable=SC2312\n+        result=\"$(\\command zoxide query --exclude \"$(__zoxide_pwd)\" -- \"$@\")\" &&\n             __zoxide_cd \"${result}\"\n     fi\n }\ndiff --git a/templates/bash.txt b/templates/bash.txt\n--- a/templates/bash.txt\n+++ b/templates/bash.txt\n@@ -98,19 +100,12 @@ function __zoxide_zi() {\n {%- match cmd %}\n {%- when Some with (cmd) %}\n \n-# Remove definitions.\n-function __zoxide_unset() {\n-    \\builtin unset -f \"$@\" &>/dev/null\n-    \\builtin unset -v \"$@\" &>/dev/null\n-    \\builtin unalias \"$@\" &>/dev/null || \\builtin :\n-}\n-\n-__zoxide_unset {{cmd}}\n+\\builtin unalias {{cmd}} &>/dev/null || \\builtin true\n function {{cmd}}() {\n     __zoxide_z \"$@\"\n }\n \n-__zoxide_unset {{cmd}}i\n+\\builtin unalias {{cmd}}i &>/dev/null || \\builtin true\n function {{cmd}}i() {\n     __zoxide_zi \"$@\"\n }\ndiff --git a/templates/bash.txt b/templates/bash.txt\n--- a/templates/bash.txt\n+++ b/templates/bash.txt\n@@ -136,13 +131,15 @@ if [[ ${BASH_VERSINFO[0]:-0} -eq 4 && ${BASH_VERSINFO[1]:-0} -ge 4 || ${BASH_VER\n         # If there is a space after the last word, use interactive selection.\n         elif [[ -z ${COMP_WORDS[-1]} ]]; then\n             \\builtin local result\n-            result=\"$(\\command zoxide query -i -- \"{{ \"${COMP_WORDS[@]:1:${#COMP_WORDS[@]}-2}\" }}\")\" &&\n+            # shellcheck disable=SC2312\n+            result=\"$(\\command zoxide query --exclude \"$(__zoxide_pwd)\" -i -- \"{{ \"${COMP_WORDS[@]:1:${#COMP_WORDS[@]}-2}\" }}\")\" &&\n                 COMPREPLY=(\"${__zoxide_z_prefix}${result@Q}\")\n             \\builtin printf '\\e[5n'\n         fi\n     }\n \n     \\builtin complete -F __zoxide_z_complete -o nospace -- {{cmd}}\n+    \\builtin complete -r {{cmd}}i &>/dev/null || \\builtin true\n fi\n \n {%- when None %}\ndiff --git a/templates/fish.txt b/templates/fish.txt\n--- a/templates/fish.txt\n+++ b/templates/fish.txt\n@@ -107,18 +113,18 @@ end\n {%- match cmd %}\n {%- when Some with (cmd) %}\n \n+abbr --erase {{cmd}}\n+complete -c {{cmd}} -e\n function {{cmd}}\n     __zoxide_z $argv\n end\n-abbr --erase {{cmd}}\n-complete -c {{cmd}} -e\n complete -c {{cmd}} -f -a '(__zoxide_z_complete)'\n \n+abbr --erase {{cmd}}i\n+complete -c {{cmd}}i -e\n function {{cmd}}i\n     __zoxide_zi $argv\n end\n-abbr --erase {{cmd}}i\n-complete -c {{cmd}}i -e\n \n {%- when None %}\n \ndiff --git a/templates/posix.txt b/templates/posix.txt\n--- a/templates/posix.txt\n+++ b/templates/posix.txt\n@@ -7,7 +7,9 @@\n \n # pwd based on the value of _ZO_RESOLVE_SYMLINKS.\n __zoxide_pwd() {\n-{%- if resolve_symlinks %}\n+{%- if cfg!(windows) %}\n+    \\command cygpath -w \"$(\\builtin pwd -P)\"\n+{%- else if resolve_symlinks %}\n     \\command pwd -P\n {%- else %}\n     \\command pwd -L\ndiff --git a/templates/posix.txt b/templates/posix.txt\n--- a/templates/posix.txt\n+++ b/templates/posix.txt\n@@ -82,20 +84,12 @@ __zoxide_zi() {\n {%- match cmd %}\n {%- when Some with (cmd) %}\n \n-# Remove definitions.\n-__zoxide_unset() {\n-    \\command unset -f \"$@\" >/dev/null 2>&1\n-    \\command unset -v \"$@\" >/dev/null 2>&1\n-    # shellcheck disable=SC1001\n-    \\command unalias \"$@\" >/dev/null 2>&1 || \\:\n-}\n-\n-__zoxide_unset '{{cmd}}'\n+\\command unalias {{cmd}} >/dev/null 2>&1 || \\true\n {{cmd}}() {\n     __zoxide_z \"$@\"\n }\n \n-__zoxide_unset '{{cmd}}i'\n+\\command unalias {{cmd}}i >/dev/null 2>&1 || \\true\n {{cmd}}i() {\n     __zoxide_zi \"$@\"\n }\ndiff --git a/templates/zsh.txt b/templates/zsh.txt\n--- a/templates/zsh.txt\n+++ b/templates/zsh.txt\n@@ -32,7 +32,8 @@ function __zoxide_cd() {\n {% else -%}\n # Hook to add new entries to the database.\n function __zoxide_hook() {\n-    \\command zoxide add -- \"$(__zoxide_pwd || \\builtin true)\"\n+    # shellcheck disable=SC2312\n+    \\command zoxide add -- \"$(__zoxide_pwd)\"\n }\n \n # Initialize hook.\ndiff --git a/templates/zsh.txt b/templates/zsh.txt\n--- a/templates/zsh.txt\n+++ b/templates/zsh.txt\n@@ -74,7 +75,8 @@ function __zoxide_z() {\n         __zoxide_cd \"{{ \"${result:${#__zoxide_z_prefix}}\" }}\"\n     else\n         \\builtin local result\n-        result=\"$(\\command zoxide query --exclude \"$(__zoxide_pwd || \\builtin true)\" -- \"$@\")\" &&\n+        # shellcheck disable=SC2312\n+        result=\"$(\\command zoxide query --exclude \"$(__zoxide_pwd)\" -- \"$@\")\" &&\n             __zoxide_cd \"${result}\"\n     fi\n }\ndiff --git a/templates/zsh.txt b/templates/zsh.txt\n--- a/templates/zsh.txt\n+++ b/templates/zsh.txt\n@@ -92,25 +94,17 @@ function __zoxide_zi() {\n {%- match cmd %}\n {%- when Some with (cmd) %}\n \n-# Remove definitions.\n-function __zoxide_unset() {\n-    \\builtin unalias \"$@\" &>/dev/null || \\builtin true\n-    \\builtin unfunction \"$@\" &>/dev/null || \\builtin true\n-    \\builtin unset \"$@\" &>/dev/null\n-}\n-\n-__zoxide_unset {{cmd}}\n+\\builtin unalias {{cmd}} &>/dev/null || \\builtin true\n function {{cmd}}() {\n     __zoxide_z \"$@\"\n }\n \n-__zoxide_unset {{cmd}}i\n+\\builtin unalias {{cmd}}i &>/dev/null || \\builtin true\n function {{cmd}}i() {\n     __zoxide_zi \"$@\"\n }\n \n if [[ -o zle ]]; then\n-    __zoxide_unset __zoxide_z_complete\n     function __zoxide_z_complete() {\n         # Only show completions when the cursor is at the end of the line.\n         # shellcheck disable=SC2154\ndiff --git a/templates/zsh.txt b/templates/zsh.txt\n--- a/templates/zsh.txt\n+++ b/templates/zsh.txt\n@@ -120,8 +114,8 @@ if [[ -o zle ]]; then\n             _files -/\n         elif [[ \"${words[-1]}\" == '' ]]; then\n             \\builtin local result\n-            # shellcheck disable=SC2086\n-            if result=\"$(\\command zoxide query -i -- ${words[2,-1]})\"; then\n+            # shellcheck disable=SC2086,SC2312\n+            if result=\"$(\\command zoxide query --exclude \"$(__zoxide_pwd)\" -i -- ${words[2,-1]})\"; then\n                 __zoxide_result=\"${result}\"\n             else\n                 __zoxide_result=''\ndiff --git a/templates/zsh.txt b/templates/zsh.txt\n--- a/templates/zsh.txt\n+++ b/templates/zsh.txt\n@@ -130,7 +124,6 @@ if [[ -o zle ]]; then\n         fi\n     }\n \n-    __zoxide_unset __zoxide_z_complete_helper\n     function __zoxide_z_complete_helper() {\n         \\builtin local result=\"${__zoxide_z_prefix}${__zoxide_result}\"\n         # shellcheck disable=SC2296\ndiff --git a/templates/zsh.txt b/templates/zsh.txt\n--- a/templates/zsh.txt\n+++ b/templates/zsh.txt\n@@ -142,6 +135,7 @@ if [[ -o zle ]]; then\n     \\builtin bindkey \"\\e[0n\" __zoxide_z_complete_helper\n     if [[ \"${+functions[compdef]}\" -ne 0 ]]; then\n         \\compdef -d {{cmd}}\n+        \\compdef -d {{cmd}}i\n         \\compdef __zoxide_z_complete {{cmd}}\n     fi\n fi\n",
        "test_patch": "diff --git a/templates/fish.txt b/templates/fish.txt\n--- a/templates/fish.txt\n+++ b/templates/fish.txt\n@@ -62,15 +62,21 @@ end\n # When using zoxide with --no-cmd, alias these internal functions as desired.\n #\n \n+set __zoxide_z_prefix 'z#'\n+\n # Jump to a directory using only keywords.\n function __zoxide_z\n-    set argc (count $argv)\n+    set -l argc (count $argv)\n+    set -l completion_regex '^'(string escape --style=regex $__zoxide_z_prefix)'(.*)$'\n+\n     if test $argc -eq 0\n         __zoxide_cd $HOME\n     else if test \"$argv\" = -\n         __zoxide_cd -\n     else if test $argc -eq 1 -a -d $argv[1]\n         __zoxide_cd $argv[1]\n+    else if set -l result (string match --groups-only --regex $completion_regex $argv[-1])\n+        __zoxide_cd $result\n     else\n         set -l result (command zoxide query --exclude (__zoxide_pwd) -- $argv)\n         and __zoxide_cd $result\ndiff --git a/templates/fish.txt b/templates/fish.txt\n--- a/templates/fish.txt\n+++ b/templates/fish.txt\n@@ -88,8 +94,8 @@ function __zoxide_z_complete\n     else if test (count $tokens) -eq (count $curr_tokens)\n         # If the last argument is empty, use interactive selection.\n         set -l query $tokens[2..-1]\n-        set -l result (zoxide query -i -- $query)\n-        and commandline --current-process \"$tokens[1] \"(string escape $result)\n+        set -l result (zoxide query --exclude (__zoxide_pwd) -i -- $query)\n+        and echo $__zoxide_z_prefix$result\n         commandline --function repaint\n     end\n end\n",
        "problem_statement": "Can't select in interactive completion on fish shell\nwhen type `z foo<space><tab>` fzf opens and after selected one, it doesn't show on commandline\r\n\r\nit works on zsh\n",
        "hints_text": "What version of zoxide are you using? Can you share your Fish configuration?\n> What version of zoxide are you using? Can you share your Fish configuration?\r\n\r\n0.8.0 latest on Arch, test with no config `env HOME=/tmp/foo fish`, not affected with my configs\n\r\nhttps://user-images.githubusercontent.com/12210746/150510214-20bab9f9-c558-459f-82b0-d8f02bda6413.mp4\r\n\r\n\nThe only way I can see this happening is if `zoxide query -i` returns a non-zero status code. The completion function is defined [here](https://github.com/ajeetdsouza/zoxide/blob/1ed009cc223d3e88311f3804639c0b9931978c73/templates/fish.txt#L76).\r\n\r\nCan you try pasting this function after you call `zoxide init fish | source`? After this, try running the completion again, and then check the output of `/tmp/zoxide.log`:\r\n\r\n```fish\r\nfunction __zoxide_z_complete\r\n    set -l tokens (commandline --current-process --tokenize)\r\n    set -l curr_tokens (commandline --cut-at-cursor --current-process --tokenize)\r\n\r\n    if test (count $tokens) -le 2 -a (count $curr_tokens) -eq 1\r\n        # If there are < 2 arguments, use `cd` completions.\r\n        __fish_complete_directories \"$tokens[2]\" ''\r\n    else if test (count $tokens) -eq (count $curr_tokens)\r\n        # If the last argument is empty, use interactive selection.\r\n        set -l query $tokens[2..-1]\r\n        set -l result (zoxide query -i -- $query)\r\n\r\n        echo $status > /tmp/zoxide.log\r\n        echo $result >> /tmp/zoxide.log\r\n\r\n        commandline --current-process \"$tokens[1] \"(string escape $result)\r\n        commandline --function repaint\r\n    end\r\nend\r\n```\n> The only way I can see this happening is if `zoxide query -i` returns a non-zero status code. The completion function is defined [here](https://github.com/ajeetdsouza/zoxide/blob/1ed009cc223d3e88311f3804639c0b9931978c73/templates/fish.txt#L76).\r\n> \r\n> Can you try pasting this function after you call `zoxide init fish | source`? After this, try running the completion again, and then check the output of `/tmp/zoxide.log`:\r\n> \r\n> ```fish\r\n> function __zoxide_z_complete\r\n>     set -l tokens (commandline --current-process --tokenize)\r\n>     set -l curr_tokens (commandline --cut-at-cursor --current-process --tokenize)\r\n> \r\n>     if test (count $tokens) -le 2 -a (count $curr_tokens) -eq 1\r\n>         # If there are < 2 arguments, use `cd` completions.\r\n>         __fish_complete_directories \"$tokens[2]\" ''\r\n>     else if test (count $tokens) -eq (count $curr_tokens)\r\n>         # If the last argument is empty, use interactive selection.\r\n>         set -l query $tokens[2..-1]\r\n>         set -l result (zoxide query -i -- $query)\r\n> \r\n>         echo $status > /tmp/zoxide.log\r\n>         echo $result >> /tmp/zoxide.log\r\n> \r\n>         commandline --current-process \"$tokens[1] \"(string escape $result)\r\n>         commandline --function repaint\r\n>     end\r\n> end\r\n> ```\r\n\r\ntyped `z dwm <TAB>` then selected the first one below\r\n\r\n![image](https://user-images.githubusercontent.com/12210746/157408404-f87c7ca5-cb82-4791-8d68-3d5c8f9dc4de.png)\r\n\r\nthen selected the first one below\r\n\r\nzoxide.log\r\n```log\r\n0\r\n/home/nextalone/Documents/Repos/Cpp/dwm\r\n```\r\n\r\nthen go home and selected the second one \r\n\r\nzoxide.log\r\n```log\r\n0\r\n/home/nextalone/.local/share/dwm\r\n```\r\nbut still go into `/home/nextalone/Documents/Repos/Cpp/dwm` which is the first one\n> > The only way I can see this happening is if `zoxide query -i` returns a non-zero status code. The completion function is defined [here](https://github.com/ajeetdsouza/zoxide/blob/1ed009cc223d3e88311f3804639c0b9931978c73/templates/fish.txt#L76).\r\n> > Can you try pasting this function after you call `zoxide init fish | source`? After this, try running the completion again, and then check the output of `/tmp/zoxide.log`:\r\n> > ```fish\r\n> > function __zoxide_z_complete\r\n> >     set -l tokens (commandline --current-process --tokenize)\r\n> >     set -l curr_tokens (commandline --cut-at-cursor --current-process --tokenize)\r\n> > \r\n> >     if test (count $tokens) -le 2 -a (count $curr_tokens) -eq 1\r\n> >         # If there are < 2 arguments, use `cd` completions.\r\n> >         __fish_complete_directories \"$tokens[2]\" ''\r\n> >     else if test (count $tokens) -eq (count $curr_tokens)\r\n> >         # If the last argument is empty, use interactive selection.\r\n> >         set -l query $tokens[2..-1]\r\n> >         set -l result (zoxide query -i -- $query)\r\n> > \r\n> >         echo $status > /tmp/zoxide.log\r\n> >         echo $result >> /tmp/zoxide.log\r\n> > \r\n> >         commandline --current-process \"$tokens[1] \"(string escape $result)\r\n> >         commandline --function repaint\r\n> >     end\r\n> > end\r\n> > ```\r\n> \r\n> typed `z dwm <TAB>` then selected the first one below\r\n> \r\n> ![image](https://user-images.githubusercontent.com/12210746/157408404-f87c7ca5-cb82-4791-8d68-3d5c8f9dc4de.png)\r\n> \r\n> then selected the first one below\r\n> \r\n> zoxide.log\r\n> \r\n> ```\r\n> 0\r\n> /home/nextalone/Documents/Repos/Cpp/dwm\r\n> ```\r\n> \r\n> then go home and selected the second one\r\n> \r\n> zoxide.log\r\n> \r\n> ```\r\n> 0\r\n> /home/nextalone/.local/share/dwm\r\n> ```\r\n> \r\n> but still go into `/home/nextalone/Documents/Repos/Cpp/dwm` which is the first one\r\n\r\nand there is no additonal content added to commandline from the beginnign to the end. Instead zsh add the path to commandline\nWhat's the output of `fish --version`?\r\n\r\nCan you change the function to this and try again:\r\n\r\n```fish\r\nfunction __zoxide_z_complete\r\n    commandline --current-process \"foobar\"\r\n    commandline --function repaint\r\nend\r\n```\nfish, version 3.3.1-1093-g959e17fac\r\n\r\nnothing happens\r\n\r\n\r\n\r\nhttps://user-images.githubusercontent.com/12210746/157429182-9c731882-aa21-4097-b3f9-3da6dfb74f6b.mp4\r\n\r\n\nThis is looking like a Fish bug rather than a zoxide one. Does simply writing `commandline --current-process \"foobar\"` in your Fish shell do anything?\r\n\r\nTry this script. Does `foo<space><tab>` change your command to `this is foo`?\r\n\r\n```fish\r\nfunction foo\r\nend\r\n\r\nfunction _foo_complete\r\n  commandline --current-process \"this is foo\"\r\nend\r\n\r\ncomplete -c foo -e\r\ncomplete -c foo -f -a '(_foo_complete)'\r\n```\nfailed, but if i bind the function to a key, it works\r\n\r\n![image](https://user-images.githubusercontent.com/12210746/157433193-c084d0cb-f109-4d09-97af-c4f8bf841440.png)\r\n\r\n\r\n> This is looking like a Fish bug rather than a zoxide one. Does simply writing `commandline --current-process \"foobar\"` in your Fish shell do anything?\r\n> \r\n> Try this script. Does `foo<space><tab>` change your command to `this is foo`?\r\n> \r\n> ```fish\r\n> function foo\r\n> end\r\n> \r\n> function _foo_complete\r\n>   commandline --current-process \"this is foo\"\r\n> end\r\n> \r\n> complete -c foo -e\r\n> complete -c foo -f -a '(_foo_complete)'\r\n> ```\r\n\r\n\nand if it works on your fish version?\nI have the same version of Fish, it seems to be working fine for me. I created an issue for you on Fish's tracker: https://github.com/fish-shell/fish-shell/issues/8771\n> I have the same version of Fish, it seems to be working fine for me. I created an issue for you on Fish's tracker.\r\n\r\noh, thanks for your work, and i will follow this issue\n> I have the same version of Fish, it seems to be working fine for me. I created an issue for you on Fish's tracker: [fish-shell/fish-shell#8771](https://github.com/fish-shell/fish-shell/issues/8771)\r\n\r\naccording to fish shell developer, commandline in completion won't implement\nIs there a way to implement it now?\nMight be. This would need some experimentation.\nSame issue here.\r\n\r\nAny known workarounds?\nAny improvement?",
        "created_at": "2022-04-27T01:44:36Z",
        "version": "0.8"
    },
    {
        "repo": "ajeetdsouza/zoxide",
        "pull_number": 152,
        "instance_id": "ajeetdsouza__zoxide-152",
        "issue_numbers": [
            "150"
        ],
        "base_commit": "7b00d5a42331b03c8cb367adfd5678a7a7e8b329",
        "patch": "diff --git a/CHANGELOG.md b/CHANGELOG.md\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Removed unnecessary backtraces on Rust nightly.\n - Fixed generated shell code to avoid accidentally using aliased builtins.\n - Handle broken pipe errors gracefully when writing to streams.\n+- NUL file appearing in working directory on Windows.\n \n ## [0.5.0] - 2020-10-30\n \ndiff --git a/src/shell.rs b/src/shell.rs\n--- a/src/shell.rs\n+++ b/src/shell.rs\n@@ -8,13 +8,6 @@ pub struct Opts<'a> {\n     pub resolve_symlinks: bool,\n }\n \n-impl Opts<'_> {\n-    #[cfg(unix)]\n-    pub const DEVNULL: &'static str = \"/dev/null\";\n-    #[cfg(windows)]\n-    pub const DEVNULL: &'static str = \"NUL\";\n-}\n-\n macro_rules! make_template {\n     ($name:ident, $path:expr) => {\n         #[derive(::std::fmt::Debug, ::askama::Template)]\ndiff --git a/templates/bash.txt b/templates/bash.txt\n--- a/templates/bash.txt\n+++ b/templates/bash.txt\n@@ -124,9 +124,9 @@ function __zoxide_zri() {\n # Remove definitions.\n function __zoxide_unset() {\n     # shellcheck disable=SC1001\n-    \\builtin unset -f \"$@\" &>{{ Opts::DEVNULL }}\n+    \\builtin unset -f \"$@\" &>/dev/null\n     # shellcheck disable=SC1001\n-    \\builtin unset -v \"$@\" &>{{ Opts::DEVNULL }}\n+    \\builtin unset -v \"$@\" &>/dev/null\n }\n \n __zoxide_unset '{{cmd}}'\ndiff --git a/templates/fish.txt b/templates/fish.txt\n--- a/templates/fish.txt\n+++ b/templates/fish.txt\n@@ -104,9 +104,9 @@ end\n \n # Remove definitions.\n function __zoxide_unset\n-    set --erase $argv > {{ Opts::DEVNULL }} 2>&1\n-    abbr --erase $argv > {{ Opts::DEVNULL }} 2>&1\n-    builtin functions --erase $argv > {{ Opts::DEVNULL }} 2>&1\n+    set --erase $argv > /dev/null 2>&1\n+    abbr --erase $argv > /dev/null 2>&1\n+    builtin functions --erase $argv > /dev/null 2>&1\n end\n \n __zoxide_unset '{{cmd}}'\ndiff --git a/templates/posix.txt b/templates/posix.txt\n--- a/templates/posix.txt\n+++ b/templates/posix.txt\n@@ -126,9 +126,9 @@ __zoxide_zri() {\n # Remove definitions.\n __zoxide_unset() {\n     # shellcheck disable=SC1001\n-    \\unset -f \"$@\" >{{ Opts::DEVNULL }} 2>&1\n+    \\unset -f \"$@\" >/dev/null 2>&1\n     # shellcheck disable=SC1001\n-    \\unset -v \"$@\" >{{ Opts::DEVNULL }} 2>&1\n+    \\unset -v \"$@\" >/dev/null 2>&1\n }\n \n __zoxide_unset '{{cmd}}'\ndiff --git a/templates/xonsh.txt b/templates/xonsh.txt\n--- a/templates/xonsh.txt\n+++ b/templates/xonsh.txt\n@@ -16,7 +16,7 @@ from builtins import events  # type: ignore # pylint: disable=no-name-in-module\n from subprocess import CalledProcessError\n from typing import AnyStr, List, Optional\n \n-import xonsh.dirstack  # type: ignore\n+import xonsh.dirstack  # type: ignore # pylint: disable=import-error\n \n {{ SECTION }}\n # Utility functions for zoxide.\ndiff --git a/templates/zsh.txt b/templates/zsh.txt\n--- a/templates/zsh.txt\n+++ b/templates/zsh.txt\n@@ -107,9 +107,9 @@ function __zoxide_zri() {\n \n # Remove definitions.\n function __zoxide_unset() {\n-    \\builtin unalias \"$@\" &>{{ Opts::DEVNULL }}\n-    \\builtin unfunction \"$@\" &>{{ Opts::DEVNULL }}\n-    \\builtin unset \"$@\" &>{{ Opts::DEVNULL }}\n+    \\builtin unalias \"$@\" &>/dev/null\n+    \\builtin unfunction \"$@\" &>/dev/null\n+    \\builtin unset \"$@\" &>/dev/null\n }\n \n __zoxide_unset '{{cmd}}'\n",
        "test_patch": "diff --git a/src/shell.rs b/src/shell.rs\n--- a/src/shell.rs\n+++ b/src/shell.rs\n@@ -73,10 +66,10 @@ mod tests {\n                     for &hook in HOOKS {\n                         for &cmd in CMDS {\n                             let opt = Opts {\n+                                cmd,\n+                                hook,\n                                 echo,\n                                 resolve_symlinks,\n-                                hook,\n-                                cmd,\n                             };\n                             opts.push(opt);\n                         }\n",
        "problem_statement": "Zoxide creates NUL file when used on MSYS2\nI know this is a very niche use case, but I thought it's better to report it after all.\r\n\r\nAfter I added zoxide initialization in my fish profile, Zoxide created a NUL file in a working directory.\r\n\r\nI believe this can affect users using Git Bash too, since they are based on MSYS2 too.\r\n\r\n# Possible fix\r\n\r\nConsidering fish and bash environments are very likely to have a some kind of POSIX emulation, I think it won't hurt to use `/dev/null` directly instead of changing it based on compliation target.\n",
        "hints_text": "You can read the issue I reported earlier on MSYS2 here: https://github.com/msys2/MSYS2-packages/issues/2347",
        "created_at": "2021-02-28T22:03:00Z",
        "version": "0.5"
    }
]